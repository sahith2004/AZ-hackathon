closest room 1261. find elements in a contaminated binary tree 1116. print zero even odd 2251. number of flowers in full bloom 2285. maximum total importance of roads 1656. design an ordered stream 1744. can you eat your favorite candy on your favorite day? 1049. last stone weight ii 196. delete duplicate emails 58. length of last word 1493. longest subarray of 1's after deleting one element 621. task scheduler 2612. minimum reverse operations 63. unique paths ii 188. best time to buy and sell stock iv 92. reverse linked list ii 617. merge two binary trees 2248. intersection of multiple arrays 686. repeated string match 1476. subrectangle queries 627. swap salary 1712. ways to split array into three subarrays 2120. execution of all suffix instructions staying in a grid 2127. maximum employees to be invited to a meeting 851. loud and rich 38. count and say 1251. average selling price 1358. number of substrings containing all three characters 2243. calculate digit sum of a string 661. image smoother 1306. jump game iii 2203. minimum weighted subgraph with the required paths 1377. frog position after t seconds 2427. number of common factors 756. pyramid transition matrix 1519. number of nodes in the sub-tree with the same label 1094. car pooling 2608. shortest cycle in a graph 1713. minimum operations to make a subsequence 1482. minimum number of days to make m bouquets 819. most common word 509. fibonacci number 1054. distant barcodes 514. freedom trail 2569. handling sum queries after update 1187. make array strictly increasing 2350. shortest impossible sequence of rolls 1639. number of ways to form a target string given a dictionary 786. k-th smallest prime fraction 2109. adding spaces to a string 539. minimum time difference 2444. count subarrays with fixed bounds 1638. count substrings that differ by one character 1568. minimum number of days to disconnect island 704. binary search 733. flood fill 1376. time needed to inform all employees 680. valid palindrome ii 1. two sum 1240. tiling a rectangle with the fewest squares 882. reachable nodes in subdivided graph 999. available captures for rook 1870. minimum speed to arrive on time 643. maximum average subarray i 1722. minimize hamming distance after swap operations 1691. maximum height by stacking cuboids 979. distribute coins in binary tree 1576. replace all ?'s to avoid consecutive repeating characters 1425. constrained subsequence sum 2581. count number of possible root nodes 2328. number of increasing paths in a grid 1434. number of ways to wear different hats to each other 1042. flower planting with no adjacent 1317. convert integer to the sum of two no-zero integers 576. out of boundary paths 2146. k highest ranked items within a price range 1718. construct the lexicographically largest valid sequence 2535. difference between element sum and digit sum of an array 2523. closest prime numbers in range 1630. arithmetic subarrays 973. k closest points to origin 1558. minimum numbers of function calls to make target array 304. range sum query 2d - immutable 155. min stack 955. delete columns to make sorted ii 1146. snapshot array 1223. dice roll simulation 200. number of islands 546. remove boxes 2537. count the number of good subarrays 784. letter case permutation 1467. probability of a two boxes having the same number of distinct balls 2210. count hills and valleys in an array 563. binary tree tilt 728. self dividing numbers 1001. grid illumination 897. increasing order search tree 1748. sum of unique elements 658. find k closest elements 1362. closest divisors 184. department highest salary 2269. find the k-beauty of a number 71. simplify path 1473. paint house iii 2637. promise time limit 1374. generate a string with characters that have odd counts 1465. maximum area of a piece of cake after horizontal and vertical cuts 1291. sequential digits 1044. longest duplicate substring 814. binary tree pruning 862. shortest subarray with sum at least k 198. house robber 6. zigzag conversion 1346. check if n and its double exist 602. friend requests ii: who has the most friends 1226. the dining philosophers 26. remove duplicates from sorted array 72. edit distance 1438. longest continuous subarray with absolute diff less than or equal to limit 89. gray code 810. chalkboard xor game 710. random pick with blacklist 993. cousins in binary tree 745. prefix and suffix search 770. basic calculator iv 2150. find all lonely numbers in the array 1452. people whose list of favorite companies is not a subset of another list 1036. escape a large maze 1621. number of sets of k non-overlapping line segments 43. multiply strings 888. fair candy swap 1203. sort items by groups respecting dependencies 1910. remove all occurrences of a substring 1041. robot bounded in circle 1707. maximum xor with an element from array 717. 1-bit and 2-bit characters 2552. count increasing quadruplets 1416. restore the array 665. non-decreasing array 2631. group by 1894. find the student that will replace the chalk 705. design hashset 2406. divide intervals into minimum number of groups 884. uncommon words from two sentences 1342. number of steps to reduce a number to zero 896. monotonic array 74. search a 2d matrix 1289. minimum falling path sum ii 2201. count artifacts that can be extracted 2103. rings and rods 2550. count collisions of monkeys on a polygon 2501. longest square streak in an array 1640. check array formation through concatenation 1171. remove zero sum consecutive nodes from linked list 2429. minimize xor 1504. count submatrices with all ones 1851. minimum interval to include each query 36. valid sudoku 1411. number of ways to paint n × 3 grid 1028. recover a tree from preorder traversal 2578. split with minimum sum 1073. adding two negabinary numbers 790. domino and tromino tiling 1572. matrix diagonal sum 1140. stone game ii 1329. sort the matrix diagonally 2102. sequentially ordinal rank tracker 1808. maximize number of nice divisors 1222. queens that can attack the king 2114. maximum number of words found in sentences 1224. maximum equal frequency 1148. article views i 657. robot return to origin 713. subarray product less than k 42. trapping rain water 2332. the latest time to catch a bus 1351. count negative numbers in a sorted matrix 2562. find the array concatenation value 1690. stone game vii 960. delete columns to make sorted iii 57. insert interval 2516. take k of each character from left and right 1315. sum of nodes with even-valued grandparent 2286. booking concert tickets in groups 754. reach a number 1302. deepest leaves sum 1914. cyclically rotating a grid 2420. find all good indices 706. design hashmap 1535. find the winner of an array game 678. valid parenthesis string 872. leaf-similar trees 1437. check if all 1's are at least length k places away 1562. find latest group of size m 1039. minimum score triangulation of polygon 2598. smallest missing non-negative integer after operations 1906. minimum absolute difference queries 1544. make the string great 1503. last moment before all ants fall out of a plank 67. add binary 2554. maximum number of integers to choose from a range i 650. 2 keys keyboard 1578. minimum time to make rope colorful 1037. valid boomerang 575. distribute candies 1553. minimum number of days to eat n oranges 97. interleaving string 2326. spiral matrix iv 1480. running sum of 1d array 1889. minimum space wasted from packaging 2574. left and right sum differences 877. stone game 1494. parallel courses ii 1389. create target array in the given order 2541. minimum operations to make array equal ii 1297. maximum number of occurrences of a substring 2649. nested array generator 537. complex number multiplication 823. binary trees with factors 1943. describe the painting 1492. the kth factor of n 1832. check if the sentence is pangram 2575. find the divisibility array of a string 586. customer placing the largest number of orders 838. push dominoes 1432. max difference you can get from changing an integer 1321. restaurant growth 1636. sort array by increasing frequency 824. goat latin 324. wiggle sort ii 2134. minimum swaps to group all 1's together ii 1483. kth ancestor of a tree node 2221. find triangular sum of an array 2337. move pieces to obtain a string 1424. diagonal traverse ii 732. my calendar iii 173. binary search tree iterator 1386. cinema seat allocation 891. sum of subsequence widths 806. number of lines to write string 303. range sum query - immutable 17. letter combinations of a phone number 1646. get maximum in generated array 765. couples holding hands 2220. minimum bit flips to convert number 832. flipping an image 1269. number of ways to stay in the same place after some steps 1523. count odd numbers in an interval range 857. minimum cost to hire k workers 2284. sender with largest word count 2629. function composition 994. rotting oranges 1882. process tasks using servers 1835. find xor sum of all pairs bitwise and 1594. maximum non negative product in a matrix 1093. statistics from a large sample 769. max chunks to make sorted 881. boats to save people 2415. reverse odd levels of binary tree 860. lemonade change 1935. maximum number of words you can type 626. exchange seats 1680. concatenation of consecutive binary numbers 1846. maximum element after decreasing and rearranging 189. rotate array 2207. maximize number of subsequences in a string 1517. find users with valid e-mails 3. longest substring without repeating characters 2271. maximum white tiles covered by a carpet 1014. best sightseeing pair 2529. maximum count of positive integer and negative integer 730. count different palindromic subsequences 2644. find the maximum divisibility score 73. set matrix zeroes 2202. maximize the topmost element after k moves 1381. design a stack with increment operation 1318. minimum flips to make a or b equal to c 2636. promise pool 1723. find minimum time to finish all jobs 1488. avoid flood in the city 715. range module 2108. find first palindromic string in the array 953. verifying an alien dictionary 185. department top three salaries 1930. unique length-3 palindromic subsequences 31. next permutation 1343. number of sub-arrays of size k and average greater than or equal to threshold 1603. design parking system 981. time based key-value store 972. equal rational numbers 2596. check knight tour configuration 1439. find the kth smallest sum of a matrix with sorted rows 1913. maximum product difference between two pairs 1899. merge triplets to form target triplet 2566. maximum difference by remapping a digit 951. flip equivalent binary trees 1328. break a palindrome 2148. count elements with strictly smaller and greater elements 739. daily temperatures 1905. count sub islands 701. insert into a binary search tree 1898. maximum number of removable characters 8. string to integer (atoi) 1652. defuse the bomb 76. minimum window substring 1360. number of days between two dates 986. interval list intersections 1379. find a corresponding node of a binary tree in a clone of that tree 330. patching array 2289. steps to make array non-decreasing 334. increasing triplet subsequence 2447. number of subarrays with gcd equal to k 1608. special array with x elements greater than or equal x 2597. the number of beautiful subsets 507. perfect number 975. odd even jump 2304. minimum path cost in a grid 1877. minimize maximum pair sum in array 1655. distribute repeating integers 1605. find valid matrix given row and column sums 1026. maximum difference between node and ancestor 1627. graph connectivity with threshold 809. expressive words 1663. smallest string with a given numeric value 2413. smallest even multiple 1442. count triplets that can form two arrays of equal xor 1043. partition array for maximum sum 2310. sum of numbers with units digit k 2639. find the width of columns of a grid 849. maximize distance to closest person 1407. top travellers 1491. average salary excluding the minimum and maximum salary 712. minimum ascii delete sum for two strings 25. reverse nodes in k-group 863. all nodes distance k in binary tree 564. find the closest palindrome 318. maximum product of word lengths 181. employees earning more than their managers 1232. check if it is a straight line 1394. find lucky integer in an array 554. brick wall 81. search in rotated sorted array ii 1472. design browser history 1637. widest vertical area between two points containing no points 1711. count good meals 1653. minimum deletions to make string balanced 2503. maximum number of points from grid queries 341. flatten nested list iterator 2611. mice and cheese 595. big countries 879. profitable schemes 952. largest component size by common factor 1002. find common characters 2209. minimum white tiles after covering with carpets 987. vertical order traversal of a binary tree 1705. maximum number of eaten apples 1477. find two non-overlapping sub-arrays each with target sum 1925. count square sum triples 342. power of four 1563. stone game v 93. restore ip addresses 890. find and replace pattern 1801. number of orders in the backlog 2643. row with maximum ones 2318. number of distinct roll sequences 2514. count anagrams 619. biggest single number 1204. last person to fit in the bus 45. jump game ii 2635. apply transform over each element in array 1507. reformat date 1585. check if string is transformable with substring sort operations 2640. find the score of all prefixes of an array 714. best time to buy and sell stock with transaction fee 609. find duplicate file in system 178. rank scores 695. max area of island 1938. maximum genetic difference query 1250. check if it is a good array 46. permutations 1855. maximum distance between a pair of values 1207. unique number of occurrences 747. largest number at least twice of others 1466. reorder routes to make all paths lead to the city zero 1942. the number of the smallest unoccupied chair 19. remove nth node from end of list 607. sales person 1210. minimum moves to reach target with rotations 803. bricks falling when hit 654. maximum binary tree 1106. parsing a boolean expression 1010. pairs of songs with total durations divisible by 60 962. maximum width ramp 693. binary number with alternating bits 1871. jump game vii 20. valid parentheses 1330. reverse subarray to maximize array value 1319. number of operations to make network connected 1206. design skiplist 636. exclusive time of functions 1011. capacity to ship packages within d days 1464. maximum product of two elements in an array 2279. maximum bags with full capacity of rocks 1401. circle and rectangle overlapping 1625. lexicographically smallest string after applying operations 1316. distinct echo substrings 306. additive number 1886. determine whether matrix can be obtained by rotation 709. to lower case 1567. maximum length of subarray with positive product 515. find largest value in each tree row 1310. xor queries of a subarray 2511. maximum enemy forts that can be captured 2595. number of even and odd bits 312. burst balloons 1487. making file names unique 2593. find score of an array after marking all elements 1141. user activity for the past 30 days i 1003. check if word is valid after substitutions 1854. maximum population year 21. merge two sorted lists 1616. split two strings to make palindrome 2520. count the digits that divide a number 50. pow(x, n) 552. student attendance record ii 2125. number of laser beams in a bank 2335. minimum amount of time to fill cups 1124. longest well-performing interval 1883. minimum skips to arrive at meeting on time 1716. calculate money in leetcode bank 830. positions of large groups 1675. minimize deviation in array 1396. design underground system 2129. capitalize the title 794. valid tic-tac-toe state 2571. minimum operations to reduce an integer to 0 1840. maximum building height 91. decode ways 637. average of levels in binary tree 1560. most visited sector in a circular track 689. maximum sum of 3 non-overlapping subarrays 322. coin change 1091. shortest path in binary matrix 175. combine two tables 1649. create sorted array through instructions 2145. count the hidden sequences 2567. minimum score by changing two elements 2448. minimum cost to make array equal 880. decoded string at index 1238. circular permutation in binary representation 1667. fix names in a table 153. find minimum in rotated sorted array 892. surface area of 3d shapes 1177. can make palindrome from substring 2401. longest nice subarray 2624. snail traversal 1208. get equal substrings within budget 822. card flipping game 1035. uncrossed lines 1881. maximum value after insertion 1410. html entity parser 1862. sum of floored pairs 2275. largest combination with bitwise and greater than zero 1828. queries on number of points inside a circle 1409. queries on a permutation with key 2592. maximize greatness of an array 805. split array with same average 2213. longest substring of one repeating character 1681. minimum incompatibility 2215. find the difference of two arrays 1816. truncate sentence 2132. stamping the grid 82. remove duplicates from sorted list ii 2106. maximum fruits harvested after at most k steps 1139. largest 1-bordered square 194. transpose file 2241. design an atm machine 771. jewels and stones 1305. all elements in two binary search trees 1327. list the products ordered in a period 1669. merge in between linked lists 1125. smallest sufficient team 1648. sell diminishing-valued colored balls 1391. check if there is a valid path in a grid 167. two sum ii - input array is sorted 2321. maximum score of spliced array 1845. seat reservation manager 2618. check if object instance of class 1551. minimum operations to make array equal 861. score after flipping matrix 1702. maximum binary string after change 647. palindromic substrings 735. asteroid collision 316. remove duplicate letters 1234. replace the substring for balanced string 977. squares of a sorted array 2231. largest number after digit swaps by parity 16. 3sum closest 2621. sleep 1509. minimum difference between largest and smallest value in three moves 1926. nearest exit from entrance in maze 1332. remove palindromic subsequences 801. minimum swaps to make sequences increasing 2235. add two integers 692. top k frequent words 54. spiral matrix 1614. maximum nesting depth of the parentheses 1436. destination city 5. longest palindromic substring 889. construct binary tree from preorder and postorder traversal 2561. rearranging fruits 804. unique morse code words 2409. count days spent together 1237. find positive integer solution for a given equation 670. maximum swap 1373. maximum sum bst in binary tree 1626. best team with no conflicts 591. tag validator 970. powerful integers 697. degree of an array 795. number of subarrays with bounded maximum 1004. max consecutive ones iii 1873. calculate special bonus 2421. number of good paths 629. k inverse pairs array 596. classes more than 5 students 593. valid square 35. search insert position 836. rectangle overlap 1813. sentence similarity iii 767. reorganize string 1588. sum of all odd length subarrays 2606. find the substring with maximum cost 1817. finding the users active minutes 180. consecutive numbers 524. longest word in dictionary through deleting 2250. count number of rectangles containing each point 2572. count the number of square-free subsets 967. numbers with same consecutive differences 1915. number of wonderful substrings 1247. minimum swaps to make strings equal 1598. crawler log folder 1370. increasing decreasing string 581. shortest unsorted continuous subarray 1345. jump game iv 2506. count pairs of similar strings 1220. count vowels permutation 648. replace words 192. word frequency 1414. find the minimum number of fibonacci numbers whose sum is k 15. 3sum 2518. number of great partitions 520. detect capital 2348. number of zero-filled subarrays 1521. find a value of a mysterious function closest to target 2405. optimal partition of string 2645. minimum additions to make valid string 152. maximum product subarray 1604. alert using same key-card three or more times in a one hour period 1008. construct binary search tree from preorder traversal 991. broken calculator 1154. day of the year 1020. number of enclaves 825. friends of appropriate ages 748. shortest completing word 1418. display table of food orders in a restaurant 1805. number of different integers in a string 2560. house robber iv 1458. max dot product of two subsequences 2305. fair distribution of cookies 1710. maximum units on a truck 1484. group sold products by the date 2147. number of ways to divide a long corridor 1592. rearrange spaces between words 2558. take gifts from the richest pile 820. short encoding of words 1013. partition array into three parts with equal sum 1399. count largest group 2627. debounce 1566. detect pattern of length m repeated k or more times 2536. increment submatrices by one 541. reverse string ii 2315. count asterisks 2438. range product queries of powers 2632. curry 667. beautiful arrangement ii 1415. the k-th lexicographical string of all happy strings of length n 2532. time to cross a bridge 1876. substrings of size three with distinct characters 2272. substring with largest variance 1174. immediate food delivery ii 506. relative ranks 338. counting bits 679. 24 game 179. largest number 724. find pivot index 2441. largest positive integer that exists with its negative 529. minesweeper 1557. minimum number of vertices to reach all nodes 1249. minimum remove to make valid parentheses 567. permutation in string 13. roman to integer 699. falling squares 168. excel sheet column title 1016. binary string with substrings representing 1 to n 2104. sum of subarray ranges 1745. palindrome partitioning iv 878. nth magical number 30. substring with concatenation of all words 2349. design a number container system 638. shopping offers 1934. confirmation rate 996. number of squareful arrays 1200. minimum absolute difference 1406. stone game iii 787. cheapest flights within k stops 2527. find xor-beauty of array 347. top k frequent elements 753. cracking the safe 44. wildcard matching 2600. k items with the maximum sum 746. min cost climbing stairs 1323. maximum 69 number 1040. moving stones until consecutive ii 12. integer to roman 2425. bitwise xor of all pairings 974. subarray sums divisible by k 900. rle iterator 1048. longest string chain 1513. number of substrings with only 1s 783. minimum distance between bst nodes 1888. minimum number of flips to make the binary string alternating 871. minimum number of refueling stops 99. recover binary search tree 521. longest uncommon subsequence i 2119. a number after a double reversal 628. maximum product of three numbers 9. palindrome number 673. number of longest increasing subsequence 182. duplicate emails 1830. minimum number of operations to make string sorted 2287. rearrange characters to make target string 2244. minimum rounds to complete all tasks 853. car fleet 1253. reconstruct a 2-row binary matrix 2531. make number of distinct characters equal 2576. find the maximum number of marked indices 1034. coloring a border 1450. number of students doing homework at a given time 1051. height checker 807. max increase to keep city skyline 992. subarrays with k different integers 1340. jump game v 68. text justification 675. cut off trees for golf event 1283. find the smallest divisor given a threshold 1865. finding pairs with a certain sum 791. custom sort string 2240. number of ways to buy pens and pencils 997. find the town judge 1105. filling bookcase shelves 1631. path with minimum effort 1282. group the people given the group size they belong to 876. middle of the linked list 1021. remove outermost parentheses 1683. invalid tweets 1252. cells with odd values in a matrix 190. reverse bits 2449. minimum number of operations to make arrays similar 990. satisfiability of equality equations 841. keys and rooms 1331. rank transform of an array 700. search in a binary search tree 1684. count the number of consistent strings 307. range sum query - mutable 691. stickers to spell word 1349. maximum students taking exam 2299. strong password checker ii 319. bulb switcher 1338. reduce array size to the half 1033. moving stones until consecutive 327. count of range sum 2261. k divisible elements subarrays 895. maximum frequency stack 1104. path in zigzag labelled binary tree 1743. restore the array from adjacent pairs 1502. can make arithmetic progression from sequence 532. k-diff pairs in an array 2276. count integers in intervals 566. reshape the matrix 788. rotated digits 1463. cherry pickup ii 696. count binary substrings 1015. smallest integer divisible by k 1313. decompress run-length encoded list 565. array nesting 2609. find the longest balanced substring of a binary string 2259. remove digit from number to maximize result 1552. magnetic force between two balls 2440. create components with same value 778. swim in rising water 1895. largest magic square 669. trim a binary search tree 1337. the k weakest rows in a matrix 1195. fizz buzz multithreaded 1024. video stitching 197. rising temperature 34. find first and last position of element in sorted array 677. map sum pairs 1863. sum of all subset xor totals 1287. element appearing more than 25% in sorted array 2140. solving questions with brainpower 1453. maximum number of darts inside of a circular dartboard 718. maximum length of repeated subarray 1569. number of ways to reorder array to get same bst 1191. k-concatenation maximum sum 1255. maximum score words formed by letters 1550. three consecutive odds 983. minimum cost for tickets 1380. lucky numbers in a matrix 762. prime number of set bits in binary representation 2630. memoize ii 1372. longest zigzag path in a binary tree 606. construct string from binary tree 690. employee importance 1022. sum of root to leaf binary numbers 2620. counter 2577. minimum time to visit a cell in a grid 1038. binary search tree to greater sum tree 1348. tweet counts per frequency 1579. remove max number of edges to keep graph fully traversable 2233. maximum product after k increments 1068. product sales analysis i 1897. redistribute characters to make all strings equal 738. monotone increasing digits 1201. ugly number iii 2628. json deep equal 2278. percentage of letter in string 1481. least number of unique integers after k removals 1641. count sorted vowel strings 845. longest mountain in array 1818. minimum absolute sum difference 870. advantage shuffle 1263. minimum moves to move a box to their target location 2274. maximum consecutive floors without special floors 1921. eliminate maximum number of monsters 1096. brace expansion ii 1115. print foobar alternately 1030. matrix cells in distance order 1156. swap for longest repeated character substring 802. find eventual safe states 608. tree node 1103. distribute candies to people 1419. minimum number of frogs croaking 757. set intersection size at least two 1662. check if two string arrays are equivalent 1402. reducing dishes 2341. maximum number of pairs in array 32. longest valid parentheses 1727. largest submatrix with rearrangements 1128. number of equivalent domino pairs 1802. maximum value at a given index in a bounded array 2206. divide array into equal pairs 2586. count the number of vowel strings in range 674. longest continuous increasing subsequence 2423. remove letter to equalize frequency 874. walking robot simulation 2517. maximum tastiness of candy basket 2223. sum of scores of built strings 676. implement magic dictionary 1534. count good triplets 821. shortest distance to a character 764. largest plus sign 1017. convert to base -2 843. guess the word 971. flip binary tree to match preorder traversal 1131. maximum of absolute value expression 956. tallest billboard 1339. maximum product of splitted binary tree 1901. find a peak element ii 1695. maximum erasure value 1664. ways to make a fair array 1499. max value of equation 1170. compare strings by frequency of the smallest character 599. minimum index sum of two lists 668. kth smallest number in multiplication table 1262. greatest sum divisible by three 1661. average time of process per machine 2542. maximum subsequence score 1019. next greater node in linked list 1659. maximize grid happiness 1193. monthly transactions i 1686. stone game vi 865. smallest subtree with all the deepest nodes 1278. palindrome partitioning iii 1837. sum of digits in base k 1524. number of sub-arrays with odd sum 310. minimum height trees 985. sum of even numbers after queries 1931. painting a grid with three different colors 2344. minimum deletions to make array divisible 1945. sum of digits of string after convert 1385. find the distance value between two arrays 813. largest sum of averages 75. sort colors 2296. design a text editor 55. jump game 98. validate binary search tree 887. super egg drop 1248. count number of nice subarrays 1688. count of matches in tournament 782. transform to chessboard 781. rabbits in forest 721. accounts merge 2227. encrypt and decrypt strings 1235. maximum profit in job scheduling 1179. reformat department table 577. employee bonus 79. word search 653. two sum iv - input is a bst 1422. maximum score after splitting a string 1615. maximal network rank 1400. construct k palindrome strings 558. logical or of two binary grids represented as quad-trees 2419. longest subarray with maximum bitwise and 187. repeated dna sequences 2288. apply discount to prices 199. binary tree right side view 14. longest common prefix 811. subdomain visit count 1299. replace elements with greatest element on right side 1475. final prices with a special discount in a shop 1260. shift 2d grid 1643. kth smallest instructions 2443. sum of number and its reverse 1189. maximum number of balloons 1514. path with maximum probability 2588. count the number of beautiful subarrays 556. next greater element iii 2245. maximum trailing zeros in a cornered path 1694. reformat phone number 854. k-similar strings 530. minimum absolute difference in bst 1900. the earliest and latest rounds where players compete 2111. minimum operations to make the array k-increasing 1371. find the longest substring containing vowels in even counts 2407. longest increasing subsequence ii 1749. maximum absolute sum of any subarray 1528. shuffle string 1609. even odd tree 2589. minimum time to complete all tasks 165. compare version numbers 623. add one row to tree 885. spiral matrix iii 2641. cousins in binary tree ii 1893. check if all the integers in a range are covered 893. groups of special-equivalent strings 1163. last substring in lexicographical order 2135. count words obtained after adding a letter 174. dungeon game 2502. design memory allocator 1383. maximum performance of a team 1447. simplified fractions 1052. grumpy bookstore owner 846. hand of straights 2126. destroying asteroids 2442. count number of distinct integers after reverse operations 585. investments in 2016 1834. single-threaded cpu 27. remove element 852. peak index in a mountain array 343. integer break 2225. find players with zero or one losses 2428. maximum sum of an hourglass 817. linked list components 652. find duplicate subtrees 1823. find the winner of the circular game 2138. divide a string into groups of size k 90. subsets ii 869. reordered power of 2 1352. product of the last k numbers 2290. minimum obstacle removal to reach corner 1512. number of good pairs 1822. sign of the product of an array 868. binary gap 331. verify preorder serialization of a binary tree 169. majority element 2144. minimum cost of buying candies with discount 1928. minimum cost to reach destination in time 641. design circular deque 594. longest harmonious subsequence 2430. maximum deletions on a string 777. swap adjacent in lr string 64. minimum path sum 2312. selling pieces of wood 22. generate parentheses 48. rotate image 1657. determine if two strings are close 151. reverse words in a string 1451. rearrange words in a sentence 1497. check if array pairs are divisible by k 2602. minimum operations to make all array elements equal 1735. count ways to make array with product 1095. find in mountain array 2303. calculate amount paid in taxes 2433. find the original array of prefix xor 725. split linked list in parts 501. find mode in binary search tree 1689. partitioning into minimum number of deci-binary numbers 1941. check if all characters have equal number of occurrences 883. projection area of 3d shapes 847. shortest path visiting all nodes 39. combination sum 2280. minimum lines to represent a line chart 1353. maximum number of events that can be attended 1864. minimum number of swaps to make the binary string alternating 2222. number of ways to select buildings 2625. flatten deeply nested array 1947. maximum compatibility score sum 1280. students and examinations 1122. relative sort array 1857. largest color value in a directed graph 796. rotate string 1633. percentage of users attended a contest 2301. match substring after replacement 719. find k-th smallest pair distance 1654. minimum jumps to reach home 1726. tuple with same product 867. transpose matrix 1138. alphabet board path 85. maximal rectangle 70. climbing stairs 1814. count nice pairs in an array 1110. delete nodes and return forest 583. delete operation for two strings 2110. number of smooth descent periods of a stock 1619. mean of array after removing some elements 828. count unique characters of all substrings of a given string 2565. subsequence with the minimum score 1923. longest common subpath 829. consecutive numbers sum 954. array of doubled pairs 1599. maximum profit of operating a centennial wheel 2309. greatest english letter in upper and lower case 1114. print in order 1072. flip columns for maximum number of equal rows 1431. kids with the greatest number of candies 1460. make two arrays equal by reversing subarrays 995. minimum number of k consecutive bit flips 547. number of provinces 1162. as far from land as possible 1674. minimum moves to make array complementary 60. permutation sequence 95. unique binary search trees ii 2217. find palindrome with fixed length 61. rotate list 982. triples with bitwise and equal to zero 1537. get the maximum score 1903. largest odd number in string 1108. defanging an ip address 1408. string matching in an array 2526. find consecutive integers from a data stream 1307. verbal arithmetic puzzle 1071. greatest common divisor of strings 988. smallest string starting from leaf 2546. apply bitwise operations to make strings equal 1405. longest happy string 96. unique binary search trees 968. binary tree cameras 1582. special positions in a binary matrix 768. max chunks to make sorted ii 844. backspace string compare 1944. number of visible people in a queue 1520. maximum number of non-overlapping substrings 1632. rank transform of a matrix 2642. design graph with shortest path calculator 1227. airplane seat assignment probability 1672. richest customer wealth 511. game play analysis i 1736. latest time by replacing hidden digits 1850. minimum adjacent swaps to reach the kth smallest number 780. reaching points 797. all paths from source to target 2281. sum of total strength of wizards 741. cherry pickup 789. escape the ghosts 963. minimum area rectangle ii 2338. count the number of ideal arrays 1275. find winner on a tic tac toe game 1084. sales analysis iii 622. design circular queue 2293. min max game 1309. decrypt string from alphabet to integer mapping 2556. disconnect path in a binary matrix by at most one flip 1129. shortest path with alternating colors 1164. product price at a given date 2507. smallest value after replacing with sum of prime factors 335. self crossing 1849. splitting a string into descending consecutive values 2619. array prototype last 84. largest rectangle in histogram 1610. maximum number of visible points 1147. longest chunked palindrome decomposition 2570. merge two 2d arrays by summing values 1819. number of different subsequences gcds 672. bulb switcher ii 1546. maximum number of non-overlapping subarrays with sum equals target 2212. maximum points in an archery competition 164. maximum gap 1595. minimum cost to connect two groups of points 2234. maximum total beauty of the gardens 1577. number of ways where square of number is equal to product of two numbers 1304. find n unique integers sum up to zero 2605. form smallest number from two digit arrays 2615. sum of distances 154. find minimum in rotated sorted array ii 2257. count unguarded cells in the grid 2402. meeting rooms iii 1007. minimum domino rotations for equal row 1860. incremental memory leak 2211. count collisions on a road 1671. minimum number of removals to make mountain array 518. coin change ii 2437. number of valid clock times 2418. sort the people 1185. day of the week 731. my calendar ii 560. subarray sum equals k 980. unique paths iii 1403. minimum subsequence in non-increasing order 1074. number of submatrices that sum to target 1470. shuffle the array 65. valid number 1443. minimum time to collect all apples in a tree 2216. minimum deletions to make array beautiful 1298. maximum candies you can get from boxes 1733. minimum number of people to teach 195. tenth line 1333. filter restaurants by vegan-friendly, price and distance 1600. throne inheritance 864. shortest path to get all keys 1092. shortest common supersequence 344. reverse string 37. sudoku solver 2236. root equals sum of children 1622. fancy sequence 1456. maximum number of vowels in a substring of given length 1202. smallest string with swaps 866. prime palindrome 1561. maximum number of coins you can get 1717. maximum score from removing substrings 2260. minimum consecutive cards to pick up 1922. count good numbers 540. single element in a sorted array 1288. remove covered intervals 989. add to array-form of integer 848. shifting letters 827. making a large island 1527. patients with a condition 1006. clumsy factorial 2412. minimum money required before transactions 160. intersection of two linked lists 23. merge k sorted lists 1573. number of ways to split a string 1324. print words vertically 1591. strange printer ii 894. all possible full binary trees 1444. number of ways of cutting a pizza 523. continuous subarray sum 831. masking personal information 88. merge sorted array 976. largest perimeter triangle 2331. evaluate boolean binary tree 4. median of two sorted arrays 761. special binary string 632. smallest range covering elements from k lists 1090. largest values from labels 1284. minimum number of flips to convert binary matrix to zero matrix 1861. rotating the box 1542. find longest awesome substring 2218. maximum value of k coins from piles 1827. minimum operations to make the array increasing 503. next greater element ii 1029. two city scheduling 1081. smallest subsequence of distinct characters 1363. largest multiple of three 1738. find kth largest xor coordinate value 1697. checking existence of edge length limited paths 2512. reward top k students 2333. minimum sum of squared difference 337. house robber iii 29. divide two integers 513. find bottom left tree value 1143. longest common subsequence 2273. find resultant array after removing anagrams 785. is graph bipartite? 1833. maximum ice cream bars 2267. check if there is a valid parentheses string path 517. super washing machines 726. number of atoms 1218. longest arithmetic subsequence of given difference 1486. xor operation in an array 1025. divisor game 525. contiguous array 589. n-ary tree preorder traversal 561. array partition 964. least operators to express number 1839. longest substring of all vowels in order 504. base 7 62. unique paths 1266. minimum time visiting all points 1739. building boxes 1575. count all possible routes 1540. can convert string in k moves 1884. egg drop with 2 eggs and n floors 2580. count ways to group overlapping ranges 826. most profit assigning work 687. longest univalue path 2591. distribute money to maximum children 1536. minimum swaps to arrange a binary grid 1209. remove all adjacent duplicates in string ii 1687. delivering boxes from storage to ports 2587. rearrange array to maximize prefix score 1556. thousand separator 2551. put marbles in bags 349. intersection of two arrays 1276. number of burgers with no waste of ingredients 1583. count unhappy friends 80. remove duplicates from sorted array ii 1617. count subtrees with max distance between cities 1005. maximize sum of array after k negations 1729. find followers count 818. race car 2559. count vowel strings in ranges 2334. subarray with elements greater than varying threshold 1080. insufficient nodes in root to leaf paths 2131. longest palindrome by concatenating two letter words 720. longest word in dictionary 1539. kth missing positive number 736. parse lisp expression 2564. substring xor queries 538. convert bst to greater tree 645. set mismatch 87. scramble string 684. redundant connection 1365. how many numbers are smaller than the current number 2265. count nodes equal to average of subtree 749. contain virus 1290. convert binary number in a linked list to integer 2528. maximize the minimum powered city 1123. lowest common ancestor of deepest leaves 1155. number of dice rolls with target sum 1890. the latest login in 2020 2336. smallest number in infinite set 1721. swapping nodes in a linked list 2322. minimum score after removals on a tree 59. spiral matrix ii 2601. prime subtraction operation 2522. partition string into substrings with values at most k 171. excel sheet column number 1392. longest happy prefix 2434. using a robot to print the lexicographically smallest string 1186. maximum subarray sum with one deletion 1601. maximum number of achievable transfer requests 965. univalued binary tree 1334. find the city with the smallest number of neighbors at a threshold distance 1239. maximum length of a concatenated string with unique characters 592. fraction addition and subtraction 1404. number of steps to reduce a number in binary representation to one 1732. find the highest altitude 1027. longest arithmetic subsequence 2262. total appeal of a string 2347. best poker hand 842. split array into fibonacci sequence 1719. number of ways to reconstruct a tree 309. best time to buy and sell stock with cooldown 1741. find total time spent by each employee 1382. balance a binary search tree 191. number of 1 bits 1606. find servers that handled most number of requests 1737. change minimum characters to satisfy one of three conditions 1075. project employees i 2342. max sum of a pair with equal sum of digits 1254. number of closed islands 792. number of matching subsequences 2633. convert object to json string 2133. check if every row and column contains all numbers 321. create maximum number 1946. largest number after mutating substring 1292. maximum side length of a square with sum less than or equal to threshold 1111. maximum nesting depth of two valid parentheses strings 587. erect the fence 1844. replace all digits with characters 958. check completeness of a binary tree 1267. count servers that communicate 1354. construct target array with multiple sums 24. swap nodes in pairs 315. count of smaller numbers after self 812. largest triangle area 744. find smallest letter greater than target 2515. shortest distance to target string in a circular array 1423. maximum points you can obtain from cards 56. merge intervals 1872. stone game viii 2513. minimize the maximum of two arrays 1547. minimum cost to cut a stick 1611. minimum one bit operations to make integers zero 2404. most frequent even element 808. soup servings 2300. successful pairs of spells and potions 978. longest turbulent subarray 2139. minimum moves to reach target score 2648. generate fibonacci sequence 1725. number of rectangles that can form the largest square 1866. number of ways to rearrange sticks with k sticks visible 1587. bank account summary ii 1706. where will the ball fall 1590. make sum divisible by p 1144. decrease elements to make array zigzag 11. container with most water 2226. maximum candies allocated to k children 1219. path with maximum gold 535. encode and decode tinyurl 1242. web crawler multithreaded 2294. partition array such that maximum difference is k 2302. count subarrays with score less than k 2317. maximum xor after operations 584. find customer referee 959. regions cut by slashes 162. find peak element 1734. decode xored permutation . 2525. categorize box according to criteria 1387. sort integers by the power value 2249. count lattice points inside a circle 1420. build array where you can find the maximum exactly k comparisons 1526. minimum number of increments on subarrays to form a target array 172. factorial trailing zeroes 855. exam room 1869. longer contiguous segments of ones than zeros 2258. escape the spreading fire 508. most frequent subtree sum 752. open the lock 898. bitwise ors of subarrays 1217. minimum cost to move chips to the same position 1397. find all good strings 1160. find words that can be formed by characters 1559. detect cycles in 2d grid 1347. minimum number of steps to make two strings anagram 1461. check if a string contains all binary codes of size k 1046. last stone weight 1948. delete duplicate folders in system 875. koko eating bananas 858. mirror reflection 1505. minimum possible integer after at most k adjacent swaps on digits 2242. maximum score of a node sequence 1433. check if a string can break another string 33. search in rotated sorted array 1335. minimum difficulty of a job schedule 2607. make k-subarray sums equal 2306. naming a company 1701. average waiting time 1184. distance between bus stops 2232. minimize result by adding parentheses to expression 775. global and local inversions 1912. design movie rental system 1053. previous permutation with one swap 1079. letter tile possibilities 886. possible bipartition 1812. determine color of a chessboard square 1078. occurrences after bigram 2530. maximal score after applying k operations 1268. search suggestions system 1807. evaluate the bracket pairs of a string 2617. minimum number of visited cells in a grid 66. plus one 1665. minimum initial energy to finish tasks 1281. subtract the product and sum of digits of an integer 671. second minimum node in a binary tree 2555. maximize win from two segments 2626. array reduce transformation 1624. largest substring between two equal characters 2508. add edges to make degrees of all nodes even 2224. minimum number of operations to convert time 1927. sum game 1178. number of valid words for each puzzle 1824. minimum sideway jumps 1541. minimum insertions to balance a parentheses string 2136. earliest possible day of full bloom 1531. string compression ii 2426. number of pairs satisfying inequality 1000. minimum cost to merge stones 2414. length of the longest alphabetical continuous substring 183. customers who never order 2424. longest uploaded prefix 1190. reverse substrings between each pair of parentheses 1620. coordinate with maximum network quality 1344. angle between hands of a clock 2545. sort the students by their kth score 816. ambiguous coordinates 1388. pizza with 3n slices 1286. iterator for combination 2538. difference between maximum and minimum price sum 1750. minimum length of string after deleting similar ends 1295. find numbers with even number of digits 1920. build array from permutation 1909. remove one element to make the array strictly increasing 850. rectangle area ii 2141. maximum running time of n computers 1806. minimum number of operations to reinitialize a permutation 1670. design front middle back queue 2270. number of ways to split array 1390. four divisors 519. random flip matrix 1896. minimum cost to change the final value of expression 1413. minimum value to get positive step by step sum 1032. stream of characters 1515. best position for a service centre 611. valid triangle number 649. dota2 senate 10. regular expression matching 1395. count number of teams 2115. find all possible recipes from given supplies 969. pancake sorting 835. image overlap 1366. rank teams by votes 2622. cache with time limit 1887. reduction operations to make the array elements equal 1009. complement of base 10 integer 2543. check if point is reachable 600. non-negative integers without consecutive ones 1023. camelcase matching 551. student attendance record i 1880. check if word equals summation of two words 528. random pick with weight 833. find and replace in string 1325. delete leaves with a given value 313. super ugly number 590. n-ary tree postorder traversal 332. reconstruct itinerary 1593. split a string into the max number of unique substrings 1455. check if a word occurs as a prefix of any word in a sentence 1045. customers who bought all products 1158. market analysis i 1574. shortest subarray to be removed to make array sorted 1742. maximum number of balls in a box 1668. maximum repeating substring 1320. minimum distance to type a word using two fingers 2583. kth largest sum in a binary tree 52. n-queens ii 1529. minimum suffix flips 1642. furthest building you can reach 966. vowel spellchecker 1647. minimum deletions to make character frequencies unique 1879. minimum xor sum of two arrays 1089. duplicate zeros 100. same tree 53. maximum subarray 1018. binary prefix divisible by 5 664. strange printer 957. prison cells after n days 1050. actors and directors who cooperated at least three times 557. reverse words in a string iii 1175. prime arrangements 1696. jump game vi 1525. number of good ways to split a string 301. remove invalid parentheses 550. game play analysis iv 1169. invalid transactions 1312. minimum insertion steps to make a string palindrome 2124. check if all a's appears before all b's 1457. pseudo-palindromic paths in a binary tree 1117. building h2o 1462. course schedule iv 1937. maximum number of points with cost 2540. minimum common value 543. diameter of binary tree 1221. split a string in balanced strings 2. add two numbers 2549. count distinct numbers on board 326. power of three 1498. number of subsequences that satisfy the given sum condition 779. k-th symbol in grammar 1417. reformat the string 1277. count square submatrices with all ones 328. odd even linked list 2246. longest path with different adjacent characters 2327. number of people aware of a secret 1510. stone game iv 1904. the number of full rounds you have played 345. reverse vowels of a string 336. palindrome pairs 1157. online majority element in subarray 662. maximum width of binary tree 2319. check if matrix is x-matrix 601. human traffic of stadium 2122. recover the original array 2634. filter elements from array 1367. linked list in binary tree 77. combinations 633. sum of square numbers 1368. minimum cost to make at least one valid path in a grid 1341. movie rating 2446. determine if two events have conflict 1296. divide array in sets of k consecutive numbers 834. sum of distances in tree 1300. sum of mutated array closest to target 1211. queries quality and percentage 516. longest palindromic subsequence 2614. prime in diagonal 2623. memoize 2603. collect coins in a tree 1145. binary tree coloring game 350. intersection of two arrays ii 1878. get biggest three rhombus sums in a grid 798. smallest rotation with highest score 2585. number of ways to earn points 47. permutations ii 899. orderly queue 2439. minimize maximum of array 1047. remove all adjacent duplicates in string 1233. remove sub-folders from the filesystem 2594. minimum time to repair cars 1518. water bottles 1489. find critical and pseudo-critical edges in minimum spanning tree 1361. validate binary tree nodes 2117. abbreviating the product of a range 2573. find the string with lcp 18. 4sum 2105. watering plants ii 2266. count number of texts 2432. the employee that worked on the longest task 2568. minimum impossible or 722. remove comments 2563. count the number of fair pairs 2295. replace elements in an array 815. bus routes 984. string without aaa or bbb 1161. maximum level sum of a binary tree 605. can place flowers 1471. the k strongest values in an array 2553. separate the digits in an array 553. optimal division 329. longest increasing path in a matrix 2149. rearrange array elements by sign 1545. find kth bit in nth binary string 1449. form largest integer with digits that add up to target 873. length of longest fibonacci subsequence 961. n-repeated element in size 2n array 840. magic squares in grid 1314. matrix block sum 522. longest uncommon subsequence ii 1356. sort integers by the number of 1 bits 646. maximum length of pair chain 659. split array into consecutive subsequences 1530. number of good leaf nodes pairs 773. sliding puzzle 1441. build an array with stack operations 2256. minimum average difference 1478. allocate mailboxes 620. not boring movies 2416. sum of prefix scores of strings 698. partition to k equal sum subsets 2311. longest binary subsequence less than or equal to k 1936. add minimum number of rungs 2509. cycle length queries in a tree 1293. shortest path in a grid with obstacles elimination 1496. path crossing 2547. minimum cost to split an array 1589. maximum sum obtained of any permutation 572. subtree of another tree 1720. decode xored array 2255. count prefixes of a given string 1311. get watched videos by your friends 1693. daily leads and partners 570. managers with at least 5 direct reports 176. second highest salary 1932. merge bsts to create single bst 1907. count salary categories 526. beautiful arrangement 740. delete and earn 763. partition labels 177. nth highest salary 1856. maximum subarray min-product 1357. apply discount every n orders 707. design linked list 49. group anagrams 1678. goal parser interpretation 640. solve the equation 166. fraction to recurring decimal 1728. cat and mouse ii 193. valid phone numbers 94. binary tree inorder traversal 2316. count unreachable pairs of nodes in an undirected graph 1393. capital gain/loss 837. new 21 game 2411. smallest subarrays with maximum bitwise or 2584. split the array to make coprime products 1679. max number of k-sum pairs 2650. design cancellable function 2325. decode the message 1815. maximum number of groups getting fresh donuts 1803. count pairs with xor in a range 1446. consecutive characters 1581. customer who visited but did not make any transactions 1703. minimum adjacent swaps for k consecutive ones 1629. slowest key 1859. sorting the sentence 86. partition list 1825. finding mk average 1704. determine if string halves are alike 2320. count number of ways to place houses 1685. sum of absolute differences in a sorted array 685. redundant connection ii 2283. check if number has equal digit count and digit value 610. triangle judgement 83. remove duplicates from sorted list 682. baseball game 28. find the index of the first occurrence in a string 2616. minimize the maximum difference of pairs 1137. n-th tribonacci number 7. reverse integer 559. maximum depth of n-ary tree 1829. maximum xor for each query 1448. count good nodes in binary tree 1584. min cost to connect all points 2610. convert an array into a 2d array with conditions 1508. range sum of sorted subarray sums 2264. largest 3-same-digit number in string 630. course schedule iii 542. 01 matrix 743. network delay time 2435. paths in matrix whose sum is divisible by k 1070. product sales analysis iii 2116. check if a parentheses string can be valid 51. n-queens 703. kth largest element in a stream 502. ipo 2239. find closest number to zero 1378. replace employee id with the unique identifier 1375. number of times binary string is prefix-aligned 2579. count total number of colored cells 2130. maximum twin sum of a linked list 2582. pass the pillow 1731. the number of employees which report to each employee 598. range addition ii 2521. distinct prime factors of product of array 1109. corporate flight bookings 2343. query kth smallest trimmed number 1929. concatenation of array 1172. dinner plate stacks 1031. maximum sum of two non-overlapping subarrays 729. my calendar i 2101. detonate the maximum bombs 1061. lexicographically smallest equivalent string 1130. minimum cost tree from leaf values 2121. intervals between identical elements 1359. count all valid pickup and delivery options 2646. minimize the total price of the trips 1700. number of students unable to eat lunch 1916. count ways to build rooms in an ant colony 1911. maximum alternating subsequence sum 2544. alternating digit sum 859. buddy strings 1658. minimum operations to reduce x to zero 998. maximum binary tree ii 78. subsets 1838. frequency of the most frequent element 41. first missing positive 2208. minimum operations to halve array sum 839. similar string groups 799. champagne tower 40. combination sum ii 793. preimage size of factorial zeroes function 69. sqrt(x) 1673. find the most competitive subsequence 1192. critical connections in a network 1326. minimum number of taps to open to water a garden 1301. number of paths with max score 1848. minimum distance to the target element 655. print binary tree 639. decode ways ii 1012. numbers with repeated digits 856. score of parentheses 560. subarray sum equals k 633. sum of square numbers 1595. minimum cost to connect two groups of points 2641. cousins in binary tree ii 34. find first and last position of element in sorted array 753. cracking the safe 1253. reconstruct a 2-row binary matrix 703. kth largest element in a stream 1517. find users with valid e-mails 1647. minimum deletions to make character frequencies unique 617. merge two binary trees 543. diameter of binary tree 689. maximum sum of 3 non-overlapping subarrays 344. reverse string 2634. filter elements from array 2248. intersection of multiple arrays 1504. count submatrices with all ones 514. freedom trail 2111. minimum operations to make the array k-increasing 1869. longer contiguous segments of ones than zeros 200. number of islands 1281. subtract the product and sum of digits of an integer 2115. find all possible recipes from given supplies 1732. find the highest altitude 2635. apply transform over each element in array 1046. last stone weight 1191. k-concatenation maximum sum 771. jewels and stones 1827. minimum operations to make the array increasing 2643. row with maximum ones 866. prime palindrome 535. encode and decode tinyurl 1415. the k-th lexicographical string of all happy strings of length n 985. sum of even numbers after queries 1539. kth missing positive number 1561. maximum number of coins you can get 2244. minimum rounds to complete all tasks 1040. moving stones until consecutive ii 85. maximal rectangle 1544. make the string great 1109. corporate flight bookings 1536. minimum swaps to arrange a binary grid 1480. running sum of 1d array 550. game play analysis iv 1484. group sold products by the date 330. patching array 1880. check if word equals summation of two words 1589. maximum sum obtained of any permutation 1900. the earliest and latest rounds where players compete 638. shopping offers 2264. largest 3-same-digit number in string 2574. left and right sum differences 2512. reward top k students 1172. dinner plate stacks 1652. defuse the bomb 1680. concatenation of consecutive binary numbers 2304. minimum path cost in a grid 1254. number of closed islands 838. push dominoes 889. construct binary tree from preorder and postorder traversal 1405. longest happy string 2343. query kth smallest trimmed number 2227. encrypt and decrypt strings 1005. maximize sum of array after k negations 1496. path crossing 1541. minimum insertions to balance a parentheses string 1328. break a palindrome 1932. merge bsts to create single bst 682. baseball game 2569. handling sum queries after update 2588. count the number of beautiful subarrays 1929. concatenation of array 992. subarrays with k different integers 1178. number of valid words for each puzzle 961. n-repeated element in size 2n array 38. count and say 1400. construct k palindrome strings 199. binary tree right side view 60. permutation sequence 801. minimum swaps to make sequences increasing 2211. count collisions on a road 1376. time needed to inform all employees 1657. determine if two strings are close 1291. sequential digits 303. range sum query - immutable 22. generate parentheses 32. longest valid parentheses 1313. decompress run-length encoded list 1823. find the winner of the circular game 718. maximum length of repeated subarray 1023. camelcase matching 1702. maximum binary string after change 1094. car pooling 1371. find the longest substring containing vowels in even counts 1671. minimum number of removals to make mountain array 2236. root equals sum of children 1861. rotating the box 2566. maximum difference by remapping a digit 810. chalkboard xor game 1725. number of rectangles that can form the largest square 2350. shortest impossible sequence of rolls 2117. abbreviating the product of a range 805. split array with same average 1052. grumpy bookstore owner 309. best time to buy and sell stock with cooldown 1007. minimum domino rotations for equal row 1604. alert using same key-card three or more times in a one hour period 2250. count number of rectangles containing each point 153. find minimum in rotated sorted array 2273. find resultant array after removing anagrams 1233. remove sub-folders from the filesystem 1899. merge triplets to form target triplet 1406. stone game iii 986. interval list intersections 1923. longest common subpath 1237. find positive integer solution for a given equation 2344. minimum deletions to make array divisible 1386. cinema seat allocation 43. multiply strings 1263. minimum moves to move a box to their target location 733. flood fill 620. not boring movies 328. odd even linked list 993. cousins in binary tree 529. minesweeper 877. stone game 779. k-th symbol in grammar 1068. product sales analysis i 1455. check if a word occurs as a prefix of any word in a sentence 2242. maximum score of a node sequence 1491. average salary excluding the minimum and maximum salary 2103. rings and rods 817. linked list components 26. remove duplicates from sorted array 1877. minimize maximum pair sum in array 1381. design a stack with increment operation 640. solve the equation 1864. minimum number of swaps to make the binary string alternating 70. climbing stairs 2444. count subarrays with fixed bounds 994. rotting oranges 661. image smoother 169. majority element 2261. k divisible elements subarrays 1457. pseudo-palindromic paths in a binary tree 964. least operators to express number 705. design hashset 1493. longest subarray of 1's after deleting one element 33. search in rotated sorted array 541. reverse string ii 2542. maximum subsequence score 2337. move pieces to obtain a string 2645. minimum additions to make valid string 565. array nesting 1638. count substrings that differ by one character 1009. complement of base 10 integer 591. tag validator 1282. group the people given the group size they belong to 1909. remove one element to make the array strictly increasing 855. exam room 1466. reorder routes to make all paths lead to the city zero 2140. solving questions with brainpower 2535. difference between element sum and digit sum of an array 812. largest triangle area 511. game play analysis i 795. number of subarrays with bounded maximum 784. letter case permutation 1928. minimum cost to reach destination in time 1668. maximum repeating substring 42. trapping rain water 1882. process tasks using servers 2212. maximum points in an archery competition 725. split linked list in parts 788. rotated digits 1637. widest vertical area between two points containing no points 2235. add two integers 811. subdomain visit count 518. coin change ii 826. most profit assigning work 1019. next greater node in linked list 2437. number of valid clock times 1710. maximum units on a truck 1813. sentence similarity iii 821. shortest distance to a character 710. random pick with blacklist 2206. divide array into equal pairs 1510. stone game iv 969. pancake sorting 1515. best position for a service centre 1301. number of paths with max score 506. relative ranks 1627. graph connectivity with threshold 1240. tiling a rectangle with the fewest squares 1659. maximize grid happiness 1688. count of matches in tournament 2288. apply discount to prices 2348. number of zero-filled subarrays 2623. memoize 1003. check if word is valid after substitutions 888. fair candy swap 2564. substring xor queries 313. super ugly number 2249. count lattice points inside a circle 1559. detect cycles in 2d grid 995. minimum number of k consecutive bit flips 629. k inverse pairs array 1729. find followers count 2333. minimum sum of squared difference 195. tenth line 837. new 21 game 41. first missing positive 1742. maximum number of balls in a box 622. design circular queue 2541. minimum operations to make array equal ii 2232. minimize result by adding parentheses to expression 1669. merge in between linked lists 1507. reformat date 593. valid square 1039. minimum score triangulation of polygon 1061. lexicographically smallest equivalent string 891. sum of subsequence widths 1396. design underground system 2575. find the divisibility array of a string 2412. minimum money required before transactions 2582. pass the pillow 1471. the k strongest values in an array 1848. minimum distance to the target element 791. custom sort string 1389. create target array in the given order 1161. maximum level sum of a binary tree 2301. match substring after replacement 1026. maximum difference between node and ancestor 2649. nested array generator 192. word frequency 1020. number of enclaves 1289. minimum falling path sum ii 74. search a 2d matrix 1851. minimum interval to include each query 1881. maximum value after insertion 1947. maximum compatibility score sum 1310. xor queries of a subarray 767. reorganize string 2423. remove letter to equalize frequency 865. smallest subtree with all the deepest nodes 608. tree node 1806. minimum number of operations to reinitialize a permutation 807. max increase to keep city skyline 712. minimum ascii delete sum for two strings 2106. maximum fruits harvested after at most k steps 2603. collect coins in a tree 657. robot return to origin 556. next greater element iii 664. strange printer 2208. minimum operations to halve array sum 1162. as far from land as possible 1293. shortest path in a grid with obstacles elimination 515. find largest value in each tree row 752. open the lock 2149. rearrange array elements by sign 841. keys and rooms 592. fraction addition and subtraction 1632. rank transform of a matrix 1629. slowest key 1028. recover a tree from preorder traversal 1203. sort items by groups respecting dependencies 2589. minimum time to complete all tasks 2215. find the difference of two arrays 2648. generate fibonacci sequence 728. self dividing numbers 2571. minimum operations to reduce an integer to 0 601. human traffic of stadium 2611. mice and cheese 1656. design an ordered stream 2130. maximum twin sum of a linked list 611. valid triangle number 2536. increment submatrices by one 1492. the kth factor of n 898. bitwise ors of subarrays 2619. array prototype last 1587. bank account summary ii 1144. decrease elements to make array zigzag 2610. convert an array into a 2d array with conditions 1232. check if it is a straight line 1845. seat reservation manager 780. reaching points 1030. matrix cells in distance order 785. is graph bipartite? 2520. count the digits that divide a number 1286. iterator for combination 895. maximum frequency stack 773. sliding puzzle 1614. maximum nesting depth of the parentheses 1326. minimum number of taps to open to water a garden 1815. maximum number of groups getting fresh donuts 1354. construct target array with multiple sums 594. longest harmonious subsequence 1663. smallest string with a given numeric value 321. create maximum number 609. find duplicate file in system 1464. maximum product of two elements in an array 523. continuous subarray sum 2265. count nodes equal to average of subtree 606. construct string from binary tree 2286. booking concert tickets in groups 1403. minimum subsequence in non-increasing order 1653. minimum deletions to make string balanced 1523. count odd numbers in an interval range 1551. minimum operations to make array equal 2218. maximum value of k coins from piles 2618. check if object instance of class 2141. maximum running time of n computers 301. remove invalid parentheses 641. design circular deque 2144. minimum cost of buying candies with discount 847. shortest path visiting all nodes 2624. snail traversal 1302. deepest leaves sum 1234. replace the substring for balanced string 1737. change minimum characters to satisfy one of three conditions 2592. maximize greatness of an array 978. longest turbulent subarray 1619. mean of array after removing some elements 1318. minimum flips to make a or b equal to c 1540. can convert string in k moves 1528. shuffle string 1509. minimum difference between largest and smallest value in three moves 1000. minimum cost to merge stones 775. global and local inversions 1481. least number of unique integers after k removals 2125. number of laser beams in a bank 2614. prime in diagonal 789. escape the ghosts 25. reverse nodes in k-group 851. loud and rich 1915. number of wonderful substrings 1738. find kth largest xor coordinate value 546. remove boxes 1288. remove covered intervals 648. replace words 1147. longest chunked palindrome decomposition 1438. longest continuous subarray with absolute diff less than or equal to limit 1931. painting a grid with three different colors 552. student attendance record ii 848. shifting letters 1148. article views i 619. biggest single number 2129. capitalize the title 1. two sum 1249. minimum remove to make valid parentheses 1527. patients with a condition 2146. k highest ranked items within a price range 1816. truncate sentence 1470. shuffle the array 1734. decode xored permutation 693. binary number with alternating bits 1378. replace employee id with the unique identifier 1347. minimum number of steps to make two strings anagram 6. zigzag conversion 870. advantage shuffle 1462. course schedule iv 1897. redistribute characters to make all strings equal 857. minimum cost to hire k workers 167. two sum ii - input array is sorted 1678. goal parser interpretation 887. super egg drop 2424. longest uploaded prefix 1664. ways to make a fair array 78. subsets 649. dota2 senate 1707. maximum xor with an element from array 1467. probability of a two boxes having the same number of distinct balls 1223. dice roll simulation 1185. day of the week 177. nth highest salary 2240. number of ways to buy pens and pencils 2576. find the maximum number of marked indices 1503. last moment before all ants fall out of a plank 1945. sum of digits of string after convert 49. group anagrams 1872. stone game viii 2272. substring with largest variance 2449. minimum number of operations to make arrays similar 1035. uncrossed lines 965. univalued binary tree 1461. check if a string contains all binary codes of size k 740. delete and earn 2404. most frequent even element 2543. check if point is reachable 835. image overlap 1726. tuple with same product 66. plus one 864. shortest path to get all keys 2300. successful pairs of spells and potions 1672. richest customer wealth 3. longest substring without repeating characters 2148. count elements with strictly smaller and greater elements 1893. check if all the integers in a range are covered 1192. critical connections in a network 590. n-ary tree postorder traversal 844. backspace string compare 869. reordered power of 2 1013. partition array into three parts with equal sum 35. search insert position 2104. sum of subarray ranges 1601. maximum number of achievable transfer requests 2114. maximum number of words found in sentences 650. 2 keys keyboard 2570. merge two 2d arrays by summing values 900. rle iterator 166. fraction to recurring decimal 2601. prime subtraction operation 2632. curry 2525. categorize box according to criteria 1948. delete duplicate folders in system 1123. lowest common ancestor of deepest leaves 671. second minimum node in a binary tree 345. reverse vowels of a string 324. wiggle sort ii 2290. minimum obstacle removal to reach corner 878. nth magical number 1108. defanging an ip address 1524. number of sub-arrays with odd sum 2418. sort the people 662. maximum width of binary tree 1920. build array from permutation 2584. split the array to make coprime products 326. power of three 1312. minimum insertion steps to make a string palindrome 1592. rearrange spaces between words 1053. previous permutation with one swap 2511. maximum enemy forts that can be captured 31. next permutation 1157. online majority element in subarray 312. burst balloons 1051. height checker 823. binary trees with factors 1004. max consecutive ones iii 82. remove duplicates from sorted list ii 1901. find a peak element ii 1341. movie rating 1375. number of times binary string is prefix-aligned 1393. capital gain/loss 1922. count good numbers 1137. n-th tribonacci number 1081. smallest subsequence of distinct characters 675. cut off trees for golf event 1712. ways to split array into three subarrays 707. design linked list 972. equal rational numbers 1359. count all valid pickup and delivery options 1160. find words that can be formed by characters 1590. make sum divisible by p 2309. greatest english letter in upper and lower case 2596. check knight tour configuration 2213. longest substring of one repeating character 885. spiral matrix iii 2315. count asterisks 1489. find critical and pseudo-critical edges in minimum spanning tree 151. reverse words in a string 756. pyramid transition matrix 2559. count vowel strings in ranges 858. mirror reflection 1910. remove all occurrences of a substring 1686. stone game vi 1512. number of good pairs 2224. minimum number of operations to convert time 92. reverse linked list ii 1261. find elements in a contaminated binary tree 1609. even odd tree 1921. eliminate maximum number of monsters 1925. count square sum triples 1418. display table of food orders in a restaurant 184. department highest salary 696. count binary substrings 2555. maximize win from two segments 2637. promise time limit 787. cheapest flights within k stops 172. factorial trailing zeroes 342. power of four 1508. range sum of sorted subarray sums 98. validate binary search tree 713. subarray product less than k 11. container with most water 1036. escape a large maze 2508. add edges to make degrees of all nodes even 2239. find closest number to zero 1292. maximum side length of a square with sum less than or equal to threshold 1546. maximum number of non-overlapping subarrays with sum equals target 852. peak index in a mountain array 1494. parallel courses ii 893. groups of special-equivalent strings 59. spiral matrix ii 2580. count ways to group overlapping ranges 729. my calendar i 668. kth smallest number in multiplication table 1306. jump game iii 1333. filter restaurants by vegan-friendly, price and distance 10. regular expression matching 860. lemonade change 1238. circular permutation in binary representation 1822. sign of the product of an array 1448. count good nodes in binary tree 1260. shift 2d grid 652. find duplicate subtrees 2563. count the number of fair pairs 2551. put marbles in bags 100. same tree 1190. reverse substrings between each pair of parentheses 1363. largest multiple of three 854. k-similar strings 741. cherry pickup 2544. alternating digit sum 1572. matrix diagonal sum 1832. check if the sentence is pangram 1309. decrypt string from alphabet to integer mapping 973. k closest points to origin 2560. house robber iv 2630. memoize ii 516. longest palindromic subsequence 2133. check if every row and column contains all numbers 89. gray code 2547. minimum cost to split an array 686. repeated string match 1550. three consecutive odds 1154. day of the year 183. customers who never order 1879. minimum xor sum of two arrays 331. verify preorder serialization of a binary tree 15. 3sum 2302. count subarrays with score less than k 2597. the number of beautiful subsets 2442. count number of distinct integers after reverse operations 2550. count collisions of monkeys on a polygon 739. daily temperatures 2554. maximum number of integers to choose from a range i 732. my calendar iii 1655. distribute repeating integers 2342. max sum of a pair with equal sum of digits 30. substring with concatenation of all words 1370. increasing decreasing string 954. array of doubled pairs 975. odd even jump 1321. restaurant growth 1174. immediate food delivery ii 691. stickers to spell word 673. number of longest increasing subsequence 194. transpose file 1096. brace expansion ii 977. squares of a sorted array 1033. moving stones until consecutive 572. subtree of another tree 347. top k frequent elements 1452. people whose list of favorite companies is not a subset of another list 504. base 7 845. longest mountain in array 1927. sum game 1648. sell diminishing-valued colored balls 984. string without aaa or bbb 583. delete operation for two strings 1946. largest number after mutating substring 1654. minimum jumps to reach home 1204. last person to fit in the bus 1486. xor operation in an array 1675. minimize deviation in array 715. range module 513. find bottom left tree value 2579. count total number of colored cells 69. sqrt(x) 1475. final prices with a special discount in a shop 1499. max value of equation 1642. furthest building you can reach 1277. count square submatrices with all ones 1608. special array with x elements greater than or equal x 1436. destination city 585. investments in 2016 334. increasing triplet subsequence 76. minimum window substring 2124. check if all a's appears before all b's 1905. count sub islands 2553. separate the digits in an array 501. find mode in binary search tree 2625. flatten deeply nested array 1392. longest happy prefix 1054. distant barcodes 701. insert into a binary search tree 1105. filling bookcase shelves 1073. adding two negabinary numbers 1431. kids with the greatest number of candies 2636. promise pool 790. domino and tromino tiling 1907. count salary categories 154. find minimum in rotated sorted array ii 1207. unique number of occurrences 1477. find two non-overlapping sub-arrays each with target sum 2616. minimize the maximum difference of pairs 1010. pairs of songs with total durations divisible by 60 976. largest perimeter triangle 717. 1-bit and 2-bit characters 704. binary search 814. binary tree pruning 1262. greatest sum divisible by three 2429. minimize xor 1521. find a value of a mysterious function closest to target 819. most common word 2347. best poker hand 175. combine two tables 2121. intervals between identical elements 1863. sum of all subset xor totals 8. string to integer (atoi) 749. contain virus 2609. find the longest balanced substring of a binary string 809. expressive words 1218. longest arithmetic subsequence of given difference 2528. maximize the minimum powered city 1606. find servers that handled most number of requests 2138. divide a string into groups of size k 587. erect the fence 2438. range product queries of powers 1912. design movie rental system 1447. simplified fractions 1361. validate binary tree nodes 626. exchange seats 2407. longest increasing subsequence ii 2334. subarray with elements greater than varying threshold 310. minimum height trees 1278. palindrome partitioning iii 1330. reverse subarray to maximize array value 17. letter combinations of a phone number 777. swap adjacent in lr string 559. maximum depth of n-ary tree 2585. number of ways to earn points 1177. can make palindrome from substring 96. unique binary search trees 763. partition labels 577. employee bonus 1837. sum of digits in base k 539. minimum time difference 1025. divisor game 2322. minimum score after removals on a tree 2639. find the width of columns of a grid 794. valid tic-tac-toe state 528. random pick with weight 1670. design front middle back queue 2266. count number of texts 1041. robot bounded in circle 564. find the closest palindrome 1916. count ways to build rooms in an ant colony 1696. jump game vi 1585. check if string is transformable with substring sort operations 566. reshape the matrix 1139. largest 1-bordered square 1824. minimum sideway jumps 1839. longest substring of all vowels in order 1111. maximum nesting depth of two valid parentheses strings 2646. minimize the total price of the trips 1311. get watched videos by your friends 91. decode ways 168. excel sheet column title 709. to lower case 996. number of squareful arrays 567. permutation in string 2217. find palindrome with fixed length 51. n-queens 1012. numbers with repeated digits 645. set mismatch 2594. minimum time to repair cars 56. merge intervals 1717. maximum score from removing substrings 1320. minimum distance to type a word using two fingers 2506. count pairs of similar strings 875. koko eating bananas 2126. destroying asteroids 863. all nodes distance k in binary tree 1720. decode xored array 698. partition to k equal sum subsets 804. unique morse code words 824. goat latin 1693. daily leads and partners 58. length of last word 319. bulb switcher 1530. number of good leaf nodes pairs 2561. rearranging fruits 1442. count triplets that can form two arrays of equal xor 1721. swapping nodes in a linked list 669. trim a binary search tree 1547. minimum cost to cut a stick 1582. special positions in a binary matrix 1340. jump game v 962. maximum width ramp 1171. remove zero sum consecutive nodes from linked list 690. employee importance 530. minimum absolute difference in bst 1128. number of equivalent domino pairs 983. minimum cost for tickets 1620. coordinate with maximum network quality 5. longest palindromic substring 182. duplicate emails 1625. lexicographically smallest string after applying operations 1224. maximum equal frequency 2306. naming a company 1290. convert binary number in a linked list to integer 2540. minimum common value 179. largest number 2521. distinct prime factors of product of array 2414. length of the longest alphabetical continuous substring 836. rectangle overlap 1351. count negative numbers in a sorted matrix 2578. split with minimum sum 2220. minimum bit flips to convert number 1803. count pairs with xor in a range 1044. longest duplicate substring 509. fibonacci number 2538. difference between maximum and minimum price sum 1526. minimum number of increments on subarrays to form a target array 1898. maximum number of removable characters 2448. minimum cost to make array equal 1563. stone game v 2509. cycle length queries in a tree 1849. splitting a string into descending consecutive values 1130. minimum cost tree from leaf values 2260. minimum consecutive cards to pick up 967. numbers with same consecutive differences 185. department top three salaries 654. maximum binary tree 1315. sum of nodes with even-valued grandparent 1287. element appearing more than 25% in sorted array 558. logical or of two binary grids represented as quad-trees 1325. delete leaves with a given value 2421. number of good paths 1169. invalid transactions 730. count different palindromic subsequences 1850. minimum adjacent swaps to reach the kth smallest number 899. orderly queue 684. redundant connection 1581. customer who visited but did not make any transactions 1621. number of sets of k non-overlapping line segments 1200. minimum absolute difference 766. toeplitz matrix 1439. find the kth smallest sum of a matrix with sorted rows 1187. make array strictly increasing 1701. average waiting time 557. reverse words in a string iii 1706. where will the ball fall 1201. ugly number iii 1649. create sorted array through instructions 2225. find players with zero or one losses 736. parse lisp expression 1665. minimum initial energy to finish tasks 1331. rank transform of an array 1070. product sales analysis iii 68. text justification 1731. the number of employees which report to each employee 697. degree of an array 735. asteroid collision 1432. max difference you can get from changing an integer 71. simplify path 307. range sum query - mutable 40. combination sum ii 2405. optimal partition of string 1520. maximum number of non-overlapping substrings 349. intersection of two arrays 699. falling squares 2425. bitwise xor of all pairings 2440. create components with same value 1728. cat and mouse ii 868. binary gap 538. convert bst to greater tree 1362. closest divisors 1034. coloring a border 966. vowel spellchecker 322. coin change 2622. cache with time limit 1021. remove outermost parentheses 731. my calendar ii 2119. a number after a double reversal 1834. single-threaded cpu 1704. determine if string halves are alike 1074. number of submatrices that sum to target 1695. maximum erasure value 563. binary tree tilt 1745. palindrome partitioning iv 743. network delay time 1441. build an array with stack operations 1189. maximum number of balloons 1825. finding mk average 1423. maximum points you can obtain from cards 174. dungeon game 1390. four divisors 341. flatten nested list iterator 39. combination sum 658. find k closest elements 1498. number of subsequences that satisfy the given sum condition 783. minimum distance between bst nodes 792. number of matching subsequences 963. minimum area rectangle ii 1296. divide array in sets of k consecutive numbers 632. smallest range covering elements from k lists 2202. maximize the topmost element after k moves 1401. circle and rectangle overlapping 1425. constrained subsequence sum 2305. fair distribution of cookies 87. scramble string 1235. maximum profit in job scheduling 1534. count good triplets 1636. sort array by increasing frequency 1024. video stitching 827. making a large island 770. basic calculator iv 839. similar string groups 575. distribute candies 73. set matrix zeroes 2109. adding spaces to a string 1616. split two strings to make palindrome 520. detect capital 803. bricks falling when hit 1001. grid illumination 1093. statistics from a large sample 1705. maximum number of eaten apples 797. all paths from source to target 695. max area of island 1140. stone game ii 1934. confirmation rate 761. special binary string 165. compare version numbers 1605. find valid matrix given row and column sums 1860. incremental memory leak 1184. distance between bus stops 960. delete columns to make sorted iii 1209. remove all adjacent duplicates in string ii 193. valid phone numbers 720. longest word in dictionary 1723. find minimum time to finish all jobs 1617. count subtrees with max distance between cities 1593. split a string into the max number of unique substrings 2406. divide intervals into minimum number of groups 1300. sum of mutated array closest to target 2. add two numbers 1298. maximum candies you can get from boxes 1275. find winner on a tic tac toe game 88. merge sorted array 2586. count the number of vowel strings in range 1239. maximum length of a concatenated string with unique characters 828. count unique characters of all substrings of a given string 2209. minimum white tiles after covering with carpets 1155. number of dice rolls with target sum 602. friend requests ii: who has the most friends 2640. find the score of all prefixes of an array 2296. design a text editor 178. rank scores 1808. maximize number of nice divisors 721. accounts merge 831. masking personal information 2226. maximum candies allocated to k children 197. rising temperature 187. repeated dna sequences 1444. number of ways of cutting a pizza 1332. remove palindromic subsequences 1889. minimum space wasted from packaging 2201. count artifacts that can be extracted 1914. cyclically rotating a grid 1373. maximum sum bst in binary tree 1316. distinct echo substrings 1011. capacity to ship packages within d days 1562. find latest group of size m 2259. remove digit from number to maximize result 1744. can you eat your favorite candy on your favorite day? 2338. count the number of ideal arrays 1828. queries on number of points inside a circle 621. task scheduler 2274. maximum consecutive floors without special floors 1029. two city scheduling 1700. number of students unable to eat lunch 50. pow(x, n) 1411. number of ways to paint n × 3 grid 659. split array into consecutive subsequences 1164. product price at a given date 2502. design memory allocator 561. array partition 2325. decode the message 706. design hashmap 2294. partition array such that maximum difference is k 2269. find the k-beauty of a number 1819. number of different subsequences gcds 1345. jump game iv 1542. find longest awesome substring 1317. convert integer to the sum of two no-zero integers 1266. minimum time visiting all points 1414. find the minimum number of fibonacci numbers whose sum is k 1283. find the smallest divisor given a threshold 816. ambiguous coordinates 2150. find all lonely numbers in the array 519. random flip matrix 198. house robber 1422. maximum score after splitting a string 2531. make number of distinct characters equal 77. combinations 2600. k items with the maximum sum 1545. find kth bit in nth binary string 2413. smallest even multiple 678. valid parenthesis string 62. unique paths 190. reverse bits 2537. count the number of good subarrays 1473. paint house iii 1295. find numbers with even number of digits 1284. minimum number of flips to convert binary matrix to zero matrix 1307. verbal arithmetic puzzle 1866. number of ways to rearrange sticks with k sticks visible 1896. minimum cost to change the final value of expression 610. triangle judgement 849. maximize distance to closest person 856. score of parentheses 1588. sum of all odd length subarrays 738. monotone increasing digits 2426. number of pairs satisfying inequality 2595. number of even and odd bits 1368. minimum cost to make at least one valid path in a grid 2210. count hills and valleys in an array 304. range sum query 2d - immutable 1210. minimum moves to reach target with rotations 1269. number of ways to stay in the same place after some steps 160. intersection of two linked lists 83. remove duplicates from sorted list 63. unique paths ii 1329. sort the matrix diagonally 2501. longest square streak in an array 1685. sum of absolute differences in a sorted array 1299. replace elements with greatest element on right side 2241. design an atm machine 959. regions cut by slashes 554. brick wall 2120. execution of all suffix instructions staying in a grid 1103. distribute candies to people 1567. maximum length of subarray with positive product 16. 3sum closest 1478. allocate mailboxes 1694. reformat phone number 1050. actors and directors who cooperated at least three times 37. sudoku solver 778. swim in rising water 1935. maximum number of words you can type 176. second highest salary 2419. longest subarray with maximum bitwise and 1124. longest well-performing interval 2650. design cancellable function 687. longest univalue path 2410. maximum matching of players with trainers 2642. design graph with shortest path calculator 24. swap nodes in pairs 1703. minimum adjacent swaps for k consecutive ones 1416. restore the array 1047. remove all adjacent duplicates in string 1084. sales analysis iii 1434. number of ways to wear different hats to each other 1095. find in mountain array 1641. count sorted vowel strings 2131. longest palindrome by concatenating two letter words 672. bulb switcher ii 57. insert interval 1854. maximum population year 872. leaf-similar trees 1115. print foobar alternately 1722. minimize hamming distance after swap operations 1458. max dot product of two subsequences 1937. maximum number of points with cost 1247. minimum swaps to make strings equal 1871. jump game vii 676. implement magic dictionary 1450. number of students doing homework at a given time 1145. binary tree coloring game 2517. maximum tastiness of candy basket 665. non-decreasing array 627. swap salary 1446. consecutive characters 1519. number of nodes in the sub-tree with the same label 1911. maximum alternating subsequence sum 843. guess the word 958. check completeness of a binary tree 655. print binary tree 188. best time to buy and sell stock iv 1941. check if all characters have equal number of occurrences 29. divide two integers 607. sales person 181. employees earning more than their managers 1206. design skiplist 2207. maximize number of subsequences in a string 2591. distribute money to maximum children 748. shortest completing word 343. integer break 1807. evaluate the bracket pairs of a string 1818. minimum absolute sum difference 2285. maximum total importance of roads 1211. queries quality and percentage 1599. maximum profit of operating a centennial wheel 12. integer to roman 1382. balance a binary search tree 337. house robber iii 1006. clumsy factorial 2608. shortest cycle in a graph 2139. minimum moves to reach target score 796. rotate string 329. longest increasing path in a matrix 584. find customer referee 896. monotonic array 53. maximum subarray 981. time based key-value store 768. max chunks to make sorted ii 1505. minimum possible integer after at most k adjacent swaps on digits 2556. disconnect path in a binary matrix by at most one flip 859. buddy strings 1476. subrectangle queries 1577. number of ways where square of number is equal to product of two numbers 1304. find n unique integers sum up to zero 1367. linked list in binary tree 2605. form smallest number from two digit arrays 1343. number of sub-arrays of size k and average greater than or equal to threshold 1913. maximum product difference between two pairs 825. friends of appropriate ages 605. can place flowers 987. vertical order traversal of a binary tree 1674. minimum moves to make array complementary 1713. minimum operations to make a subsequence 1681. minimum incompatibility 1377. frog position after t seconds 1802. maximum value at a given index in a bounded array 61. rotate list 1626. best team with no conflicts 1106. parsing a boolean expression 1116. print zero even odd 1220. count vowels permutation 2316. count unreachable pairs of nodes in an undirected graph 2513. minimize the maximum of two arrays 806. number of lines to write string 1410. html entity parser 152. maximum product subarray 1385. find the distance value between two arrays 1352. product of the last k numbers 2415. reverse odd levels of binary tree 95. unique binary search trees ii 1138. alphabet board path 1847. closest room 2401. longest nice subarray 65. valid number 350. intersection of two arrays ii 23. merge k sorted lists 1383. maximum performance of a team 1251. average selling price 1518. water bottles 2310. sum of numbers with units digit k 1374. generate a string with characters that have odd counts 1876. substrings of size three with distinct characters 2326. spiral matrix iv 1483. kth ancestor of a tree node 1222. queens that can attack the king 1208. get equal substrings within budget 2443. sum of number and its reverse 1397. find all good strings 677. map sum pairs 1525. number of good ways to split a string 997. find the town judge 21. merge two sorted lists 332. reconstruct itinerary 2332. the latest time to catch a bus 1146. snapshot array 1419. minimum number of frogs croaking 2409. count days spent together 1195. fizz buzz multithreaded 1814. count nice pairs in an array 879. profitable schemes 1890. the latest login in 2020 86. partition list 2549. count distinct numbers on board 2321. maximum score of spliced array 1683. invalid tweets 1556. thousand separator 2518. number of great partitions 1008. construct binary search tree from preorder traversal 1812. determine color of a chessboard square 1646. get maximum in generated array 547. number of provinces 646. maximum length of pair chain 970. powerful integers 1227. airplane seat assignment probability 2223. sum of scores of built strings 998. maximum binary tree ii 1640. check array formation through concatenation 1380. lucky numbers in a matrix 1531. string compression ii 786. k-th smallest prime fraction 1801. number of orders in the backlog 2245. maximum trailing zeros in a cornered path 1129. shortest path with alternating colors 829. consecutive numbers sum 813. largest sum of averages 1862. sum of floored pairs 2644. find the maximum divisibility score 1437. check if all 1's are at least length k places away 1895. largest magic square 1409. queries on a permutation with key 1104. path in zigzag labelled binary tree 1433. check if a string can break another string 2271. maximum white tiles covered by a carpet 799. champagne tower 2565. subsequence with the minimum score 2507. smallest value after replacing with sum of prime factors 2132. stamping the grid 1045. customers who bought all products 2427. number of common factors 628. maximum product of three numbers 861. score after flipping matrix 653. two sum iv - input is a bst 2430. maximum deletions on a string 2558. take gifts from the richest pile 1449. form largest integer with digits that add up to target 2433. find the original array of prefix xor 2439. minimize maximum of array 700. search in a binary search tree 28. find the index of the first occurrence in a string 1600. throne inheritance 2231. largest number after digit swaps by parity 1735. count ways to make array with product 1598. crawler log folder 1002. find common characters 2233. maximum product after k increments 2335. minimum amount of time to fill cups 999. available captures for rook 2349. design a number container system 1739. building boxes 1356. sort integers by the number of 1 bits 2135. count words obtained after adding a letter 897. increasing order search tree 1360. number of days between two dates 1027. longest arithmetic subsequence 834. sum of distances in tree 2276. count integers in intervals 840. magic squares in grid 1268. search suggestions system 833. find and replace in string 1358. number of substrings containing all three characters 1578. minimum time to make rope colorful 830. positions of large groups 67. add binary 2434. using a robot to print the lexicographically smallest string 765. couples holding hands 1643. kth smallest instructions 2243. calculate digit sum of a string 680. valid palindrome ii 980. unique paths iii 1667. fix names in a table 1624. largest substring between two equal characters 1339. maximum product of splitted binary tree 679. 24 game 1049. last stone weight ii 1859. sorting the sentence 1591. strange printer ii 1884. egg drop with 2 eggs and n floors 1156. swap for longest repeated character substring 1388. pizza with 3n slices 2546. apply bitwise operations to make strings equal 586. customer placing the largest number of orders 757. set intersection size at least two 336. palindrome pairs 1202. smallest string with swaps 1348. tweet counts per frequency 724. find pivot index 2621. sleep 2628. json deep equal 171. excel sheet column number 974. subarray sums divisible by k 2281. sum of total strength of wizards 2318. number of distinct roll sequences 81. search in rotated sorted array ii 2221. find triangular sum of an array 1043. partition array for maximum sum 1830. minimum number of operations to make string sorted 1603. design parking system 1513. number of substrings with only 1s 522. longest uncommon subsequence ii 1338. reduce array size to the half 502. ipo 576. out of boundary paths 316. remove duplicate letters 526. beautiful arrangement 853. car fleet 2447. number of subarrays with gcd equal to k 72. edit distance 1219. path with maximum gold 1690. stone game vii 667. beautiful arrangement ii 2629. function composition 692. top k frequent words 2577. minimum time to visit a cell in a grid 2108. find first palindromic string in the array 2602. minimum operations to make all array elements equal 1846. maximum element after decreasing and rearranging 982. triples with bitwise and equal to zero 1267. count servers that communicate 1631. path with minimum effort 1349. maximum students taking exam 1089. duplicate zeros 971. flip binary tree to match preorder traversal 18. 4sum 338. counting bits 1749. maximum absolute sum of any subarray 507. perfect number 1217. minimum cost to move chips to the same position 2105. watering plants ii 1658. minimum operations to reduce x to zero 714. best time to buy and sell stock with transaction fee 1611. minimum one bit operations to make integers zero 1379. find a corresponding node of a binary tree in a clone of that tree 2267. check if there is a valid parentheses string path 1114. print in order 1221. split a string in balanced strings 1460. make two arrays equal by reversing subarrays 1883. minimum skips to arrive at meeting on time 2446. determine if two events have conflict 1661. average time of process per machine 1424. diagonal traverse ii 2572. count the number of square-free subsets 1573. number of ways to split a string 2633. convert object to json string 1357. apply discount every n orders 521. longest uncommon subsequence i 1615. maximal network rank 670. maximum swap 2515. shortest distance to target string in a circular array 1579. remove max number of edges to keep graph fully traversable 1870. minimum speed to arrive on time 1280. students and examinations 2593. find score of an array after marking all elements 894. all possible full binary trees 1733. minimum number of people to teach 1017. convert to base -2 798. smallest rotation with highest score 1936. add minimum number of rungs 1575. count all possible routes 1719. number of ways to reconstruct a tree 643. maximum average subarray i 1553. minimum number of days to eat n oranges 991. broken calculator 1583. count unhappy friends 315. count of smaller numbers after self 2526. find consecutive integers from a data stream 1078. occurrences after bigram 1463. cherry pickup ii 553. optimal division 2110. number of smooth descent periods of a stock 55. jump game 14. longest common prefix 1716. calculate money in leetcode bank 1353. maximum number of events that can be attended 4. median of two sorted arrays 1838. frequency of the most frequent element 599. minimum index sum of two lists 1122. relative sort array 1276. number of burgers with no waste of ingredients 1750. minimum length of string after deleting similar ends 2280. minimum lines to represent a line chart 892. surface area of 3d shapes 1691. maximum height by stacking cuboids 1346. check if n and its double exist 1844. replace all digits with characters 874. walking robot simulation 2102. sequentially ordinal rank tracker 596. classes more than 5 students 1080. insufficient nodes in root to leaf paths 2503. maximum number of points from grid queries 886. possible bipartition 327. count of range sum 2530. maximal score after applying k operations 2402. meeting rooms iii 1391. check if there is a valid path in a grid 1630. arithmetic subarrays 2275. largest combination with bitwise and greater than zero 722. remove comments 1324. print words vertically 2606. find the substring with maximum cost 674. longest continuous increasing subsequence 636. exclusive time of functions 1529. minimum suffix flips 726. number of atoms 2258. escape the spreading fire 595. big countries 13. roman to integer 2134. minimum swaps to group all 1's together ii 2122. recover the original array 335. self crossing 744. find smallest letter greater than target 1014. best sightseeing pair 2287. rearrange characters to make target string 598. range addition ii 1930. unique length-3 palindromic subsequences 1015. smallest integer divisible by k 862. shortest subarray with sum at least k 1250. check if it is a good array 164. maximum gap 2127. maximum employees to be invited to a meeting 1817. finding the users active minutes 1633. percentage of users attended a contest 1327. list the products ordered in a period 99. recover binary search tree 968. binary tree cameras 1402. reducing dishes 1091. shortest path in binary matrix 54. spiral matrix 1856. maximum subarray min-product 1016. binary string with substrings representing 1 to n 623. add one row to tree 1840. maximum building height 2522. partition string into substrings with values at most k 2607. make k-subarray sums equal 1943. describe the painting 820. short encoding of words 2411. smallest subarrays with maximum bitwise or 1594. maximum non negative product in a matrix 508. most frequent subtree sum 1673. find the most competitive subsequence 2336. smallest number in infinite set 2251. number of flowers in full bloom 1687. delivering boxes from storage to ports 2573. find the string with lcp 1865. finding pairs with a certain sum 1408. string matching in an array 36. valid sudoku 1888. minimum number of flips to make the binary string alternating 1569. number of ways to reorder array to get same bst 802. find eventual safe states 2262. total appeal of a string 2341. maximum number of pairs in array 2617. minimum number of visited cells in a grid 1117. building h2o 1718. construct the lexicographically largest valid sequence 540. single element in a sorted array 1319. number of operations to make network connected 2545. sort the students by their kth score 1748. sum of unique elements 953. verifying an alien dictionary 2552. count increasing quadruplets 2626. array reduce transformation 2312. selling pieces of wood 2612. minimum reverse operations 1072. flip columns for maximum number of equal rows 45. jump game ii 1252. cells with odd values in a matrix 637. average of levels in binary tree 1557. minimum number of vertices to reach all nodes 1387. sort integers by the power value 808. soup servings 867. transpose matrix 1248. count number of nice subarrays 1743. restore the array from adjacent pairs 1226. the dining philosophers 2516. take k of each character from left and right 1805. number of different integers in a string 1179. reformat department table 1038. binary search tree to greater sum tree 2317. maximum xor after operations 93. restore ip addresses 64. minimum path sum 524. longest word in dictionary through deleting 2311. longest binary subsequence less than or equal to k 162. find peak element 1689. partitioning into minimum number of deci-binary numbers 2234. maximum total beauty of the gardens 1372. longest zigzag path in a binary tree 1903. largest odd number in string 1395. count number of teams 639. decode ways ii 1679. max number of k-sum pairs 2319. check if matrix is x-matrix 782. transform to chessboard 815. bus routes 1417. reformat the string 883. projection area of 3d shapes 822. card flipping game 1323. maximum 69 number 754. reach a number 1502. can make arithmetic progression from sequence 1829. maximum xor for each query 957. prison cells after n days 1894. find the student that will replace the chalk 1305. all elements in two binary search trees 48. rotate image 2203. minimum weighted subgraph with the required paths 842. split array into fibonacci sequence 2523. closest prime numbers in range 647. palindromic substrings 2278. percentage of letter in string 2295. replace elements in an array 94. binary tree inorder traversal 747. largest number at least twice of others 1873. calculate special bonus 882. reachable nodes in subdivided graph 764. largest plus sign 1944. number of visible people in a queue 1420. build array where you can find the maximum exactly k comparisons 2328. number of increasing paths in a grid 890. find and replace pattern 1938. maximum genetic difference query 1736. latest time by replacing hidden digits 1456. maximum number of vowels in a substring of given length 746. min cost climbing stairs 2256. minimum average difference 1576. replace all ?'s to avoid consecutive repeating characters 1297. maximum number of occurrences of a substring 1574. shortest subarray to be removed to make array sorted 1413. minimum value to get positive step by step sum 2568. minimum impossible or 818. race car 1022. sum of root to leaf binary numbers 1833. maximum ice cream bars 1075. project employees i 1131. maximum of absolute value expression 196. delete duplicate emails 2284. sender with largest word count 1639. number of ways to form a target string given a dictionary 1857. largest color value in a directed graph 27. remove element 1255. maximum score words formed by letters 2428. maximum sum of an hourglass 762. prime number of set bits in binary representation 1878. get biggest three rhombus sums in a grid 1662. check if two string arrays are equivalent 1558. minimum numbers of function calls to make target array 1342. number of steps to reduce a number to zero 2327. number of people aware of a secret 1344. angle between hands of a clock 956. tallest billboard 1193. monthly transactions i 880. decoded string at index 1514. path with maximum probability 769. max chunks to make sorted 951. flip equivalent binary trees 537. complex number multiplication 1711. count good meals 2145. count the hidden sequences 19. remove nth node from end of list 52. n-queens ii 781. rabbits in forest 1337. the k weakest rows in a matrix 1887. reduction operations to make the array elements equal 1048. longest string chain 173. binary search tree iterator 2246. longest path with different adjacent characters 1018. binary prefix divisible by 5 1942. the number of the smallest unoccupied chair 1568. minimum number of days to disconnect island 1037. valid boomerang 1141. user activity for the past 30 days i 2416. sum of prefix scores of strings 1186. maximum subarray sum with one deletion 2532. time to cross a bridge 2620. counter 20. valid parentheses 551. student attendance record i 1741. find total time spent by each employee 881. boats to save people 191. number of 1 bits 955. delete columns to make sorted ii 2435. paths in matrix whose sum is divisible by k 1334. find the city with the smallest number of neighbors at a threshold distance 570. managers with at least 5 direct reports 1443. minimum time to collect all apples in a tree 876. middle of the linked list 1335. minimum difficulty of a job schedule 1610. maximum number of visible points 47. permutations ii 1125. smallest sufficient team 2587. rearrange array to maximize prefix score 1394. find lucky integer in an array 2289. steps to make array non-decreasing 1079. letter tile possibilities 1110. delete nodes and return forest 1451. rearrange words in a sentence 2270. number of ways to split array 2514. count anagrams 44. wildcard matching 1855. maximum distance between a pair of values 2293. min max game 1032. stream of characters 2257. count unguarded cells in the grid 2101. detonate the maximum bombs 2631. group by 2222. number of ways to select buildings 1158. market analysis i 1835. find xor sum of all pairs bitwise and 1684. count the number of consistent strings 1537. get the maximum score 2136. earliest possible day of full bloom 1404. number of steps to reduce a number in binary representation to one 2441. largest positive integer that exists with its negative 1727. largest submatrix with rearrangements 793. preimage size of factorial zeroes function 2583. kth largest sum in a binary tree 2598. smallest missing non-negative integer after operations 1904. the number of full rounds you have played 542. 01 matrix 1407. top travellers 75. sort colors 1622. fancy sequence 1482. minimum number of days to make m bouquets 1090. largest values from labels 2147. number of ways to divide a long corridor 2299. strong password checker ii 517. super washing machines 1488. avoid flood in the city 589. n-ary tree preorder traversal 600. non-negative integers without consecutive ones 84. largest rectangle in histogram 1886. determine whether matrix can be obtained by rotation 1071. greatest common divisor of strings 2331. evaluate boolean binary tree 1365. how many numbers are smaller than the current number 2567. minimum score by changing two elements 1366. rank teams by votes 503. next greater element ii 850. rectangle area ii 1472. design browser history 2432. the employee that worked on the longest task 2116. check if a parentheses string can be valid 846. hand of straights 832. flipping an image 2303. calculate amount paid in taxes 1566. detect pattern of length m repeated k or more times 2420. find all good indices 7. reverse integer 2320. count number of ways to place houses 80. remove duplicates from sorted array ii 688. knight probability in chessboard 884. uncommon words from two sentences 2279. maximum bags with full capacity of rocks 2615. sum of distances 2562. find the array concatenation value 1399. count largest group 2527. find xor-beauty of array 989. add to array-form of integer 1926. nearest exit from entrance in maze 1143. longest common subsequence 581. shortest unsorted continuous subarray 90. subsets ii 1560. most visited sector in a circular track 871. minimum number of refueling stops 685. redundant connection ii 46. permutations 2216. minimum deletions to make array beautiful 1314. matrix block sum 532. k-diff pairs in an array 988. smallest string starting from leaf 525. contiguous array 1042. flower planting with no adjacent 1163. last substring in lexicographical order 1697. checking existence of edge length limited paths 180. consecutive numbers 306. additive number 79. word search 2529. maximum count of positive integer and negative integer 189. rotate array 2627. debounce 1175. prime arrangements 9. palindrome number 952. largest component size by common factor 719. find k-th smallest pair distance 630. course schedule iii 318. maximum product of word lengths 1453. maximum number of darts inside of a circular dartboard 1584. min cost to connect all points 1465. maximum area of a piece of cake after horizontal and vertical cuts 1092. shortest common supersequence 873. length of longest fibonacci subsequence 2581. count number of possible root nodes 1552. magnetic force between two balls 979. distribute coins in binary tree 155. min stack 1487. making file names unique 1031. maximum sum of two non-overlapping subarrays 1170. compare strings by frequency of the smallest character 1497. check if array pairs are divisible by k 990. satisfiability of equality equations 97. interleaving string 2255. count prefixes of a given string 2283. check if number has equal digit count and digit value 1535. find the winner of an array game 745. prefix and suffix search 1906. minimum absolute difference queries

is a hotel with n rooms. the rooms are represented by a 2d integer array rooms where rooms[i] = [roomidi, sizei] denotes that there is a room with room number roomidi and size equal to sizei. each roomidi is guaranteed to be unique. you are also given k queries in a 2d array queries where queries[j] = [preferredj, minsizej]. the answer to the jth query is the room number id of a room such that: the room has a size of at least minsizej, and abs(id - preferredj) is minimized, where abs(x) is the absolute value of x. if there is a tie in the absolute difference, then use the room with the smallest such id. if there is no such room, the answer is -1. return an array answer of length k where answer[j] contains the answer to the jth query. example 1: input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]] output: [3,-1,3] explanation: the answers to the queries are as follows: query = [3,1]: room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. the answer is 3. query = [3,3]: there are no rooms with a size of at least 3, so the answer is -1. query = [5,2]: room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. the answer is 3. example 2: input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]] output: [2,1,3] explanation: the answers to the queries are as follows: query = [2,3]: room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. the answer is 2. query = [2,4]: room numbers 1 and 3 both have sizes of at least 4. the answer is 1 since it is smaller. query = [2,5]: room number 3 is the only room with a size of at least 5. the answer is 3. constraints: n == rooms.length 1 <= n <= 105 k == queries.length 1 <= k <= 104 1 <= roomidi, preferredj <= 107 1 <= sizei, minsizej <= 107
a string s consisting of words and spaces, return the length of the last word in the string. a word is a maximal substring consisting of non-space characters only. example 1: input: s = "hello world" output: 5 explanation: the last word is "world" with length 5. example 2: input: s = " fly me to the moon " output: 4 explanation: the last word is "moon" with length 4. example 3: input: s = "luffy is still joyboy" output: 6 explanation: the last word is "joyboy" with length 6. constraints: 1 <= s.length <= 104 s consists of only english letters and spaces ' '. there will be at least one word in s.
an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2. return the two integers in any order. example 1: input: num = 8 output: [3,3] explanation: for num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen. example 2: input: num = 123 output: [5,25] example 3: input: num = 999 output: [40,25] constraints: 1 <= num <= 10^9
code that enhances all arrays such that you can call the array.last() method on any array and it will return the last element. if there are no elements in the array, it should return -1. example 1: input: nums = [1,2,3] output: 3 explanation: calling nums.last() should return the last element: 3. example 2: input: nums = [] output: -1 explanation: because there are no elements, return -1. constraints: 0 <= arr.length <= 1000 0 <= arr[i] <= 1000
an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram. example 1: input: heights = [2,1,5,6,2,3] output: 10 explanation: the above is a histogram where width of each bar is 1. the largest rectangle is shown in the red area, which has an area = 10 units. example 2: input: heights = [2,4] output: 4 constraints: 1 <= heights.length <= 105 0 <= heights[i] <= 104
are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the x-y plane. initially, you are facing directly east from your position. you cannot move from your position, but you can rotate. in other words, posx and posy cannot be changed. your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. let d be the amount in degrees that you rotate counterclockwise. then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2]. your browser does not support the video tag or this video format. you can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view. there can be multiple points at one coordinate. there may be points at your location, and you can always see these points regardless of your rotation. points do not obstruct your vision to other points. return the maximum number of points you can see. example 1: input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1] output: 3 explanation: the shaded region represents your field of view. all points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight. example 2: input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1] output: 4 explanation: all points can be made visible in your field of view, including the one at your location. example 3: input: points = [[1,0],[2,1]], angle = 13, location = [1,1] output: 1 explanation: you can only see one of the two points, as shown above. constraints: 1 <= points.length <= 105 points[i].length == 2 location.length == 2 0 <= angle < 360 0 <= posx, posy, xi, yi <= 100
are given a string text. you should split it to k substrings (subtext1, subtext2, ..., subtextk) such that: subtexti is a non-empty string. the concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text). subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k). return the largest possible value of k. example 1: input: text = "ghiabcdefhelloadamhelloabcdefghi" output: 7 explanation: we can split the string on "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)". example 2: input: text = "merchant" output: 1 explanation: we can split the string on "(merchant)". example 3: input: text = "antaprezatepzapreanta" output: 11 explanation: we can split the string on "(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)". constraints: 1 <= text.length <= 1000 text consists only of lowercase english characters.
are given two 2d integer arrays nums1 and nums2. nums1[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali. nums2[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali. each array contains unique ids and is sorted in ascending order by id. merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions: only ids that appear in at least one of the two arrays should be included in the resulting array. each id should be included only once and its value should be the sum of the values of this id in the two arrays. if the id does not exist in one of the two arrays then its value in that array is considered to be 0. return the resulting array. the returned array must be sorted in ascending order by id. example 1: input: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]] output: [[1,6],[2,3],[3,2],[4,6]] explanation: the resulting array contains the following: - id = 1, the value of this id is 2 + 4 = 6. - id = 2, the value of this id is 3. - id = 3, the value of this id is 2. - id = 4, the value of this id is 5 + 1 = 6. example 2: input: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]] output: [[1,3],[2,4],[3,6],[4,3],[5,5]] explanation: there are no common ids, so we just include each id with its value in the resulting list. constraints: 1 <= nums1.length, nums2.length <= 200 nums1[i].length == nums2[j].length == 2 1 <= idi, vali <= 1000 both arrays contain unique ids. both arrays are in strictly ascending order by id.
are given an array nums that consists of positive integers. the gcd of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly. for example, the gcd of the sequence [4,6,16] is 2. a subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. for example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. return the number of different gcds among all non-empty subsequences of nums. example 1: input: nums = [6,10,3] output: 5 explanation: the figure shows all the non-empty subsequences and their gcds. the different gcds are 6, 10, 3, 2, and 1. example 2: input: nums = [5,15,40,5,6] output: 7 constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 2 * 105
is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. each of the four buttons has a different functionality where: button 1: flips the status of all the bulbs. button 2: flips the status of all the bulbs with even labels (i.e., 2, 4, ...). button 3: flips the status of all the bulbs with odd labels (i.e., 1, 3, ...). button 4: flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...). you must make exactly presses button presses in total. for each press, you may pick any of the four buttons to press. given the two integers n and presses, return the number of different possible statuses after performing all presses button presses. example 1: input: n = 1, presses = 1 output: 2 explanation: status can be: - [off] by pressing button 1 - [on] by pressing button 2 example 2: input: n = 2, presses = 1 output: 3 explanation: status can be: - [off, off] by pressing button 1 - [on, off] by pressing button 2 - [off, on] by pressing button 3 example 3: input: n = 3, presses = 1 output: 4 explanation: status can be: - [off, off, off] by pressing button 1 - [off, on, off] by pressing button 2 - [on, off, on] by pressing button 3 - [off, on, on] by pressing button 4 constraints: 1 <= n <= 1000 0 <= presses <= 1000
an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target. example 1: input: nums = [1,1,1,1,1], target = 2 output: 2 explanation: there are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2). example 2: input: nums = [-1,3,5,1,4,2,-9], target = 6 output: 2 explanation: there are 3 subarrays with sum equal to 6. ([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping. constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104 0 <= target <= 106
and bob are opponents in an archery competition. the competition has set the following rules: alice first shoots numarrows arrows and then bob shoots numarrows arrows. the points are then calculated as follows: the target has integer scoring sections ranging from 0 to 11 inclusive. for each section of the target with score k (in between 0 to 11), say alice and bob have shot ak and bk arrows on that section respectively. if ak >= bk, then alice takes k points. if ak < bk, then bob takes k points. however, if ak == bk == 0, then nobody takes k points. for example, if alice and bob both shot 2 arrows on the section with score 11, then alice takes 11 points. on the other hand, if alice shot 0 arrows on the section with score 11 and bob shot 2 arrows on that same section, then bob takes 11 points. you are given the integer numarrows and an integer array alicearrows of size 12, which represents the number of arrows alice shot on each scoring section from 0 to 11. now, bob wants to maximize the total number of points he can obtain. return the array bobarrows which represents the number of arrows bob shot on each scoring section from 0 to 11. the sum of the values in bobarrows should equal numarrows. if there are multiple ways for bob to earn the maximum total points, return any one of them. example 1: input: numarrows = 9, alicearrows = [1,1,0,1,0,0,2,1,0,1,2,0] output: [0,0,0,0,1,1,0,0,1,2,3,1] explanation: the table above shows how the competition is scored. bob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47. it can be shown that bob cannot obtain a score higher than 47 points. example 2: input: numarrows = 3, alicearrows = [0,0,1,0,0,0,0,0,0,0,0,2] output: [0,0,0,0,0,0,0,0,1,1,1,0] explanation: the table above shows how the competition is scored. bob earns a total point of 8 + 9 + 10 = 27. it can be shown that bob cannot obtain a score higher than 27 points. constraints: 1 <= numarrows <= 105 alicearrows.length == bobarrows.length == 12 0 <= alicearrows[i], bobarrows[i] <= numarrows sum(alicearrows[i]) == numarrows
an integer array nums, return the maximum difference between two successive elements in its sorted form. if the array contains less than two elements, return 0. you must write an algorithm that runs in linear time and uses linear extra space. example 1: input: nums = [3,6,9,1] output: 3 explanation: the sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3. example 2: input: nums = [10] output: 0 explanation: the array contains less than 2 elements, therefore return 0. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109
schema table: employee +--------------+---------+ | column name | type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentid | int | +--------------+---------+ id is the primary key column for this table. departmentid is a foreign key of the id from the department table. each row of this table indicates the id, name, and salary of an employee. it also contains the id of their department. table: department +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key column for this table. it is guaranteed that department name is not null. each row of this table indicates the id of a department and its name. write an sql query to find employees who have the highest salary in each of the departments. return the result table in any order. the query result format is in the following example. example 1: input: employee table: +----+-------+--------+--------------+ | id | name | salary | departmentid | +----+-------+--------+--------------+ | 1 | joe | 70000 | 1 | | 2 | jim | 90000 | 1 | | 3 | henry | 80000 | 2 | | 4 | sam | 60000 | 2 | | 5 | max | 90000 | 1 | +----+-------+--------+--------------+ department table: +----+-------+ | id | name | +----+-------+ | 1 | it | | 2 | sales | +----+-------+ output: +------------+----------+--------+ | department | employee | salary | +------------+----------+--------+ | it | jim | 90000 | | sales | henry | 80000 | | it | max | 90000 | +------------+----------+--------+ explanation: max and jim both have the highest salary in the it department and henry has the highest salary in the sales department.
are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2. the cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. the groups are connected if each point in both groups is connected to one or more points in the opposite group. in other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group. return the minimum cost it takes to connect the two groups. example 1: input: cost = [[15, 96], [36, 2]] output: 17 explanation: the optimal way of connecting the groups is: 1--a 2--b this results in a total cost of 17. example 2: input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] output: 4 explanation: the optimal way of connecting the groups is: 1--a 2--b 2--c 3--a this results in a total cost of 4. note that there are multiple points connected to point 2 in the first group and point a in the second group. this does not matter as there is no limit to the number of points that can be connected. we only care about the minimum total cost. example 3: input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]] output: 10 constraints: size1 == cost.length size2 == cost[i].length 1 <= size1, size2 <= 12 size1 >= size2 0 <= cost[i][j] <= 100
is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens. you are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. flowers that are already planted cannot be removed. you are then given another integer newflowers, which is the maximum number of flowers that alice can additionally plant. you are also given the integers target, full, and partial. a garden is considered complete if it has at least target flowers. the total beauty of the gardens is then determined as the sum of the following: the number of complete gardens multiplied by full. the minimum number of flowers in any of the incomplete gardens multiplied by partial. if there are no incomplete gardens, then this value will be 0. return the maximum total beauty that alice can obtain after planting at most newflowers flowers. example 1: input: flowers = [1,3,1,1], newflowers = 7, target = 6, full = 12, partial = 1 output: 14 explanation: alice can plant - 2 flowers in the 0th garden - 3 flowers in the 1st garden - 1 flower in the 2nd garden - 1 flower in the 3rd garden the gardens will then be [3,6,2,2]. she planted a total of 2 + 3 + 1 + 1 = 7 flowers. there is 1 garden that is complete. the minimum number of flowers in the incomplete gardens is 2. thus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14. no other way of planting flowers can obtain a total beauty higher than 14. example 2: input: flowers = [2,4,5,3], newflowers = 10, target = 5, full = 2, partial = 6 output: 30 explanation: alice can plant - 3 flowers in the 0th garden - 0 flowers in the 1st garden - 0 flowers in the 2nd garden - 2 flowers in the 3rd garden the gardens will then be [5,4,5,5]. she planted a total of 3 + 0 + 0 + 2 = 5 flowers. there are 3 gardens that are complete. the minimum number of flowers in the incomplete gardens is 4. thus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30. no other way of planting flowers can obtain a total beauty higher than 30. note that alice could make all the gardens complete but in this case, she would obtain a lower total beauty. constraints: 1 <= flowers.length <= 105 1 <= flowers[i], target <= 105 1 <= newflowers <= 1010 1 <= full, partial <= 105
two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules: type 1: triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length. type 2: triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length. example 1: input: nums1 = [7,4], nums2 = [5,2,8,9] output: 1 explanation: type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8). example 2: input: nums1 = [1,1], nums2 = [1,1,1] output: 9 explanation: all triplets are valid, because 12 = 1 * 1. type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2). nums1[i]2 = nums2[j] * nums2[k]. type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k]. example 3: input: nums1 = [7,7,8,3], nums2 = [1,2,9,7] output: 2 explanation: there are 2 valid triplets. type 1: (3,0,2). nums1[3]2 = nums2[0] * nums2[2]. type 2: (3,0,1). nums2[3]2 = nums1[0] * nums1[1]. constraints: 1 <= nums1.length, nums2.length <= 1000 1 <= nums1[i], nums2[i] <= 105
an integer n, return any array containing n unique integers such that they add up to 0. example 1: input: n = 5 output: [-7,-1,1,3,4] explanation: these arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]. example 2: input: n = 3 output: [-1,0,1] example 3: input: n = 1 output: [0] constraints: 1 <= n <= 1000
two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array. example 1: input: nums1 = [4,1,3], nums2 = [5,7] output: 15 explanation: the number 15 contains the digit 1 from nums1 and the digit 5 from nums2. it can be proven that 15 is the smallest number we can have. example 2: input: nums1 = [3,5,2,6], nums2 = [3,1,7] output: 3 explanation: the number 3 contains the digit 3 which exists in both arrays. constraints: 1 <= nums1.length, nums2.length <= 9 1 <= nums1[i], nums2[i] <= 9 all digits in each array are unique.
are given a 0-indexed integer array nums. there exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. if there is no such j, set arr[i] to be 0. return the array arr. example 1: input: nums = [1,3,1,1,2] output: [5,0,3,4,0] explanation: when i = 0, nums[0] == nums[2] and nums[0] == nums[3]. therefore, arr[0] = |0 - 2| + |0 - 3| = 5. when i = 1, arr[1] = 0 because there is no other index with value 3. when i = 2, nums[2] == nums[0] and nums[2] == nums[3]. therefore, arr[2] = |2 - 0| + |2 - 3| = 3. when i = 3, nums[3] == nums[0] and nums[3] == nums[2]. therefore, arr[3] = |3 - 0| + |3 - 2| = 4. when i = 4, arr[4] = 0 because there is no other index with value 2. example 2: input: nums = [0,5,3] output: [0,0,0] explanation: since each element in nums is distinct, arr[i] = 0 for all i. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109
an array of length n sorted in ascending order is rotated between 1 and n times. for example, the array nums = [0,1,4,4,5,6,7] might become: [4,5,6,7,0,1,4] if it was rotated 4 times. [0,1,4,4,5,6,7] if it was rotated 7 times. notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. given the sorted rotated array nums that may contain duplicates, return the minimum element of this array. you must decrease the overall operation steps as much as possible. example 1: input: nums = [1,3,5] output: 1 example 2: input: nums = [2,2,2,0,1] output: 0 constraints: n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 nums is sorted and rotated between 1 and n times. follow up: this problem is similar to find minimum in rotated sorted array, but nums may contain duplicates. would this affect the runtime complexity? how and why?
are given two integers m and n representing a 0-indexed m x n grid. you are also given two 2d integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively. a guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. a cell is guarded if there is at least one guard that can see it. return the number of unoccupied cells that are not guarded. example 1: input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]] output: 7 explanation: the guarded and unguarded cells are shown in red and green respectively in the above diagram. there are a total of 7 unguarded cells, so we return 7. example 2: input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]] output: 4 explanation: the unguarded cells are shown in green in the above diagram. there are a total of 4 unguarded cells, so we return 4. constraints: 1 <= m, n <= 105 2 <= m * n <= 105 1 <= guards.length, walls.length <= 5 * 104 2 <= guards.length + walls.length <= m * n guards[i].length == walls[j].length == 2 0 <= rowi, rowj < m 0 <= coli, colj < n all the positions in guards and walls are unique.
are given an integer n. there are n rooms numbered from 0 to n - 1. you are given a 2d integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). all the values of starti are unique. meetings are allocated to rooms in the following manner: each meeting will take place in the unused room with the lowest number. if there are no available rooms, the meeting will be delayed until a room becomes free. the delayed meeting should have the same duration as the original meeting. when a room becomes unused, meetings that have an earlier original start time should be given the room. return the number of the room that held the most meetings. if there are multiple rooms, return the room with the lowest number. a half-closed interval [a, b) is the interval between a and b including a and not including b. example 1: input: n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]] output: 0 explanation: - at time 0, both rooms are not being used. the first meeting starts in room 0. - at time 1, only room 1 is not being used. the second meeting starts in room 1. - at time 2, both rooms are being used. the third meeting is delayed. - at time 3, both rooms are being used. the fourth meeting is delayed. - at time 5, the meeting in room 1 finishes. the third meeting starts in room 1 for the time period [5,10). - at time 10, the meetings in both rooms finish. the fourth meeting starts in room 0 for the time period [10,11). both rooms 0 and 1 held 2 meetings, so we return 0. example 2: input: n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]] output: 1 explanation: - at time 1, all three rooms are not being used. the first meeting starts in room 0. - at time 2, rooms 1 and 2 are not being used. the second meeting starts in room 1. - at time 3, only room 2 is not being used. the third meeting starts in room 2. - at time 4, all three rooms are being used. the fourth meeting is delayed. - at time 5, the meeting in room 2 finishes. the fourth meeting starts in room 2 for the time period [5,10). - at time 6, all three rooms are being used. the fifth meeting is delayed. - at time 10, the meetings in rooms 1 and 2 finish. the fifth meeting starts in room 1 for the time period [10,12). room 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. constraints: 1 <= n <= 100 1 <= meetings.length <= 105 meetings[i].length == 2 0 <= starti < endi <= 5 * 105 all the values of starti are unique.
a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (a domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) we may rotate the ith domino, so that tops[i] and bottoms[i] swap values. return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same. if it cannot be done, return -1. example 1: input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2] output: 2 explanation: the first figure represents the dominoes as given by tops and bottoms: before we do any rotations. if we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure. example 2: input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4] output: -1 explanation: in this case, it is not possible to rotate the dominoes to make one row of values equal. constraints: 2 <= tops.length <= 2 * 104 bottoms.length == tops.length 1 <= tops[i], bottoms[i] <= 6
k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions: it has a length of k. it is a divisor of num. given integers num and k, return the k-beauty of num. note: leading zeros are allowed. 0 is not a divisor of any value. a substring is a contiguous sequence of characters in a string. example 1: input: num = 240, k = 2 output: 2 explanation: the following are the substrings of num of length k: - "24" from "240": 24 is a divisor of 240. - "40" from "240": 40 is a divisor of 240. therefore, the k-beauty is 2. example 2: input: num = 430043, k = 2 output: 2 explanation: the following are the substrings of num of length k: - "43" from "430043": 43 is a divisor of 430043. - "30" from "430043": 30 is not a divisor of 430043. - "00" from "430043": 0 is not a divisor of 430043. - "04" from "430043": 4 is not a divisor of 430043. - "43" from "430043": 43 is a divisor of 430043. therefore, the k-beauty is 2. constraints: 1 <= num <= 109 1 <= k <= num.length (taking num as a string)
are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. there is currently a faulty program running that consumes an increasing amount of memory every second. at the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). if neither stick has at least i bits of available memory, the program crashes. return an array containing [crashtime, memory1crash, memory2crash], where crashtime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively. example 1: input: memory1 = 2, memory2 = 2 output: [3,1,0] explanation: the memory is allocated as follows: - at the 1st second, 1 bit of memory is allocated to stick 1. the first stick now has 1 bit of available memory. - at the 2nd second, 2 bits of memory are allocated to stick 2. the second stick now has 0 bits of available memory. - at the 3rd second, the program crashes. the sticks have 1 and 0 bits available respectively. example 2: input: memory1 = 8, memory2 = 11 output: [6,0,4] explanation: the memory is allocated as follows: - at the 1st second, 1 bit of memory is allocated to stick 2. the second stick now has 10 bit of available memory. - at the 2nd second, 2 bits of memory are allocated to stick 2. the second stick now has 8 bits of available memory. - at the 3rd second, 3 bits of memory are allocated to stick 1. the first stick now has 5 bits of available memory. - at the 4th second, 4 bits of memory are allocated to stick 2. the second stick now has 4 bits of available memory. - at the 5th second, 5 bits of memory are allocated to stick 1. the first stick now has 0 bits of available memory. - at the 6th second, the program crashes. the sticks have 0 and 4 bits available respectively. constraints: 0 <= memory1, memory2 <= 231 - 1
are n cars on an infinitely long road. the cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point. you are given a 0-indexed string directions of length n. directions[i] can be either 'l', 'r', or 's' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. each moving car has the same speed. the number of collisions can be calculated as follows: when two cars moving in opposite directions collide with each other, the number of collisions increases by 2. when a moving car collides with a stationary car, the number of collisions increases by 1. after a collision, the cars involved can no longer move and will stay at the point where they collided. other than that, cars cannot change their state or direction of motion. return the total number of collisions that will happen on the road. example 1: input: directions = "rlrsll" output: 5 explanation: the collisions that will happen on the road are: - cars 0 and 1 will collide with each other. since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2. - cars 2 and 3 will collide with each other. since car 3 is stationary, the number of collisions becomes 2 + 1 = 3. - cars 3 and 4 will collide with each other. since car 3 is stationary, the number of collisions becomes 3 + 1 = 4. - cars 4 and 5 will collide with each other. after car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. the number of collisions becomes 4 + 1 = 5. thus, the total number of collisions that will happen on the road is 5. example 2: input: directions = "llrr" output: 0 explanation: no cars will collide with each other. thus, the total number of collisions that will happen on the road is 0. constraints: 1 <= directions.length <= 105 directions[i] is either 'l', 'r', or 's'.
may recall that an array arr is a mountain array if and only if: arr.length >= 3 there exists some index i (0-indexed) with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given an integer array nums, return the minimum number of elements to remove to make nums a mountain array. example 1: input: nums = [1,3,1] output: 0 explanation: the array itself is a mountain array so we do not need to remove any elements. example 2: input: nums = [2,1,1,5,6,2,3,1] output: 3 explanation: one solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1]. constraints: 3 <= nums.length <= 1000 1 <= nums[i] <= 109 it is guaranteed that you can make a mountain array out of nums.
are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. return the number of combinations that make up that amount. if that amount of money cannot be made up by any combination of the coins, return 0. you may assume that you have an infinite number of each kind of coin. the answer is guaranteed to fit into a signed 32-bit integer. example 1: input: amount = 5, coins = [1,2,5] output: 4 explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 example 2: input: amount = 3, coins = [2] output: 0 explanation: the amount of 3 cannot be made up just with coins of 2. example 3: input: amount = 10, coins = [10] output: 1 constraints: 1 <= coins.length <= 300 1 <= coins[i] <= 5000 all the values of coins are unique. 0 <= amount <= 5000
are given a string of length 5 called time, representing the current time on a digital clock in the format "hh:mm". the earliest possible time is "00:00" and the latest possible time is "23:59". in the string time, the digits represented by the ? symbol are unknown, and must be replaced with a digit from 0 to 9. return an integer answer, the number of valid clock times that can be created by replacing every ? with a digit from 0 to 9. example 1: input: time = "?5:00" output: 2 explanation: we can replace the ? with either a 0 or 1, producing "05:00" or "15:00". note that we cannot replace it with a 2, since the time "25:00" is invalid. in total, we have two choices. example 2: input: time = "0?:0?" output: 100 explanation: each ? can be replaced by any digit from 0 to 9, so we have 100 total choices. example 3: input: time = "??:??" output: 1440 explanation: there are 24 possible choices for the hours, and 60 possible choices for the minutes. in total, we have 24 * 60 = 1440 choices. constraints: time is a valid string of length 5 in the format "hh:mm". "00" <= hh <= "23" "00" <= mm <= "59" some of the digits might be replaced with '?' and need to be replaced with digits from 0 to 9.
are given an array of strings names, and an array heights that consists of distinct positive integers. both arrays are of length n. for each index i, names[i] and heights[i] denote the name and height of the ith person. return names sorted in descending order by the people's heights. example 1: input: names = ["mary","john","emma"], heights = [180,165,170] output: ["mary","emma","john"] explanation: mary is the tallest, followed by emma and john. example 2: input: names = ["alice","bob","bob"], heights = [155,185,150] output: ["bob","alice","bob"] explanation: the first bob is the tallest, followed by alice and the second bob. constraints: n == names.length == heights.length 1 <= n <= 103 1 <= names[i].length <= 20 1 <= heights[i] <= 105 names[i] consists of lower and upper case english letters. all the values of heights are distinct.
a date, return the corresponding day of the week for that date. the input is given as three integers representing the day, month and year respectively. return the answer as one of the following values {"sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"}. example 1: input: day = 31, month = 8, year = 2019 output: "saturday" example 2: input: day = 18, month = 7, year = 1999 output: "sunday" example 3: input: day = 15, month = 8, year = 1993 output: "sunday" constraints: the given dates are valid dates between the years 1971 and 2100.
are implementing a program to use as your calendar. we can add a new event if adding the event will not cause a triple booking. a triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.). the event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end. implement the mycalendartwo class: mycalendartwo() initializes the calendar object. boolean book(int start, int end) returns true if the event can be added to the calendar successfully without causing a triple booking. otherwise, return false and do not add the event to the calendar. example 1: input ["mycalendartwo", "book", "book", "book", "book", "book", "book"] [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]] output [null, true, true, true, false, true, true] explanation mycalendartwo mycalendartwo = new mycalendartwo(); mycalendartwo.book(10, 20); // return true, the event can be booked. mycalendartwo.book(50, 60); // return true, the event can be booked. mycalendartwo.book(10, 40); // return true, the event can be double booked. mycalendartwo.book(5, 15); // return false, the event cannot be booked, because it would result in a triple booking. mycalendartwo.book(5, 10); // return true, the event can be booked, as it does not use time 10 which is already double booked. mycalendartwo.book(25, 55); // return true, the event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event. constraints: 0 <= start < end <= 109 at most 1000 calls will be made to book.
an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,1,1], k = 2 output: 2 example 2: input: nums = [1,2,3], k = 3 output: 2 constraints: 1 <= nums.length <= 2 * 104 -1000 <= nums[i] <= 1000 -107 <= k <= 107
are given an m x n integer array grid where grid[i][j] could be: 1 representing the starting square. there is exactly one starting square. 2 representing the ending square. there is exactly one ending square. 0 representing empty squares we can walk over. -1 representing obstacles that we cannot walk over. return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once. example 1: input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]] output: 2 explanation: we have the following two paths: 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2) 2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2) example 2: input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]] output: 4 explanation: we have the following four paths: 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3) 2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3) 3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3) 4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3) example 3: input: grid = [[0,1],[2,0]] output: 0 explanation: there is no path that walks over every empty square exactly once. note that the starting and ending square can be anywhere in the grid. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 1 <= m * n <= 20 -1 <= grid[i][j] <= 2 there is exactly one starting cell and one ending cell.
a string path, which is an absolute path (starting with a slash '/') to a file or directory in a unix-style file system, convert it to the simplified canonical path. in a unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. for this problem, any other format of periods such as '...' are treated as file/directory names. the canonical path should have the following format: the path starts with a single slash '/'. any two directories are separated by a single slash '/'. the path does not end with a trailing '/'. the path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..') return the simplified canonical path. example 1: input: path = "/home/" output: "/home" explanation: note that there is no trailing slash after the last directory name. example 2: input: path = "/../" output: "/" explanation: going one level up from the root directory is a no-op, as the root level is the highest level you can go. example 3: input: path = "/home//foo/" output: "/home/foo" explanation: in the canonical path, multiple consecutive slashes are replaced by a single one. constraints: 1 <= path.length <= 3000 path consists of english letters, digits, period '.', slash '/' or '_'. path is a valid absolute unix path.
the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. if there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. a subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. note that the solution with the given constraints is guaranteed to be unique. also return the answer sorted in non-increasing order. example 1: input: nums = [4,3,10,9,8] output: [10,9] explanation: the subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. however, the subsequence [10,9] has the maximum total sum of its elements. example 2: input: nums = [4,4,7,6,7] output: [7,7,6] explanation: the subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. note the subsequence has to be returned in non-decreasing order. constraints: 1 <= nums.length <= 500 1 <= nums[i] <= 100
a matrix and a target, return the number of non-empty submatrices that sum to target. a submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2. two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'. example 1: input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0 output: 4 explanation: the four 1x1 submatrices that only contain 0. example 2: input: matrix = [[1,-1],[-1,1]], target = 0 output: 5 explanation: the two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix. example 3: input: matrix = [[904]], target = 0 output: 0 constraints: 1 <= matrix.length <= 100 1 <= matrix[0].length <= 100 -1000 <= matrix[i] <= 1000 -10^8 <= target <= 10^8
the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]. return the array in the form [x1,y1,x2,y2,...,xn,yn]. example 1: input: nums = [2,5,1,3,4,7], n = 3 output: [2,3,5,4,1,7] explanation: since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]. example 2: input: nums = [1,2,3,4,4,3,2,1], n = 4 output: [1,4,2,3,3,2,4,1] example 3: input: nums = [1,1,2,2], n = 2 output: [1,2,1,2] constraints: 1 <= n <= 500 nums.length == 2n 1 <= nums[i] <= 10^3
valid number can be split up into these components (in order): a decimal number or an integer. (optional) an 'e' or 'e', followed by an integer. a decimal number can be split up into these components (in order): (optional) a sign character (either '+' or '-'). one of the following formats: one or more digits, followed by a dot '.'. one or more digits, followed by a dot '.', followed by one or more digits. a dot '.', followed by one or more digits. an integer can be split up into these components (in order): (optional) a sign character (either '+' or '-'). one or more digits. for example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90e3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"]. given a string s, return true if s is a valid number. example 1: input: s = "0" output: true example 2: input: s = "e" output: false example 3: input: s = "." output: false constraints: 1 <= s.length <= 20 s consists of only english letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.
an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. you spend 1 second to walk over one edge of the tree. return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex. the edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. additionally, there is a boolean array hasapple, where hasapple[i] = true means that vertex i has an apple; otherwise, it does not have any apple. example 1: input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasapple = [false,false,true,false,true,true,false] output: 8 explanation: the figure above represents the given tree where red vertices have an apple. one optimal path to collect all apples is shown by the green arrows. example 2: input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasapple = [false,false,true,false,false,true,false] output: 6 explanation: the figure above represents the given tree where red vertices have an apple. one optimal path to collect all apples is shown by the green arrows. example 3: input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasapple = [false,false,false,false,false,false,false] output: 0 constraints: 1 <= n <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai < bi <= n - 1 hasapple.length == n
are given a 0-indexed integer array nums. the array nums is beautiful if: nums.length is even. nums[i] != nums[i + 1] for all i % 2 == 0. note that an empty array is considered beautiful. you can delete any number of elements from nums. when you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged. return the minimum number of elements to delete from nums to make it beautiful. example 1: input: nums = [1,1,2,3,5] output: 1 explanation: you can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. it can be proven you need at least 1 deletion to make nums beautiful. example 2: input: nums = [1,1,2,2,3,3] output: 2 explanation: you can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. it can be proven you need at least 2 deletions to make nums beautiful. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105
have n boxes labeled from 0 to n - 1. you are given four arrays: status, candies, keys, and containedboxes where: status[i] is 1 if the ith box is open and 0 if the ith box is closed, candies[i] is the number of candies in the ith box, keys[i] is a list of the labels of the boxes you can open after opening the ith box. containedboxes[i] is a list of the boxes you found inside the ith box. you are given an integer array initialboxes that contains the labels of the boxes you initially have. you can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it. return the maximum number of candies you can get following the rules above. example 1: input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedboxes = [[1,2],[3],[],[]], initialboxes = [0] output: 16 explanation: you will be initially given box 0. you will find 7 candies in it and boxes 1 and 2. box 1 is closed and you do not have a key for it so you will open box 2. you will find 4 candies and a key to box 1 in box 2. in box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed. total number of candies collected = 7 + 4 + 5 = 16 candy. example 2: input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedboxes = [[1,2,3,4,5],[],[],[],[],[]], initialboxes = [0] output: 6 explanation: you have initially box 0. opening it you can find boxes 1,2,3,4 and 5 and their keys. the total number of candies will be 6. constraints: n == status.length == candies.length == keys.length == containedboxes.length 1 <= n <= 1000 status[i] is either 0 or 1. 1 <= candies[i] <= 1000 0 <= keys[i].length <= n 0 <= keys[i][j] < n all values of keys[i] are unique. 0 <= containedboxes[i].length <= n 0 <= containedboxes[i][j] < n all values of containedboxes[i] are unique. each box is contained in one box at most. 0 <= initialboxes.length <= n 0 <= initialboxes[i] < n
a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language. you are given an integer n, an array languages, and an array friendships where: there are n languages numbered 1 through n, languages[i] is the set of languages the ith user knows, and friendships[i] = [ui, vi] denotes a friendship between the users ui and vi. you can choose one language and teach it to some users so that all friends can communicate with each other. return the minimum number of users you need to teach. note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z. example 1: input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]] output: 1 explanation: you can either teach user 1 the second language or user 2 the first language. example 2: input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]] output: 2 explanation: teach the third language to users 1 and 3, yielding two users to teach. constraints: 2 <= n <= 500 languages.length == m 1 <= m <= 500 1 <= languages[i].length <= n 1 <= languages[i][j] <= n 1 <= ui < vi <= languages.length 1 <= friendships.length <= 500 all tuples (ui, vi) are unique languages[i] contains only unique values
a text file file.txt, print just the 10th line of the file. example: assume that file.txt has the following content: line 1 line 2 line 3 line 4 line 5 line 6 line 7 line 8 line 9 line 10 your script should output the tenth line, which is: line 10 note: 1. if the file contains less than 10 lines, what should you output? 2. there's at least three different solutions. try to explore all possibilities.
the array restaurants where restaurants[i] = [idi, ratingi, veganfriendlyi, pricei, distancei]. you have to filter the restaurants using three filters. the veganfriendly filter will be either true (meaning you should only include restaurants with veganfriendlyi set to true) or false (meaning you can include any restaurant). in addition, you have the filters maxprice and maxdistance which are the maximum value for price and distance of restaurants you should consider respectively. return the array of restaurant ids after filtering, ordered by rating from highest to lowest. for restaurants with the same rating, order them by id from highest to lowest. for simplicity veganfriendlyi and veganfriendly take value 1 when it is true, and 0 when it is false. example 1: input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganfriendly = 1, maxprice = 50, maxdistance = 10 output: [3,1,5] explanation: the restaurants are: restaurant 1 [id=1, rating=4, veganfriendly=1, price=40, distance=10] restaurant 2 [id=2, rating=8, veganfriendly=0, price=50, distance=5] restaurant 3 [id=3, rating=8, veganfriendly=1, price=30, distance=4] restaurant 4 [id=4, rating=10, veganfriendly=0, price=10, distance=3] restaurant 5 [id=5, rating=1, veganfriendly=1, price=15, distance=1] after filter restaurants with veganfriendly = 1, maxprice = 50 and maxdistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). example 2: input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganfriendly = 0, maxprice = 50, maxdistance = 10 output: [4,3,2,1,5] explanation: the restaurants are the same as in example 1, but in this case the filter veganfriendly = 0, therefore all restaurants are considered. example 3: input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganfriendly = 0, maxprice = 30, maxdistance = 3 output: [4,5] constraints: 1 <= restaurants.length <= 10^4 restaurants[i].length == 5 1 <= idi, ratingi, pricei, distancei <= 10^5 1 <= maxprice, maxdistance <= 10^5 veganfriendlyi and veganfriendly are 0 or 1. all idi are distinct.
is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again. a neighborhood is a maximal group of continuous houses that are painted with the same color. for example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}]. given an array houses, an m x n matrix cost and an integer target where: houses[i]: is the color of the house i, and 0 if the house is not painted yet. cost[i][j]: is the cost of paint the house i with the color j + 1. return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. if it is not possible, return -1. example 1: input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 output: 9 explanation: paint houses of this way [1,2,2,1,1] this array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}]. cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9. example 2: input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 output: 11 explanation: some houses are already painted, paint the houses of this way [2,2,1,2,2] this array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. cost of paint the first and last house (10 + 1) = 11. example 3: input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3 output: -1 explanation: houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3. constraints: m == houses.length == cost.length n == cost[i].length 1 <= m <= 100 1 <= n <= 20 1 <= target <= m 0 <= houses[i] <= n 1 <= cost[i][j] <= 104
kingdom consists of a king, his children, his grandchildren, and so on. every once in a while, someone in the family dies or a child is born. the kingdom has a well-defined order of inheritance that consists of the king as the first member. let's define the recursive function successor(x, curorder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance. successor(x, curorder): if x has no children or all of x's children are in curorder: if x is the king return null else return successor(x's parent, curorder) else return x's oldest child who's not in curorder for example, assume we have a kingdom that consists of the king, his children alice and bob (alice is older than bob), and finally alice's son jack. in the beginning, curorder will be ["king"]. calling successor(king, curorder) will return alice, so we append to curorder to get ["king", "alice"]. calling successor(alice, curorder) will return jack, so we append to curorder to get ["king", "alice", "jack"]. calling successor(jack, curorder) will return bob, so we append to curorder to get ["king", "alice", "jack", "bob"]. calling successor(bob, curorder) will return null. thus the order of inheritance will be ["king", "alice", "jack", "bob"]. using the above function, we can always obtain a unique order of inheritance. implement the throneinheritance class: throneinheritance(string kingname) initializes an object of the throneinheritance class. the name of the king is given as part of the constructor. void birth(string parentname, string childname) indicates that parentname gave birth to childname. void death(string name) indicates the death of name. the death of the person doesn't affect the successor function nor the current inheritance order. you can treat it as just marking the person as dead. string[] getinheritanceorder() returns a list representing the current order of inheritance excluding dead people. example 1: input ["throneinheritance", "birth", "birth", "birth", "birth", "birth", "birth", "getinheritanceorder", "death", "getinheritanceorder"] [["king"], ["king", "andy"], ["king", "bob"], ["king", "catherine"], ["andy", "matthew"], ["bob", "alex"], ["bob", "asha"], [null], ["bob"], [null]] output [null, null, null, null, null, null, null, ["king", "andy", "matthew", "bob", "alex", "asha", "catherine"], null, ["king", "andy", "matthew", "alex", "asha", "catherine"]] explanation throneinheritance t= new throneinheritance("king"); // order: king t.birth("king", "andy"); // order: king > andy t.birth("king", "bob"); // order: king > andy > bob t.birth("king", "catherine"); // order: king > andy > bob > catherine t.birth("andy", "matthew"); // order: king > andy > matthew > bob > catherine t.birth("bob", "alex"); // order: king > andy > matthew > bob > alex > catherine t.birth("bob", "asha"); // order: king > andy > matthew > bob > alex > asha > catherine t.getinheritanceorder(); // return ["king", "andy", "matthew", "bob", "alex", "asha", "catherine"] t.death("bob"); // order: king > andy > matthew > bob > alex > asha > catherine t.getinheritanceorder(); // return ["king", "andy", "matthew", "alex", "asha", "catherine"] constraints: 1 <= kingname.length, parentname.length, childname.length, name.length <= 15 kingname, parentname, childname, and name consist of lowercase english letters only. all arguments childname and kingname are distinct. all name arguments of death will be passed to either the constructor or as childname to birth first. for each call to birth(parentname, childname), it is guaranteed that parentname is alive. at most 105 calls will be made to birth and death. at most 10 calls will be made to getinheritanceorder.
are given an m x n grid grid where: '.' is an empty cell. '#' is a wall. '@' is the starting point. lowercase letters represent keys. uppercase letters represent locks. you start at the starting point and one move consists of walking one space in one of the four cardinal directions. you cannot walk outside the grid, or walk into a wall. if you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key. for some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the english alphabet in the grid. this means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the english alphabet. return the lowest number of moves to acquire all keys. if it is impossible, return -1. example 1: input: grid = ["@.a..","###.#","b.a.b"] output: 8 explanation: note that the goal is to obtain all the keys not to open all the locks. example 2: input: grid = ["@..aa","..b#.","....b"] output: 6 example 3: input: grid = ["@aa"] output: -1 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 30 grid[i][j] is either an english letter, '.', '#', or '@'. the number of keys in the grid is in the range [1, 6]. each key in the grid is unique. each key in the grid has a matching lock.
two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. if there are multiple valid strings, return any of them. a string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s. example 1: input: str1 = "abac", str2 = "cab" output: "cabac" explanation: str1 = "abac" is a subsequence of "cabac" because we can delete the first "c". str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac". the answer provided is the shortest such string that satisfies these properties. example 2: input: str1 = "aaaaaaaa", str2 = "aaaaaaaa" output: "aaaaaaaa" constraints: 1 <= str1.length, str2.length <= 1000 str1 and str2 consist of lowercase english letters.
a function that reverses a string. the input string is given as an array of characters s. you must do this by modifying the input array in-place with o(1) extra memory. example 1: input: s = ["h","e","l","l","o"] output: ["o","l","l","e","h"] example 2: input: s = ["h","a","n","n","a","h"] output: ["h","a","n","n","a","h"] constraints: 1 <= s.length <= 105 s[i] is a printable ascii character.
a program to solve a sudoku puzzle by filling the empty cells. a sudoku solution must satisfy all of the following rules: each of the digits 1-9 must occur exactly once in each row. each of the digits 1-9 must occur exactly once in each column. each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. the '.' character indicates empty cells. example 1: input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]] output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]] explanation: the input board is shown above and the only valid solution is shown below: constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit or '.'. it is guaranteed that the input board has only one solution.
are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child. return true if the value of the root is equal to the sum of the values of its two children, or false otherwise. example 1: input: root = [10,4,6] output: true explanation: the values of the root, its left child, and its right child are 10, 4, and 6, respectively. 10 is equal to 4 + 6, so we return true. example 2: input: root = [5,3,1] output: false explanation: the values of the root, its left child, and its right child are 5, 3, and 1, respectively. 5 is not equal to 3 + 1, so we return false. constraints: the tree consists only of the root, its left child, and its right child. -100 <= node.val <= 100
an api that generates fancy sequences using the append, addall, and multall operations. implement the fancy class: fancy() initializes the object with an empty sequence. void append(val) appends an integer val to the end of the sequence. void addall(inc) increments all existing values in the sequence by an integer inc. void multall(m) multiplies all existing values in the sequence by an integer m. int getindex(idx) gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. if the index is greater or equal than the length of the sequence, return -1. example 1: input ["fancy", "append", "addall", "append", "multall", "getindex", "addall", "append", "multall", "getindex", "getindex", "getindex"] [[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]] output [null, null, null, null, null, 10, null, null, null, 26, 34, 20] explanation fancy fancy = new fancy(); fancy.append(2); // fancy sequence: [2] fancy.addall(3); // fancy sequence: [2+3] -> [5] fancy.append(7); // fancy sequence: [5, 7] fancy.multall(2); // fancy sequence: [5*2, 7*2] -> [10, 14] fancy.getindex(0); // return 10 fancy.addall(3); // fancy sequence: [10+3, 14+3] -> [13, 17] fancy.append(10); // fancy sequence: [13, 17, 10] fancy.multall(2); // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20] fancy.getindex(0); // return 26 fancy.getindex(1); // return 34 fancy.getindex(2); // return 20 constraints: 1 <= val, inc, m <= 100 0 <= idx <= 105 at most 105 calls total will be made to append, addall, multall, and getindex.
a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k. vowel letters in english are 'a', 'e', 'i', 'o', and 'u'. example 1: input: s = "abciiidef", k = 3 output: 3 explanation: the substring "iii" contains 3 vowel letters. example 2: input: s = "aeiou", k = 2 output: 2 explanation: any substring of length 2 contains 2 vowels. example 3: input: s = "leetcode", k = 3 output: 2 explanation: "lee", "eet" and "ode" contain 2 vowels. constraints: 1 <= s.length <= 105 s consists of lowercase english letters. 1 <= k <= s.length
are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string. you can swap the characters at any pair of indices in the given pairs any number of times. return the lexicographically smallest string that s can be changed to after using the swaps. example 1: input: s = "dcab", pairs = [[0,3],[1,2]] output: "bacd" explaination: swap s[0] and s[3], s = "bcad" swap s[1] and s[2], s = "bacd" example 2: input: s = "dcab", pairs = [[0,3],[1,2],[0,2]] output: "abcd" explaination: swap s[0] and s[3], s = "bcad" swap s[0] and s[2], s = "acbd" swap s[1] and s[2], s = "abcd" example 3: input: s = "cba", pairs = [[0,1],[1,2]] output: "abc" explaination: swap s[0] and s[1], s = "bca" swap s[1] and s[2], s = "bac" swap s[0] and s[1], s = "abc" constraints: 1 <= s.length <= 10^5 0 <= pairs.length <= 10^5 0 <= pairs[i][0], pairs[i][1] < s.length s only contains lower case english letters.
an integer n, return the smallest prime palindrome greater than or equal to n. an integer is prime if it has exactly two divisors: 1 and itself. note that 1 is not a prime number. for example, 2, 3, 5, 7, 11, and 13 are all primes. an integer is a palindrome if it reads the same from left to right as it does from right to left. for example, 101 and 12321 are palindromes. the test cases are generated so that the answer always exists and is in the range [2, 2 * 108]. example 1: input: n = 6 output: 7 example 2: input: n = 8 output: 11 example 3: input: n = 13 output: 101 constraints: 1 <= n <= 108
an asyncronous function fn and a time t in milliseconds, return a new time limited version of the input function. a time limited function is a function that is identical to the original unless it takes longer than t milliseconds to fullfill. in that case, it will reject with "time limit exceeded". note that it should reject with a string, not an error. example 1: input: fn = async (n) => { await new promise(res => settimeout(res, 100)); return n * n; } inputs = [5] t = 50 output: {"rejected":"time limit exceeded","time":50} explanation: the provided function is set to resolve after 100ms. however, the time limit is set to 50ms. it rejects at t=50ms because the time limit was reached. example 2: input: fn = async (n) => { await new promise(res => settimeout(res, 100)); return n * n; } inputs = [5] t = 150 output: {"resolved":25,"time":100} explanation: the function resolved 5 * 5 = 25 at t=100ms. the time limit is never reached. example 3: input: fn = async (a, b) => { await new promise(res => settimeout(res, 120)); return a + b; } inputs = [5,10] t = 150 output: {"resolved":15,"time":120} explanation: the function resolved 5 + 10 = 15 at t=120ms. the time limit is never reached. example 4: input: fn = async () => { throw "error"; } inputs = [] t = 1000 output: {"rejected":"error","time":0} explanation: the function immediately throws an error. constraints: 0 <= inputs.length <= 10 0 <= t <= 1000 fn returns a promise
are 3n piles of coins of varying size, you and your friends will take piles of coins as follows: in each step, you will choose any 3 piles of coins (not necessarily consecutive). of your choice, alice will pick the pile with the maximum number of coins. you will pick the next pile with the maximum number of coins. your friend bob will pick the last pile. repeat until there are no more piles of coins. given an array of integers piles where piles[i] is the number of coins in the ith pile. return the maximum number of coins that you can have. example 1: input: piles = [2,4,1,2,7,8] output: 9 explanation: choose the triplet (2, 7, 8), alice pick the pile with 8 coins, you the pile with 7 coins and bob the last one. choose the triplet (1, 2, 4), alice pick the pile with 4 coins, you the pile with 2 coins and bob the last one. the maximum number of coins which you can have are: 7 + 2 = 9. on the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal. example 2: input: piles = [2,4,5] output: 4 example 3: input: piles = [9,8,7,6,5,1,2,3,4] output: 18 constraints: 3 <= piles.length <= 105 piles.length % 3 == 0 1 <= piles[i] <= 104
are given a string s and two integers x and y. you can perform two types of operations any number of times. remove substring "ab" and gain x points. for example, when removing "ab" from "cabxbae" it becomes "cxbae". remove substring "ba" and gain y points. for example, when removing "ba" from "cabxbae" it becomes "cabxe". return the maximum points you can gain after applying the above operations on s. example 1: input: s = "cdbcbbaaabab", x = 4, y = 5 output: 19 explanation: - remove the "ba" underlined in "cdbcbbaaabab". now, s = "cdbcbbaaab" and 5 points are added to the score. - remove the "ab" underlined in "cdbcbbaaab". now, s = "cdbcbbaa" and 4 points are added to the score. - remove the "ba" underlined in "cdbcbbaa". now, s = "cdbcba" and 5 points are added to the score. - remove the "ba" underlined in "cdbcba". now, s = "cdbc" and 5 points are added to the score. total score = 5 + 4 + 5 + 5 = 19. example 2: input: s = "aabbaaxybbaabb", x = 5, y = 4 output: 20 constraints: 1 <= s.length <= 105 1 <= x, y <= 104 s consists of lowercase english letters.
are given an integer array cards where cards[i] represents the value of the ith card. a pair of cards are matching if the cards have the same value. return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. if it is impossible to have matching cards, return -1. example 1: input: cards = [3,4,2,3,4,7] output: 4 explanation: we can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. note that picking up the cards [4,2,3,4] is also optimal. example 2: input: cards = [1,0,5,3] output: -1 explanation: there is no way to pick up a set of consecutive cards that contain a pair of matching cards. constraints: 1 <= cards.length <= 105 0 <= cards[i] <= 106
digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7). for example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. however, "3245" is not good because 3 is at an even index but is not even. given an integer n, return the total number of good digit strings of length n. since the answer may be large, return it modulo 109 + 7. a digit string is a string consisting of digits 0 through 9 that may contain leading zeros. example 1: input: n = 1 output: 5 explanation: the good numbers of length 1 are "0", "2", "4", "6", "8". example 2: input: n = 4 output: 400 example 3: input: n = 50 output: 564908303 constraints: 1 <= n <= 1015
are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. return the single element that appears only once. your solution must run in o(log n) time and o(1) space. example 1: input: nums = [1,1,2,3,3,4,4,8,8] output: 2 example 2: input: nums = [3,3,7,7,10,11,11] output: 10 constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105
an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list. the interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d. return the number of remaining intervals. example 1: input: intervals = [[1,4],[3,6],[2,8]] output: 2 explanation: interval [3,6] is covered by [2,8], therefore it is removed. example 2: input: intervals = [[1,4],[2,3]] output: 1 constraints: 1 <= intervals.length <= 1000 intervals[i].length == 2 0 <= li < ri <= 105 all the given intervals are unique.
array-form of an integer num is an array representing its digits in left to right order. for example, for num = 1321, the array form is [1,3,2,1]. given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k. example 1: input: num = [1,2,0,0], k = 34 output: [1,2,3,4] explanation: 1200 + 34 = 1234 example 2: input: num = [2,7,4], k = 181 output: [4,5,5] explanation: 274 + 181 = 455 example 3: input: num = [2,1,5], k = 806 output: [1,0,2,1] explanation: 215 + 806 = 1021 constraints: 1 <= num.length <= 104 0 <= num[i] <= 9 num does not contain any leading zeros except for the zero itself. 1 <= k <= 104
are given a string s of lowercase english letters and an integer array shifts of the same length. call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). for example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'. now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times. return the final string after all such shifts to s are applied. example 1: input: s = "abc", shifts = [3,5,9] output: "rpl" explanation: we start with "abc". after shifting the first 1 letters of s by 3, we have "dbc". after shifting the first 2 letters of s by 5, we have "igc". after shifting the first 3 letters of s by 9, we have "rpl", the answer. example 2: input: s = "aaa", shifts = [1,2,3] output: "gfd" constraints: 1 <= s.length <= 105 s consists of lowercase english letters. shifts.length == s.length 0 <= shifts[i] <= 109
are given an n x n binary matrix grid. you are allowed to change at most one 0 to be 1. return the size of the largest island in grid after applying this operation. an island is a 4-directionally connected group of 1s. example 1: input: grid = [[1,0],[0,1]] output: 3 explanation: change one 0 to 1 and connect two 1s, then we get an island with area = 3. example 2: input: grid = [[1,1],[1,0]] output: 4 explanation: change the 0 to 1 and make the island bigger, only one island with area = 4. example 3: input: grid = [[1,1],[1,1]] output: 4 explanation: can't change any 0 to 1, only one island with area = 4. constraints: n == grid.length n == grid[i].length 1 <= n <= 500 grid[i][j] is either 0 or 1.
schema table: patients +--------------+---------+ | column name | type | +--------------+---------+ | patient_id | int | | patient_name | varchar | | conditions | varchar | +--------------+---------+ patient_id is the primary key for this table. 'conditions' contains 0 or more code separated by spaces. this table contains information of the patients in the hospital. write an sql query to report the patient_id, patient_name and conditions of the patients who have type i diabetes. type i diabetes always starts with diab1 prefix. return the result table in any order. the query result format is in the following example. example 1: input: patients table: +------------+--------------+--------------+ | patient_id | patient_name | conditions | +------------+--------------+--------------+ | 1 | daniel | yfev cough | | 2 | alice | | | 3 | bob | diab100 myop | | 4 | george | acne diab100 | | 5 | alain | diab201 | +------------+--------------+--------------+ output: +------------+--------------+--------------+ | patient_id | patient_name | conditions | +------------+--------------+--------------+ | 3 | bob | diab100 myop | | 4 | george | acne diab100 | +------------+--------------+--------------+ explanation: bob and george both have a condition that starts with diab1.
an integer n, return a string with n characters such that each character in such string occurs an odd number of times. the returned string must contain only lowercase english letters. if there are multiples valid strings, return any of them. example 1: input: n = 4 output: "pppz" explanation: "pppz" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. note that there are many other valid strings such as "ohhh" and "love". example 2: input: n = 2 output: "xy" explanation: "xy" is a valid string since the characters 'x' and 'y' occur once. note that there are many other valid strings such as "ag" and "ur". example 3: input: n = 7 output: "holasss" constraints: 1 <= n <= 500
factorial of a positive integer n is the product of all positive integers less than or equal to n. for example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1. we make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order. for example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1. however, these operations are still applied using the usual order of operations of arithmetic. we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. additionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11. given an integer n, return the clumsy factorial of n. example 1: input: n = 4 output: 7 explanation: 7 = 4 * 3 / 2 + 1 example 2: input: n = 10 output: 12 explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1 constraints: 1 <= n <= 104
are given a 0-indexed 2d integer array transactions, where transactions[i] = [costi, cashbacki]. the array describes transactions, where each transaction must be completed exactly once in some order. at any given moment, you have a certain amount of money. in order to complete transaction i, money >= costi must hold true. after performing a transaction, money becomes money - costi + cashbacki. return the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions. example 1: input: transactions = [[2,1],[5,0],[4,2]] output: 10 explanation: starting with money = 10, the transactions can be performed in any order. it can be shown that starting with money < 10 will fail to complete all transactions in some order. example 2: input: transactions = [[3,0],[0,3]] output: 3 explanation: - if transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3. - if transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0. thus, starting with money = 3, the transactions can be performed in any order. constraints: 1 <= transactions.length <= 105 transactions[i].length == 2 0 <= costi, cashbacki <= 109
the heads of two singly linked-lists heada and headb, return the node at which the two lists intersect. if the two linked lists have no intersection at all, return null. for example, the following two linked lists begin to intersect at node c1: the test cases are generated such that there are no cycles anywhere in the entire linked structure. note that the linked lists must retain their original structure after the function returns. custom judge: the inputs to the judge are given as follows (your program is not given these inputs): intersectval - the value of the node where the intersection occurs. this is 0 if there is no intersected node. lista - the first linked list. listb - the second linked list. skipa - the number of nodes to skip ahead in lista (starting from the head) to get to the intersected node. skipb - the number of nodes to skip ahead in listb (starting from the head) to get to the intersected node. the judge will then create the linked structure based on these inputs and pass the two heads, heada and headb to your program. if you correctly return the intersected node, then your solution will be accepted. example 1: input: intersectval = 8, lista = [4,1,8,4,5], listb = [5,6,1,8,4,5], skipa = 2, skipb = 3 output: intersected at '8' explanation: the intersected node's value is 8 (note that this must not be 0 if the two lists intersect). from the head of a, it reads as [4,1,8,4,5]. from the head of b, it reads as [5,6,1,8,4,5]. there are 2 nodes before the intersected node in a; there are 3 nodes before the intersected node in b. - note that the intersected node's value is not 1 because the nodes with value 1 in a and b (2nd node in a and 3rd node in b) are different node references. in other words, they point to two different locations in memory, while the nodes with value 8 in a and b (3rd node in a and 4th node in b) point to the same location in memory. example 2: input: intersectval = 2, lista = [1,9,1,2,4], listb = [3,2,4], skipa = 3, skipb = 1 output: intersected at '2' explanation: the intersected node's value is 2 (note that this must not be 0 if the two lists intersect). from the head of a, it reads as [1,9,1,2,4]. from the head of b, it reads as [3,2,4]. there are 3 nodes before the intersected node in a; there are 1 node before the intersected node in b. example 3: input: intersectval = 0, lista = [2,6,4], listb = [1,5], skipa = 3, skipb = 2 output: no intersection explanation: from the head of a, it reads as [2,6,4]. from the head of b, it reads as [1,5]. since the two lists do not intersect, intersectval must be 0, while skipa and skipb can be arbitrary values. explanation: the two lists do not intersect, so return null. constraints: the number of nodes of lista is in the m. the number of nodes of listb is in the n. 1 <= m, n <= 3 * 104 1 <= node.val <= 105 0 <= skipa < m 0 <= skipb < n intersectval is 0 if lista and listb do not intersect. intersectval == lista[skipa] == listb[skipb] if lista and listb intersect. follow up: could you write a solution that runs in o(m + n) time and use only o(1) memory?
are given an array of k linked-lists lists, each linked-list is sorted in ascending order. merge all the linked-lists into one sorted linked-list and return it. example 1: input: lists = [[1,4,5],[1,3,4],[2,6]] output: [1,1,2,3,4,4,5,6] explanation: the linked-lists are: [ 1->4->5, 1->3->4, 2->6 ] merging them into one sorted list: 1->1->2->3->4->4->5->6 example 2: input: lists = [] output: [] example 3: input: lists = [[]] output: [] constraints: k == lists.length 0 <= k <= 104 0 <= lists[i].length <= 500 -104 <= lists[i][j] <= 104 lists[i] is sorted in ascending order. the sum of lists[i].length will not exceed 104.
a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s. return the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. since the answer may be too large, return it modulo 109 + 7. example 1: input: s = "10101" output: 4 explanation: there are four ways to split s in 3 parts where each part contain the same number of letters '1'. "1|010|1" "1|01|01" "10|10|1" "10|1|01" example 2: input: s = "1001" output: 0 example 3: input: s = "0000" output: 3 explanation: there are three ways to split s in 3 parts. "0|0|00" "0|00|0" "00|0|0" constraints: 3 <= s.length <= 105 s[i] is either '0' or '1'.
a string s. return all the words vertically in the same order in which they appear in s. words are returned as a list of strings, complete with spaces when is necessary. (trailing spaces are not allowed). each word would be put on only one column and that in one column there will be only one word. example 1: input: s = "how are you" output: ["hay","oro","weu"] explanation: each word is printed vertically. "hay" "oro" "weu" example 2: input: s = "to be or not to be" output: ["tbontb","oerooe"," t"] explanation: trailing spaces is not allowed. "tbontb" "oerooe" " t" example 3: input: s = "contest is coming" output: ["cic","oso","n m","t i","e n","s g","t"] constraints: 1 <= s.length <= 200 s contains only upper case english letters. it's guaranteed that there is only one space between 2 words.
is a strange printer with the following two special requirements: on each turn, the printer will print a solid rectangular pattern of a single color on the grid. this will cover up the existing colors in the rectangle. once the printer has used a color for the above operation, the same color cannot be used again. you are given a m x n matrix targetgrid, where targetgrid[row][col] is the color in the position (row, col) of the grid. return true if it is possible to print the matrix targetgrid, otherwise, return false. example 1: input: targetgrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]] output: true example 2: input: targetgrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]] output: true example 3: input: targetgrid = [[1,2,1],[2,1,2],[1,2,1]] output: false explanation: it is impossible to form targetgrid because it is not allowed to print the same color in different turns. constraints: m == targetgrid.length n == targetgrid[i].length 1 <= m, n <= 60 1 <= targetgrid[row][col] <= 60
an integer n, return a list of all possible full binary trees with n nodes. each node of each tree in the answer must have node.val == 0. each element of the answer is the root node of one possible tree. you may return the final list of trees in any order. a full binary tree is a binary tree where each node has exactly 0 or 2 children. example 1: input: n = 7 output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]] example 2: input: n = 3 output: [[0,0,0]] constraints: 1 <= n <= 20
a rectangular pizza represented as a rows x cols matrix containing the following characters: 'a' (an apple) and '.' (empty cell) and given the integer k. you have to cut the pizza into k pieces using k-1 cuts. for each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. if you cut the pizza vertically, give the left part of the pizza to a person. if you cut the pizza horizontally, give the upper part of the pizza to a person. give the last piece of pizza to the last person. return the number of ways of cutting the pizza such that each piece contains at least one apple. since the answer can be a huge number, return this modulo 10^9 + 7. example 1: input: pizza = ["a..","aaa","..."], k = 3 output: 3 explanation: the figure above shows the three ways to cut the pizza. note that pieces must contain at least one apple. example 2: input: pizza = ["a..","aa.","..."], k = 3 output: 1 example 3: input: pizza = ["a..","a..","..."], k = 1 output: 1 constraints: 1 <= rows, cols <= 50 rows == pizza.length cols == pizza[i].length 1 <= k <= 10 pizza consists of characters 'a' and '.' only.
an integer array nums and an integer k, return true if nums has a good subarray or false otherwise. a good subarray is a subarray where: its length is at least two, and the sum of the elements of the subarray is a multiple of k. note that: a subarray is a contiguous part of the array. an integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k. example 1: input: nums = [23,2,4,6,7], k = 6 output: true explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6. example 2: input: nums = [23,2,6,4,7], k = 6 output: true explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42. 42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer. example 3: input: nums = [23,2,6,4,7], k = 13 output: false constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 0 <= sum(nums[i]) <= 231 - 1 1 <= k <= 231 - 1
are given a rectangular cake of size h x w and two arrays of integers horizontalcuts and verticalcuts where: horizontalcuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and verticalcuts[j] is the distance from the left of the rectangular cake to the jth vertical cut. return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalcuts and verticalcuts. since the answer can be a large number, return this modulo 109 + 7. example 1: input: h = 5, w = 4, horizontalcuts = [1,2,4], verticalcuts = [1,3] output: 4 explanation: the figure above represents the given rectangular cake. red lines are the horizontal and vertical cuts. after you cut the cake, the green piece of cake has the maximum area. example 2: input: h = 5, w = 4, horizontalcuts = [3,1], verticalcuts = [1] output: 6 explanation: the figure above represents the given rectangular cake. red lines are the horizontal and vertical cuts. after you cut the cake, the green and yellow pieces of cake have the maximum area. example 3: input: h = 5, w = 4, horizontalcuts = [3], verticalcuts = [3] output: 9 constraints: 2 <= h, w <= 109 1 <= horizontalcuts.length <= min(h - 1, 105) 1 <= verticalcuts.length <= min(w - 1, 105) 1 <= horizontalcuts[i] < h 1 <= verticalcuts[i] < w all the elements in horizontalcuts are distinct. all the elements in verticalcuts are distinct.
are given a personal information string s, representing either an email address or a phone number. return the masked personal information using the below rules. email address: an email address is: a name consisting of uppercase and lowercase english letters, followed by the '@' symbol, followed by the domain consisting of uppercase and lowercase english letters with a dot '.' somewhere in the middle (not the first or last character). to mask an email: the uppercase letters in the name and domain must be converted to lowercase letters. the middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks "*****". phone number: a phone number is formatted as follows: the phone number contains 10-13 digits. the last 10 digits make up the local number. the remaining 0-3 digits, in the beginning, make up the country code. separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way. to mask a phone number: remove all separation characters. the masked phone number should have the form: "***-***-xxxx" if the country code has 0 digits. "+*-***-***-xxxx" if the country code has 1 digit. "+**-***-***-xxxx" if the country code has 2 digits. "+***-***-***-xxxx" if the country code has 3 digits. "xxxx" is the last 4 digits of the local number. example 1: input: s = "leetcode@leetcode.com" output: "l*****e@leetcode.com" explanation: s is an email address. the name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks. example 2: input: s = "ab@qq.com" output: "a*****b@qq.com" explanation: s is an email address. the name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks. note that even though "ab" is 2 characters, it still must have 5 asterisks in the middle. example 3: input: s = "1(234)567-890" output: "***-***-7890" explanation: s is a phone number. there are 10 digits, so the local number is 10 digits and the country code is 0 digits. thus, the resulting masked number is "***-***-7890". constraints: s is either a valid email or a phone number. if s is an email: 8 <= s.length <= 40 s consists of uppercase and lowercase english letters and exactly one '@' symbol and '.' symbol. if s is a phone number: 10 <= s.length <= 20 s consists of digits, spaces, and the symbols '(', ')', '-', and '+'.
are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. merge nums1 and nums2 into a single array sorted in non-decreasing order. the final sorted array should not be returned by the function, but instead be stored inside the array nums1. to accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. example 1: input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 output: [1,2,2,3,5,6] explanation: the arrays we are merging are [1,2,3] and [2,5,6]. the result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. example 2: input: nums1 = [1], m = 1, nums2 = [], n = 0 output: [1] explanation: the arrays we are merging are [1] and []. the result of the merge is [1]. example 3: input: nums1 = [0], m = 0, nums2 = [1], n = 1 output: [1] explanation: the arrays we are merging are [] and [1]. the result of the merge is [1]. note that because m = 0, there are no elements in nums1. the 0 is only there to ensure the merge result can fit in nums1. constraints: nums1.length == m + n nums2.length == n 0 <= m, n <= 200 1 <= m + n <= 200 -109 <= nums1[i], nums2[j] <= 109 follow up: can you come up with an algorithm that runs in o(m + n) time?
an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. if it is impossible to form any triangle of a non-zero area, return 0. example 1: input: nums = [2,1,2] output: 5 explanation: you can form a triangle with three side lengths: 1, 2, and 2. example 2: input: nums = [1,2,1,10] output: 0 explanation: you cannot use the side lengths 1, 1, and 2 to form a triangle. you cannot use the side lengths 1, 1, and 10 to form a triangle. you cannot use the side lengths 1, 2, and 10 to form a triangle. as we cannot use any three side lengths to form a triangle of non-zero area, we return 0. constraints: 3 <= nums.length <= 104 1 <= nums[i] <= 106
are given the root of a full binary tree with the following properties: leaf nodes have either the value 0 or 1, where 0 represents false and 1 represents true. non-leaf nodes have either the value 2 or 3, where 2 represents the boolean or and 3 represents the boolean and. the evaluation of a node is as follows: if the node is a leaf node, the evaluation is the value of the node, i.e. true or false. otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations. return the boolean result of evaluating the root node. a full binary tree is a binary tree where each node has either 0 or 2 children. a leaf node is a node that has zero children. example 1: input: root = [2,1,3,null,null,0,1] output: true explanation: the above diagram illustrates the evaluation process. the and node evaluates to false and true = false. the or node evaluates to true or false = true. the root node evaluates to true, so we return true. example 2: input: root = [0] output: false explanation: the root node is a leaf node and it evaluates to false, so we return false. constraints: the number of nodes in the tree is in the range [1, 1000]. 0 <= node.val <= 3 every node has either 0 or 2 children. leaf nodes have a value of 0 or 1. non-leaf nodes have a value of 2 or 3.
two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. the overall run time complexity should be o(log (m+n)). example 1: input: nums1 = [1,3], nums2 = [2] output: 2.00000 explanation: merged array = [1,2,3] and median is 2. example 2: input: nums1 = [1,2], nums2 = [3,4] output: 2.50000 explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. constraints: nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -106 <= nums1[i], nums2[i] <= 106
binary strings are binary strings with the following two properties: the number of 0's is equal to the number of 1's. every prefix of the binary string has at least as many 1's as 0's. you are given a special binary string s. a move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string. return the lexicographically largest resulting string possible after applying the mentioned operations on the string. example 1: input: s = "11011000" output: "11100100" explanation: the strings "10" [occuring at s[1]] and "1100" [at s[3]] are swapped. this is the lexicographically largest string possible after some number of swaps. example 2: input: s = "10" output: "10" constraints: 1 <= s.length <= 50 s[i] is either '0' or '1'. s is a special binary string.
have k lists of sorted integers in non-decreasing order. find the smallest range that includes at least one number from each of the k lists. we define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c. example 1: input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]] output: [20,24] explanation: list 1: [4, 10, 15, 24,26], 24 is in range [20,24]. list 2: [0, 9, 12, 20], 20 is in range [20,24]. list 3: [5, 18, 22, 30], 22 is in range [20,24]. example 2: input: nums = [[1,2,3],[1,2,3],[1,2,3]] output: [1,1] constraints: nums.length == k 1 <= k <= 3500 1 <= nums[i].length <= 50 -105 <= nums[i][j] <= 105 nums[i] is sorted in non-decreasing order.
is a set of n items. you are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively. you are also given two integers numwanted and uselimit. choose a subset s of the n elements such that: the size of the subset s is less than or equal to numwanted. there are at most uselimit items with the same label in s. the score of a subset is the sum of the values in the subset. return the maximum score of a subset s. example 1: input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numwanted = 3, uselimit = 1 output: 9 explanation: the subset chosen is the first, third, and fifth items. example 2: input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numwanted = 3, uselimit = 2 output: 12 explanation: the subset chosen is the first, second, and third items. example 3: input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numwanted = 3, uselimit = 1 output: 16 explanation: the subset chosen is the first and fourth items. constraints: n == values.length == labels.length 1 <= n <= 2 * 104 0 <= values[i], labels[i] <= 2 * 104 1 <= numwanted, uselimit <= n
a m x n binary matrix mat. in one step, you can choose one cell and flip it and all the four neighbors of it if they exist (flip is changing 1 to 0 and 0 to 1). a pair of cells are called neighbors if they share one edge. return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot. a binary matrix is a matrix with all cells equal to 0 or 1 only. a zero matrix is a matrix with all cells equal to 0. example 1: input: mat = [[0,0],[0,1]] output: 3 explanation: one possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown. example 2: input: mat = [[0]] output: 0 explanation: given matrix is a zero matrix. we do not need to change it. example 3: input: mat = [[1,0,0],[1,0,0]] output: -1 explanation: given matrix cannot be a zero matrix. constraints: m == mat.length n == mat[i].length 1 <= m, n <= 3 mat[i][j] is either 0 or 1.
are given an m x n matrix of characters box representing a side-view of a box. each cell of the box is one of the following: a stone '#' a stationary obstacle '*' empty '.' the box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions. it is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box. return an n x m matrix representing the box after the rotation described above. example 1: input: box = [["#",".","#"]] output: [["."], ["#"], ["#"]] example 2: input: box = [["#",".","*","."], ["#","#","*","."]] output: [["#","."], ["#","#"], ["*","*"], [".","."]] example 3: input: box = [["#","#","*",".","*","."], ["#","#","#","*",".","."], ["#","#","#",".","#","."]] output: [[".","#","#"], [".","#","#"], ["#","#","*"], ["#","*","."], ["#",".","*"], ["#",".","."]] constraints: m == box.length n == box[i].length 1 <= m, n <= 500 box[i][j] is either '#', '*', or '.'.
integer has sequential digits if and only if each digit in the number is one more than the previous digit. return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits. example 1: input: low = 100, high = 300 output: [123,234] example 2: input: low = 1000, high = 13000 output: [1234,2345,3456,4567,5678,6789,12345] constraints: 10 <= low <= high <= 10^9
are given a string s. an awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome. return the length of the maximum length awesome substring of s. example 1: input: s = "3242415" output: 5 explanation: "24241" is the longest awesome substring, we can form the palindrome "24142" with some swaps. example 2: input: s = "12345678" output: 1 example 3: input: s = "213123" output: 6 explanation: "213123" is the longest awesome substring, we can form the palindrome "231132" with some swaps. constraints: 1 <= s.length <= 105 s consists only of digits.
are n piles of coins on a table. each pile consists of a positive number of coins of assorted denominations. in one move, you can choose any coin on top of any pile, remove it, and add it to your wallet. given a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally. example 1: input: piles = [[1,100,3],[7,8,9]], k = 2 output: 101 explanation: the above diagram shows the different ways we can choose k coins. the maximum total we can obtain is 101. example 2: input: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7 output: 706 explanation: the maximum total can be obtained if we choose all coins from the last pile. constraints: n == piles.length 1 <= n <= 1000 1 <= piles[i][j] <= 105 1 <= k <= sum(piles[i].length) <= 2000
are given an integer array nums (0-indexed). in one operation, you can choose an element of the array and increment it by 1. for example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3]. return the minimum number of operations needed to make nums strictly increasing. an array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. an array of length 1 is trivially strictly increasing. example 1: input: nums = [1,1,1] output: 3 explanation: you can do the following operations: 1) increment nums[2], so nums becomes [1,1,2]. 2) increment nums[1], so nums becomes [1,2,2]. 3) increment nums[2], so nums becomes [1,2,3]. example 2: input: nums = [1,5,2,4,1] output: 14 example 3: input: nums = [8] output: 0 constraints: 1 <= nums.length <= 5000 1 <= nums[i] <= 104
a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums. the next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. if it doesn't exist, return -1 for this number. example 1: input: nums = [1,2,1] output: [2,-1,2] explanation: the first 1's next greater number is 2; the number 2 can't find next greater number. the second 1's next greater number needs to search circularly, which is also 2. example 2: input: nums = [1,2,3,4,3] output: [2,3,4,-1,4] constraints: 1 <= nums.length <= 104 -109 <= nums[i] <= 109
company is planning to interview 2n people. given the array costs where costs[i] = [acosti, bcosti], the cost of flying the ith person to city a is acosti, and the cost of flying the ith person to city b is bcosti. return the minimum cost to fly every person to a city such that exactly n people arrive in each city. example 1: input: costs = [[10,20],[30,200],[400,50],[30,20]] output: 110 explanation: the first person goes to city a for a cost of 10. the second person goes to city a for a cost of 30. the third person goes to city b for a cost of 50. the fourth person goes to city b for a cost of 20. the total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city. example 2: input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] output: 1859 example 3: input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]] output: 3086 constraints: 2 * n == costs.length 2 <= costs.length <= 100 costs.length is even. 1 <= acosti, bcosti <= 1000
a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once. example 1: input: s = "bcabc" output: "abc" example 2: input: s = "cbacdcbc" output: "acdb" constraints: 1 <= s.length <= 1000 s consists of lowercase english letters. note: this question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/
an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. if there is no answer return an empty string. since the answer may not fit in an integer data type, return the answer as a string. note that the returning answer must not contain unnecessary leading zeros. example 1: input: digits = [8,1,9] output: "981" example 2: input: digits = [8,6,7,1,0] output: "8760" example 3: input: digits = [1] output: "" constraints: 1 <= digits.length <= 104 0 <= digits[i] <= 9
are given a 2d matrix of size m x n, consisting of non-negative integers. you are also given an integer k. the value of coordinate (a, b) of the matrix is the xor of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed). find the kth largest value (1-indexed) of all the coordinates of matrix. example 1: input: matrix = [[5,2],[1,6]], k = 1 output: 7 explanation: the value of coordinate (0,1) is 5 xor 2 = 7, which is the largest value. example 2: input: matrix = [[5,2],[1,6]], k = 2 output: 5 explanation: the value of coordinate (0,0) is 5 = 5, which is the 2nd largest value. example 3: input: matrix = [[5,2],[1,6]], k = 3 output: 4 explanation: the value of coordinate (1,0) is 5 xor 1 = 4, which is the 3rd largest value. constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 1000 0 <= matrix[i][j] <= 106 1 <= k <= m * n
undirected graph of n nodes is defined by edgelist, where edgelist[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. note that there may be multiple edges between two nodes. given an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj . return a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise. example 1: input: n = 3, edgelist = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]] output: [false,true] explanation: the above figure shows the given graph. note that there are two overlapping edges between 0 and 1 with distances 2 and 16. for the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query. for the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query. example 2: input: n = 5, edgelist = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]] output: [true,false] explanation: the above figure shows the given graph. constraints: 2 <= n <= 105 1 <= edgelist.length, queries.length <= 105 edgelist[i].length == 3 queries[j].length == 3 0 <= ui, vi, pj, qj <= n - 1 ui != vi pj != qj 1 <= disi, limitj <= 109 there may be multiple edges between two nodes.
are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. note that no word is both positive and negative. initially every student has 0 points. each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1. you are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the id of the student who has received the feedback report report[i]. the id of each student is unique. given an integer k, return the top k students after ranking them in non-increasing order by their points. in case more than one student has the same points, the one with the lower id ranks higher. example 1: input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is studious","the student is smart"], student_id = [1,2], k = 2 output: [1,2] explanation: both the students have 1 positive feedback and 3 points but since student 1 has a lower id he ranks higher. example 2: input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is not studious","the student is smart"], student_id = [1,2], k = 2 output: [2,1] explanation: - the student with id 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. - the student with id 2 has 1 positive feedback, so he has 3 points. since student 2 has more points, [2,1] is returned. constraints: 1 <= positive_feedback.length, negative_feedback.length <= 104 1 <= positive_feedback[i].length, negative_feedback[j].length <= 100 both positive_feedback[i] and negative_feedback[j] consists of lowercase english letters. no word is present in both positive_feedback and negative_feedback. n == report.length == student_id.length 1 <= n <= 104 report[i] consists of lowercase english letters and spaces ' '. there is a single space between consecutive words of report[i]. 1 <= report[i].length <= 100 1 <= student_id[i] <= 109 all the values of student_id[i] are unique. 1 <= k <= n
a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. the occurrences may overlap. return any duplicated substring that has the longest possible length. if s does not have a duplicated substring, the answer is "". example 1: input: s = "banana" output: "ana" example 2: input: s = "abcd" output: "" constraints: 2 <= s.length <= 3 * 104 s consists of lowercase english letters.
are given two positive 0-indexed integer arrays nums1 and nums2, both of length n. the sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n. you are also given two positive integers k1 and k2. you can modify any of the elements of nums1 by +1 or -1 at most k1 times. similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times. return the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times. note: you are allowed to modify the array elements to become negative integers. example 1: input: nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0 output: 579 explanation: the elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. the sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2 = 579. example 2: input: nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1 output: 43 explanation: one way to obtain the minimum sum of square difference is: - increase nums1[0] once. - increase nums2[2] once. the minimum of the sum of square difference will be: (2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2 = 43. note that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43. constraints: n == nums1.length == nums2.length 1 <= n <= 105 0 <= nums1[i], nums2[i] <= 105 0 <= k1, k2 <= 109
thief has found himself a new place for his thievery again. there is only one entrance to this area, called root. besides the root, each house has one and only one parent house. after a tour, the smart thief realized that all houses in this place form a binary tree. it will automatically contact the police if two directly-linked houses were broken into on the same night. given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police. example 1: input: root = [3,2,3,null,3,null,1] output: 7 explanation: maximum amount of money the thief can rob = 3 + 3 + 1 = 7. example 2: input: root = [3,4,5,1,3,null,1] output: 9 explanation: maximum amount of money the thief can rob = 4 + 5 = 9. constraints: the number of nodes in the tree is in the range [1, 104]. 0 <= node.val <= 104
two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator. the integer division should truncate toward zero, which means losing its fractional part. for example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2. return the quotient after dividing dividend by divisor. note: assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. for this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231. example 1: input: dividend = 10, divisor = 3 output: 3 explanation: 10/3 = 3.33333.. which is truncated to 3. example 2: input: dividend = 7, divisor = -3 output: -2 explanation: 7/-3 = -2.33333.. which is truncated to -2. constraints: -231 <= dividend, divisor <= 231 - 1 divisor != 0
the root of a binary tree, return the leftmost value in the last row of the tree. example 1: input: root = [2,1,3] output: 1 example 2: input: root = [1,2,3,4,null,5,6,null,null,7] output: 7 constraints: the number of nodes in the tree is in the range [1, 104]. -231 <= node.val <= 231 - 1
two strings text1 and text2, return the length of their longest common subsequence. if there is no common subsequence, return 0. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, "ace" is a subsequence of "abcde". a common subsequence of two strings is a subsequence that is common to both strings. example 1: input: text1 = "abcde", text2 = "ace" output: 3 explanation: the longest common subsequence is "ace" and its length is 3. example 2: input: text1 = "abc", text2 = "abc" output: 3 explanation: the longest common subsequence is "abc" and its length is 3. example 3: input: text1 = "abc", text2 = "def" output: 0 explanation: there is no such common subsequence, so the result is 0. constraints: 1 <= text1.length, text2.length <= 1000 text1 and text2 consist of only lowercase english characters.
are given a 0-indexed string array words, where words[i] consists of lowercase english letters. in one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. keep performing this operation as long as you can select an index that satisfies the conditions. return words after performing all operations. it can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. for example, "dacb" is an anagram of "abdc". example 1: input: words = ["abba","baba","bbaa","cd","cd"] output: ["abba","cd"] explanation: one of the ways we can obtain the resultant array is by using the following operations: - since words[2] = "bbaa" and words[1] = "baba" are anagrams, we choose index 2 and delete words[2]. now words = ["abba","baba","cd","cd"]. - since words[1] = "baba" and words[0] = "abba" are anagrams, we choose index 1 and delete words[1]. now words = ["abba","cd","cd"]. - since words[2] = "cd" and words[1] = "cd" are anagrams, we choose index 2 and delete words[2]. now words = ["abba","cd"]. we can no longer perform any operations, so ["abba","cd"] is the final answer. example 2: input: words = ["a","b","c","d","e"] output: ["a","b","c","d","e"] explanation: no two adjacent strings in words are anagrams of each other, so no operations are performed. constraints: 1 <= words.length <= 100 1 <= words[i].length <= 10 words[i] consists of lowercase english letters.
is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. you are given a 2d array graph, where graph[u] is an array of nodes that node u is adjacent to. more formally, for each v in graph[u], there is an undirected edge between node u and node v. the graph has the following properties: there are no self-edges (graph[u] does not contain u). there are no parallel edges (graph[u] does not contain duplicate values). if v is in graph[u], then u is in graph[v] (the graph is undirected). the graph may not be connected, meaning there may be two nodes u and v such that there is no path between them. a graph is bipartite if the nodes can be partitioned into two independent sets a and b such that every edge in the graph connects a node in set a and a node in set b. return true if and only if it is bipartite. example 1: input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]] output: false explanation: there is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other. example 2: input: graph = [[1,3],[0,2],[1,3],[0,2]] output: true explanation: we can partition the nodes into two sets: {0, 2} and {1, 3}. constraints: graph.length == n 1 <= n <= 100 0 <= graph[u].length < n 0 <= graph[u][i] <= n - 1 graph[u] does not contain u. all the values of graph[u] are unique. if graph[u] contains v, then graph[v] contains u.
is a sweltering summer day, and a boy wants to buy some ice cream bars. at the store, there are n ice cream bars. you are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. the boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. note: the boy can buy the ice cream bars in any order. return the maximum number of ice cream bars the boy can buy with coins coins. you must solve the problem by counting sort. example 1: input: costs = [1,3,2,4,1], coins = 7 output: 4 explanation: the boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7. example 2: input: costs = [10,6,8,7,7,8], coins = 5 output: 0 explanation: the boy cannot afford any of the ice cream bars. example 3: input: costs = [1,6,3,1,2,5], coins = 20 output: 6 explanation: the boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18. constraints: costs.length == n 1 <= n <= 105 1 <= costs[i] <= 105 1 <= coins <= 108
parentheses string is a non-empty string consisting only of '(' and ')'. it is valid if any of the following conditions is true: it is (). it can be written as ab (a concatenated with b), where a and b are valid parentheses strings. it can be written as (a), where a is a valid parentheses string. you are given an m x n matrix of parentheses grid. a valid parentheses string path in the grid is a path satisfying all of the following conditions: the path starts from the upper left cell (0, 0). the path ends at the bottom-right cell (m - 1, n - 1). the path only ever moves down or right. the resulting parentheses string formed by the path is valid. return true if there exists a valid parentheses string path in the grid. otherwise, return false. example 1: input: grid = [["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]] output: true explanation: the above diagram shows two possible paths that form valid parentheses strings. the first path shown results in the valid parentheses string "()(())". the second path shown results in the valid parentheses string "((()))". note that there may be other valid parentheses string paths. example 2: input: grid = [[")",")"],["(","("]] output: false explanation: the two possible paths form the parentheses strings "))(" and ")((". since neither of them are valid parentheses strings, we return false. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 grid[i][j] is either '(' or ')'.
have n super washing machines on a line. initially, each washing machine has some dresses or is empty. for each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time. given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. if it is not possible to do it, return -1. example 1: input: machines = [1,0,5] output: 3 explanation: 1st move: 1 0 <-- 5 => 1 1 4 2nd move: 1 <-- 1 <-- 4 => 2 1 3 3rd move: 2 1 <-- 3 => 2 2 2 example 2: input: machines = [0,3,0] output: 2 explanation: 1st move: 0 <-- 3 0 => 1 2 0 2nd move: 1 2 --> 0 => 1 1 1 example 3: input: machines = [0,2,0] output: -1 explanation: it's impossible to make all three washing machines have the same number of dresses. constraints: n == machines.length 1 <= n <= 104 0 <= machines[i] <= 105
a binary array nums, you should delete one element from it. return the size of the longest non-empty subarray containing only 1's in the resulting array. return 0 if there is no such subarray. example 1: input: nums = [1,1,0,1] output: 3 explanation: after deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's. example 2: input: nums = [0,1,1,1,0,1,1,0,1] output: 5 explanation: after deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]. example 3: input: nums = [1,1,1] output: 2 explanation: you must delete one element. constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.
the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed. a subtree of a node node is node plus every node that is a descendant of node. example 1: input: root = [1,null,0,0,1] output: [1,null,0,null,1] explanation: only the red nodes satisfy the property "every subtree not containing a 1". the diagram on the right represents the answer. example 2: input: root = [1,0,1,0,0,0,1] output: [1,null,1,null,1] example 3: input: root = [1,1,0,1,1,0,1,0] output: [1,1,0,1,1,null,1] constraints: the number of nodes in the tree is in the range [1, 200]. node.val is either 0 or 1.
a string formula representing a chemical formula, return the count of each atom. the atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name. one or more digits representing that element's count may follow if the count is greater than 1. if the count is 1, no digits will follow. for example, "h2o" and "h2o2" are possible, but "h1o2" is impossible. two formulas are concatenated together to produce another formula. for example, "h2o2he3mg4" is also a formula. a formula placed in parentheses, and a count (optionally added) is also a formula. for example, "(h2o2)" and "(h2o2)3" are formulas. return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on. the test cases are generated so that all the values in the output fit in a 32-bit integer. example 1: input: formula = "h2o" output: "h2o" explanation: the count of elements are {'h': 2, 'o': 1}. example 2: input: formula = "mg(oh)2" output: "h2mgo2" explanation: the count of elements are {'h': 2, 'mg': 1, 'o': 2}. example 3: input: formula = "k4(on(so3)2)2" output: "k4n2o14s4" explanation: the count of elements are {'k': 4, 'n': 2, 'o': 14, 's': 4}. constraints: 1 <= formula.length <= 1000 formula consists of english letters, digits, '(', and ')'. formula is always valid.
an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference. a subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements. example 1: input: arr = [1,2,3,4], difference = 1 output: 4 explanation: the longest arithmetic subsequence is [1,2,3,4]. example 2: input: arr = [1,3,5,7], difference = 1 output: 1 explanation: the longest arithmetic subsequence is any single element. example 3: input: arr = [1,5,7,8,5,3,4,2,1], difference = -2 output: 4 explanation: the longest arithmetic subsequence is [7,5,3,1]. constraints: 1 <= arr.length <= 105 -104 <= arr[i], difference <= 104
are given an integer n and an integer start. define an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length. return the bitwise xor of all elements of nums. example 1: input: n = 5, start = 0 output: 8 explanation: array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8. where "^" corresponds to bitwise xor operator. example 2: input: n = 4, start = 3 output: 8 explanation: array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8. constraints: 1 <= n <= 1000 0 <= start <= 1000 n == nums.length
and bob take turns playing a game, with alice starting first. initially, there is a number n on the chalkboard. on each player's turn, that player makes a move consisting of: choosing any x with 0 < x < n and n % x == 0. replacing the number n on the chalkboard with n - x. also, if a player cannot make a move, they lose the game. return true if and only if alice wins the game, assuming both players play optimally. example 1: input: n = 2 output: true explanation: alice chooses 1, and bob has no more moves. example 2: input: n = 3 output: false explanation: alice chooses 1, bob chooses 1, and alice has no more moves. constraints: 1 <= n <= 1000
a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1. example 1: input: nums = [0,1] output: 2 explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. example 2: input: nums = [0,1,0] output: 2 explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.
the root of an n-ary tree, return the preorder traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples) example 1: input: root = [1,null,3,2,4,null,5,6] output: [1,3,5,6,2,4] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10] constraints: the number of nodes in the tree is in the range [0, 104]. 0 <= node.val <= 104 the height of the n-ary tree is less than or equal to 1000. follow up: recursive solution is trivial, could you do it iteratively?
an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. return the maximized sum. example 1: input: nums = [1,4,3,2] output: 4 explanation: all possible pairings (ignoring the ordering of elements) are: 1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3 2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3 3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4 so the maximum possible sum is 4. example 2: input: nums = [6,2,6,5,1,2] output: 9 explanation: the optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9. constraints: 1 <= n <= 104 nums.length == 2 * n -104 <= nums[i] <= 104
a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). for example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3. when writing such an expression, we adhere to the following conventions: the division operator (/) returns rational numbers. there are no parentheses placed anywhere. we use the usual order of operations: multiplication and division happen before addition and subtraction. it is not allowed to use the unary negation operator (-). for example, "x - x" is a valid expression as it only uses subtraction, but "-x + x" is not because it uses negation. we would like to write an expression with the least number of operators such that the expression equals the given target. return the least number of operators used. example 1: input: x = 3, target = 19 output: 5 explanation: 3 * 3 + 3 * 3 + 3 / 3. the expression contains 5 operations. example 2: input: x = 5, target = 501 output: 8 explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5. the expression contains 8 operations. example 3: input: x = 100, target = 100000000 output: 3 explanation: 100 * 100 * 100 * 100. the expression contains 3 operations. constraints: 2 <= x <= 100 1 <= target <= 2 * 108
string is considered beautiful if it satisfies the following conditions: each of the 5 english vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it. the letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.). for example, strings "aeiou" and "aaaaaaeiiiioou" are considered beautiful, but "uaeio", "aeoiu", and "aaaeeeooo" are not beautiful. given a string word consisting of english vowels, return the length of the longest beautiful substring of word. if no such substring exists, return 0. a substring is a contiguous sequence of characters in a string. example 1: input: word = "aeiaaioaaaaeiiiiouuuooaauuaeiu" output: 13 explanation: the longest beautiful substring in word is "aaaaeiiiiouuu" of length 13. example 2: input: word = "aeeeiiiioooauuuaeiou" output: 5 explanation: the longest beautiful substring in word is "aeiou" of length 5. example 3: input: word = "a" output: 0 explanation: there is no beautiful substring, so return 0. constraints: 1 <= word.length <= 5 * 105 word consists of characters 'a', 'e', 'i', 'o', and 'u'.
an integer num, return a string of its base 7 representation. example 1: input: num = 100 output: "202" example 2: input: num = -7 output: "-10" constraints: -107 <= num <= 107
an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. if there is no such subarray, return -1. a subarray is a contiguous part of an array. example 1: input: nums = [1], k = 1 output: 1 example 2: input: nums = [1,2], k = 4 output: -1 example 3: input: nums = [2,-1,2], k = 3 output: 3 constraints: 1 <= nums.length <= 105 -105 <= nums[i] <= 105 1 <= k <= 109
is a robot on an m x n grid. the robot is initially located at the top-left corner (i.e., grid[0][0]). the robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). the robot can only move either down or right at any point in time. given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner. the test cases are generated so that the answer will be less than or equal to 2 * 109. example 1: input: m = 3, n = 7 output: 28 example 2: input: m = 3, n = 2 output: 3 explanation: from the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. right -> down -> down 2. down -> down -> right 3. down -> right -> down constraints: 1 <= m, n <= 100
a 2d plane, there are n points with integer coordinates points[i] = [xi, yi]. return the minimum time in seconds to visit all the points in the order given by points. you can move according to these rules: in 1 second, you can either: move vertically by one unit, move horizontally by one unit, or move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second). you have to visit the points in the same order as they appear in the array. you are allowed to pass through points that appear later in the order, but these do not count as visits. example 1: input: points = [[1,1],[3,4],[-1,0]] output: 7 explanation: one optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0] time from [1,1] to [3,4] = 3 seconds time from [3,4] to [-1,0] = 4 seconds total time = 7 seconds example 2: input: points = [[3,2],[-2,2]] output: 5 constraints: points.length == n 1 <= n <= 100 points[i].length == 2 -1000 <= points[i][0], points[i][1] <= 1000
have a cubic storeroom where the width, length, and height of the room are all equal to n units. you are asked to place n boxes in this room where each box is a cube of unit side length. there are however some rules to placing the boxes: you can place the boxes anywhere on the floor. if box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall. given an integer n, return the minimum possible number of boxes touching the floor. example 1: input: n = 3 output: 3 explanation: the figure above is for the placement of the three boxes. these boxes are placed in the corner of the room, where the corner is on the left side. example 2: input: n = 4 output: 3 explanation: the figure above is for the placement of the four boxes. these boxes are placed in the corner of the room, where the corner is on the left side. example 3: input: n = 10 output: 6 explanation: the figure above is for the placement of the ten boxes. these boxes are placed in the corner of the room, where the corner is on the back side. constraints: 1 <= n <= 109
are given an array of distinct positive integers locations where locations[i] represents the position of city i. you are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively. at each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. please notice that |x| denotes the absolute value of x. notice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish). return the count of all possible routes from start to finish. since the answer may be too large, return it modulo 109 + 7. example 1: input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5 output: 4 explanation: the following are all possible routes, each uses 5 units of fuel: 1 -> 3 1 -> 2 -> 3 1 -> 4 -> 3 1 -> 4 -> 2 -> 3 example 2: input: locations = [4,3,1], start = 1, finish = 0, fuel = 6 output: 5 explanation: the following are all possible routes: 1 -> 0, used fuel = 1 1 -> 2 -> 0, used fuel = 5 1 -> 2 -> 1 -> 0, used fuel = 5 1 -> 0 -> 1 -> 0, used fuel = 3 1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5 example 3: input: locations = [5,2,1], start = 0, finish = 2, fuel = 3 output: 0 explanation: it is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel. constraints: 2 <= locations.length <= 100 1 <= locations[i] <= 109 all integers in locations are distinct. 0 <= start, finish < locations.length 1 <= fuel <= 200
two strings s and t, your goal is to convert s into t in k moves or less. during the ith (1 <= i <= k) move you can: choose any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times. do nothing. shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). shifting a character by i means applying the shift operations i times. remember that any index j can be picked at most once. return true if it's possible to convert s into t in no more than k moves, otherwise return false. example 1: input: s = "input", t = "ouput", k = 9 output: true explanation: in the 6th move, we shift 'i' 6 times to get 'o'. and in the 7th move we shift 'n' to get 'u'. example 2: input: s = "abc", t = "bcd", k = 10 output: false explanation: we need to shift each character in s one time to convert it into t. we can shift 'a' to 'b' during the 1st move. however, there is no way to shift the other characters in the remaining moves to obtain t from s. example 3: input: s = "aab", t = "bbb", k = 27 output: true explanation: in the 1st move, we shift the first 'a' 1 time to get 'b'. in the 27th move, we shift the second 'a' 27 times to get 'b'. constraints: 1 <= s.length, t.length <= 10^5 0 <= k <= 10^9 s, t contain only lowercase english letters.
are given two identical eggs and you have access to a building with n floors labeled from 1 to n. you know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. in each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves. return the minimum number of moves that you need to determine with certainty what the value of f is. example 1: input: n = 2 output: 2 explanation: we can drop the first egg from floor 1 and the second egg from floor 2. if the first egg breaks, we know that f = 0. if the second egg breaks but the first egg didn't, we know that f = 1. otherwise, if both eggs survive, we know that f = 2. example 2: input: n = 100 output: 14 explanation: one optimal strategy is: - drop the 1st egg at floor 9. if it breaks, we know f is between 0 and 8. drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. total drops is 1 + 8 = 9. - if the 1st egg does not break, drop the 1st egg again at floor 22. if it breaks, we know f is between 9 and 21. drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. total drops is 2 + 12 = 14. - if the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100. regardless of the outcome, it takes at most 14 drops to determine f. constraints: 1 <= n <= 1000
are given a 2d integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range. you are to split ranges into two (possibly empty) groups such that: each range belongs to exactly one group. any two overlapping ranges must belong to the same group. two ranges are said to be overlapping if there exists at least one integer that is present in both ranges. for example, [1, 3] and [2, 5] are overlapping because 2 and 3 occur in both ranges. return the total number of ways to split ranges into two groups. since the answer may be very large, return it modulo 109 + 7. example 1: input: ranges = [[6,10],[5,15]] output: 2 explanation: the two ranges are overlapping, so they must be in the same group. thus, there are two possible ways: - put both the ranges together in group 1. - put both the ranges together in group 2. example 2: input: ranges = [[1,3],[10,20],[2,5],[4,8]] output: 4 explanation: ranges [1,3], and [2,5] are overlapping. so, they must be in the same group. again, ranges [2,5] and [4,8] are also overlapping. so, they must also be in the same group. thus, there are four possible ways to group them: - all the ranges in group 1. - all the ranges in group 2. - ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2. - ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1. constraints: 1 <= ranges.length <= 105 ranges[i].length == 2 0 <= starti <= endi <= 109
have n jobs and m workers. you are given three arrays: difficulty, profit, and worker where: difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]). every worker can be assigned at most one job, but one job can be completed multiple times. for example, if three workers attempt the same job that pays $1, then the total profit will be $3. if a worker cannot complete any job, their profit is $0. return the maximum profit we can achieve after assigning the workers to the jobs. example 1: input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7] output: 100 explanation: workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately. example 2: input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25] output: 0 constraints: n == difficulty.length n == profit.length m == worker.length 1 <= n, m <= 104 1 <= difficulty[i], profit[i], worker[i] <= 105
the root of a binary tree, return the length of the longest path, where each node in the path has the same value. this path may or may not pass through the root. the length of the path between two nodes is represented by the number of edges between them. example 1: input: root = [5,4,5,1,1,null,5] output: 2 explanation: the shown image shows that the longest path of the same value (i.e. 5). example 2: input: root = [1,4,5,4,4,null,5] output: 2 explanation: the shown image shows that the longest path of the same value (i.e. 4). constraints: the number of nodes in the tree is in the range [0, 104]. -1000 <= node.val <= 1000 the depth of the tree will not exceed 1000.
are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to. you have to distribute the money according to the following rules: all money must be distributed. everyone must receive at least 1 dollar. nobody receives 4 dollars. return the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. if there is no way to distribute the money, return -1. example 1: input: money = 20, children = 3 output: 1 explanation: the maximum number of children with 8 dollars will be 1. one of the ways to distribute the money is: - 8 dollars to the first child. - 9 dollars to the second child. - 3 dollars to the third child. it can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1. example 2: input: money = 16, children = 2 output: 2 explanation: each child can be given 8 dollars. constraints: 1 <= money <= 200 2 <= children <= 30
are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. example 1: input: nums = [1,2,3,1] output: 4 explanation: rob house 1 (money = 1) and then rob house 3 (money = 3). total amount you can rob = 1 + 3 = 4. example 2: input: nums = [2,7,9,3,1] output: 12 explanation: rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). total amount you can rob = 2 + 9 + 1 = 12. constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 400
an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them. a grid is said to be valid if all the cells above the main diagonal are zeros. return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid. the main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n). example 1: input: grid = [[0,0,1],[1,1,0],[1,0,0]] output: 3 example 2: input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]] output: -1 explanation: all rows are similar, swaps have no effect on the grid. example 3: input: grid = [[1,0,0],[1,1,0],[1,1,1]] output: 0 constraints: n == grid.length == grid[i].length 1 <= n <= 200 grid[i][j] is either 0 or 1
are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together. we repeatedly make k duplicate removals on s until we no longer can. return the final string after all such duplicate removals have been made. it is guaranteed that the answer is unique. example 1: input: s = "abcd", k = 2 output: "abcd" explanation: there's nothing to delete. example 2: input: s = "deeedbbcccbdaa", k = 3 output: "aa" explanation: first delete "eee" and "ccc", get "ddbbbdaa" then delete "bbb", get "dddaa" finally delete "ddd", get "aa" example 3: input: s = "pbbcggttciiippooaais", k = 2 output: "ps" constraints: 1 <= s.length <= 105 2 <= k <= 104 s only contains lowercase english letters.
have the task of delivering some boxes from storage to their ports using only one ship. however, this ship has a limit on the number of boxes and the total weight that it can carry. you are given an array boxes, where boxes[i] = [portsi, weighti], and three integers portscount, maxboxes, and maxweight. portsi is the port where you need to deliver the ith box and weightsi is the weight of the ith box. portscount is the number of ports. maxboxes and maxweight are the respective box and weight limits of the ship. the boxes need to be delivered in the order they are given. the ship will follow these steps: the ship will take some number of boxes from the boxes queue, not violating the maxboxes and maxweight constraints. for each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. if the ship is already at the correct port, no trip is needed, and the box can immediately be delivered. the ship then makes a return trip to storage to take more boxes from the queue. the ship must end at storage after all the boxes have been delivered. return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports. example 1: input: boxes = [[1,1],[2,1],[1,1]], portscount = 2, maxboxes = 3, maxweight = 3 output: 4 explanation: the optimal strategy is as follows: - the ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips. so the total number of trips is 4. note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box). example 2: input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portscount = 3, maxboxes = 3, maxweight = 6 output: 6 explanation: the optimal strategy is as follows: - the ship takes the first box, goes to port 1, then returns to storage. 2 trips. - the ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips. - the ship takes the fifth box, goes to port 2, then returns to storage. 2 trips. so the total number of trips is 2 + 2 + 2 = 6. example 3: input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portscount = 3, maxboxes = 6, maxweight = 7 output: 6 explanation: the optimal strategy is as follows: - the ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips. - the ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips. - the ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips. so the total number of trips is 2 + 2 + 2 = 6. constraints: 1 <= boxes.length <= 105 1 <= portscount, maxboxes, maxweight <= 105 1 <= portsi <= portscount 1 <= weightsi <= maxweight
are given a 0-indexed integer array nums. you can rearrange the elements of nums to any order (including the given order). let prefix be the array containing the prefix sums of nums after rearranging it. in other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. the score of nums is the number of positive integers in the array prefix. return the maximum score you can achieve. example 1: input: nums = [2,-1,0,1,-3,3,-3] output: 6 explanation: we can rearrange the array into nums = [2,3,1,-1,-3,0,-3]. prefix = [2,5,6,5,2,2,-1], so the score is 6. it can be shown that 6 is the maximum score we can obtain. example 2: input: nums = [-2,-3,0] output: 0 explanation: any rearrangement of the array will result in a score of 0. constraints: 1 <= nums.length <= 105 -106 <= nums[i] <= 106
an integer n, add a dot (".") as the thousands separator and return it in string format. example 1: input: n = 987 output: "987" example 2: input: n = 1234 output: "1.234" constraints: 0 <= n <= 231 - 1
have k bags. you are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. you are also given the integer k. divide the marbles into the k bags according to the following rules: no bag is empty. if the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag. if a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j]. the score after distributing the marbles is the sum of the costs of all the k bags. return the difference between the maximum and minimum scores among marble distributions. example 1: input: weights = [1,3,5,1], k = 2 output: 4 explanation: the distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. the distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. thus, we return their difference 10 - 6 = 4. example 2: input: weights = [1, 3], k = 2 output: 0 explanation: the only distribution possible is [1],[3]. since both the maximal and minimal score are the same, we return 0. constraints: 1 <= k <= weights.length <= 105 1 <= weights[i] <= 109
two integer arrays nums1 and nums2, return an array of their intersection. each element in the result must be unique and you may return the result in any order. example 1: input: nums1 = [1,2,2,1], nums2 = [2,2] output: [2] example 2: input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] output: [9,4] explanation: [4,9] is also accepted. constraints: 1 <= nums1.length, nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 1000
two integers tomatoslices and cheeseslices. the ingredients of different burgers are as follows: jumbo burger: 4 tomato slices and 1 cheese slice. small burger: 2 tomato slices and 1 cheese slice. return [total_jumbo, total_small] so that the number of remaining tomatoslices equal to 0 and the number of remaining cheeseslices equal to 0. if it is not possible to make the remaining tomatoslices and cheeseslices equal to 0 return []. example 1: input: tomatoslices = 16, cheeseslices = 7 output: [1,6] explantion: to make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. there will be no remaining ingredients. example 2: input: tomatoslices = 17, cheeseslices = 4 output: [] explantion: there will be no way to use all ingredients to make small and jumbo burgers. example 3: input: tomatoslices = 4, cheeseslices = 17 output: [] explantion: making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining. constraints: 0 <= tomatoslices, cheeseslices <= 107
are given a list of preferences for n friends, where n is always even. for each person i, preferences[i] contains a list of friends sorted in the order of preference. in other words, a friend earlier in the list is more preferred than a friend later in the list. friends in each list are denoted by integers from 0 to n-1. all the friends are divided into pairs. the pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi. however, this pairing may cause some of the friends to be unhappy. a friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but: x prefers u over y, and u prefers x over v. return the number of unhappy friends. example 1: input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]] output: 2 explanation: friend 1 is unhappy because: - 1 is paired with 0 but prefers 3 over 0, and - 3 prefers 1 over 2. friend 3 is unhappy because: - 3 is paired with 2 but prefers 1 over 2, and - 1 prefers 3 over 0. friends 0 and 2 are happy. example 2: input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]] output: 0 explanation: both friends 0 and 1 are happy. example 3: input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]] output: 4 constraints: 2 <= n <= 500 n is even. preferences.length == n preferences[i].length == n - 1 0 <= preferences[i][j] <= n - 1 preferences[i] does not contain i. all values in preferences[i] are unique. pairs.length == n/2 pairs[i].length == 2 xi != yi 0 <= xi, yi <= n - 1 each person is contained in exactly one pair.
an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. the relative order of the elements should be kept the same. since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. more formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. it does not matter what you leave beyond the first k elements. return k after placing the final result in the first k slots of nums. do not allocate extra space for another array. you must do this by modifying the input array in-place with o(1) extra memory. custom judge: the judge will test your solution with the following code: int[] nums = [...]; // input array int[] expectednums = [...]; // the expected answer with correct length int k = removeduplicates(nums); // calls your implementation assert k == expectednums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectednums[i]; } if all assertions pass, then your solution will be accepted. example 1: input: nums = [1,1,1,2,2,3] output: 5, nums = [1,1,2,2,3,_] explanation: your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. it does not matter what you leave beyond the returned k (hence they are underscores). example 2: input: nums = [0,0,1,1,1,1,2,3,3] output: 7, nums = [0,0,1,1,2,3,3,_,_] explanation: your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively. it does not matter what you leave beyond the returned k (hence they are underscores). constraints: 1 <= nums.length <= 3 * 104 -104 <= nums[i] <= 104 nums is sorted in non-decreasing order.
string "paypalishiring" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) p a h n a p l s i i g y i r and then read line by line: "pahnaplsiigyir" write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numrows); example 1: input: s = "paypalishiring", numrows = 3 output: "pahnaplsiigyir" example 2: input: s = "paypalishiring", numrows = 4 output: "pinalsigyahrpi" explanation: p i n a l s i g y a h r p i example 3: input: s = "a", numrows = 1 output: "a" constraints: 1 <= s.length <= 1000 s consists of english letters (lower-case and upper-case), ',' and '.'. 1 <= numrows <= 1000
are n cities numbered from 1 to n. you are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. there exists a unique path between each pair of cities. in other words, the cities form a tree. a subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. two subtrees are different if there is a city in one subtree that is not present in the other. for each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d. return an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d. notice that the distance between the two cities is the number of edges in the path between them. example 1: input: n = 4, edges = [[1,2],[2,3],[2,4]] output: [3,4,0] explanation: the subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1. the subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2. no subtree has two nodes where the max distance between them is 3. example 2: input: n = 2, edges = [[1,2]] output: [1] example 3: input: n = 3, edges = [[1,2],[2,3]] output: [2,1] constraints: 2 <= n <= 15 edges.length == n-1 edges[i].length == 2 1 <= ui, vi <= n all pairs (ui, vi) are distinct.
an integer array nums and an integer k, modify the array in the following way: choose an index i and replace nums[i] with -nums[i]. you should apply this process exactly k times. you may choose the same index i multiple times. return the largest possible sum of the array after modifying it in this way. example 1: input: nums = [4,2,3], k = 1 output: 5 explanation: choose index 1 and nums becomes [4,-2,3]. example 2: input: nums = [3,-1,0,2], k = 3 output: 6 explanation: choose indices (1, 2, 2) and nums becomes [3,1,0,2]. example 3: input: nums = [2,-3,-1,5,-4], k = 2 output: 13 explanation: choose indices (1, 4) and nums becomes [2,3,-1,5,4]. constraints: 1 <= nums.length <= 104 -100 <= nums[i] <= 100 1 <= k <= 104
schema table: followers +-------------+------+ | column name | type | +-------------+------+ | user_id | int | | follower_id | int | +-------------+------+ (user_id, follower_id) is the primary key for this table. this table contains the ids of a user and a follower in a social media app where the follower follows the user. write an sql query that will, for each user, return the number of followers. return the result table ordered by user_id in ascending order. the query result format is in the following example. example 1: input: followers table: +---------+-------------+ | user_id | follower_id | +---------+-------------+ | 0 | 1 | | 1 | 0 | | 2 | 0 | | 2 | 1 | +---------+-------------+ output: +---------+----------------+ | user_id | followers_count| +---------+----------------+ | 0 | 1 | | 1 | 1 | | 2 | 2 | +---------+----------------+ explanation: the followers of 0 are {1} the followers of 1 are {0} the followers of 2 are {0,1}
car starts at position 0 and speed +1 on an infinite number line. your car can go into negative positions. your car drives automatically according to a sequence of instructions 'a' (accelerate) and 'r' (reverse): when you get an instruction 'a', your car does the following: position += speed speed *= 2 when you get an instruction 'r', your car does the following: if your speed is positive then speed = -1 otherwise speed = 1 your position stays the same. for example, after commands "aar", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1. given a target position target, return the length of the shortest sequence of instructions to get there. example 1: input: target = 3 output: 2 explanation: the shortest instruction sequence is "aa". your position goes from 0 --> 1 --> 3. example 2: input: target = 6 output: 5 explanation: the shortest instruction sequence is "aaara". your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6. constraints: 1 <= target <= 104
are given a 0-indexed array of strings words and a 2d array of integers queries. each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel. return an array ans of size queries.length, where ans[i] is the answer to the ith query. note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'. example 1: input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]] output: [2,3,0] explanation: the strings starting and ending with a vowel are "aba", "ece", "aa" and "e". the answer to the query [0,2] is 2 (strings "aba" and "ece"). to query [1,4] is 3 (strings "ece", "aa", "e"). to query [1,1] is 0. we return [2,3,0]. example 2: input: words = ["a","e","i"], queries = [[0,2],[0,1],[2,2]] output: [3,2,1] explanation: every string satisfies the conditions, so we return [3,2,1]. constraints: 1 <= words.length <= 105 1 <= words[i].length <= 40 words[i] consists only of lowercase english letters. sum(words[i].length) <= 3 * 105 1 <= queries.length <= 105 0 <= li <= ri < words.length
are given an integer array nums and an integer threshold. find any subarray of nums of length k such that every element in the subarray is greater than threshold / k. return the size of any such subarray. if there is no such subarray, return -1. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,3,4,3,1], threshold = 6 output: 3 explanation: the subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2. note that this is the only valid subarray. example 2: input: nums = [6,5,6,5,8], threshold = 7 output: 1 explanation: the subarray [8] has a size of 1, and 8 > 7 / 1 = 7. so 1 is returned. note that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. similarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions. therefore, 2, 3, 4, or 5 may also be returned. constraints: 1 <= nums.length <= 105 1 <= nums[i], threshold <= 109
the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree. a node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit. a leaf is a node with no children. example 1: input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1 output: [1,2,3,4,null,null,7,8,9,null,14] example 2: input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22 output: [5,4,8,11,null,17,4,7,null,null,null,5] example 3: input: root = [1,2,-3,-5,null,4,null], limit = -1 output: [1,null,-3,4] constraints: the number of nodes in the tree is in the range [1, 5000]. -105 <= node.val <= 105 -109 <= limit <= 109
are given an array of strings words. each element of words consists of two lowercase english letters. create the longest possible palindrome by selecting some elements from words and concatenating them in any order. each element can be selected at most once. return the length of the longest palindrome that you can create. if it is impossible to create any palindrome, return 0. a palindrome is a string that reads the same forward and backward. example 1: input: words = ["lc","cl","gg"] output: 6 explanation: one longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6. note that "clgglc" is another longest palindrome that can be created. example 2: input: words = ["ab","ty","yt","lc","cl","ab"] output: 8 explanation: one longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8. note that "lcyttycl" is another longest palindrome that can be created. example 3: input: words = ["cc","ll","xx"] output: 2 explanation: one longest palindrome is "cc", of length 2. note that "ll" is another longest palindrome that can be created, and so is "xx". constraints: 1 <= words.length <= 105 words[i].length == 2 words[i] consists of lowercase english letters.
an array of strings words representing an english dictionary, return the longest word in words that can be built one character at a time by other words in words. if there is more than one possible answer, return the longest word with the smallest lexicographical order. if there is no answer, return the empty string. note that the word should be built from left to right with each additional character being added to the end of a previous word. example 1: input: words = ["w","wo","wor","worl","world"] output: "world" explanation: the word "world" can be built one character at a time by "w", "wo", "wor", and "worl". example 2: input: words = ["a","banana","app","appl","ap","apply","apple"] output: "apple" explanation: both "apply" and "apple" can be built from other words in the dictionary. however, "apple" is lexicographically smaller than "apply". constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 30 words[i] consists of lowercase english letters.
an array arr of positive integers sorted in a strictly increasing order, and an integer k. return the kth positive integer that is missing from this array. example 1: input: arr = [2,3,4,7,11], k = 5 output: 9 explanation: the missing positive integers are [1,5,6,8,9,10,12,13,...]. the 5th missing positive integer is 9. example 2: input: arr = [1,2,3,4], k = 2 output: 6 explanation: the missing positive integers are [5,6,7,...]. the 2nd missing positive integer is 6. constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 1000 1 <= k <= 1000 arr[i] < arr[j] for 1 <= i < j <= arr.length follow up: could you solve this problem in less than o(n) complexity?
an array arr of integers, check if there exist two indices i and j such that : i != j 0 <= i, j < arr.length arr[i] == 2 * arr[j] example 1: input: arr = [10,2,5,3] output: true explanation: for i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j] example 2: input: arr = [3,1,7,11] output: false explanation: there is no i and j that satisfy the conditions. constraints: 2 <= arr.length <= 500 -103 <= arr[i] <= 103
are given a string expression representing a lisp-like expression to return the integer value of. the syntax for these expressions is given as follows. an expression is either an integer, let expression, add expression, mult expression, or an assigned variable. expressions always evaluate to a single integer. (an integer could be positive or negative.) a let expression takes the form "(let v1 e1 v2 e2 ... vn en expr)", where let is always the string "let", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr. an add expression takes the form "(add e1 e2)" where add is always the string "add", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2. a mult expression takes the form "(mult e1 e2)" where mult is always the string "mult", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2. for this question, we will use a smaller subset of variable names. a variable starts with a lowercase letter, then zero or more lowercase letters or digits. additionally, for your convenience, the names "add", "let", and "mult" are protected and will never be used as variable names. finally, there is the concept of scope. when an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. it is guaranteed that every expression is legal. please see the examples for more details on the scope. example 1: input: expression = "(let x 2 (mult x (let x 3 y 4 (add x y))))" output: 14 explanation: in the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. since x = 3 is found first, the value of x is 3. example 2: input: expression = "(let x 3 x 2 x)" output: 2 explanation: assignment in let statements is processed sequentially. example 3: input: expression = "(let x 1 y 2 x (add x y) (add x y))" output: 5 explanation: the first (add x y) evaluates as 3, and is assigned to x. the second (add x y) evaluates as 3+2 = 5. constraints: 1 <= expression.length <= 2000 there are no leading or trailing spaces in expression. all tokens are separated by a single space in expression. the answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer. the expression is guaranteed to be legal and evaluate to an integer.
are given a binary string s, and a 2d integer array queries where queries[i] = [firsti, secondi]. for the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise xored with firsti. in other words, val ^ firsti == secondi. the answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. if there are multiple answers, choose the one with the minimum lefti. return an array ans where ans[i] = [lefti, righti] is the answer to the ith query. a substring is a contiguous non-empty sequence of characters within a string. example 1: input: s = "101101", queries = [[0,5],[1,2]] output: [[0,2],[2,3]] explanation: for the first query the substring in range [0,2] is "101" which has a decimal value of 5, and 5 ^ 0 = 5, hence the answer to the first query is [0,2]. in the second query, the substring in range [2,3] is "11", and has a decimal value of 3, and 3 ^ 1 = 2. so, [2,3] is returned for the second query. example 2: input: s = "0101", queries = [[12,8]] output: [[-1,-1]] explanation: in this example there is no substring that answers the query, hence [-1,-1] is returned. example 3: input: s = "1", queries = [[4,5]] output: [[0,0]] explanation: for this example, the substring in range [0,0] has a decimal value of 1, and 1 ^ 4 = 5. so, the answer is [0,0]. constraints: 1 <= s.length <= 104 s[i] is either '0' or '1'. 1 <= queries.length <= 105 0 <= firsti, secondi <= 109
the root of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus the sum of all keys greater than the original key in bst. as a reminder, a binary search tree is a tree that satisfies these constraints: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees. example 1: input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] example 2: input: root = [0,null,1] output: [1,null,1] constraints: the number of nodes in the tree is in the range [0, 104]. -104 <= node.val <= 104 all the values in the tree are unique. root is guaranteed to be a valid binary search tree. note: this question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/
have a set of integers s, which originally contains all the numbers from 1 to n. unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number. you are given an integer array nums representing the data status of this set after the error. find the number that occurs twice and the number that is missing and return them in the form of an array. example 1: input: nums = [1,2,2,4] output: [2,3] example 2: input: nums = [1,1] output: [1,2] constraints: 2 <= nums.length <= 104 1 <= nums[i] <= 104
can scramble a string s to get a string t using the following algorithm: if the length of the string is 1, stop. if the length of the string is > 1, do the following: split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y. randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x. apply step 1 recursively on each of the two substrings x and y. given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false. example 1: input: s1 = "great", s2 = "rgeat" output: true explanation: one possible scenario applied on s1 is: "great" --> "gr/eat" // divide at random index. "gr/eat" --> "gr/eat" // random decision is not to swap the two substrings and keep them in order. "gr/eat" --> "g/r / e/at" // apply the same algorithm recursively on both substrings. divide at random index each of them. "g/r / e/at" --> "r/g / e/at" // random decision was to swap the first substring and to keep the second substring in the same order. "r/g / e/at" --> "r/g / e/ a/t" // again apply the algorithm recursively, divide "at" to "a/t". "r/g / e/ a/t" --> "r/g / e/ a/t" // random decision is to keep both substrings in the same order. the algorithm stops now, and the result string is "rgeat" which is s2. as one possible scenario led s1 to be scrambled to s2, we return true. example 2: input: s1 = "abcde", s2 = "caebd" output: false example 3: input: s1 = "a", s2 = "a" output: true constraints: s1.length == s2.length 1 <= s1.length <= 30 s1 and s2 consist of lowercase english letters.
this problem, a tree is an undirected graph that is connected and has no cycles. you are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. the graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph. return an edge that can be removed so that the resulting graph is a tree of n nodes. if there are multiple answers, return the answer that occurs last in the input. example 1: input: edges = [[1,2],[1,3],[2,3]] output: [2,3] example 2: input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]] output: [1,4] constraints: n == edges.length 3 <= n <= 1000 edges[i].length == 2 1 <= ai < bi <= edges.length ai != bi there are no repeated edges. the given graph is connected.
the array nums, for each nums[i] find out how many numbers in the array are smaller than it. that is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i]. return the answer in an array. example 1: input: nums = [8,1,2,2,3] output: [4,0,1,1,3] explanation: for nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). for nums[1]=1 does not exist any smaller number than it. for nums[2]=2 there exist one smaller number than it (1). for nums[3]=2 there exist one smaller number than it (1). for nums[4]=3 there exist three smaller numbers than it (1, 2 and 2). example 2: input: nums = [6,5,4,8] output: [2,1,0,3] example 3: input: nums = [7,7,7,7] output: [0,0,0,0] constraints: 2 <= nums.length <= 500 0 <= nums[i] <= 100
the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree. note: the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer. a subtree of root is a tree consisting of root and all of its descendants. example 1: input: root = [4,8,5,0,1,null,6] output: 5 explanation: for the node with value 4: the average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4. for the node with value 5: the average of its subtree is (5 + 6) / 2 = 11 / 2 = 5. for the node with value 0: the average of its subtree is 0 / 1 = 0. for the node with value 1: the average of its subtree is 1 / 1 = 1. for the node with value 6: the average of its subtree is 6 / 1 = 6. example 2: input: root = [1] output: 1 explanation: for the node with value 1: the average of its subtree is 1 / 1 = 1. constraints: the number of nodes in the tree is in the range [1, 1000]. 0 <= node.val <= 1000
virus is spreading rapidly, and your task is to quarantine the infected area by installing walls. the world is modeled as an m x n binary grid isinfected, where isinfected[i][j] == 0 represents uninfected cells, and isinfected[i][j] == 1 represents cells contaminated with the virus. a wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary. every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. resources are limited. each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). there will never be a tie. return the number of walls used to quarantine all the infected regions. if the world will become fully infected, return the number of walls used. example 1: input: isinfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]] output: 10 explanation: there are 2 contaminated regions. on the first day, add 5 walls to quarantine the viral region on the left. the board after the virus spreads is: on the second day, add 5 walls to quarantine the viral region on the right. the virus is fully contained. example 2: input: isinfected = [[1,1,1],[1,0,1],[1,1,1]] output: 4 explanation: even though there is only one cell saved, there are 4 walls built. notice that walls are only built on the shared boundary of two different cells. example 3: input: isinfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]] output: 13 explanation: the region on the left only builds two new walls. constraints: m == isinfected.length n == isinfected[i].length 1 <= m, n <= 50 isinfected[i][j] is either 0 or 1. there is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.
head which is a reference node to a singly-linked list. the value of each node in the linked list is either 0 or 1. the linked list holds the binary representation of a number. return the decimal value of the number in the linked list. the most significant bit is at the head of the linked list. example 1: input: head = [1,0,1] output: 5 explanation: (101) in base 2 = (5) in base 10 example 2: input: head = [0] output: 0 constraints: the linked list is not empty. number of nodes will not exceed 30. each node's value is either 0 or 1.
schema table: requestaccepted +----------------+---------+ | column name | type | +----------------+---------+ | requester_id | int | | accepter_id | int | | accept_date | date | +----------------+---------+ (requester_id, accepter_id) is the primary key for this table. this table contains the id of the user who sent the request, the id of the user who received the request, and the date when the request was accepted. write an sql query to find the people who have the most friends and the most friends number. the test cases are generated so that only one person has the most friends. the query result format is in the following example. example 1: input: requestaccepted table: +--------------+-------------+-------------+ | requester_id | accepter_id | accept_date | +--------------+-------------+-------------+ | 1 | 2 | 2016/06/03 | | 1 | 3 | 2016/06/08 | | 2 | 3 | 2016/06/08 | | 3 | 4 | 2016/06/09 | +--------------+-------------+-------------+ output: +----+-----+ | id | num | +----+-----+ | 3 | 3 | +----+-----+ explanation: the person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others. follow up: in the real world, multiple people could have the same most number of friends. could you find all these people in this case?
are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city. each power station can provide power to every city in a fixed range. in other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1. note that |x| denotes absolute value. for example, |7 - 5| = 2 and |3 - 10| = 7. the power of a city is the total number of power stations it is being provided power from. the government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones. given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally. note that you can build the k power stations in multiple cities. example 1: input: stations = [1,2,4,5,0], r = 1, k = 2 output: 5 explanation: one of the optimal ways is to install both the power stations at city 1. so stations will become [1,4,4,5,0]. - city 0 is provided by 1 + 4 = 5 power stations. - city 1 is provided by 1 + 4 + 4 = 9 power stations. - city 2 is provided by 4 + 4 + 5 = 13 power stations. - city 3 is provided by 5 + 4 = 9 power stations. - city 4 is provided by 5 + 0 = 5 power stations. so the minimum power of a city is 5. since it is not possible to obtain a larger power, we return 5. example 2: input: stations = [4,4,4,4], r = 0, k = 3 output: 4 explanation: it can be proved that we cannot make the minimum power of a city greater than 4. constraints: n == stations.length 1 <= n <= 105 0 <= stations[i] <= 105 0 <= r <= n - 1 0 <= k <= 109
the root of a binary tree, return the lowest common ancestor of its deepest leaves. recall that: the node of a binary tree is a leaf if and only if it has no children the depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1. the lowest common ancestor of a set s of nodes, is the node a with the largest depth such that every node in s is in the subtree with root a. example 1: input: root = [3,5,1,6,2,0,8,null,null,7,4] output: [2,7,4] explanation: we return the node with value 2, colored in yellow in the diagram. the nodes coloured in blue are the deepest leaf-nodes of the tree. note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3. example 2: input: root = [1] output: [1] explanation: the root is the deepest node in the tree, and it's the lca of itself. example 3: input: root = [0,1,3,null,2] output: [2] explanation: the deepest leaf node in the tree is 2, the lca of one node is itself. constraints: the number of nodes in the tree will be in the range [1, 1000]. 0 <= node.val <= 1000 the values of the nodes in the tree are unique. note: this question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/
have n dice, and each die has k faces numbered from 1 to k. given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. since the answer may be too large, return it modulo 109 + 7. example 1: input: n = 1, k = 6, target = 3 output: 1 explanation: you throw one die with 6 faces. there is only one way to get a sum of 3. example 2: input: n = 2, k = 6, target = 7 output: 6 explanation: you throw two dice, each with 6 faces. there are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1. example 3: input: n = 30, k = 30, target = 500 output: 222616187 explanation: the answer must be returned modulo 109 + 7. constraints: 1 <= n, k <= 30 1 <= target <= 1000
schema table: logins +----------------+----------+ | column name | type | +----------------+----------+ | user_id | int | | time_stamp | datetime | +----------------+----------+ (user_id, time_stamp) is the primary key for this table. each row contains information about the login time for the user with id user_id. write an sql query to report the latest login for all users in the year 2020. do not include the users who did not login in 2020. return the result table in any order. the query result format is in the following example. example 1: input: logins table: +---------+---------------------+ | user_id | time_stamp | +---------+---------------------+ | 6 | 2020-06-30 15:06:07 | | 6 | 2021-04-21 14:06:06 | | 6 | 2019-03-07 00:18:15 | | 8 | 2020-02-01 05:10:53 | | 8 | 2020-12-30 00:46:50 | | 2 | 2020-01-16 02:49:50 | | 2 | 2019-08-25 07:59:08 | | 14 | 2019-07-14 09:00:00 | | 14 | 2021-01-06 11:59:59 | +---------+---------------------+ output: +---------+---------------------+ | user_id | last_stamp | +---------+---------------------+ | 6 | 2020-06-30 15:06:07 | | 8 | 2020-12-30 00:46:50 | | 2 | 2020-01-16 02:49:50 | +---------+---------------------+ explanation: user 6 logged into their account 3 times but only once in 2020, so we include this login in the result table. user 8 logged into their account 2 times in 2020, once in february and once in december. we include only the latest one (december) in the result table. user 2 logged into their account 2 times but only once in 2020, so we include this login in the result table. user 14 did not login in 2020, so we do not include them in the result table.
have a set which contains all positive integers [1, 2, 3, 4, 5, ...]. implement the smallestinfiniteset class: smallestinfiniteset() initializes the smallestinfiniteset object to contain all positive integers. int popsmallest() removes and returns the smallest integer contained in the infinite set. void addback(int num) adds a positive integer num back into the infinite set, if it is not already in the infinite set. example 1: input ["smallestinfiniteset", "addback", "popsmallest", "popsmallest", "popsmallest", "addback", "popsmallest", "popsmallest", "popsmallest"] [[], [2], [], [], [], [1], [], [], []] output [null, null, 1, 2, 3, null, 1, 4, 5] explanation smallestinfiniteset smallestinfiniteset = new smallestinfiniteset(); smallestinfiniteset.addback(2); // 2 is already in the set, so no change is made. smallestinfiniteset.popsmallest(); // return 1, since 1 is the smallest number, and remove it from the set. smallestinfiniteset.popsmallest(); // return 2, and remove it from the set. smallestinfiniteset.popsmallest(); // return 3, and remove it from the set. smallestinfiniteset.addback(1); // 1 is added back to the set. smallestinfiniteset.popsmallest(); // return 1, since 1 was added back to the set and // is the smallest number, and remove it from the set. smallestinfiniteset.popsmallest(); // return 4, and remove it from the set. smallestinfiniteset.popsmallest(); // return 5, and remove it from the set. constraints: 1 <= num <= 1000 at most 1000 calls will be made in total to popsmallest and addback.
are given the head of a linked list, and an integer k. return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed). example 1: input: head = [1,2,3,4,5], k = 2 output: [1,4,3,2,5] example 2: input: head = [7,9,6,6,7,8,3,0,9,5], k = 5 output: [7,9,6,6,8,7,3,0,9,5] constraints: the number of nodes in the list is n. 1 <= k <= n <= 105 0 <= node.val <= 100
is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. you are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. you are also given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. remove two distinct edges of the tree to form three connected components. for a pair of removed edges, the following steps are defined: get the xor of all the values of the nodes for each of the three components respectively. the difference between the largest xor value and the smallest xor value is the score of the pair. for example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. the three xor values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. the largest xor value is 8 and the smallest xor value is 3. the score is then 8 - 3 = 5. return the minimum score of any possible pair of edge removals on the given tree. example 1: input: nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]] output: 9 explanation: the diagram above shows a way to make a pair of removals. - the 1st component has nodes [1,3,4] with values [5,4,11]. its xor value is 5 ^ 4 ^ 11 = 10. - the 2nd component has node [0] with value [1]. its xor value is 1 = 1. - the 3rd component has node [2] with value [5]. its xor value is 5 = 5. the score is the difference between the largest and smallest xor value which is 10 - 1 = 9. it can be shown that no other pair of removals will obtain a smaller score than 9. example 2: input: nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]] output: 0 explanation: the diagram above shows a way to make a pair of removals. - the 1st component has nodes [3,4] with values [4,4]. its xor value is 4 ^ 4 = 0. - the 2nd component has nodes [1,0] with values [5,5]. its xor value is 5 ^ 5 = 0. - the 3rd component has nodes [2,5] with values [2,2]. its xor value is 2 ^ 2 = 0. the score is the difference between the largest and smallest xor value which is 0 - 0 = 0. we cannot obtain a smaller score than 0. constraints: n == nums.length 3 <= n <= 1000 1 <= nums[i] <= 108 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.
a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order. example 1: input: n = 3 output: [[1,2,3],[8,9,4],[7,6,5]] example 2: input: n = 1 output: [[1]] constraints: 1 <= n <= 20
are given a 0-indexed integer array nums of length n. you can perform the following operation as many times as you want: pick an index i that you havenâ€™t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i]. return true if you can make nums a strictly increasing array using the above operation and false otherwise. a strictly increasing array is an array whose each element is strictly greater than its preceding element. example 1: input: nums = [4,9,6,10] output: true explanation: in the first operation: pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10]. in the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10]. after the second operation, nums is sorted in strictly increasing order, so the answer is true. example 2: input: nums = [6,8,11,12] output: true explanation: initially nums is sorted in strictly increasing order, so we don't need to make any operations. example 3: input: nums = [5,8,3] output: false explanation: it can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000 nums.length == n
are given a string s consisting of digits from 1 to 9 and an integer k. a partition of a string s is called good if: each digit of s is part of exactly one substring. the value of each substring is less than or equal to k. return the minimum number of substrings in a good partition of s. if no good partition of s exists, return -1. note that: the value of a string is its result when interpreted as an integer. for example, the value of "123" is 123 and the value of "1" is 1. a substring is a contiguous sequence of characters within a string. example 1: input: s = "165462", k = 60 output: 4 explanation: we can partition the string into substrings "16", "54", "6", and "2". each substring has a value less than or equal to k = 60. it can be shown that we cannot partition the string into less than 4 substrings. example 2: input: s = "238182", k = 5 output: -1 explanation: there is no good partition for this string. constraints: 1 <= s.length <= 105 s[i] is a digit from '1' to '9'. 1 <= k <= 109
silent philosophers sit at a round table with bowls of spaghetti. forks are placed between each pair of adjacent philosophers. each philosopher must alternately think and eat. however, a philosopher can only eat spaghetti when they have both left and right forks. each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. after an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. a philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks. eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed. design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think. the problem statement and the image above are taken from wikipedia.org the philosophers' ids are numbered from 0 to 4 in a clockwise order. implement the function void wantstoeat(philosopher, pickleftfork, pickrightfork, eat, putleftfork, putrightfork) where: philosopher is the id of the philosopher who wants to eat. pickleftfork and pickrightfork are functions you can call to pick the corresponding forks of that philosopher. eat is a function you can call to let the philosopher eat once he has picked both forks. putleftfork and putrightfork are functions you can call to put down the corresponding forks of that philosopher. the philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number). five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. the function may be called for the same philosopher more than once, even before the last call ends. example 1: input: n = 1 output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]] explanation: n is the number of times each philosopher will call the function. the output array describes the calls you made to the functions controlling the forks and the eat function, its format is: output[i] = [a, b, c] (three integers) - a is the id of a philosopher. - b specifies the fork: {1 : left, 2 : right}. - c specifies the operation: {1 : pick, 2 : put, 3 : eat}. constraints: 1 <= n <= 60
a string columntitle that represents the column title as appears in an excel sheet, return its corresponding column number. for example: a -> 1 b -> 2 c -> 3 ... z -> 26 aa -> 27 ab -> 28 ... example 1: input: columntitle = "a" output: 1 example 2: input: columntitle = "ab" output: 28 example 3: input: columntitle = "zy" output: 701 constraints: 1 <= columntitle.length <= 7 columntitle consists only of uppercase english letters. columntitle is in the range ["a", "fxshrxw"].
string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself). given a string s, return the longest happy prefix of s. return an empty string "" if no such prefix exists. example 1: input: s = "level" output: "l" explanation: s contains 4 prefix excluding itself ("l", "le", "lev", "leve"), and suffix ("l", "el", "vel", "evel"). the largest prefix which is also suffix is given by "l". example 2: input: s = "ababab" output: "abab" explanation: "abab" is the largest prefix which is also suffix. they can overlap in the original string. constraints: 1 <= s.length <= 105 s contains only lowercase english letters.
are given a string s and a robot that currently holds an empty string t. apply one of the following operations until s and t are both empty: remove the first character of a string s and give it to the robot. the robot will append this character to the string t. remove the last character of a string t and give it to the robot. the robot will write this character on paper. return the lexicographically smallest string that can be written on the paper. example 1: input: s = "zza" output: "azz" explanation: let p denote the written string. initially p="", s="zza", t="". perform first operation three times p="", s="", t="zza". perform second operation three times p="azz", s="", t="". example 2: input: s = "bac" output: "abc" explanation: let p denote the written string. perform first operation twice p="", s="c", t="ba". perform second operation twice p="ab", s="c", t="". perform first operation p="ab", s="", t="c". perform second operation p="abc", s="", t="". example 3: input: s = "bdda" output: "addb" explanation: let p denote the written string. initially p="", s="bdda", t="". perform first operation four times p="", s="", t="bdda". perform second operation four times p="addb", s="", t="". constraints: 1 <= s.length <= 105 s consists of only english lowercase letters.
an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. in other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible. note that the subarray needs to be non-empty after deleting one element. example 1: input: arr = [1,-2,0,3] output: 4 explanation: because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value. example 2: input: arr = [1,-2,-2,3] output: 3 explanation: we just choose [3] and it's the maximum sum. example 3: input: arr = [-1,-1,-1,-1] output: -1 explanation: the final subarray needs to be non-empty. you can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0. constraints: 1 <= arr.length <= 105 -104 <= arr[i] <= 104
have n buildings numbered from 0 to n - 1. each building has a number of employees. it's transfer season, and some employees want to change the building they reside in. you are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi. all buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. this means the number of employees leaving is equal to the number of employees moving in. for example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2. return the maximum number of achievable requests. example 1: input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]] output: 5 explantion: let's see the requests: from building 0 we have employees x and y and both want to move to building 1. from building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively. from building 2 we have employee z and they want to move to building 0. from building 3 we have employee c and they want to move to building 4. from building 4 we don't have any requests. we can achieve the requests of users x and b by swapping their places. we can achieve the requests of users y, a and z by swapping the places in the 3 buildings. example 2: input: n = 3, requests = [[0,0],[1,2],[2,1]] output: 3 explantion: let's see the requests: from building 0 we have employee x and they want to stay in the same building 0. from building 1 we have employee y and they want to move to building 2. from building 2 we have employee z and they want to move to building 1. we can achieve all the requests. example 3: input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]] output: 4 constraints: 1 <= n <= 20 1 <= requests.length <= 16 requests[i].length == 2 0 <= fromi, toi < n
binary tree is uni-valued if every node in the tree has the same value. given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise. example 1: input: root = [1,1,1,1,1,null,1] output: true example 2: input: root = [2,2,2,5,2] output: false constraints: the number of nodes in the tree is in the range [1, 100]. 0 <= node.val < 100
are n cities numbered from 0 to n-1. given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distancethreshold. return the city with the smallest number of cities that are reachable through some path and whose distance is at most distancethreshold, if there are multiple such cities, return the city with the greatest number. notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path. example 1: input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distancethreshold = 4 output: 3 explanation: the figure above describes the graph. the neighboring cities at a distancethreshold = 4 for each city are: city 0 -> [city 1, city 2] city 1 -> [city 0, city 2, city 3] city 2 -> [city 0, city 1, city 3] city 3 -> [city 1, city 2] cities 0 and 3 have 2 neighboring cities at a distancethreshold = 4, but we have to return city 3 since it has the greatest number. example 2: input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distancethreshold = 2 output: 0 explanation: the figure above describes the graph. the neighboring cities at a distancethreshold = 2 for each city are: city 0 -> [city 1] city 1 -> [city 0, city 4] city 2 -> [city 3, city 4] city 3 -> [city 2, city 4] city 4 -> [city 1, city 2, city 3] the city 0 has 1 neighboring city at a distancethreshold = 2. constraints: 2 <= n <= 100 1 <= edges.length <= n * (n - 1) / 2 edges[i].length == 3 0 <= fromi < toi < n 1 <= weighti, distancethreshold <= 10^4 all pairs (fromi, toi) are distinct.
are given an array of strings arr. a string s is formed by the concatenation of a subsequence of arr that has unique characters. return the maximum possible length of s. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. example 1: input: arr = ["un","iq","ue"] output: 4 explanation: all the valid concatenations are: - "" - "un" - "iq" - "ue" - "uniq" ("un" + "iq") - "ique" ("iq" + "ue") maximum length is 4. example 2: input: arr = ["cha","r","act","ers"] output: 6 explanation: possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers"). example 3: input: arr = ["abcdefghijklmnopqrstuvwxyz"] output: 26 explanation: the only string in arr has all 26 characters. constraints: 1 <= arr.length <= 16 1 <= arr[i].length <= 26 arr[i] contains only lowercase english letters.
a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format. the final result should be an irreducible fraction. if your final result is an integer, change it to the format of a fraction that has a denominator 1. so in this case, 2 should be converted to 2/1. example 1: input: expression = "-1/2+1/2" output: "0/1" example 2: input: expression = "-1/2+1/2+1/3" output: "1/3" example 3: input: expression = "1/3-1/2" output: "-1/6" constraints: the input string only contains '0' to '9', '/', '+' and '-'. so does the output. each fraction (input and output) has the format â±numerator/denominator. if the first input fraction or the output is positive, then '+' will be omitted. the input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. if the denominator is 1, it means this fraction is actually an integer in a fraction format defined above. the number of given fractions will be in the range [1, 10]. the numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.
the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules: if the current number is even, you have to divide it by 2. if the current number is odd, you have to add 1 to it. it is guaranteed that you can always reach one for all test cases. example 1: input: s = "1101" output: 6 explanation: "1101" corressponds to number 13 in their decimal representation. step 1) 13 is odd, add 1 and obtain 14. step 2) 14 is even, divide by 2 and obtain 7. step 3) 7 is odd, add 1 and obtain 8. step 4) 8 is even, divide by 2 and obtain 4. step 5) 4 is even, divide by 2 and obtain 2. step 6) 2 is even, divide by 2 and obtain 1. example 2: input: s = "10" output: 1 explanation: "10" corressponds to number 2 in their decimal representation. step 1) 2 is even, divide by 2 and obtain 1. example 3: input: s = "1" output: 0 constraints: 1 <= s.length <= 500 s consists of characters '0' or '1' s[0] == '1'
an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. the relative order of the elements should be kept the same. then return the number of unique elements in nums. consider the number of unique elements of nums to be k, to get accepted, you need to do the following things: change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. the remaining elements of nums are not important as well as the size of nums. return k. custom judge: the judge will test your solution with the following code: int[] nums = [...]; // input array int[] expectednums = [...]; // the expected answer with correct length int k = removeduplicates(nums); // calls your implementation assert k == expectednums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectednums[i]; } if all assertions pass, then your solution will be accepted. example 1: input: nums = [1,1,2] output: 2, nums = [1,2,_] explanation: your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. it does not matter what you leave beyond the returned k (hence they are underscores). example 2: input: nums = [0,0,1,1,1,2,2,3,3,4] output: 5, nums = [0,1,2,3,4,_,_,_,_,_] explanation: your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. it does not matter what you leave beyond the returned k (hence they are underscores). constraints: 1 <= nums.length <= 3 * 104 -100 <= nums[i] <= 100 nums is sorted in non-decreasing order.
is a biker going on a road trip. the road trip consists of n + 1 points at different altitudes. the biker starts his trip on point 0 with altitude equal 0. you are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). return the highest altitude of a point. example 1: input: gain = [-5,1,5,0,-7] output: 1 explanation: the altitudes are [0,-5,-4,1,1,-6]. the highest is 1. example 2: input: gain = [-4,-3,-2,-1,4,3,2] output: 0 explanation: the altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. the highest is 0. constraints: n == gain.length 1 <= n <= 100 -100 <= gain[i] <= 100
an array nums of integers, return the length of the longest arithmetic subsequence in nums. note that: a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. a sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1). example 1: input: nums = [3,6,9,12] output: 4 explanation: the whole array is an arithmetic sequence with steps of length = 3. example 2: input: nums = [9,4,7,2,10] output: 3 explanation: the longest arithmetic subsequence is [4,7,10]. example 3: input: nums = [20,1,15,3,10,5,8] output: 4 explanation: the longest arithmetic subsequence is [20,15,10,5]. constraints: 2 <= nums.length <= 1000 0 <= nums[i] <= 500
appeal of a string is the number of distinct characters found in the string. for example, the appeal of "abbca" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'. given a string s, return the total appeal of all of its substrings. a substring is a contiguous sequence of characters within a string. example 1: input: s = "abbca" output: 28 explanation: the following are the substrings of "abbca": - substrings of length 1: "a", "b", "b", "c", "a" have an appeal of 1, 1, 1, 1, and 1 respectively. the sum is 5. - substrings of length 2: "ab", "bb", "bc", "ca" have an appeal of 2, 1, 2, and 2 respectively. the sum is 7. - substrings of length 3: "abb", "bbc", "bca" have an appeal of 2, 2, and 3 respectively. the sum is 7. - substrings of length 4: "abbc", "bbca" have an appeal of 3 and 3 respectively. the sum is 6. - substrings of length 5: "abbca" has an appeal of 3. the sum is 3. the total sum is 5 + 7 + 7 + 6 + 3 = 28. example 2: input: s = "code" output: 20 explanation: the following are the substrings of "code": - substrings of length 1: "c", "o", "d", "e" have an appeal of 1, 1, 1, and 1 respectively. the sum is 4. - substrings of length 2: "co", "od", "de" have an appeal of 2, 2, and 2 respectively. the sum is 6. - substrings of length 3: "cod", "ode" have an appeal of 3 and 3 respectively. the sum is 6. - substrings of length 4: "code" has an appeal of 4. the sum is 4. the total sum is 4 + 6 + 6 + 4 = 20. constraints: 1 <= s.length <= 105 s consists of lowercase english letters.
are given an integer array ranks and a character array suits. you have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i]. the following are the types of poker hands you can make from best to worst: "flush": five cards of the same suit. "three of a kind": three cards of the same rank. "pair": two cards of the same rank. "high card": any single card. return a string representing the best type of poker hand you can make with the given cards. note that the return values are case-sensitive. example 1: input: ranks = [13,2,3,1,9], suits = ["a","a","a","a","a"] output: "flush" explanation: the hand with all the cards consists of 5 cards with the same suit, so we have a "flush". example 2: input: ranks = [4,4,2,4,4], suits = ["d","a","a","b","c"] output: "three of a kind" explanation: the hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a "three of a kind". note that we could also make a "pair" hand but "three of a kind" is a better hand. also note that other cards could be used to make the "three of a kind" hand. example 3: input: ranks = [10,10,2,12,9], suits = ["a","b","c","a","d"] output: "pair" explanation: the hand with the first and second card consists of 2 cards with the same rank, so we have a "pair". note that we cannot make a "flush" or a "three of a kind". constraints: ranks.length == suits.length == 5 1 <= ranks[i] <= 13 'a' <= suits[i] <= 'd' no two cards have the same rank and suit.
are given a string of digits num, such as "123456579". we can split it into a fibonacci-like sequence [123, 456, 579]. formally, a fibonacci-like sequence is a list f of non-negative integers such that: 0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type), f.length >= 3, and f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2. note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself. return any fibonacci-like sequence split from num, or return [] if it cannot be done. example 1: input: num = "1101111" output: [11,0,11,11] explanation: the output [110, 1, 111] would also be accepted. example 2: input: num = "112358130" output: [] explanation: the task is impossible. example 3: input: num = "0123" output: [] explanation: leading zeroes are not allowed, so "01", "2", "3" is not valid. constraints: 1 <= num.length <= 200 num contains only digits.
are given an array pairs, where pairs[i] = [xi, yi], and: there are no duplicates. xi < yi let ways be the number of rooted trees that satisfy the following conditions: the tree consists of nodes whose values appeared in pairs. a pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi. note: the tree does not have to be a binary tree. two ways are considered to be different if there is at least one node that has different parents in both ways. return: 0 if ways == 0 1 if ways == 1 2 if ways > 1 a rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root. an ancestor of a node is any node on the path from the root to that node (excluding the node itself). the root has no ancestors. example 1: input: pairs = [[1,2],[2,3]] output: 1 explanation: there is exactly one valid rooted tree, which is shown in the above figure. example 2: input: pairs = [[1,2],[2,3],[1,3]] output: 2 explanation: there are multiple valid rooted trees. three of them are shown in the above figures. example 3: input: pairs = [[1,2],[2,3],[2,4],[1,5]] output: 0 explanation: there are no valid rooted trees. constraints: 1 <= pairs.length <= 105 1 <= xi < yi <= 500 the elements in pairs are unique.
are given an array prices where prices[i] is the price of a given stock on the ith day. find the maximum profit you can achieve. you may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: after you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). example 1: input: prices = [1,2,3,0,2] output: 3 explanation: transactions = [buy, sell, cooldown, buy, sell] example 2: input: prices = [1] output: 0 constraints: 1 <= prices.length <= 5000 0 <= prices[i] <= 1000
schema table: employees +-------------+------+ | column name | type | +-------------+------+ | emp_id | int | | event_day | date | | in_time | int | | out_time | int | +-------------+------+ (emp_id, event_day, in_time) is the primary key of this table. the table shows the employees' entries and exits in an office. event_day is the day at which this event happened, in_time is the minute at which the employee entered the office, and out_time is the minute at which they left the office. in_time and out_time are between 1 and 1440. it is guaranteed that no two events on the same day intersect in time, and in_time < out_time. write an sql query to calculate the total time in minutes spent by each employee on each day at the office. note that within one day, an employee can enter and leave more than once. the time spent in the office for a single entry is out_time - in_time. return the result table in any order. the query result format is in the following example. example 1: input: employees table: +--------+------------+---------+----------+ | emp_id | event_day | in_time | out_time | +--------+------------+---------+----------+ | 1 | 2020-11-28 | 4 | 32 | | 1 | 2020-11-28 | 55 | 200 | | 1 | 2020-12-03 | 1 | 42 | | 2 | 2020-11-28 | 3 | 33 | | 2 | 2020-12-09 | 47 | 74 | +--------+------------+---------+----------+ output: +------------+--------+------------+ | day | emp_id | total_time | +------------+--------+------------+ | 2020-11-28 | 1 | 173 | | 2020-11-28 | 2 | 30 | | 2020-12-03 | 1 | 41 | | 2020-12-09 | 2 | 27 | +------------+--------+------------+ explanation: employee 1 has three events: two on day 2020-11-28 with a total of (32 - 4) + (200 - 55) = 173, and one on day 2020-12-03 with a total of (42 - 1) = 41. employee 2 has two events: one on day 2020-11-28 with a total of (33 - 3) = 30, and one on day 2020-12-09 with a total of (74 - 47) = 27.
the root of a binary search tree, return a balanced binary search tree with the same node values. if there is more than one answer, return any of them. a binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1. example 1: input: root = [1,null,2,null,3,null,4,null,null] output: [2,1,3,null,null,null,4] explanation: this is not the only correct answer, [3,1,4,null,2] is also correct. example 2: input: root = [2,1,3] output: [2,1,3] constraints: the number of nodes in the tree is in the range [1, 104]. 1 <= node.val <= 105
a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the hamming weight). note: note that in some languages, such as java, there is no unsigned integer type. in this case, the input will be given as a signed integer type. it should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. in java, the compiler represents the signed integers using 2's complement notation. therefore, in example 3, the input represents the signed integer. -3. example 1: input: n = 00000000000000000000000000001011 output: 3 explanation: the input binary string 00000000000000000000000000001011 has a total of three '1' bits. example 2: input: n = 00000000000000000000000010000000 output: 1 explanation: the input binary string 00000000000000000000000010000000 has a total of one '1' bit. example 3: input: n = 11111111111111111111111111111101 output: 31 explanation: the input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits. constraints: the input must be a binary string of length 32. follow up: if this function is called many times, how would you optimize it?
two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. you have the following three operations permitted on a word: insert a character delete a character replace a character example 1: input: word1 = "horse", word2 = "ros" output: 3 explanation: horse -> rorse (replace 'h' with 'r') rorse -> rose (remove 'r') rose -> ros (remove 'e') example 2: input: word1 = "intention", word2 = "execution" output: 5 explanation: intention -> inention (remove 't') inention -> enention (replace 'i' with 'e') enention -> exention (replace 'n' with 'x') exention -> exection (replace 'n' with 'c') exection -> execution (insert 'u') constraints: 0 <= word1.length, word2.length <= 500 word1 and word2 consist of lowercase english letters.
have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. each server has infinite computational capacity but cannot handle more than one request at a time. the requests are assigned to servers according to a specific algorithm: the ith (0-indexed) request arrives. if all servers are busy, the request is dropped (not handled at all). if the (i % k)th server is available, assign the request to that server. otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). for example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on. you are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). your goal is to find the busiest server(s). a server is considered busiest if it handled the most number of requests successfully among all the servers. return a list containing the ids (0-indexed) of the busiest server(s). you may return the ids in any order. example 1: input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] output: [1] explanation: all of the servers start out available. the first 3 requests are handled by the first 3 servers in order. request 3 comes in. server 0 is busy, so it's assigned to the next available server, which is 1. request 4 comes in. it cannot be handled since all servers are busy, so it is dropped. servers 0 and 2 handled one request each, while server 1 handled two requests. hence server 1 is the busiest server. example 2: input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2] output: [0] explanation: the first 3 requests are handled by first 3 servers. request 3 comes in. it is handled by server 0 since the server is available. server 0 handled two requests, while servers 1 and 2 handled one request each. hence server 0 is the busiest server. example 3: input: k = 3, arrival = [1,2,3], load = [10,12,11] output: [0,1,2] explanation: each server handles a single request, so they are all considered the busiest. constraints: 1 <= k <= 105 1 <= arrival.length, load.length <= 105 arrival.length == load.length 1 <= arrival[i], load[i] <= 109 arrival is strictly increasing.
are given two strings a and b that consist of lowercase letters. in one operation, you can change any character in a or b to any lowercase letter. your goal is to satisfy one of the following three conditions: every letter in a is strictly less than every letter in b in the alphabet. every letter in b is strictly less than every letter in a in the alphabet. both a and b consist of only one distinct letter. return the minimum number of operations needed to achieve your goal. example 1: input: a = "aba", b = "caa" output: 2 explanation: consider the best way to make each condition true: 1) change b to "ccc" in 2 operations, then every letter in a is less than every letter in b. 2) change a to "bbb" and b to "aaa" in 3 operations, then every letter in b is less than every letter in a. 3) change a to "aaa" and b to "aaa" in 2 operations, then a and b consist of one distinct letter. the best way was done in 2 operations (either condition 1 or condition 3). example 2: input: a = "dabadd", b = "cda" output: 3 explanation: the best way is to make condition 1 true by changing b to "eee". constraints: 1 <= a.length, b.length <= 105 a and b consist only of lowercase letters.
schema table: project +-------------+---------+ | column name | type | +-------------+---------+ | project_id | int | | employee_id | int | +-------------+---------+ (project_id, employee_id) is the primary key of this table. employee_id is a foreign key to employee table. each row of this table indicates that the employee with employee_id is working on the project with project_id. table: employee +------------------+---------+ | column name | type | +------------------+---------+ | employee_id | int | | name | varchar | | experience_years | int | +------------------+---------+ employee_id is the primary key of this table. it's guaranteed that experience_years is not null. each row of this table contains information about one employee. write an sql query that reports the average experience years of all the employees for each project, rounded to 2 digits. return the result table in any order. the query result format is in the following example. example 1: input: project table: +-------------+-------------+ | project_id | employee_id | +-------------+-------------+ | 1 | 1 | | 1 | 2 | | 1 | 3 | | 2 | 1 | | 2 | 4 | +-------------+-------------+ employee table: +-------------+--------+------------------+ | employee_id | name | experience_years | +-------------+--------+------------------+ | 1 | khaled | 3 | | 2 | ali | 2 | | 3 | john | 1 | | 4 | doe | 2 | +-------------+--------+------------------+ output: +-------------+---------------+ | project_id | average_years | +-------------+---------------+ | 1 | 2.00 | | 2 | 2.50 | +-------------+---------------+ explanation: the average experience years for the first project is (3 + 2 + 1) / 3 = 2.00 and for the second project is (3 + 2) / 2 = 2.50
are given a 0-indexed array nums consisting of positive integers. you can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j]. return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions. example 1: input: nums = [18,43,36,13,7] output: 54 explanation: the pairs (i, j) that satisfy the conditions are: - (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54. - (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50. so the maximum sum that we can obtain is 54. example 2: input: nums = [10,12,19,14] output: -1 explanation: there are no two numbers that satisfy the conditions, so we return -1. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
a 2d grid consists of 0s (land) and 1s (water). an island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s. return the number of closed islands. example 1: input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]] output: 2 explanation: islands in gray are closed because they are completely surrounded by water (group of 1s). example 2: input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]] output: 1 example 3: input: grid = [[1,1,1,1,1,1,1], [1,0,0,0,0,0,1], [1,0,1,1,1,0,1], [1,0,1,0,1,0,1], [1,0,1,1,1,0,1], [1,0,0,0,0,0,1], [1,1,1,1,1,1,1]] output: 2 constraints: 1 <= grid.length, grid[0].length <= 100 0 <= grid[i][j] <=1
a string s and an array of strings words, return the number of words[i] that is a subsequence of s. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, "ace" is a subsequence of "abcde". example 1: input: s = "abcde", words = ["a","bb","acd","ace"] output: 3 explanation: there are three strings in words that are a subsequence of s: "a", "acd", "ace". example 2: input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"] output: 2 constraints: 1 <= s.length <= 5 * 104 1 <= words.length <= 5000 1 <= words[i].length <= 50 s and words[i] consist of only lowercase english letters.
an object, return a valid json string of that object. you may assume the object only inludes strings, integers, arrays, objects, booleans, and null. the returned string should not include extra spaces. the order of keys should be the same as the order returned by object.keys(). please solve it without using the built-in json.stringify method. example 1: input: object = {"y":1,"x":2} output: {"y":1,"x":2} explanation: return the json representation. note that the order of keys should be the same as the order returned by object.keys(). example 2: input: object = {"a":"str","b":-12,"c":true,"d":null} output: {"a":"str","b":-12,"c":true,"d":null} explanation: the primitives of json are strings, numbers, booleans, and null. example 3: input: object = {"key":{"a":1,"b":[{},null,"hello"]}} output: {"key":{"a":1,"b":[{},null,"hello"]}} explanation: objects and arrays can include other objects and arrays. example 4: input: object = true output: true explanation: primitive types are valid inputs. constraints: object includes strings, integers, booleans, arrays, objects, and null 1 <= json.stringify(object).length <= 105 maxnestinglevel <= 1000 all strings will only contain alphanumeric characters
n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive). given an n x n integer matrix matrix, return true if the matrix is valid. otherwise, return false. example 1: input: matrix = [[1,2,3],[3,1,2],[2,3,1]] output: true explanation: in this case, n = 3, and every row and column contains the numbers 1, 2, and 3. hence, we return true. example 2: input: matrix = [[1,1,1],[1,2,3],[1,2,3]] output: false explanation: in this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3. hence, we return false. constraints: n == matrix.length == matrix[i].length 1 <= n <= 100 1 <= matrix[i][j] <= n
are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. you are also given an integer k. create the maximum number of length k <= m + n from digits of the two numbers. the relative order of the digits from the same array must be preserved. return an array of the k digits representing the answer. example 1: input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5 output: [9,8,6,5,3] example 2: input: nums1 = [6,7], nums2 = [6,0,4], k = 5 output: [6,7,6,0,4] example 3: input: nums1 = [3,9], nums2 = [8,9], k = 3 output: [9,8,9] constraints: m == nums1.length n == nums2.length 1 <= m, n <= 500 0 <= nums1[i], nums2[i] <= 9 1 <= k <= m + n
are given a string num, which represents a large integer. you are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. more formally, digit d maps to digit change[d]. you may choose to mutate a single substring of num. to mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]). return a string representing the largest possible integer after mutating (or choosing not to) a single substring of num. a substring is a contiguous sequence of characters within the string. example 1: input: num = "132", change = [9,8,5,0,3,6,4,2,6,8] output: "832" explanation: replace the substring "1": - 1 maps to change[1] = 8. thus, "132" becomes "832". "832" is the largest number that can be created, so return it. example 2: input: num = "021", change = [9,4,3,5,7,2,1,9,0,6] output: "934" explanation: replace the substring "021": - 0 maps to change[0] = 9. - 2 maps to change[2] = 3. - 1 maps to change[1] = 4. thus, "021" becomes "934". "934" is the largest number that can be created, so return it. example 3: input: num = "5", change = [1,4,7,5,3,2,5,6,9,4] output: "5" explanation: "5" is already the largest number that can be created, so return it. constraints: 1 <= num.length <= 105 num consists of only digits 0-9. change.length == 10 0 <= change[d] <= 9
an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit. example 1: input: nums = [8,2,4,7], limit = 4 output: 2 explanation: all subarrays are: [8] with maximum absolute diff |8-8| = 0 <= 4. [8,2] with maximum absolute diff |8-2| = 6 > 4. [8,2,4] with maximum absolute diff |8-2| = 6 > 4. [8,2,4,7] with maximum absolute diff |8-2| = 6 > 4. [2] with maximum absolute diff |2-2| = 0 <= 4. [2,4] with maximum absolute diff |2-4| = 2 <= 4. [2,4,7] with maximum absolute diff |2-7| = 5 > 4. [4] with maximum absolute diff |4-4| = 0 <= 4. [4,7] with maximum absolute diff |4-7| = 3 <= 4. [7] with maximum absolute diff |7-7| = 0 <= 4. therefore, the size of the longest subarray is 2. example 2: input: nums = [10,1,2,4,7,2], limit = 5 output: 4 explanation: the subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5. example 3: input: nums = [4,2,2,2,4,4,2,2], limit = 0 output: 3 constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 0 <= limit <= 109
a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square. example 1: input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4 output: 2 explanation: the maximum side length of square with sum less than 4 is 2 as shown. example 2: input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1 output: 0 constraints: m == mat.length n == mat[i].length 1 <= m, n <= 300 0 <= mat[i][j] <= 104 0 <= threshold <= 105
string is a valid parentheses string (denoted vps) if and only if it consists of "(" and ")" characters only, and: it is the empty string, or it can be written as ab (a concatenated with b), where a and b are vps's, or it can be written as (a), where a is a vps. we can similarly define the nesting depth depth(s) of any vps s as follows: depth("") = 0 depth(a + b) = max(depth(a), depth(b)), where a and b are vps's depth("(" + a + ")") = 1 + depth(a), where a is a vps. for example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's. given a vps seq, split it into two disjoint subsequences a and b, such that a and b are vps's (and a.length + b.length = seq.length). now choose any such a and b such that max(depth(a), depth(b)) is the minimum possible value. return an answer array (of length seq.length) that encodes such a choice of a and b: answer[i] = 0 if seq[i] is part of a, else answer[i] = 1. note that even though multiple answers may exist, you may return any of them. example 1: input: seq = "(()())" output: [0,1,1,1,1,0] example 2: input: seq = "()(())()" output: [0,0,0,1,1,0,1,1] constraints: 1 <= seq.size <= 10000
are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden. fence the entire garden using the minimum length of rope, as it is expensive. the garden is well-fenced only if all the trees are enclosed. return the coordinates of trees that are exactly located on the fence perimeter. you may return the answer in any order. example 1: input: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]] output: [[1,1],[2,0],[4,2],[3,3],[2,4]] explanation: all the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence. example 2: input: trees = [[1,2],[2,2],[4,2]] output: [[4,2],[2,2],[1,2]] explanation: the fence forms a line that passes through all the trees. constraints: 1 <= trees.length <= 3000 trees[i].length == 2 0 <= xi, yi <= 100 all the given positions are unique.
are given a 0-indexed string s that has lowercase english letters in its even indices and digits in its odd indices. there is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c. for example, shift('a', 5) = 'f' and shift('x', 0) = 'x'. for every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]). return s after replacing all digits. it is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'. example 1: input: s = "a1c1e1" output: "abcdef" explanation: the digits are replaced as follows: - s[1] -> shift('a',1) = 'b' - s[3] -> shift('c',1) = 'd' - s[5] -> shift('e',1) = 'f' example 2: input: s = "a1b2c3d4e" output: "abbdcfdhe" explanation: the digits are replaced as follows: - s[1] -> shift('a',1) = 'b' - s[3] -> shift('b',2) = 'd' - s[5] -> shift('c',3) = 'f' - s[7] -> shift('d',4) = 'h' constraints: 1 <= s.length <= 100 s consists only of lowercase english letters and digits. shift(s[i-1], s[i]) <= 'z' for all odd indices i.
the root of a binary tree, determine if it is a complete binary tree. in a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. it can have between 1 and 2h nodes inclusive at the last level h. example 1: input: root = [1,2,3,4,5,6] output: true explanation: every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible. example 2: input: root = [1,2,3,4,5,null,7] output: false explanation: the node with value 7 isn't as far left as possible. constraints: the number of nodes in the tree is in the range [1, 100]. 1 <= node.val <= 1000
are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. two servers are said to communicate if they are on the same row or on the same column. return the number of servers that communicate with any other server. example 1: input: grid = [[1,0],[0,1]] output: 0 explanation: no servers can communicate with others. example 2: input: grid = [[1,0],[1,1]] output: 3 explanation: all three servers can communicate with at least one other server. example 3: input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]] output: 4 explanation: the two servers in the first row can communicate with each other. the two servers in the third column can communicate with each other. the server at right bottom corner can't communicate with any other server. constraints: m == grid.length n == grid[i].length 1 <= m <= 250 1 <= n <= 250 grid[i][j] == 0 or 1
are given an array target of n integers. from a starting array arr consisting of n 1's, you may perform the following procedure : let x be the sum of all elements currently in your array. choose index i, such that 0 <= i < n and set the value of arr at index i to x. you may repeat this procedure as many times as needed. return true if it is possible to construct the target array from arr, otherwise, return false. example 1: input: target = [9,3,5] output: true explanation: start with arr = [1, 1, 1] [1, 1, 1], sum = 3 choose index 1 [1, 3, 1], sum = 5 choose index 2 [1, 3, 5], sum = 9 choose index 0 [9, 3, 5] done example 2: input: target = [1,1,1,2] output: false explanation: impossible to create target array from [1,1,1,1]. example 3: input: target = [8,5] output: true constraints: n == target.length 1 <= n <= 5 * 104 1 <= target[i] <= 109
a linked list, swap every two adjacent nodes and return its head. you must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.) example 1: input: head = [1,2,3,4] output: [2,1,4,3] example 2: input: head = [] output: [] example 3: input: head = [1] output: [1] constraints: the number of nodes in the list is in the range [0, 100]. 0 <= node.val <= 100
an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i]. example 1: input: nums = [5,2,6,1] output: [2,1,1,0] explanation: to the right of 5 there are 2 smaller elements (2 and 1). to the right of 2 there is only 1 smaller element (1). to the right of 6 there is 1 smaller element (1). to the right of 1 there is 0 smaller element. example 2: input: nums = [-1] output: [0] example 3: input: nums = [-1,-1] output: [0,0] constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104
an array of points on the x-y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. answers within 10-5 of the actual answer will be accepted. example 1: input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]] output: 2.00000 explanation: the five points are shown in the above figure. the red triangle is the largest. example 2: input: points = [[1,0],[0,0],[0,1]] output: 0.50000 constraints: 3 <= points.length <= 50 -50 <= xi, yi <= 50 all the given points are unique.
a characters array tasks, representing the tasks a cpu needs to do, where each letter represents a different task. tasks could be done in any order. each task is done in one unit of time. for each unit of time, the cpu could complete either one task or just be idle. however, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks. return the least number of units of times that the cpu will take to finish all the given tasks. example 1: input: tasks = ["a","a","a","b","b","b"], n = 2 output: 8 explanation: a -> b -> idle -> a -> b -> idle -> a -> b there is at least 2 units of time between any two same tasks. example 2: input: tasks = ["a","a","a","b","b","b"], n = 0 output: 6 explanation: on this case any permutation of size 6 would work since n = 0. ["a","a","a","b","b","b"] ["a","b","a","b","a","b"] ["b","b","b","a","a","a"] ... and so on. example 3: input: tasks = ["a","a","a","a","a","a","b","c","d","e","f","g"], n = 2 output: 16 explanation: one possible solution is a -> b -> c -> a -> d -> e -> a -> f -> g -> a -> idle -> idle -> a -> idle -> idle -> a constraints: 1 <= task.length <= 104 tasks[i] is upper-case english letter. the integer n is in the range [0, 100].
n-bit gray code sequence is a sequence of 2n integers where: every integer is in the inclusive range [0, 2n - 1], the first integer is 0, an integer appears no more than once in the sequence, the binary representation of every pair of adjacent integers differs by exactly one bit, and the binary representation of the first and last integers differs by exactly one bit. given an integer n, return any valid n-bit gray code sequence. example 1: input: n = 2 output: [0,1,3,2] explanation: the binary representation of [0,1,3,2] is [00,01,11,10]. - 00 and 01 differ by one bit - 01 and 11 differ by one bit - 11 and 10 differ by one bit - 10 and 00 differ by one bit [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01]. - 00 and 10 differ by one bit - 10 and 11 differ by one bit - 11 and 01 differ by one bit - 01 and 00 differ by one bit example 2: input: n = 1 output: [0,1] constraints: 1 <= n <= 16
are given an array of characters letters that is sorted in non-decreasing order, and a character target. there are at least two different characters in letters. return the smallest character in letters that is lexicographically greater than target. if such a character does not exist, return the first character in letters. example 1: input: letters = ["c","f","j"], target = "a" output: "c" explanation: the smallest character that is lexicographically greater than 'a' in letters is 'c'. example 2: input: letters = ["c","f","j"], target = "c" output: "f" explanation: the smallest character that is lexicographically greater than 'c' in letters is 'f'. example 3: input: letters = ["x","x","y","y"], target = "z" output: "x" explanation: there are no characters in letters that is lexicographically greater than 'z' so we return letters[0]. constraints: 2 <= letters.length <= 104 letters[i] is a lowercase english letter. letters is sorted in non-decreasing order. letters contains at least two different characters. target is a lowercase english letter.
are given a 0-indexed circular string array words and a string target. a circular array means that the array's end connects to the array's beginning. formally, the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words. starting from startindex, you can move to either the next word or the previous word with 1 step at a time. return the shortest distance needed to reach the string target. if the string target does not exist in words, return -1. example 1: input: words = ["hello","i","am","leetcode","hello"], target = "hello", startindex = 1 output: 1 explanation: we start from index 1 and can reach "hello" by - moving 3 units to the right to reach index 4. - moving 2 units to the left to reach index 4. - moving 4 units to the right to reach index 0. - moving 1 unit to the left to reach index 0. the shortest distance to reach "hello" is 1. example 2: input: words = ["a","b","leetcode"], target = "leetcode", startindex = 0 output: 1 explanation: we start from index 0 and can reach "leetcode" by - moving 2 units to the right to reach index 3. - moving 1 unit to the left to reach index 3. the shortest distance to reach "leetcode" is 1. example 3: input: words = ["i","eat","leetcode"], target = "ate", startindex = 0 output: -1 explanation: since "ate" does not exist in words, we return -1. constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] and target consist of only lowercase english letters. 0 <= startindex < words.length
are several cards arranged in a row, and each card has an associated number of points. the points are given in the integer array cardpoints. in one step, you can take one card from the beginning or from the end of the row. you have to take exactly k cards. your score is the sum of the points of the cards you have taken. given the integer array cardpoints and the integer k, return the maximum score you can obtain. example 1: input: cardpoints = [1,2,3,4,5,6,1], k = 3 output: 12 explanation: after the first step, your score will always be 1. however, choosing the rightmost card first will maximize your total score. the optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12. example 2: input: cardpoints = [2,2,2], k = 2 output: 4 explanation: regardless of which two cards you take, your score will always be 4. example 3: input: cardpoints = [9,7,7,9,7,7,9], k = 7 output: 55 explanation: you have to take all the cards. your score is the sum of points of all cards. constraints: 1 <= cardpoints.length <= 105 1 <= cardpoints[i] <= 104 1 <= k <= cardpoints.length
an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input. example 1: input: intervals = [[1,3],[2,6],[8,10],[15,18]] output: [[1,6],[8,10],[15,18]] explanation: since intervals [1,3] and [2,6] overlap, merge them into [1,6]. example 2: input: intervals = [[1,4],[4,5]] output: [[1,5]] explanation: intervals [1,4] and [4,5] are considered overlapping. constraints: 1 <= intervals.length <= 104 intervals[i].length == 2 0 <= starti <= endi <= 104
and bob take turns playing a game, with alice starting first. there are n stones arranged in a row. on each player's turn, while the number of stones is more than one, they will do the following: choose an integer x > 1, and remove the leftmost x stones from the row. add the sum of the removed stones' values to the player's score. place a new stone, whose value is equal to that sum, on the left side of the row. the game stops when only one stone is left in the row. the score difference between alice and bob is (alice's score - bob's score). alice's goal is to maximize the score difference, and bob's goal is the minimize the score difference. given an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between alice and bob if they both play optimally. example 1: input: stones = [-1,2,-3,4,-5] output: 5 explanation: - alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of value 2 on the left. stones = [2,-5]. - bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on the left. stones = [-3]. the difference between their scores is 2 - (-3) = 5. example 2: input: stones = [7,-6,5,10,5,-2,-6] output: 13 explanation: - alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a stone of value 13 on the left. stones = [13]. the difference between their scores is 13 - 0 = 13. example 3: input: stones = [-10,-12] output: -22 explanation: - alice can only make one move, which is to remove both stones. she adds (-10) + (-12) = -22 to her score and places a stone of value -22 on the left. stones = [-22]. the difference between their scores is (-22) - 0 = -22. constraints: n == stones.length 2 <= n <= 105 -104 <= stones[i] <= 104
have two arrays arr1 and arr2 which are initially empty. you need to add positive integers to them such that they satisfy all the following conditions: arr1 contains uniquecnt1 distinct positive integers, each of which is not divisible by divisor1. arr2 contains uniquecnt2 distinct positive integers, each of which is not divisible by divisor2. no integer is present in both arr1 and arr2. given divisor1, divisor2, uniquecnt1, and uniquecnt2, return the minimum possible maximum integer that can be present in either array. example 1: input: divisor1 = 2, divisor2 = 7, uniquecnt1 = 1, uniquecnt2 = 3 output: 4 explanation: we can distribute the first 4 natural numbers into arr1 and arr2. arr1 = [1] and arr2 = [2,3,4]. we can see that both arrays satisfy all the conditions. since the maximum value is 4, we return it. example 2: input: divisor1 = 3, divisor2 = 5, uniquecnt1 = 2, uniquecnt2 = 1 output: 3 explanation: here arr1 = [1,2], and arr2 = [3] satisfy all conditions. since the maximum value is 3, we return it. example 3: input: divisor1 = 2, divisor2 = 4, uniquecnt1 = 8, uniquecnt2 = 2 output: 15 explanation: here, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6]. it can be shown that it is not possible to obtain a lower maximum satisfying all conditions. constraints: 2 <= divisor1, divisor2 <= 105 1 <= uniquecnt1, uniquecnt2 < 109 2 <= uniquecnt1 + uniquecnt2 <= 109
a wooden stick of length n units. the stick is labelled from 0 to n. for example, a stick of length 6 is labelled as follows: given an integer array cuts where cuts[i] denotes a position you should perform a cut at. you should perform the cuts in order, you can change the order of the cuts as you wish. the cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. when you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). please refer to the first example for a better explanation. return the minimum total cost of the cuts. example 1: input: n = 7, cuts = [1,3,4,5] output: 16 explanation: using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario: the first cut is done to a rod of length 7 so the cost is 7. the second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. the total cost is 7 + 6 + 4 + 3 = 20. rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16). example 2: input: n = 9, cuts = [5,6,1,4,2] output: 22 explanation: if you try the given cuts ordering the cost will be 25. there are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible. constraints: 2 <= n <= 106 1 <= cuts.length <= min(n - 1, 100) 1 <= cuts[i] <= n - 1 all the integers in cuts array are distinct.
an integer n, you must transform it into 0 using the following operations any number of times: change the rightmost (0th) bit in the binary representation of n. change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0. return the minimum number of operations to transform n into 0. example 1: input: n = 3 output: 2 explanation: the binary representation of 3 is "11". "11" -> "01" with the 2nd operation since the 0th bit is 1. "01" -> "00" with the 1st operation. example 2: input: n = 6 output: 4 explanation: the binary representation of 6 is "110". "110" -> "010" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0. "010" -> "011" with the 1st operation. "011" -> "001" with the 2nd operation since the 0th bit is 1. "001" -> "000" with the 1st operation. constraints: 0 <= n <= 109
an integer array nums, return the most frequent even element. if there is a tie, return the smallest one. if there is no such element, return -1. example 1: input: nums = [0,1,2,2,4,4,1] output: 2 explanation: the even elements are 0, 2, and 4. of these, 2 and 4 appear the most. we return the smallest one, which is 2. example 2: input: nums = [4,4,4,9,2,4] output: 4 explanation: 4 is the even element appears the most. example 3: input: nums = [29,47,21,41,13,37,25,7] output: -1 explanation: there is no even element. constraints: 1 <= nums.length <= 2000 0 <= nums[i] <= 105
are two types of soup: type a and type b. initially, we have n ml of each type of soup. there are four kinds of operations: serve 100 ml of soup a and 0 ml of soup b, serve 75 ml of soup a and 25 ml of soup b, serve 50 ml of soup a and 50 ml of soup b, and serve 25 ml of soup a and 75 ml of soup b. when we serve some soup, we give it to someone, and we no longer have it. each turn, we will choose from the four operations with an equal probability 0.25. if the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. we stop once we no longer have some quantity of both types of soup. note that we do not have an operation where all 100 ml's of soup b are used first. return the probability that soup a will be empty first, plus half the probability that a and b become empty at the same time. answers within 10-5 of the actual answer will be accepted. example 1: input: n = 50 output: 0.62500 explanation: if we choose the first two operations, a will become empty first. for the third operation, a and b will become empty at the same time. for the fourth operation, b will become empty first. so the total probability of a becoming empty first plus half the probability that a and b become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625. example 2: input: n = 100 output: 0.71875 constraints: 0 <= n <= 109
are given an array of integers nums represents the numbers written on a chalkboard. alice and bob take turns erasing exactly one number from the chalkboard, with alice starting first. if erasing a number causes the bitwise xor of all the elements of the chalkboard to become 0, then that player loses. the bitwise xor of one element is that element itself, and the bitwise xor of no elements is 0. also, if any player starts their turn with the bitwise xor of all the elements of the chalkboard equal to 0, then that player wins. return true if and only if alice wins the game, assuming both players play optimally. example 1: input: nums = [1,1,2] output: false explanation: alice has two choices: erase 1 or erase 2. if she erases 1, the nums array becomes [1, 2]. the bitwise xor of all the elements of the chalkboard is 1 xor 2 = 3. now bob can remove any element he wants, because alice will be the one to erase the last element and she will lose. if alice erases 2 first, now nums become [1, 1]. the bitwise xor of all the elements of the chalkboard is 1 xor 1 = 0. alice will lose. example 2: input: nums = [0,1] output: true example 3: input: nums = [1,2,3] output: true constraints: 1 <= nums.length <= 1000 0 <= nums[i] < 216
are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion. you are also given an integer success. a spell and potion pair is considered successful if the product of their strengths is at least success. return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell. example 1: input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7 output: [4,0,3] explanation: - 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful. - 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful. - 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful. thus, [4,0,3] is returned. example 2: input: spells = [3,1,2], potions = [8,5,8], success = 16 output: [2,0,2] explanation: - 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful. - 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. - 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. thus, [2,0,2] is returned. constraints: n == spells.length m == potions.length 1 <= n, m <= 105 1 <= spells[i], potions[i] <= 105 1 <= success <= 1010
an integer array arr, return the length of a maximum size turbulent subarray of arr. a subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray. more formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if: for i <= k < j: arr[k] > arr[k + 1] when k is odd, and arr[k] < arr[k + 1] when k is even. or, for i <= k < j: arr[k] > arr[k + 1] when k is even, and arr[k] < arr[k + 1] when k is odd. example 1: input: arr = [9,4,2,10,7,8,8,1,9] output: 5 explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5] example 2: input: arr = [4,8,12,16] output: 2 example 3: input: arr = [100] output: 1 constraints: 1 <= arr.length <= 4 * 104 0 <= arr[i] <= 109
are playing a game with integers. you start with the integer 1 and you want to reach the integer target. in one move, you can either: increment the current integer by one (i.e., x = x + 1). double the current integer (i.e., x = 2 * x). you can use the increment operation any number of times, however, you can only use the double operation at most maxdoubles times. given the two integers target and maxdoubles, return the minimum number of moves needed to reach target starting with 1. example 1: input: target = 5, maxdoubles = 0 output: 4 explanation: keep incrementing by 1 until you reach target. example 2: input: target = 19, maxdoubles = 2 output: 7 explanation: initially, x = 1 increment 3 times so x = 4 double once so x = 8 increment once so x = 9 double again so x = 18 increment once so x = 19 example 3: input: target = 10, maxdoubles = 4 output: 4 explanation: initially, x = 1 increment once so x = 2 double once so x = 4 increment once so x = 5 double again so x = 10 constraints: 1 <= target <= 109 0 <= maxdoubles <= 100
a generator function that returns a generator object which yields the fibonacci sequence. the fibonacci sequence is defined by the relation xn = xn-1 + xn-2. the first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13. example 1: input: callcount = 5 output: [0,1,1,2,3] explanation: const gen = fibgenerator(); gen.next().value; // 0 gen.next().value; // 1 gen.next().value; // 1 gen.next().value; // 2 gen.next().value; // 3 example 2: input: callcount = 0 output: [] explanation: gen.next() is never called so nothing is outputted constraints: 0 <= callcount <= 50
are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi. you can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. for example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4. let maxlen be the side length of the largest square you can obtain from any of the given rectangles. return the number of rectangles that can make a square with a side length of maxlen. example 1: input: rectangles = [[5,8],[3,9],[5,12],[16,5]] output: 3 explanation: the largest squares you can get from each rectangle are of lengths [5,3,5,5]. the largest possible square is of length 5, and you can get it out of 3 rectangles. example 2: input: rectangles = [[2,3],[3,7],[4,3],[3,7]] output: 3 constraints: 1 <= rectangles.length <= 1000 rectangles[i].length == 2 1 <= li, wi <= 109 li != wi
are n uniquely-sized sticks whose lengths are integers from 1 to n. you want to arrange the sticks such that exactly k sticks are visible from the left. a stick is visible from the left if there are no longer sticks to the left of it. for example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left. given n and k, return the number of such arrangements. since the answer may be large, return it modulo 109 + 7. example 1: input: n = 3, k = 2 output: 3 explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible. the visible sticks are underlined. example 2: input: n = 5, k = 5 output: 1 explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible. the visible sticks are underlined. example 3: input: n = 20, k = 11 output: 647427950 explanation: there are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible. constraints: 1 <= n <= 1000 1 <= k <= n

have a 2-d grid of size m x n representing a box, and you have n balls. the box is open on the top and bottom sides. each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. a board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1. a board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1. we drop one ball at the top of each column of the box. each ball can get stuck in the box or fall out of the bottom. a ball gets stuck if it hits a "v" shaped pattern between two boards or if a board redirects the ball into either wall of the box. return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box. example 1: input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]] output: [1,-1,-1,-1,-1] explanation: this example is shown in the photo. ball b0 is dropped at column 0 and falls out of the box at column 1. ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1. ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0. ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0. ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1. example 2: input: grid = [[-1]] output: [-1] explanation: the ball gets stuck against the left wall. example 3: input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]] output: [0,1,2,3,4,-1] constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 grid[i][j] is 1 or -1.
an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. it is not allowed to remove the whole array. return the length of the smallest subarray that you need to remove, or -1 if it's impossible. a subarray is defined as a contiguous block of elements in the array. example 1: input: nums = [3,1,4,2], p = 6 output: 1 explanation: the sum of the elements in nums is 10, which is not divisible by 6. we can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6. example 2: input: nums = [6,3,5,2], p = 9 output: 2 explanation: we cannot remove a single element to get a sum divisible by 9. the best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9. example 3: input: nums = [1,2,3], p = 3 output: 0 explanation: here the sum is 6. which is already divisible by 3. thus we do not need to remove anything. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= p <= 109
an array nums of integers, a move consists of choosing any element and decreasing it by 1. an array a is a zigzag array if either: every even-indexed element is greater than adjacent elements, ie. a[0] > a[1] < a[2] > a[3] < a[4] > ... or, every odd-indexed element is greater than adjacent elements, ie. a[0] < a[1] > a[2] < a[3] > a[4] < ... return the minimum number of moves to transform the given array nums into a zigzag array. example 1: input: nums = [1,2,3] output: 2 explanation: we can decrease 2 to 0 or 3 to 1. example 2: input: nums = [9,6,1,6,2] output: 4 constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 1000
are given an integer n and an array of unique integers blacklist. design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. any integer that is in the mentioned range and not in blacklist should be equally likely to be returned. optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language. implement the solution class: solution(int n, int[] blacklist) initializes the object with the integer n and the blacklisted integers blacklist. int pick() returns a random integer in the range [0, n - 1] and not in blacklist. example 1: input ["solution", "pick", "pick", "pick", "pick", "pick", "pick", "pick"] [[7, [2, 3, 5]], [], [], [], [], [], [], []] output [null, 0, 4, 1, 6, 1, 0, 4] explanation solution solution = new solution(7, [2, 3, 5]); solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. note that for every call of pick, // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4). solution.pick(); // return 4 solution.pick(); // return 1 solution.pick(); // return 6 solution.pick(); // return 1 solution.pick(); // return 0 solution.pick(); // return 4 constraints: 1 <= n <= 109 0 <= blacklist.length <= min(105, n - 1) 0 <= blacklist[i] < n all the values of blacklist are unique. at most 2 * 104 calls will be made to pick.
are given an integer array height of length n. there are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). find two lines that together with the x-axis form a container, such that the container contains the most water. return the maximum amount of water a container can store. notice that you may not slant the container. example 1: input: height = [1,8,6,2,5,4,8,3,7] output: 49 explanation: the above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. in this case, the max area of water (blue section) the container can contain is 49. example 2: input: height = [1,1] output: 1 constraints: n == height.length 2 <= n <= 105 0 <= height[i] <= 104
are given a 0-indexed integer array candies. each element in the array denotes a pile of candies of size candies[i]. you can divide each pile into any number of sub piles, but you cannot merge two piles together. you are also given an integer k. you should allocate piles of candies to k children such that each child gets the same number of candies. each child can take at most one pile of candies and some piles of candies may go unused. return the maximum number of candies each child can get. example 1: input: candies = [5,8,6], k = 3 output: 5 explanation: we can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. we now have five piles of candies of sizes 5, 5, 3, 5, and 1. we can allocate the 3 piles of size 5 to 3 children. it can be proven that each child cannot receive more than 5 candies. example 2: input: candies = [2,5], k = 11 output: 0 explanation: there are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. thus, each child gets no candy and the answer is 0. constraints: 1 <= candies.length <= 105 1 <= candies[i] <= 107 1 <= k <= 1012



are given an integer array nums and an integer k. you may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences. return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k. a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. example 1: input: nums = [3,6,1,2,5], k = 2 output: 2 explanation: we can partition nums into the two subsequences [3,1,2] and [6,5]. the difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2. the difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1. since two subsequences were created, we return 2. it can be shown that 2 is the minimum number of subsequences needed. example 2: input: nums = [1,2,3], k = 1 output: 2 explanation: we can partition nums into the two subsequences [1,2] and [3]. the difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1. the difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0. since two subsequences were created, we return 2. note that another optimal solution is to partition nums into the two subsequences [1] and [2,3]. example 3: input: nums = [2,2,4,5], k = 0 output: 3 explanation: we can partition nums into the three subsequences [2,2], [4], and [5]. the difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0. the difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0. the difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0. since three subsequences were created, we return 3. it can be shown that 3 is the minimum number of subsequences needed. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105 0 <= k <= 105
score of an array is defined as the product of its sum and its length. for example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75. given a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k. a subarray is a contiguous sequence of elements within an array. example 1: input: nums = [2,1,4,3,5], k = 10 output: 6 explanation: the 6 subarrays having scores less than 10 are: - [2] with score 2 * 1 = 2. - [1] with score 1 * 1 = 1. - [4] with score 4 * 1 = 4. - [3] with score 3 * 1 = 3. - [5] with score 5 * 1 = 5. - [2,1] with score (2 + 1) * 2 = 6. note that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10. example 2: input: nums = [1,1,1], k = 5 output: 5 explanation: every subarray except [1,1,1] has a score less than 5. [1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5. thus, there are 5 subarrays having scores less than 5. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= k <= 1015
are given a 0-indexed integer array nums. in one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] and (nums[i] xor x). note that and is the bitwise and operation and xor is the bitwise xor operation. return the maximum possible bitwise xor of all elements of nums after applying the operation any number of times. example 1: input: nums = [3,2,4,6] output: 7 explanation: apply the operation with x = 4 and i = 3, num[3] = 6 and (6 xor 4) = 6 and 2 = 2. now, nums = [3, 2, 4, 2] and the bitwise xor of all the elements = 3 xor 2 xor 4 xor 2 = 7. it can be shown that 7 is the maximum possible bitwise xor. note that other operations may be used to achieve a bitwise xor of 7. example 2: input: nums = [1,2,3,9,2] output: 11 explanation: apply the operation zero times. the bitwise xor of all the elements = 1 xor 2 xor 3 xor 9 xor 2 = 11. it can be shown that 11 is the maximum possible bitwise xor. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 108


the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise. two nodes of a binary tree are cousins if they have the same depth with different parents. note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1. example 1: input: root = [1,2,3,4], x = 4, y = 3 output: false example 2: input: root = [1,2,3,null,4,null,5], x = 5, y = 4 output: true example 3: input: root = [1,2,3,null,4], x = 2, y = 3 output: false constraints: the number of nodes in the tree is in the range [2, 100]. 1 <= node.val <= 100 each node has a unique value. x != y x and y are exist in the tree.
peak element is an element that is strictly greater than its neighbors. given a 0-indexed integer array nums, find a peak element, and return its index. if the array contains multiple peaks, return the index to any of the peaks. you may imagine that nums[-1] = nums[n] = -âˆž. in other words, an element is always considered to be strictly greater than a neighbor that is outside the array. you must write an algorithm that runs in o(log n) time. example 1: input: nums = [1,2,3,1] output: 2 explanation: 3 is a peak element and your function should return the index number 2. example 2: input: nums = [1,2,1,3,5,6,4] output: 5 explanation: your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6. constraints: 1 <= nums.length <= 1000 -231 <= nums[i] <= 231 - 1 nums[i] != nums[i + 1] for all valid i.
is an integer array perm that is a permutation of the first n positive integers, where n is always odd. it was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] xor perm[i + 1]. for example, if perm = [1,3,2], then encoded = [2,1]. given the encoded array, return the original array perm. it is guaranteed that the answer exists and is unique. example 1: input: encoded = [3,1] output: [1,2,3] explanation: if perm = [1,2,3], then encoded = [1 xor 2,2 xor 3] = [3,1] example 2: input: encoded = [6,5,4,6] output: [2,4,1,5,3] constraints: 3 <= n < 105 n is odd. encoded.length == n - 1

four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box. the box is "bulky" if: any of the dimensions of the box is greater or equal to 104. or, the volume of the box is greater or equal to 109. if the mass of the box is greater or equal to 100, it is "heavy". if the box is both "bulky" and "heavy", then its category is "both". if the box is neither "bulky" nor "heavy", then its category is "neither". if the box is "bulky" but not "heavy", then its category is "bulky". if the box is "heavy" but not "bulky", then its category is "heavy". note that the volume of the box is the product of its length, width and height. example 1: input: length = 1000, width = 35, height = 700, mass = 300 output: "heavy" explanation: none of the dimensions of the box is greater or equal to 104. its volume = 24500000 <= 109. so it cannot be categorized as "bulky". however mass >= 100, so the box is "heavy". since the box is not "bulky" but "heavy", we return "heavy". example 2: input: length = 200, width = 50, height = 800, mass = 50 output: "neither" explanation: none of the dimensions of the box is greater or equal to 104. its volume = 8 * 106 <= 109. so it cannot be categorized as "bulky". its mass is also less than 100, so it cannot be categorized as "heavy" either. since its neither of the two above categories, we return "neither". constraints: 1 <= length, width, height <= 105 1 <= mass <= 103
power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps: if x is even then x = x / 2 if x is odd then x = 3 * x + 1 for example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1). given three integers lo, hi and k. the task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order. return the kth integer in the range [lo, hi] sorted by the power value. notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer. example 1: input: lo = 12, hi = 15, k = 2 output: 13 explanation: the power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1) the power of 13 is 9 the power of 14 is 17 the power of 15 is 17 the interval sorted by the power value [12,13,14,15]. for k = 2 answer is the second element which is 13. notice that 12 and 13 have the same power value and we sorted them in ascending order. same for 14 and 15. example 2: input: lo = 7, hi = 11, k = 4 output: 7 explanation: the power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14]. the interval sorted by power is [8, 10, 11, 7, 9]. the fourth number in the sorted array is 7. constraints: 1 <= lo <= hi <= 1000 1 <= k <= hi - lo + 1
a 2d integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle. note: a lattice point is a point with integer coordinates. points that lie on the circumference of a circle are also considered to be inside it. example 1: input: circles = [[2,2,1]] output: 5 explanation: the figure above shows the given circle. the lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green. other points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle. hence, the number of lattice points present inside at least one circle is 5. example 2: input: circles = [[2,2,2],[3,4,1]] output: 16 explanation: the figure above shows the given circles. there are exactly 16 lattice points which are present inside at least one circle. some of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4). constraints: 1 <= circles.length <= 200 circles[i].length == 3 1 <= xi, yi <= 100 1 <= ri <= min(xi, yi)
are given three integers n, m and k. consider the following algorithm to find the maximum element of an array of positive integers: you should build the array arr which has the following properties: arr has exactly n integers. 1 <= arr[i] <= m where (0 <= i < n). after applying the mentioned algorithm to arr, the value search_cost is equal to k. return the number of ways to build the array arr under the mentioned conditions. as the answer may grow large, the answer must be computed modulo 109 + 7. example 1: input: n = 2, m = 3, k = 1 output: 6 explanation: the possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3] example 2: input: n = 5, m = 2, k = 3 output: 0 explanation: there are no possible arrays that satisify the mentioned conditions. example 3: input: n = 9, m = 1, k = 1 output: 1 explanation: the only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1] constraints: 1 <= n <= 50 1 <= m <= 100 0 <= k <= n
are given an integer array target. you have an integer array initial of the same size as target with all elements initially zeros. in one operation you can choose any subarray from initial and increment each value by one. return the minimum number of operations to form a target array from initial. the test cases are generated so that the answer fits in a 32-bit integer. example 1: input: target = [1,2,3,2,1] output: 3 explanation: we need at least 3 operations to form the target array from the initial array. [0,0,0,0,0] increment 1 from index 0 to 4 (inclusive). [1,1,1,1,1] increment 1 from index 1 to 3 (inclusive). [1,2,2,2,1] increment 1 at index 2. [1,2,3,2,1] target array is formed. example 2: input: target = [3,1,1,2] output: 4 explanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] example 3: input: target = [3,1,5,4,2] output: 7 explanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2]. constraints: 1 <= target.length <= 105 1 <= target[i] <= 105
an integer n, return the number of trailing zeroes in n!. note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1. example 1: input: n = 3 output: 0 explanation: 3! = 6, no trailing zero. example 2: input: n = 5 output: 1 explanation: 5! = 120, one trailing zero. example 3: input: n = 0 output: 0 constraints: 0 <= n <= 104 follow up: could you write a solution that works in logarithmic time complexity?
is an exam room with n seats in a single row labeled from 0 to n - 1. when a student enters the room, they must sit in the seat that maximizes the distance to the closest person. if there are multiple such seats, they sit in the seat with the lowest number. if no one is in the room, then the student sits at seat number 0. design a class that simulates the mentioned exam room. implement the examroom class: examroom(int n) initializes the object of the exam room with the number of the seats n. int seat() returns the label of the seat at which the next student will set. void leave(int p) indicates that the student sitting at seat p will leave the room. it is guaranteed that there will be a student sitting at seat p. example 1: input ["examroom", "seat", "seat", "seat", "seat", "leave", "seat"] [[10], [], [], [], [], [4], []] output [null, 0, 9, 4, 2, null, 5] explanation examroom examroom = new examroom(10); examroom.seat(); // return 0, no one is in the room, then the student sits at seat number 0. examroom.seat(); // return 9, the student sits at the last seat number 9. examroom.seat(); // return 4, the student sits at the last seat number 4. examroom.seat(); // return 2, the student sits at the last seat number 2. examroom.leave(4); examroom.seat(); // return 5, the student sits at the last seat number 5. constraints: 1 <= n <= 109 it is guaranteed that there is a student sitting at seat p. at most 104 calls will be made to seat and leave.
a special dictionary that searches the words in it by a prefix and a suffix. implement the wordfilter class: wordfilter(string[] words) initializes the object with the words in the dictionary. f(string pref, string suff) returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. if there is more than one valid index, return the largest of them. if there is no such word in the dictionary, return -1. example 1: input ["wordfilter", "f"] [[["apple"]], ["a", "e"]] output [null, 0] explanation wordfilter wordfilter = new wordfilter(["apple"]); wordfilter.f("a", "e"); // return 0, because the word at index 0 has prefix = "a" and suffix = "e". constraints: 1 <= words.length <= 104 1 <= words[i].length <= 7 1 <= pref.length, suff.length <= 7 words[i], pref and suff consist of lowercase english letters only. at most 104 calls will be made to the function f.
a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise. for example, in s = "110100010" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3. note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. the same applies if there is no 1's. example 1: input: s = "1101" output: true explanation: the longest contiguous segment of 1s has length 2: "1101" the longest contiguous segment of 0s has length 1: "1101" the segment of 1s is longer, so return true. example 2: input: s = "111000" output: false explanation: the longest contiguous segment of 1s has length 3: "111000" the longest contiguous segment of 0s has length 3: "111000" the segment of 1s is not longer, so return false. example 3: input: s = "110100010" output: false explanation: the longest contiguous segment of 1s has length 2: "110100010" the longest contiguous segment of 0s has length 3: "110100010" the segment of 1s is not longer, so return false. constraints: 1 <= s.length <= 100 s[i] is either '0' or '1'.
are given a 0-indexed 2d integer array grid of size m x n which represents a field. each cell has one of three values: 0 represents grass, 1 represents fire, 2 represents a wall that you and fire cannot pass through. you are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). every minute, you may move to an adjacent grass cell. after your move, every fire cell will spread to all adjacent cells that are not walls. return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. if this is impossible, return -1. if you can always reach the safehouse regardless of the minutes stayed, return 109. note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse. a cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching). example 1: input: grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]] output: 3 explanation: the figure above shows the scenario where you stay in the initial position for 3 minutes. you will still be able to safely reach the safehouse. staying for more than 3 minutes will not allow you to safely reach the safehouse. example 2: input: grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]] output: -1 explanation: the figure above shows the scenario where you immediately move towards the safehouse. fire will spread to any cell you move towards and it is impossible to safely reach the safehouse. thus, -1 is returned. example 3: input: grid = [[0,0,0],[2,2,0],[1,2,0]] output: 1000000000 explanation: the figure above shows the initial grid. notice that the fire is contained by walls and you will always be able to safely reach the safehouse. thus, 109 is returned. constraints: m == grid.length n == grid[i].length 2 <= m, n <= 300 4 <= m * n <= 2 * 104 grid[i][j] is either 0, 1, or 2. grid[0][0] == grid[m - 1][n - 1] == 0
the root of a binary tree, return the most frequent subtree sum. if there is a tie, return all the values with the highest frequency in any order. the subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). example 1: input: root = [5,2,-3] output: [2,-3,4] example 2: input: root = [5,2,-5] output: [2] constraints: the number of nodes in the tree is in the range [1, 104]. -105 <= node.val <= 105
have a lock in front of you with 4 circular wheels. each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. the wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. each move consists of turning one wheel one slot. the lock initially starts at '0000', a string representing the state of the 4 wheels. you are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it. given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible. example 1: input: deadends = ["0201","0101","0102","1212","2002"], target = "0202" output: 6 explanation: a sequence of valid moves would be "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202". note that a sequence like "0000" -> "0001" -> "0002" -> "0102" -> "0202" would be invalid, because the wheels of the lock become stuck after the display becomes the dead end "0102". example 2: input: deadends = ["8888"], target = "0009" output: 1 explanation: we can turn the last wheel in reverse to move from "0000" -> "0009". example 3: input: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888" output: -1 explanation: we cannot reach the target without getting stuck. constraints: 1 <= deadends.length <= 500 deadends[i].length == 4 target.length == 4 target will not be in the list deadends. target and deadends[i] consist of digits only.
an integer array arr, return the number of distinct bitwise ors of all the non-empty subarrays of arr. the bitwise or of a subarray is the bitwise or of each integer in the subarray. the bitwise or of a subarray of one integer is that integer. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: arr = [0] output: 1 explanation: there is only one possible result: 0. example 2: input: arr = [1,1,2] output: 3 explanation: the possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. these yield the results 1, 1, 2, 1, 3, 3. there are 3 unique values, so the answer is 3. example 3: input: arr = [1,2,4] output: 6 explanation: the possible results are 1, 2, 3, 4, 6, and 7. constraints: 1 <= arr.length <= 5 * 104 0 <= arr[i] <= 109
have n chips, where the position of the ith chip is position[i]. we need to move all the chips to the same position. in one step, we can change the position of the ith chip from position[i] to: position[i] + 2 or position[i] - 2 with cost = 0. position[i] + 1 or position[i] - 1 with cost = 1. return the minimum cost needed to move all the chips to the same position. example 1: input: position = [1,2,3] output: 1 explanation: first step: move the chip at position 3 to position 1 with cost = 0. second step: move the chip at position 2 to position 1 with cost = 1. total cost is 1. example 2: input: position = [2,2,2,3,3] output: 2 explanation: we can move the two chips at position 3 to position 2. each move has cost = 1. the total cost = 2. example 3: input: position = [1,1000000000] output: 1 constraints: 1 <= position.length <= 100 1 <= position[i] <= 10^9
the strings s1 and s2 of size n and the string evil, return the number of good strings. a good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. since the answer can be a huge number, return this modulo 109 + 7. example 1: input: n = 2, s1 = "aa", s2 = "da", evil = "b" output: 51 explanation: there are 25 good strings starting with 'a': "aa","ac","ad",...,"az". then there are 25 good strings starting with 'c': "ca","cc","cd",...,"cz" and finally there is one good string starting with 'd': "da". example 2: input: n = 8, s1 = "leetcode", s2 = "leetgoes", evil = "leet" output: 0 explanation: all strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix "leet", therefore, there is not any good string. example 3: input: n = 2, s1 = "gx", s2 = "gz", evil = "x" output: 2 constraints: s1.length == n s2.length == n s1 <= s2 1 <= n <= 500 1 <= evil.length <= 50 all strings consist of lowercase english letters.
are given an array of strings words and a string chars. a string is good if it can be formed by characters from chars (each character can only be used once). return the sum of lengths of all good strings in words. example 1: input: words = ["cat","bt","hat","tree"], chars = "atach" output: 6 explanation: the strings that can be formed are "cat" and "hat" so the answer is 3 + 3 = 6. example 2: input: words = ["hello","world","leetcode"], chars = "welldonehoneyr" output: 10 explanation: the strings that can be formed are "hello" and "world" so the answer is 5 + 5 = 10. constraints: 1 <= words.length <= 1000 1 <= words[i].length, chars.length <= 100 words[i] and chars consist of lowercase english letters.
a 2d array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid. a cycle is a path of length 4 or more in the grid that starts and ends at the same cell. from a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell. also, you cannot move to the cell that you visited in your last move. for example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell. return true if any cycle of the same value exists in grid, otherwise, return false. example 1: input: grid = [["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]] output: true explanation: there are two valid cycles shown in different colors in the image below: example 2: input: grid = [["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]] output: true explanation: there is only one valid cycle highlighted in the image below: example 3: input: grid = [["a","b","b"],["b","z","b"],["b","b","a"]] output: false constraints: m == grid.length n == grid[i].length 1 <= m, n <= 500 grid consists only of lowercase english letters.
are given two strings of the same length s and t. in one step you can choose any character of t and replace it with another character. return the minimum number of steps to make t an anagram of s. an anagram of a string is a string that contains the same characters with a different (or the same) ordering. example 1: input: s = "bab", t = "aba" output: 1 explanation: replace the first 'a' in t with b, t = "bba" which is anagram of s. example 2: input: s = "leetcode", t = "practice" output: 5 explanation: replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s. example 3: input: s = "anagram", t = "mangaar" output: 0 explanation: "anagram" and "mangaar" are anagrams. constraints: 1 <= s.length <= 5 * 104 s.length == t.length s and t consist of lowercase english letters only.
an expression such as expression = "e + 8 - a + 5" and an evaluation map such as {"e": 1} (given in terms of evalvars = ["e"] and evalints = [1]), return a list of tokens representing the simplified expression, such as ["-1*a","14"] an expression alternates chunks and symbols, with a space separating each chunk and symbol. a chunk is either an expression in parentheses, a variable, or a non-negative integer. a variable is a string of lowercase letters (not including digits.) note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like "2x" or "-x". expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. for example, expression = "1 + 2 * 3" has an answer of ["7"]. the format of the output is as follows: for each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically. for example, we would never write a term like "b*a*c", only "a*b*c". terms have degrees equal to the number of free variables being multiplied, counting multiplicity. we write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. for example, "a*a*b*c" has degree 4. the leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) a leading coefficient of 1 is still printed. an example of a well-formatted answer is ["-2*a*a*a", "3*a*a*b", "3*b*b", "4*a", "5*c", "-6"]. terms (including constant terms) with coefficient 0 are not included. for example, an expression of "0" has an output of []. note: you may assume that the given expression is always valid. all intermediate results will be in the range of [-231, 231 - 1]. example 1: input: expression = "e + 8 - a + 5", evalvars = ["e"], evalints = [1] output: ["-1*a","14"] example 2: input: expression = "e - 8 + temperature - pressure", evalvars = ["e", "temperature"], evalints = [1, 12] output: ["-1*pressure","5"] example 3: input: expression = "(e + 8) * (e - 8)", evalvars = [], evalints = [] output: ["1*e*e","-64"] constraints: 1 <= expression.length <= 250 expression consists of lowercase english letters, digits, '+', '-', '*', '(', ')', ' '. expression does not contain any leading or trailing spaces. all the tokens in expression are separated by a single space. 0 <= evalvars.length <= 100 1 <= evalvars[i].length <= 20 evalvars[i] consists of lowercase english letters. evalints.length == evalvars.length -100 <= evalints[i] <= 100
a binary string s and an integer k, return true if every binary code of length k is a substring of s. otherwise, return false. example 1: input: s = "00110110", k = 2 output: true explanation: the binary codes of length 2 are "00", "01", "10" and "11". they can be all found as substrings at indices 0, 1, 3 and 2 respectively. example 2: input: s = "0110", k = 1 output: true explanation: the binary codes of length 1 are "0" and "1", it is clear that both exist as a substring. example 3: input: s = "0110", k = 2 output: false explanation: the binary code "00" is of length 2 and does not exist in the array. constraints: 1 <= s.length <= 5 * 105 s[i] is either '0' or '1'. 1 <= k <= 20
are given an array of integers stones where stones[i] is the weight of the ith stone. we are playing a game with the stones. on each turn, we choose the heaviest two stones and smash them together. suppose the heaviest two stones have weights x and y with x <= y. the result of this smash is: if x == y, both stones are destroyed, and if x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. at the end of the game, there is at most one stone left. return the weight of the last remaining stone. if there are no stones left, return 0. example 1: input: stones = [2,7,4,1,8,1] output: 1 explanation: we combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone. example 2: input: stones = [1] output: 1 constraints: 1 <= stones.length <= 30 1 <= stones[i] <= 1000
to a bug, there are many duplicate folders in a file system. you are given a 2d array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system. for example, ["one", "two", "three"] represents the path "/one/two/three". two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. the folders do not need to be at the root level to be identical. if two or more folders are identical, then mark the folders as well as all their subfolders. for example, folders "/a" and "/b" in the file structure below are identical. they (as well as their subfolders) should all be marked: /a /a/x /a/x/y /a/z /b /b/x /b/x/y /b/z however, if the file structure also included the path "/b/w", then the folders "/a" and "/b" would not be identical. note that "/a/x" and "/b/x" would still be considered identical even with the added folder. once all the identical folders and their subfolders have been marked, the file system will delete all of them. the file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted. return the 2d array ans containing the paths of the remaining folders after deleting all the marked folders. the paths may be returned in any order. example 1: input: paths = [["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]] output: [["d"],["d","a"]] explanation: the file structure is as shown. folders "/a" and "/c" (and their subfolders) are marked for deletion because they both contain an empty folder named "b". example 2: input: paths = [["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]] output: [["c"],["c","b"],["a"],["a","b"]] explanation: the file structure is as shown. folders "/a/b/x" and "/w" (and their subfolders) are marked for deletion because they both contain an empty folder named "y". note that folders "/a" and "/c" are identical after the deletion, but they are not deleted because they were not marked beforehand. example 3: input: paths = [["a","b"],["c","d"],["c"],["a"]] output: [["c"],["c","d"],["a"],["a","b"]] explanation: all folders are unique in the file system. note that the returned array can be in a different order as the order does not matter. constraints: 1 <= paths.length <= 2 * 104 1 <= paths[i].length <= 500 1 <= paths[i][j].length <= 10 1 <= sum(paths[i][j].length) <= 2 * 105 path[i][j] consists of lowercase english letters. no two paths lead to the same folder. for any folder not at the root level, its parent folder will also be in the input.
loves to eat bananas. there are n piles of bananas, the ith pile has piles[i] bananas. the guards have gone and will come back in h hours. koko can decide her bananas-per-hour eating speed of k. each hour, she chooses some pile of bananas and eats k bananas from that pile. if the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. return the minimum integer k such that she can eat all the bananas within h hours. example 1: input: piles = [3,6,7,11], h = 8 output: 4 example 2: input: piles = [30,11,23,4,20], h = 5 output: 30 example 3: input: piles = [30,11,23,4,20], h = 6 output: 23 constraints: 1 <= piles.length <= 104 piles.length <= h <= 109 1 <= piles[i] <= 109
is a special square room with mirrors on each of the four walls. except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2. the square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor. given the two integers p and q, return the number of the receptor that the ray meets first. the test cases are guaranteed so that the ray will meet a receptor eventually. example 1: input: p = 2, q = 1 output: 2 explanation: the ray meets receptor 2 the first time it gets reflected back to the left wall. example 2: input: p = 3, q = 1 output: 1 constraints: 1 <= q <= p <= 1000
are given a string num representing the digits of a very large integer and an integer k. you are allowed to swap any two adjacent digits of the integer at most k times. return the minimum integer you can obtain also as a string. example 1: input: num = "4321", k = 4 output: "1342" explanation: the steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown. example 2: input: num = "100", k = 1 output: "010" explanation: it's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros. example 3: input: num = "36789", k = 1000 output: "36789" explanation: we can keep the number without any swaps. constraints: 1 <= num.length <= 3 * 104 num consists of only digits and does not contain leading zeros. 1 <= k <= 109
is an undirected graph with n nodes, numbered from 0 to n - 1. you are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. a node sequence is valid if it meets the following conditions: there is an edge connecting every pair of adjacent nodes in the sequence. no node appears more than once in the sequence. the score of a node sequence is defined as the sum of the scores of the nodes in the sequence. return the maximum score of a valid node sequence with a length of 4. if no such sequence exists, return -1. example 1: input: scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]] output: 24 explanation: the figure above shows the graph and the chosen node sequence [0,1,2,3]. the score of the node sequence is 5 + 2 + 9 + 8 = 24. it can be shown that no other node sequence has a score of more than 24. note that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24. the sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3. example 2: input: scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]] output: -1 explanation: the figure above shows the graph. there are no valid node sequences of length 4, so we return -1. constraints: n == scores.length 4 <= n <= 5 * 104 1 <= scores[i] <= 108 0 <= edges.length <= 5 * 104 edges[i].length == 2 0 <= ai, bi <= n - 1 ai != bi there are no duplicate edges.
two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. in other words s2 can break s1 or vice-versa. a string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1. example 1: input: s1 = "abc", s2 = "xya" output: true explanation: "ayx" is a permutation of s2="xya" which can break to string "abc" which is a permutation of s1="abc". example 2: input: s1 = "abe", s2 = "acd" output: false explanation: all permutations for s1="abe" are: "abe", "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd" are: "acd", "adc", "cad", "cda", "dac" and "dca". however, there is not any permutation from s1 which can break some permutation from s2 and vice-versa. example 3: input: s1 = "leetcodee", s2 = "interview" output: true constraints: s1.length == n s2.length == n 1 <= n <= 10^5 all strings consist of lowercase english letters.
is an integer array nums sorted in ascending order (with distinct values). prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). for example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums. you must write an algorithm with o(log n) runtime complexity. example 1: input: nums = [4,5,6,7,0,1,2], target = 0 output: 4 example 2: input: nums = [4,5,6,7,0,1,2], target = 3 output: -1 example 3: input: nums = [1], target = 0 output: -1 constraints: 1 <= nums.length <= 5000 -104 <= nums[i] <= 104 all values of nums are unique. nums is an ascending array that is possibly rotated. -104 <= target <= 104
want to schedule a list of jobs in d days. jobs are dependent (i.e to work on the ith job, you have to finish all the jobs j where 0 <= j < i). you have to finish at least one task every day. the difficulty of a job schedule is the sum of difficulties of each day of the d days. the difficulty of a day is the maximum difficulty of a job done on that day. you are given an integer array jobdifficulty and an integer d. the difficulty of the ith job is jobdifficulty[i]. return the minimum difficulty of a job schedule. if you cannot find a schedule for the jobs return -1. example 1: input: jobdifficulty = [6,5,4,3,2,1], d = 2 output: 7 explanation: first day you can finish the first 5 jobs, total difficulty = 6. second day you can finish the last job, total difficulty = 1. the difficulty of the schedule = 6 + 1 = 7 example 2: input: jobdifficulty = [9,9,9], d = 4 output: -1 explanation: if you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs. example 3: input: jobdifficulty = [1,1,1], d = 3 output: 3 explanation: the schedule is one job per day. total difficulty will be 3. constraints: 1 <= jobdifficulty.length <= 300 0 <= jobdifficulty[i] <= 1000 1 <= d <= 10
are given an integer array nums. a number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array. return all lonely numbers in nums. you may return the answer in any order. example 1: input: nums = [10,6,5,8] output: [10,8] explanation: - 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums. - 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums. - 5 is not a lonely number since 6 appears in nums and vice versa. hence, the lonely numbers in nums are [10, 8]. note that [8, 10] may also be returned. example 2: input: nums = [1,3,5,3] output: [1,5] explanation: - 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums. - 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums. - 3 is not a lonely number since it appears twice. hence, the lonely numbers in nums are [1, 5]. note that [5, 1] may also be returned. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 106
are given a 0-indexed integer array arr and an integer k. the array arr is circular. in other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element. you can do the following operation any number of times: pick any element from arr and increase or decrease it by 1. return the minimum number of operations such that the sum of each subarray of length k is equal. a subarray is a contiguous part of the array. example 1: input: arr = [1,4,1,3], k = 2 output: 1 explanation: we can do one operation on index 1 to make its value equal to 3. the array after the operation is [1,3,1,3] - subarray starts at index 0 is [1, 3], and its sum is 4 - subarray starts at index 1 is [3, 1], and its sum is 4 - subarray starts at index 2 is [1, 3], and its sum is 4 - subarray starts at index 3 is [3, 1], and its sum is 4 example 2: input: arr = [2,5,5,7], k = 3 output: 5 explanation: we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5. the array after the operations is [5,5,5,5] - subarray starts at index 0 is [5, 5, 5], and its sum is 15 - subarray starts at index 1 is [5, 5, 5], and its sum is 15 - subarray starts at index 2 is [5, 5, 5], and its sum is 15 - subarray starts at index 3 is [5, 5, 5], and its sum is 15 constraints: 1 <= k <= arr.length <= 105 1 <= arr[i] <= 109
are given an array of strings ideas that represents a list of names to be used in the process of naming a company. the process of naming a company is as follows: choose 2 distinct names from ideas, call them ideaa and ideab. swap the first letters of ideaa and ideab with each other. if both of the new names are not found in the original ideas, then the name ideaa ideab (the concatenation of ideaa and ideab, separated by a space) is a valid company name. otherwise, it is not a valid name. return the number of distinct valid names for the company. example 1: input: ideas = ["coffee","donuts","time","toffee"] output: 6 explanation: the following selections are valid: - ("coffee", "donuts"): the company name created is "doffee conuts". - ("donuts", "coffee"): the company name created is "conuts doffee". - ("donuts", "time"): the company name created is "tonuts dime". - ("donuts", "toffee"): the company name created is "tonuts doffee". - ("time", "donuts"): the company name created is "dime tonuts". - ("toffee", "donuts"): the company name created is "doffee tonuts". therefore, there are a total of 6 distinct company names. the following are some examples of invalid selections: - ("coffee", "time"): the name "toffee" formed after swapping already exists in the original array. - ("time", "toffee"): both names are still the same after swapping and exist in the original array. - ("coffee", "toffee"): both names formed after swapping already exist in the original array. example 2: input: ideas = ["lack","back"] output: 0 explanation: there are no valid selections. therefore, 0 is returned. constraints: 2 <= ideas.length <= 5 * 104 1 <= ideas[i].length <= 10 ideas[i] consists of lowercase english letters. all the strings in ideas are unique.
is a restaurant with a single chef. you are given an array customers, where customers[i] = [arrivali, timei]: arrivali is the arrival time of the ith customer. the arrival times are sorted in non-decreasing order. timei is the time needed to prepare the order of the ith customer. when a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. the customer waits till the chef finishes preparing his order. the chef does not prepare food for more than one customer at a time. the chef prepares food for customers in the order they were given in the input. return the average waiting time of all customers. solutions within 10-5 from the actual answer are considered accepted. example 1: input: customers = [[1,2],[2,5],[4,3]] output: 5.00000 explanation: 1) the first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2. 2) the second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6. 3) the third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7. so the average waiting time = (2 + 6 + 7) / 3 = 5. example 2: input: customers = [[5,2],[5,4],[10,3],[20,1]] output: 3.25000 explanation: 1) the first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2. 2) the second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6. 3) the third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4. 4) the fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1. so the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25. constraints: 1 <= customers.length <= 105 1 <= arrivali, timei <= 104 arrivali <= arrivali+1
bus has n stops numbered from 0 to n - 1 that form a circle. we know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n. the bus goes along both directions i.e. clockwise and counterclockwise. return the shortest distance between the given start and destination stops. example 1: input: distance = [1,2,3,4], start = 0, destination = 1 output: 1 explanation: distance between 0 and 1 is 1 or 9, minimum is 1. example 2: input: distance = [1,2,3,4], start = 0, destination = 2 output: 3 explanation: distance between 0 and 2 is 3 or 7, minimum is 3. example 3: input: distance = [1,2,3,4], start = 0, destination = 3 output: 4 explanation: distance between 0 and 3 is 6 or 4, minimum is 4. constraints: 1 <= n <= 10^4 distance.length == n 0 <= start, destination < n 0 <= distance[i] <= 10^4
are given a 0-indexed string expression of the form "<num1>+<num2>" where <num1> and <num2> represent positive integers. add a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. the left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'. return expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. if there are multiple answers that yield the same result, return any of them. the input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer. example 1: input: expression = "247+38" output: "2(47+38)" explanation: the expression evaluates to 2 * (47 + 38) = 2 * 85 = 170. note that "2(4)7+38" is invalid because the right parenthesis must be to the right of the '+'. it can be shown that 170 is the smallest possible value. example 2: input: expression = "12+34" output: "1(2+3)4" explanation: the expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20. example 3: input: expression = "999+999" output: "(999+999)" explanation: the expression evaluates to 999 + 999 = 1998. constraints: 3 <= expression.length <= 10 expression consists of digits from '1' to '9' and '+'. expression starts and ends with digits. expression contains exactly one '+'. the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.
are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1]. the number of global inversions is the number of the different pairs (i, j) where: 0 <= i < j < n nums[i] > nums[j] the number of local inversions is the number of indices i where: 0 <= i < n - 1 nums[i] > nums[i + 1] return true if the number of global inversions is equal to the number of local inversions. example 1: input: nums = [1,0,2] output: true explanation: there is 1 global inversion and 1 local inversion. example 2: input: nums = [1,2,0] output: false explanation: there are 2 global inversions and 1 local inversion. constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] < n all the integers of nums are unique. nums is a permutation of all the numbers in the range [0, n - 1].
have a movie renting company consisting of n shops. you want to implement a renting system that supports searching for, booking, and returning movies. the system should also support generating a report of the currently rented movies. each movie is given as a 2d integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. each shop carries at most one copy of a movie moviei. the system should support the following functions: search: finds the cheapest 5 shops that have an unrented copy of a given movie. the shops should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopi should appear first. if there are less than 5 matching shops, then all of them should be returned. if no shop has an unrented copy, then an empty list should be returned. rent: rents an unrented copy of a given movie from a given shop. drop: drops off a previously rented copy of a given movie at a given shop. report: returns the cheapest 5 rented movies (possibly of the same movie id) as a 2d list res where res[j] = [shopj, moviej] describes that the jth cheapest rented movie moviej was rented from the shop shopj. the movies in res should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopj should appear first, and if there is still tie, the one with the smaller moviej should appear first. if there are fewer than 5 rented movies, then all of them should be returned. if no movies are currently being rented, then an empty list should be returned. implement the movierentingsystem class: movierentingsystem(int n, int[][] entries) initializes the movierentingsystem object with n shops and the movies in entries. list<integer> search(int movie) returns a list of shops that have an unrented copy of the given movie as described above. void rent(int shop, int movie) rents the given movie from the given shop. void drop(int shop, int movie) drops off a previously rented movie at the given shop. list<list<integer>> report() returns a list of cheapest rented movies as described above. note: the test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie. example 1: input ["movierentingsystem", "search", "rent", "rent", "report", "drop", "search"] [[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]] output [null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]] explanation movierentingsystem movierentingsystem = new movierentingsystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]); movierentingsystem.search(1); // return [1, 0, 2], movies of id 1 are unrented at shops 1, 0, and 2. shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number. movierentingsystem.rent(0, 1); // rent movie 1 from shop 0. unrented movies at shop 0 are now [2,3]. movierentingsystem.rent(1, 2); // rent movie 2 from shop 1. unrented movies at shop 1 are now [1]. movierentingsystem.report(); // return [[0, 1], [1, 2]]. movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1. movierentingsystem.drop(1, 2); // drop off movie 2 at shop 1. unrented movies at shop 1 are now [1,2]. movierentingsystem.search(2); // return [0, 1]. movies of id 2 are unrented at shops 0 and 1. shop 0 is cheapest, followed by shop 1. constraints: 1 <= n <= 3 * 105 1 <= entries.length <= 105 0 <= shopi < n 1 <= moviei, pricei <= 104 each shop carries at most one copy of a movie moviei. at most 105 calls in total will be made to search, rent, drop and report.
an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. if it cannot be done, then return the same array. note that a swap exchanges the positions of two numbers arr[i] and arr[j] example 1: input: arr = [3,2,1] output: [3,1,2] explanation: swapping 2 and 1. example 2: input: arr = [1,1,5] output: [1,1,5] explanation: this is already the smallest permutation. example 3: input: arr = [1,9,4,6,7] output: [1,7,4,6,9] explanation: swapping 9 and 7. constraints: 1 <= arr.length <= 104 1 <= arr[i] <= 104
have n tiles, where each tile has one letter tiles[i] printed on it. return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles. example 1: input: tiles = "aab" output: 8 explanation: the possible sequences are "a", "b", "aa", "ab", "ba", "aab", "aba", "baa". example 2: input: tiles = "aaabbc" output: 188 example 3: input: tiles = "v" output: 1 constraints: 1 <= tiles.length <= 7 tiles consists of uppercase english letters.
want to split a group of n people (labeled from 1 to n) into two groups of any size. each person may dislike some other people, and they should not go into the same group. given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way. example 1: input: n = 4, dislikes = [[1,2],[1,3],[2,4]] output: true explanation: the first group has [1,4], and the second group has [2,3]. example 2: input: n = 3, dislikes = [[1,2],[1,3],[2,3]] output: false explanation: we need at least 3 groups to divide them. we cannot put them in two groups. constraints: 1 <= n <= 2000 0 <= dislikes.length <= 104 dislikes[i].length == 2 1 <= ai < bi <= n all the pairs of dislikes are unique.
the array favoritecompanies where favoritecompanies[i] is the list of favorites companies for the ith person (indexed from 0). return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. you must return the indices in increasing order. example 1: input: favoritecompanies = [["leetcode","google","facebook"],["google","microsoft"],["google","facebook"],["google"],["amazon"]] output: [0,1,4] explanation: person with index=2 has favoritecompanies[2]=["google","facebook"] which is a subset of favoritecompanies[0]=["leetcode","google","facebook"] corresponding to the person with index 0. person with index=3 has favoritecompanies[3]=["google"] which is a subset of favoritecompanies[0]=["leetcode","google","facebook"] and favoritecompanies[1]=["google","microsoft"]. other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4]. example 2: input: favoritecompanies = [["leetcode","google","facebook"],["leetcode","amazon"],["facebook","google"]] output: [0,1] explanation: in this case favoritecompanies[2]=["facebook","google"] is a subset of favoritecompanies[0]=["leetcode","google","facebook"], therefore, the answer is [0,1]. example 3: input: favoritecompanies = [["leetcode"],["google"],["facebook"],["amazon"]] output: [0,1,2,3] constraints: 1 <= favoritecompanies.length <= 100 1 <= favoritecompanies[i].length <= 500 1 <= favoritecompanies[i][j].length <= 20 all strings in favoritecompanies[i] are distinct. all lists of favorite companies are distinct, that is, if we sort alphabetically each list then favoritecompanies[i] != favoritecompanies[j]. all strings consist of lowercase english letters only.
are given coordinates, a string that represents the coordinates of a square of the chessboard. below is a chessboard for your reference. return true if the square is white, and false if the square is black. the coordinate will always represent a valid chessboard square. the coordinate will always have the letter first, and the number second. example 1: input: coordinates = "a1" output: false explanation: from the chessboard above, the square with coordinates "a1" is black, so return false. example 2: input: coordinates = "h3" output: true explanation: from the chessboard above, the square with coordinates "h3" is white, so return true. example 3: input: coordinates = "c7" output: false constraints: coordinates.length == 2 'a' <= coordinates[0] <= 'h' '1' <= coordinates[1] <= '8'
two strings first and second, consider occurrences in some text of the form "first second third", where second comes immediately after first, and third comes immediately after second. return an array of all the words third for each occurrence of "first second third". example 1: input: text = "alice is a good girl she is a good student", first = "a", second = "good" output: ["girl","student"] example 2: input: text = "we will we will rock you", first = "we", second = "will" output: ["we","rock"] constraints: 1 <= text.length <= 1000 text consists of lowercase english letters and spaces. all the words in text a separated by a single space. 1 <= first.length, second.length <= 10 first and second consist of lowercase english letters.
are given a 0-indexed integer array nums and an integer k. you have a starting score of 0. in one operation: choose an index i such that 0 <= i < nums.length, increase your score by nums[i], and replace nums[i] with ceil(nums[i] / 3). return the maximum possible score you can attain after applying exactly k operations. the ceiling function ceil(val) is the least integer greater than or equal to val. example 1: input: nums = [10,10,10,10,10], k = 5 output: 50 explanation: apply the operation to each array element exactly once. the final score is 10 + 10 + 10 + 10 + 10 = 50. example 2: input: nums = [1,10,3,3,3], k = 3 output: 17 explanation: you can do the following operations: operation 1: select i = 1, so nums becomes [1,4,3,3,3]. your score increases by 10. operation 2: select i = 1, so nums becomes [1,2,3,3,3]. your score increases by 4. operation 3: select i = 2, so nums becomes [1,1,1,3,3]. your score increases by 3. the final score is 10 + 4 + 3 = 17. constraints: 1 <= nums.length, k <= 105 1 <= nums[i] <= 109
are given an array of strings products and a string searchword. design a system that suggests at most three product names from products after each character of searchword is typed. suggested products should have common prefix with searchword. if there are more than three products with a common prefix return the three lexicographically minimums products. return a list of lists of the suggested products after each character of searchword is typed. example 1: input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchword = "mouse" output: [["mobile","moneypot","monitor"],["mobile","moneypot","monitor"],["mouse","mousepad"],["mouse","mousepad"],["mouse","mousepad"]] explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]. after typing m and mo all products match and we show user ["mobile","moneypot","monitor"]. after typing mou, mous and mouse the system suggests ["mouse","mousepad"]. example 2: input: products = ["havana"], searchword = "havana" output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]] explanation: the only word "havana" will be always suggested while typing the search word. constraints: 1 <= products.length <= 1000 1 <= products[i].length <= 3000 1 <= sum(products[i].length) <= 2 * 104 all the strings of products are unique. products[i] consists of lowercase english letters. 1 <= searchword.length <= 1000 searchword consists of lowercase english letters.
are given a string s that contains some bracket pairs, with each pair containing a non-empty key. for example, in the string "(name)is(age)yearsold", there are two bracket pairs that contain the keys "name" and "age". you know the values of a wide range of keys. this is represented by a 2d string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei. you are tasked to evaluate all of the bracket pairs. when you evaluate a bracket pair that contains some key keyi, you will: replace keyi and the bracket pair with the key's corresponding valuei. if you do not know the value of the key, you will replace keyi and the bracket pair with a question mark "?" (without the quotation marks). each key will appear at most once in your knowledge. there will not be any nested brackets in s. return the resulting string after evaluating all of the bracket pairs. example 1: input: s = "(name)is(age)yearsold", knowledge = [["name","bob"],["age","two"]] output: "bobistwoyearsold" explanation: the key "name" has a value of "bob", so replace "(name)" with "bob". the key "age" has a value of "two", so replace "(age)" with "two". example 2: input: s = "hi(name)", knowledge = [["a","b"]] output: "hi?" explanation: as you do not know the value of the key "name", replace "(name)" with "?". example 3: input: s = "(a)(a)(a)aaa", knowledge = [["a","yes"]] output: "yesyesyesaaa" explanation: the same key can appear multiple times. the key "a" has a value of "yes", so replace all occurrences of "(a)" with "yes". notice that the "a"s not in a bracket pair are not evaluated. constraints: 1 <= s.length <= 105 0 <= knowledge.length <= 105 knowledge[i].length == 2 1 <= keyi.length, valuei.length <= 10 s consists of lowercase english letters and round brackets '(' and ')'. every open bracket '(' in s will have a corresponding close bracket ')'. the key in each bracket pair of s will be non-empty. there will not be any nested bracket pairs in s. keyi and valuei consist of lowercase english letters. each keyi in knowledge is unique.
are given a 0-indexed m x n integer matrix grid. your initial position is at the top-left cell (0, 0). starting from the cell (i, j), you can move to one of the following cells: cells (i, k) with j < k <= grid[i][j] + j (rightward movement), or cells (k, j) with i < k <= grid[i][j] + i (downward movement). return the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). if there is no valid path, return -1. example 1: input: grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]] output: 4 explanation: the image above shows one of the paths that visits exactly 4 cells. example 2: input: grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]] output: 3 explanation: the image above shows one of the paths that visits exactly 3 cells. example 3: input: grid = [[2,1,0],[1,0,0]] output: -1 explanation: it can be proven that no path exists. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= grid[i][j] < m * n grid[m - 1][n - 1] == 0
are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. the digits are ordered from most significant to least significant in left-to-right order. the large integer does not contain any leading 0's. increment the large integer by one and return the resulting array of digits. example 1: input: digits = [1,2,3] output: [1,2,4] explanation: the array represents the integer 123. incrementing by one gives 123 + 1 = 124. thus, the result should be [1,2,4]. example 2: input: digits = [4,3,2,1] output: [4,3,2,2] explanation: the array represents the integer 4321. incrementing by one gives 4321 + 1 = 4322. thus, the result should be [4,3,2,2]. example 3: input: digits = [9] output: [1,0] explanation: the array represents the integer 9. incrementing by one gives 9 + 1 = 10. thus, the result should be [1,0]. constraints: 1 <= digits.length <= 100 0 <= digits[i] <= 9 digits does not contain any leading 0's.
are given an array tasks where tasks[i] = [actuali, minimumi]: actuali is the actual amount of energy you spend to finish the ith task. minimumi is the minimum amount of energy you require to begin the ith task. for example, if the task is [10, 12] and your current energy is 11, you cannot start this task. however, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it. you can finish the tasks in any order you like. return the minimum initial amount of energy you will need to finish all the tasks. example 1: input: tasks = [[1,2],[2,4],[4,8]] output: 8 explanation: starting with 8 energy, we finish the tasks in the following order: - 3rd task. now energy = 8 - 4 = 4. - 2nd task. now energy = 4 - 2 = 2. - 1st task. now energy = 2 - 1 = 1. notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task. example 2: input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]] output: 32 explanation: starting with 32 energy, we finish the tasks in the following order: - 1st task. now energy = 32 - 1 = 31. - 2nd task. now energy = 31 - 2 = 29. - 3rd task. now energy = 29 - 10 = 19. - 4th task. now energy = 19 - 10 = 9. - 5th task. now energy = 9 - 8 = 1. example 3: input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]] output: 27 explanation: starting with 27 energy, we finish the tasks in the following order: - 5th task. now energy = 27 - 5 = 22. - 2nd task. now energy = 22 - 2 = 20. - 3rd task. now energy = 20 - 3 = 17. - 1st task. now energy = 17 - 1 = 16. - 4th task. now energy = 16 - 4 = 12. - 6th task. now energy = 12 - 6 = 6. constraints: 1 <= tasks.length <= 105 1 <= actuali <= minimumi <= 104
an integer number n, return the difference between the product of its digits and the sum of its digits. example 1: input: n = 234 output: 15 explanation: product of digits = 2 * 3 * 4 = 24 sum of digits = 2 + 3 + 4 = 9 result = 24 - 9 = 15 example 2: input: n = 4421 output: 21 explanation: product of digits = 4 * 4 * 2 * 1 = 32 sum of digits = 4 + 4 + 2 + 1 = 11 result = 32 - 11 = 21 constraints: 1 <= n <= 10^5
a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. if the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. more formally, the property root.val = min(root.left.val, root.right.val) always holds. given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree. if no such second minimum value exists, output -1 instead. example 1: input: root = [2,2,5,null,null,5,7] output: 5 explanation: the smallest value is 2, the second smallest value is 5. example 2: input: root = [2,2,2] output: -1 explanation: the smallest value is 2, but there isn't any second smallest value. constraints: the number of nodes in the tree is in the range [1, 25]. 1 <= node.val <= 231 - 1 root.val == min(root.left.val, root.right.val) for each internal node of the tree.
is a 1 million by 1 million grid on an xy-plane, and the coordinates of each grid square are (x, y). we start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. there is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi). each move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. we are also not allowed to walk outside of the grid. return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves. example 1: input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2] output: false explanation: the target square is inaccessible starting from the source square because we cannot move. we cannot move north or east because those squares are blocked. we cannot move south or west because we cannot go outside of the grid. example 2: input: blocked = [], source = [0,0], target = [999999,999999] output: true explanation: because there are no blocked cells, it is possible to reach the target square. constraints: 0 <= blocked.length <= 200 blocked[i].length == 2 0 <= xi, yi < 106 source.length == target.length == 2 0 <= sx, sy, tx, ty < 106 source != target it is guaranteed that source and target are not blocked.
are some prizes on the x-axis. you are given an integer array prizepositions that is sorted in non-decreasing order, where prizepositions[i] is the position of the ith prize. there could be different prizes at the same position on the line. you are also given an integer k. you are allowed to select two segments with integer endpoints. the length of each segment must be k. you will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). the two selected segments may intersect. for example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizepositions[i] <= 3 or 2 <= prizepositions[i] <= 4. return the maximum number of prizes you can win if you choose the two segments optimally. example 1: input: prizepositions = [1,1,2,2,3,3,5], k = 2 output: 7 explanation: in this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5]. example 2: input: prizepositions = [1,2,3,4], k = 0 output: 2 explanation: for this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes. constraints: 1 <= prizepositions.length <= 105 1 <= prizepositions[i] <= 109 0 <= k <= 109 prizepositions is sorted in non-decreasing order.


is an undirected graph consisting of n nodes numbered from 1 to n. you are given the integer n and a 2d array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. the graph can be disconnected. you can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops. return true if it is possible to make the degree of each node in the graph even, otherwise return false. the degree of a node is the number of edges connected to it. example 1: input: n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]] output: true explanation: the above diagram shows a valid way of adding an edge. every node in the resulting graph is connected to an even number of edges. example 2: input: n = 4, edges = [[1,2],[3,4]] output: true explanation: the above diagram shows a valid way of adding two edges. example 3: input: n = 4, edges = [[1,2],[1,3],[1,4]] output: false explanation: it is not possible to obtain a valid graph with adding at most 2 edges. constraints: 3 <= n <= 105 2 <= edges.length <= 105 edges[i].length == 2 1 <= ai, bi <= n ai != bi there are no repeated edges.
are given two strings current and correct representing two 24-hour times. 24-hour times are formatted as "hh:mm", where hh is between 00 and 23, and mm is between 00 and 59. the earliest 24-hour time is 00:00, and the latest is 23:59. in one operation you can increase the time current by 1, 5, 15, or 60 minutes. you can perform this operation any number of times. return the minimum number of operations needed to convert current to correct. example 1: input: current = "02:30", correct = "04:35" output: 3 explanation: we can convert current to correct in 3 operations as follows: - add 60 minutes to current. current becomes "03:30". - add 60 minutes to current. current becomes "04:30". - add 5 minutes to current. current becomes "04:35". it can be proven that it is not possible to convert current to correct in fewer than 3 operations. example 2: input: current = "11:00", correct = "11:01" output: 1 explanation: we only have to add one minute to current, so the minimum number of operations needed is 1. constraints: current and correct are in the format "hh:mm" current <= correct
and bob take turns playing a game, with alice starting first. you are given a string num of even length consisting of digits and '?' characters. on each turn, a player will do the following if there is still at least one '?' in num: choose an index i where num[i] == '?'. replace num[i] with any digit between '0' and '9'. the game ends when there are no more '?' characters in num. for bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. for alice to win, the sums must not be equal. for example, if the game ended with num = "243801", then bob wins because 2+4+3 = 8+0+1. if the game ended with num = "243803", then alice wins because 2+4+3 != 8+0+3. assuming alice and bob play optimally, return true if alice will win and false if bob will win. example 1: input: num = "5023" output: false explanation: there are no moves to be made. the sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3. example 2: input: num = "25??" output: true explanation: alice can replace one of the '?'s with '9' and it will be impossible for bob to make the sums equal. example 3: input: num = "?3295???" output: false explanation: it can be proven that bob will always win. one possible outcome is: - alice replaces the first '?' with '9'. num = "93295???". - bob replaces one of the '?' in the right half with '9'. num = "932959??". - alice replaces one of the '?' in the right half with '2'. num = "9329592?". - bob replaces the last '?' in the right half with '7'. num = "93295927". bob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7. constraints: 2 <= num.length <= 105 num.length is even. num consists of only digits and '?'.
respect to a given puzzle string, a word is valid if both the following conditions are satisfied: word contains the first letter of puzzle. for each letter in word, that letter is in puzzle. for example, if the puzzle is "abcdefg", then valid words are "faced", "cabbage", and "baggage", while invalid words are "beefed" (does not include 'a') and "based" (includes 's' which is not in the puzzle). return an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i]. example 1: input: words = ["aaaa","asas","able","ability","actt","actor","access"], puzzles = ["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"] output: [1,1,3,2,4,0] explanation: 1 valid word for "aboveyz" : "aaaa" 1 valid word for "abrodyz" : "aaaa" 3 valid words for "abslute" : "aaaa", "asas", "able" 2 valid words for "absoryz" : "aaaa", "asas" 4 valid words for "actresz" : "aaaa", "asas", "actt", "access" there are no valid words for "gaswxyz" cause none of the words in the list contains letter 'g'. example 2: input: words = ["apple","pleas","please"], puzzles = ["aelwxyz","aelpxyz","aelpsxy","saelpxy","xaelpsy"] output: [0,1,3,2,0] constraints: 1 <= words.length <= 105 4 <= words[i].length <= 50 1 <= puzzles.length <= 104 puzzles[i].length == 7 words[i] and puzzles[i] consist of lowercase english letters. each puzzles[i] does not contain repeated characters.
is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. a frog starts at point 0 in the second lane and wants to jump to point n. however, there could be obstacles along the way. you are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. if obstacles[i] == 0, there are no obstacles at point i. there will be at most one obstacle in the 3 lanes at each point. for example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2. the frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. to avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane. for example, the frog can jump from lane 3 at point 3 to lane 1 at point 3. return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0. note: there will be no obstacles on points 0 and n. example 1: input: obstacles = [0,1,2,3,0] output: 2 explanation: the optimal solution is shown by the arrows above. there are 2 side jumps (red arrows). note that the frog can jump over obstacles only when making side jumps (as shown at point 2). example 2: input: obstacles = [0,1,1,3,3,0] output: 0 explanation: there are no obstacles on lane 2. no side jumps are required. example 3: input: obstacles = [0,2,1,0,3,0] output: 2 explanation: the optimal solution is shown by the arrows above. there are 2 side jumps. constraints: obstacles.length == n + 1 1 <= n <= 5 * 105 0 <= obstacles[i] <= 3 obstacles[0] == obstacles[n] == 0
a parentheses string s containing only the characters '(' and ')'. a parentheses string is balanced if: any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'. left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'. in other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis. for example, "())", "())(())))" and "(())())))" are balanced, ")()", "()))" and "(()))" are not balanced. you can insert the characters '(' and ')' at any position of the string to balance it if needed. return the minimum number of insertions needed to make s balanced. example 1: input: s = "(()))" output: 1 explanation: the second '(' has two matching '))', but the first '(' has only ')' matching. we need to add one more ')' at the end of the string to be "(())))" which is balanced. example 2: input: s = "())" output: 0 explanation: the string is already balanced. example 3: input: s = "))())(" output: 3 explanation: add '(' to match the first '))', add '))' to match the last '('. constraints: 1 <= s.length <= 105 s consists of '(' and ')' only.
have n flower seeds. every seed must be planted first before it can begin to grow, then bloom. planting a seed takes time and so does the growth of a seed. you are given two 0-indexed integer arrays planttime and growtime, of length n each: planttime[i] is the number of full days it takes you to plant the ith seed. every day, you can work on planting exactly one seed. you do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked planttime[i] days on planting it in total. growtime[i] is the number of full days it takes the ith seed to grow after being completely planted. after the last day of its growth, the flower blooms and stays bloomed forever. from the beginning of day 0, you can plant the seeds in any order. return the earliest possible day where all seeds are blooming. example 1: input: planttime = [1,4,3], growtime = [2,3,1] output: 9 explanation: the grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms. one optimal way is: on day 0, plant the 0th seed. the seed grows for 2 full days and blooms on day 3. on days 1, 2, 3, and 4, plant the 1st seed. the seed grows for 3 full days and blooms on day 8. on days 5, 6, and 7, plant the 2nd seed. the seed grows for 1 full day and blooms on day 9. thus, on day 9, all the seeds are blooming. example 2: input: planttime = [1,2,3,2], growtime = [2,1,2,1] output: 9 explanation: the grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms. one optimal way is: on day 1, plant the 0th seed. the seed grows for 2 full days and blooms on day 4. on days 0 and 3, plant the 1st seed. the seed grows for 1 full day and blooms on day 5. on days 2, 4, and 5, plant the 2nd seed. the seed grows for 2 full days and blooms on day 8. on days 6 and 7, plant the 3rd seed. the seed grows for 1 full day and blooms on day 9. thus, on day 9, all the seeds are blooming. example 3: input: planttime = [1], growtime = [1] output: 2 explanation: on day 0, plant the 0th seed. the seed grows for 1 full day and blooms on day 2. thus, on day 2, all the seeds are blooming. constraints: n == planttime.length == growtime.length 1 <= n <= 105 1 <= planttime[i], growtime[i] <= 104
n points on a 1-d plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. the endpoints of each segment must have integral coordinates. the k line segments do not have to cover all n points, and they are allowed to share endpoints. return the number of ways we can draw k non-overlapping line segments. since this number can be huge, return it modulo 109 + 7. example 1: input: n = 4, k = 2 output: 5 explanation: the two line segments are shown in red and blue. the image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}. example 2: input: n = 3, k = 1 output: 3 explanation: the 3 ways are {(0,1)}, {(0,2)}, {(1,2)}. example 3: input: n = 30, k = 7 output: 796297179 explanation: the total number of possible ways to draw 7 line segments is 3796297200. taking this number modulo 109 + 7 gives us 796297179. constraints: 2 <= n <= 1000 1 <= k <= n-1
encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). for example, to compress the string "aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". thus the compressed string becomes "a2bc3". notice that in this problem, we are not adding '1' after single characters. given a string s and an integer k. you need to delete at most k characters from s such that the run-length encoded version of s has minimum length. find the minimum length of the run-length encoded version of s after deleting at most k characters. example 1: input: s = "aaabcccd", k = 2 output: 4 explanation: compressing s without deleting anything will give us "a3bc3d" of length 6. deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = "abcccd" which compressed is abc3d. therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be "a3c3" of length 4. example 2: input: s = "aabbaa", k = 2 output: 2 explanation: if we delete both 'b' characters, the resulting compressed string would be "a4" of length 2. example 3: input: s = "aaaaaaaaaaa", k = 0 output: 3 explanation: since k is zero, we cannot delete anything. the compressed string is "a11" of length 3. constraints: 1 <= s.length <= 100 0 <= k <= s.length s contains only lowercase english letters.
are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. find the number of pairs (i, j) such that: 0 <= i < j <= n - 1 and nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff. return the number of pairs that satisfy the conditions. example 1: input: nums1 = [3,2,5], nums2 = [2,2,1], diff = 1 output: 3 explanation: there are 3 pairs that satisfy the conditions: 1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. since i < j and 1 <= 1, this pair satisfies the conditions. 2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. since i < j and -2 <= 2, this pair satisfies the conditions. 3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. since i < j and -3 <= 2, this pair satisfies the conditions. therefore, we return 3. example 2: input: nums1 = [3,-1], nums2 = [-2,2], diff = -1 output: 0 explanation: since there does not exist any pair that satisfies the conditions, we return 0. constraints: n == nums1.length == nums2.length 2 <= n <= 105 -104 <= nums1[i], nums2[i] <= 104 -104 <= diff <= 104
are n piles of stones arranged in a row. the ith pile has stones[i] stones. a move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles. return the minimum cost to merge all piles of stones into one pile. if it is impossible, return -1. example 1: input: stones = [3,2,4,1], k = 2 output: 20 explanation: we start with [3, 2, 4, 1]. we merge [3, 2] for a cost of 5, and we are left with [5, 4, 1]. we merge [4, 1] for a cost of 5, and we are left with [5, 5]. we merge [5, 5] for a cost of 10, and we are left with [10]. the total cost was 20, and this is the minimum possible. example 2: input: stones = [3,2,4,1], k = 3 output: -1 explanation: after any merge operation, there are 2 piles left, and we can't merge anymore. so the task is impossible. example 3: input: stones = [3,5,1,2,6], k = 3 output: 25 explanation: we start with [3, 5, 1, 2, 6]. we merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6]. we merge [3, 8, 6] for a cost of 17, and we are left with [17]. the total cost was 25, and this is the minimum possible. constraints: n == stones.length 1 <= n <= 30 1 <= stones[i] <= 100 2 <= k <= 30
alphabetical continuous string is a string consisting of consecutive letters in the alphabet. in other words, it is any substring of the string "abcdefghijklmnopqrstuvwxyz". for example, "abc" is an alphabetical continuous string, while "acb" and "za" are not. given a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring. example 1: input: s = "abacaba" output: 2 explanation: there are 4 distinct continuous substrings: "a", "b", "c" and "ab". "ab" is the longest continuous substring. example 2: input: s = "abcde" output: 5 explanation: "abcde" is the longest continuous substring. constraints: 1 <= s.length <= 105 s consists of only english lowercase letters.
schema table: customers +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id and name of a customer. table: orders +-------------+------+ | column name | type | +-------------+------+ | id | int | | customerid | int | +-------------+------+ id is the primary key column for this table. customerid is a foreign key of the id from the customers table. each row of this table indicates the id of an order and the id of the customer who ordered it. write an sql query to report all customers who never order anything. return the result table in any order. the query result format is in the following example. example 1: input: customers table: +----+-------+ | id | name | +----+-------+ | 1 | joe | | 2 | henry | | 3 | sam | | 4 | max | +----+-------+ orders table: +----+------------+ | id | customerid | +----+------------+ | 1 | 3 | | 2 | 1 | +----+------------+ output: +-----------+ | customers | +-----------+ | henry | | max | +-----------+
are given a stream of n videos, each represented by a distinct number from 1 to n that you need to "upload" to a server. you need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process. we consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. the longest uploaded prefix is the maximum value of i that satisfies this definition. implement the luprefix class: luprefix(int n) initializes the object for a stream of n videos. void upload(int video) uploads video to the server. int longest() returns the length of the longest uploaded prefix defined above. example 1: input ["luprefix", "upload", "longest", "upload", "longest", "upload", "longest"] [[4], [3], [], [1], [], [2], []] output [null, null, 0, null, 1, null, 3] explanation luprefix server = new luprefix(4); // initialize a stream of 4 videos. server.upload(3); // upload video 3. server.longest(); // since video 1 has not been uploaded yet, there is no prefix. // so, we return 0. server.upload(1); // upload video 1. server.longest(); // the prefix [1] is the longest uploaded prefix, so we return 1. server.upload(2); // upload video 2. server.longest(); // the prefix [1,2,3] is the longest uploaded prefix, so we return 3. constraints: 1 <= n <= 105 1 <= video <= n all values of video are distinct. at most 2 * 105 calls in total will be made to upload and longest. at least one call will be made to longest.

are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. all the coordinates are integral coordinates on the x-y plane, and the distance between the two coordinates is the euclidean distance. you are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. outside that distance, the signal becomes garbled, and the tower is not reachable. the signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. the network quality at a coordinate is the sum of the signal qualities from all the reachable towers. return the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. if there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate. note: a coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either: x1 < x2, or x1 == x2 and y1 < y2. ⌊val⌋ is the greatest integer less than or equal to val (the floor function). example 1: input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2 output: [2,1] explanation: at coordinate (2, 1) the total quality is 13. - quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7 - quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2 - quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4 no other coordinate has a higher network quality. example 2: input: towers = [[23,11,21]], radius = 9 output: [23,11] explanation: since there is only one tower, the network quality is highest right at the tower's location. example 3: input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2 output: [1,2] explanation: coordinate (1, 2) has the highest network quality. constraints: 1 <= towers.length <= 50 towers[i].length == 3 0 <= xi, yi, qi <= 50 1 <= radius <= 50
two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand. answers within 10-5 of the actual value will be accepted as correct. example 1: input: hour = 12, minutes = 30 output: 165 example 2: input: hour = 3, minutes = 30 output: 75 example 3: input: hour = 3, minutes = 15 output: 7.5 constraints: 1 <= hour <= 12 0 <= minutes <= 59
is a class with m students and n exams. you are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. the matrix score contains distinct integers only. you are also given an integer k. sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest. return the matrix after sorting it. example 1: input: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2 output: [[7,5,11,2],[10,6,9,1],[4,8,3,15]] explanation: in the above diagram, s denotes the student, while e denotes the exam. - the student with index 1 scored 11 in exam 2, which is the highest score, so they got first place. - the student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place. - the student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place. example 2: input: score = [[3,4],[5,6]], k = 0 output: [[5,6],[3,4]] explanation: in the above diagram, s denotes the student, while e denotes the exam. - the student with index 1 scored 5 in exam 0, which is the highest score, so they got first place. - the student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place. constraints: m == score.length n == score[i].length 1 <= m, n <= 250 1 <= score[i][j] <= 105 score consists of distinct integers. 0 <= k < n
are given an integer n and an integer p in the range [0, n - 1]. representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1. you are also given an integer array banned containing some positions from the array. for the ith position in banned, arr[banned[i]] = 0, and banned[i] != p. you can perform multiple operations on arr. in an operation, you can choose a subarray with size k and reverse the subarray. however, the 1 in arr should never go to any of the positions in banned. in other words, after each operation arr[banned[i]] remains 0. return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible. a subarray is a contiguous non-empty sequence of elements within an array. the values of ans[i] are independent for all i's. the reverse of an array is an array containing the values in reverse order. example 1: input: n = 4, p = 0, banned = [1,2], k = 4 output: [0,-1,-1,1] explanation: in this case k = 4 so there is only one possible reverse operation we can perform, which is reversing the whole array. initially, 1 is placed at position 0 so the amount of operations we need for position 0 is 0. we can never place a 1 on the banned positions, so the answer for positions 1 and 2 is -1. finally, with one reverse operation we can bring the 1 to index 3, so the answer for position 3 is 1. example 2: input: n = 5, p = 0, banned = [2,4], k = 3 output: [0,-1,-1,-1,-1] explanation: in this case the 1 is initially at position 0, so the answer for that position is 0. we can perform reverse operations of size 3. the 1 is currently located at position 0, so we need to reverse the subarray [0, 2] for it to leave that position, but reversing that subarray makes position 2 have a 1, which shouldn't happen. so, we can't move the 1 from position 0, making the result for all the other positions -1. example 3: input: n = 4, p = 2, banned = [0,1,3], k = 1 output: [-1,-1,0,-1] explanation: in this case we can only perform reverse operations of size 1. so the 1 never changes its position. constraints: 1 <= n <= 105 0 <= p <= n - 1 0 <= banned.length <= n - 1 0 <= banned[i] <= n - 1 1 <= k <= n banned[i] != p all values in banned are unique
two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. note: you must not use any built-in biginteger library or convert the inputs to integer directly. example 1: input: num1 = "2", num2 = "3" output: "6" example 2: input: num1 = "123", num2 = "456" output: "56088" constraints: 1 <= num1.length, num2.length <= 200 num1 and num2 consist of digits only. both num1 and num2 do not contain any leading zero, except the number 0 itself.
had some 2-dimensional coordinates, like "(1, 3)" or "(2, 0.5)". then, we removed all commas, decimal points, and spaces and ended up with the string s. for example, "(1, 3)" becomes s = "(13)" and "(2, 0.5)" becomes s = "(205)". return a list of strings representing all possibilities for what our original coordinates could have been. our original representation never had extraneous zeroes, so we never started with numbers like "00", "0.0", "0.00", "1.0", "001", "00.01", or any other number that can be represented with fewer digits. also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like ".1". the final answer list can be returned in any order. all coordinates in the final answer have exactly one space between them (occurring after the comma.) example 1: input: s = "(123)" output: ["(1, 2.3)","(1, 23)","(1.2, 3)","(12, 3)"] example 2: input: s = "(0123)" output: ["(0, 1.23)","(0, 12.3)","(0, 123)","(0.1, 2.3)","(0.1, 23)","(0.12, 3)"] explanation: 0.0, 00, 0001 or 00.01 are not allowed. example 3: input: s = "(00011)" output: ["(0, 0.011)","(0.001, 1)"] constraints: 4 <= s.length <= 12 s[0] == '(' and s[s.length - 1] == ')'. the rest of s are digits.
is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows: you will pick any pizza slice. your friend alice will pick the next slice in the anti-clockwise direction of your pick. your friend bob will pick the next slice in the clockwise direction of your pick. repeat until there are no more slices of pizzas. given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick. example 1: input: slices = [1,2,3,4,5,6] output: 10 explanation: pick pizza slice of size 4, alice and bob will pick slices with size 3 and 5 respectively. then pick slices with size 6, finally alice and bob will pick slice of size 2 and 1 respectively. total = 4 + 6. example 2: input: slices = [8,9,8,6,1,1] output: 16 explanation: pick pizza slice of size 8 in each turn. if you pick slice with size 9 your partners will pick slices of size 8. constraints: 3 * n == slices.length 1 <= slices.length <= 500 1 <= slices[i] <= 1000
the combinationiterator class: combinationiterator(string characters, int combinationlength) initializes the object with a string characters of sorted distinct lowercase english letters and a number combinationlength as arguments. next() returns the next combination of length combinationlength in lexicographical order. hasnext() returns true if and only if there exists a next combination. example 1: input ["combinationiterator", "next", "hasnext", "next", "hasnext", "next", "hasnext"] [["abc", 2], [], [], [], [], [], []] output [null, "ab", true, "ac", true, "bc", false] explanation combinationiterator itr = new combinationiterator("abc", 2); itr.next(); // return "ab" itr.hasnext(); // return true itr.next(); // return "ac" itr.hasnext(); // return true itr.next(); // return "bc" itr.hasnext(); // return false constraints: 1 <= combinationlength <= characters.length <= 15 all the characters of characters are unique. at most 104 calls will be made to next and hasnext. it is guaranteed that all calls of the function next are valid.
exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. each node has an associated price. you are given an integer array price, where price[i] is the price of the ith node. the price sum of a given path is the sum of the prices of all nodes lying on that path. the tree can be rooted at any node root of your choice. the incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root. return the maximum possible cost amongst all possible root choices. example 1: input: n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5] output: 24 explanation: the diagram above denotes the tree after rooting it at node 2. the first part (colored in red) shows the path with the maximum price sum. the second part (colored in blue) shows the path with the minimum price sum. - the first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31. - the second path contains the node [2] with the price [7]. the difference between the maximum and minimum price sum is 24. it can be proved that 24 is the maximum cost. example 2: input: n = 3, edges = [[0,1],[1,2]], price = [1,1,1] output: 2 explanation: the diagram above denotes the tree after rooting it at node 0. the first part (colored in red) shows the path with the maximum price sum. the second part (colored in blue) shows the path with the minimum price sum. - the first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3. - the second path contains node [0] with a price [1]. the difference between the maximum and minimum price sum is 2. it can be proved that 2 is the maximum cost. constraints: 1 <= n <= 105 edges.length == n - 1 0 <= ai, bi <= n - 1 edges represents a valid tree. price.length == n 1 <= price[i] <= 105
a string s consisting only of characters 'a', 'b', and 'c'. you are asked to apply the following algorithm on the string any number of times: pick a non-empty prefix from the string s where all the characters in the prefix are equal. pick a non-empty suffix from the string s where all the characters in this suffix are equal. the prefix and the suffix should not intersect at any index. the characters from the prefix and suffix must be the same. delete both the prefix and the suffix. return the minimum length of s after performing the above operation any number of times (possibly zero times). example 1: input: s = "ca" output: 2 explanation: you can't remove any characters, so the string stays as is. example 2: input: s = "cabaabac" output: 0 explanation: an optimal sequence of operations is: - take prefix = "c" and suffix = "c" and remove them, s = "abaaba". - take prefix = "a" and suffix = "a" and remove them, s = "baab". - take prefix = "b" and suffix = "b" and remove them, s = "aa". - take prefix = "a" and suffix = "a" and remove them, s = "". example 3: input: s = "aabccabba" output: 3 explanation: an optimal sequence of operations is: - take prefix = "aa" and suffix = "a" and remove them, s = "bccabb". - take prefix = "b" and suffix = "bb" and remove them, s = "cca". constraints: 1 <= s.length <= 105 s only consists of characters 'a', 'b', and 'c'.
an array nums of integers, return how many of them contain an even number of digits. example 1: input: nums = [12,345,2,6,7896] output: 2 explanation: 12 contains 2 digits (even number of digits). 345 contains 3 digits (odd number of digits). 2 contains 1 digit (odd number of digits). 6 contains 1 digit (odd number of digits). 7896 contains 4 digits (even number of digits). therefore only 12 and 7896 contain an even number of digits. example 2: input: nums = [555,901,482,1771] output: 1 explanation: only 1771 contains an even number of digits. constraints: 1 <= nums.length <= 500 1 <= nums[i] <= 105
a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it. a zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive). example 1: input: nums = [0,2,1,5,3,4] output: [0,1,2,4,5,3] explanation: the array ans is built as follows: ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]] = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]] = [0,1,2,4,5,3] example 2: input: nums = [5,0,1,2,3,4] output: [4,5,0,1,2,3] explanation: the array ans is built as follows: ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]] = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]] = [4,5,0,1,2,3] constraints: 1 <= nums.length <= 1000 0 <= nums[i] < nums.length the elements in nums are distinct. follow-up: can you solve it without using an extra space (i.e., o(1) memory)?
a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. if the array is already strictly increasing, return true. the array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length). example 1: input: nums = [1,2,10,5,7] output: true explanation: by removing 10 at index 2 from nums, it becomes [1,2,5,7]. [1,2,5,7] is strictly increasing, so return true. example 2: input: nums = [2,3,1,2] output: false explanation: [3,1,2] is the result of removing the element at index 0. [2,1,2] is the result of removing the element at index 1. [2,3,2] is the result of removing the element at index 2. [2,3,1] is the result of removing the element at index 3. no resulting array is strictly increasing, so return false. example 3: input: nums = [1,1,1] output: false explanation: the result of removing any element is [1,1]. [1,1] is not strictly increasing, so return false. constraints: 2 <= nums.length <= 1000 1 <= nums[i] <= 1000
are given a 2d array of axis-aligned rectangles. each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner. calculate the total area covered by all rectangles in the plane. any area covered by two or more rectangles should only be counted once. return the total area. since the answer may be too large, return it modulo 109 + 7. example 1: input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]] output: 6 explanation: a total area of 6 is covered by all three rectangles, as illustrated in the picture. from (1,1) to (2,2), the green and red rectangles overlap. from (1,0) to (2,3), all three rectangles overlap. example 2: input: rectangles = [[0,0,1000000000,1000000000]] output: 49 explanation: the answer is 1018 modulo (109 + 7), which is 49. constraints: 1 <= rectangles.length <= 200 rectanges[i].length == 4 0 <= xi1, yi1, xi2, yi2 <= 109 xi1 <= xi2 yi1 <= yi2
have n computers. you are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. you are interested in running all n computers simultaneously using the given batteries. initially, you can insert at most one battery into each computer. after that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. the inserted battery can be a totally new battery or a battery from another computer. you may assume that the removing and inserting processes take no time. note that the batteries cannot be recharged. return the maximum number of minutes you can run all the n computers simultaneously. example 1: input: n = 2, batteries = [3,3,3] output: 4 explanation: initially, insert battery 0 into the first computer and battery 1 into the second computer. after two minutes, remove battery 1 from the second computer and insert battery 2 instead. note that battery 1 can still run for one minute. at the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead. by the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running. we can run the two computers simultaneously for at most 4 minutes, so we return 4. example 2: input: n = 2, batteries = [1,1,1,1] output: 2 explanation: initially, insert battery 0 into the first computer and battery 2 into the second computer. after one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. after another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running. we can run the two computers simultaneously for at most 2 minutes, so we return 2. constraints: 1 <= n <= batteries.length <= 105 1 <= batteries[i] <= 109
and bob have a different total number of candies. you are given two integer arrays alicesizes and bobsizes where alicesizes[i] is the number of candies of the ith box of candy that alice has and bobsizes[j] is the number of candies of the jth box of candy that bob has. since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. the total amount of candy a person has is the sum of the number of candies in each box they have. return an integer array answer where answer[0] is the number of candies in the box that alice must exchange, and answer[1] is the number of candies in the box that bob must exchange. if there are multiple answers, you may return any one of them. it is guaranteed that at least one answer exists. example 1: input: alicesizes = [1,1], bobsizes = [2,2] output: [1,2] example 2: input: alicesizes = [1,2], bobsizes = [2,3] output: [1,2] example 3: input: alicesizes = [2], bobsizes = [1,3] output: [2,3] constraints: 1 <= alicesizes.length, bobsizes.length <= 104 1 <= alicesizes[i], bobsizes[j] <= 105 alice and bob have a different total number of candies. there will be at least one valid answer for the given input.
are given an even integer n. you initially have a permutation perm of size n where perm[i] == i (0-indexed). in one operation, you will create a new array arr, and for each i: if i % 2 == 0, then arr[i] = perm[i / 2]. if i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2]. you will then assign arr to perm. return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value. example 1: input: n = 2 output: 1 explanation: perm = [0,1] initially. after the 1st operation, perm = [0,1] so it takes only 1 operation. example 2: input: n = 4 output: 2 explanation: perm = [0,1,2,3] initially. after the 1st operation, perm = [0,2,1,3] after the 2nd operation, perm = [0,1,2,3] so it takes only 2 operations. example 3: input: n = 6 output: 4 constraints: 2 <= n <= 1000 n is even.
a queue that supports push and pop operations in the front, middle, and back. implement the frontmiddleback class: frontmiddleback() initializes the queue. void pushfront(int val) adds val to the front of the queue. void pushmiddle(int val) adds val to the middle of the queue. void pushback(int val) adds val to the back of the queue. int popfront() removes the front element of the queue and returns it. if the queue is empty, return -1. int popmiddle() removes the middle element of the queue and returns it. if the queue is empty, return -1. int popback() removes the back element of the queue and returns it. if the queue is empty, return -1. notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. for example: pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5]. popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6]. example 1: input: ["frontmiddlebackqueue", "pushfront", "pushback", "pushmiddle", "pushmiddle", "popfront", "popmiddle", "popmiddle", "popback", "popfront"] [[], [1], [2], [3], [4], [], [], [], [], []] output: [null, null, null, null, null, 1, 3, 4, 2, -1] explanation: frontmiddlebackqueue q = new frontmiddlebackqueue(); q.pushfront(1); // [1] q.pushback(2); // [1, 2] q.pushmiddle(3); // [1, 3, 2] q.pushmiddle(4); // [1, 4, 3, 2] q.popfront(); // return 1 -> [4, 3, 2] q.popmiddle(); // return 3 -> [4, 2] q.popmiddle(); // return 4 -> [2] q.popback(); // return 2 -> [] q.popfront(); // return -1 -> [] (the queue is empty) constraints: 1 <= val <= 109 at most 1000 calls will be made to pushfront, pushmiddle, pushback, popfront, popmiddle, and popback.
are given a 0-indexed integer array nums of length n. nums contains a valid split at index i if the following are true: the sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements. there is at least one element to the right of i. that is, 0 <= i < n - 1. return the number of valid splits in nums. example 1: input: nums = [10,4,-8,7] output: 2 explanation: there are three ways of splitting nums into two non-empty parts: - split nums at index 0. then, the first part is [10], and its sum is 10. the second part is [4,-8,7], and its sum is 3. since 10 >= 3, i = 0 is a valid split. - split nums at index 1. then, the first part is [10,4], and its sum is 14. the second part is [-8,7], and its sum is -1. since 14 >= -1, i = 1 is a valid split. - split nums at index 2. then, the first part is [10,4,-8], and its sum is 6. the second part is [7], and its sum is 7. since 6 < 7, i = 2 is not a valid split. thus, the number of valid splits in nums is 2. example 2: input: nums = [2,3,1,0] output: 2 explanation: there are two valid splits in nums: - split nums at index 1. then, the first part is [2,3], and its sum is 5. the second part is [1,0], and its sum is 1. since 5 >= 1, i = 1 is a valid split. - split nums at index 2. then, the first part is [2,3,1], and its sum is 6. the second part is [0], and its sum is 0. since 6 >= 0, i = 2 is a valid split. constraints: 2 <= nums.length <= 105 -105 <= nums[i] <= 105
an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. if there is no such integer in the array, return 0. example 1: input: nums = [21,4,7] output: 32 explanation: 21 has 4 divisors: 1, 3, 7, 21 4 has 3 divisors: 1, 2, 4 7 has 2 divisors: 1, 7 the answer is the sum of divisors of 21 only. example 2: input: nums = [21,21] output: 64 example 3: input: nums = [1,2,3,4,5] output: 0 constraints: 1 <= nums.length <= 104 1 <= nums[i] <= 105
is an m x n binary grid matrix with all the values set 0 initially. design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. all the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned. optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity. implement the solution class: solution(int m, int n) initializes the object with the size of the binary matrix m and n. int[] flip() returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1. void reset() resets all the values of the matrix to be 0. example 1: input ["solution", "flip", "flip", "flip", "reset", "flip"] [[3, 1], [], [], [], [], []] output [null, [1, 0], [2, 0], [0, 0], null, [2, 0]] explanation solution solution = new solution(3, 1); solution.flip(); // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned. solution.flip(); // return [2, 0], since [1,0] was returned, [2,0] and [0,0] solution.flip(); // return [0, 0], based on the previously returned indices, only [0,0] can be returned. solution.reset(); // all the values are reset to 0 and can be returned. solution.flip(); // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned. constraints: 1 <= m, n <= 104 there will be at least one free cell for each call to flip. at most 1000 calls will be made to flip and reset.
are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise and operator),'|' (bitwise or operator),'(', and ')'. for example, "()1|1" and "(1)&()" are not valid while "1", "(((1))|(0))", and "1|(0&(1))" are valid expressions. return the minimum cost to change the final value of the expression. for example, if expression = "1|1|(0&0)&1", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. we want to apply operations so that the new expression evaluates to 0. the cost of changing the final value of an expression is the number of operations performed on the expression. the types of operations are described as follows: turn a '1' into a '0'. turn a '0' into a '1'. turn a '&' into a '|'. turn a '|' into a '&'. note: '&' does not take precedence over '|' in the order of calculation. evaluate parentheses first, then in left-to-right order. example 1: input: expression = "1&(0|1)" output: 1 explanation: we can turn "1&(0|1)" into "1&(0&1)" by changing the '|' to a '&' using 1 operation. the new expression evaluates to 0. example 2: input: expression = "(0&0)&(0&0&0)" output: 3 explanation: we can turn "(0&0)&(0&0&0)" into "(0|1)|(0&0&0)" using 3 operations. the new expression evaluates to 1. example 3: input: expression = "(0|(1|0&1))" output: 1 explanation: we can turn "(0|(1|0&1))" into "(0|(0|0&1))" using 1 operation. the new expression evaluates to 0. constraints: 1 <= expression.length <= 105 expression only contains '1','0','&','|','(', and ')' all parentheses are properly matched. there will be no empty parentheses (i.e: "()" is not a substring of expression).
an array of integers nums, you start with an initial positive value startvalue. in each iteration, you calculate the step by step sum of startvalue plus elements in nums (from left to right). return the minimum positive value of startvalue such that the step by step sum is never less than 1. example 1: input: nums = [-3,2,-3,4,2] output: 5 explanation: if you choose startvalue = 4, in the third iteration your step by step sum is less than 1. step by step sum startvalue = 4 | startvalue = 5 | nums (4 -3 ) = 1 | (5 -3 ) = 2 | -3 (1 +2 ) = 3 | (2 +2 ) = 4 | 2 (3 -3 ) = 0 | (4 -3 ) = 1 | -3 (0 +4 ) = 4 | (1 +4 ) = 5 | 4 (4 +2 ) = 6 | (5 +2 ) = 7 | 2 example 2: input: nums = [1,2] output: 1 explanation: minimum start value should be positive. example 3: input: nums = [1,-2,-3] output: 5 constraints: 1 <= nums.length <= 100 -100 <= nums[i] <= 100
an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words. for example, if words = ["abc", "xyz"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix "xyz" of the characters "axyz" matches "xyz" from words. implement the streamchecker class: streamchecker(string[] words) initializes the object with the strings array words. boolean query(char letter) accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words. example 1: input ["streamchecker", "query", "query", "query", "query", "query", "query", "query", "query", "query", "query", "query", "query"] [[["cd", "f", "kl"]], ["a"], ["b"], ["c"], ["d"], ["e"], ["f"], ["g"], ["h"], ["i"], ["j"], ["k"], ["l"]] output [null, false, false, false, true, false, true, false, false, false, false, false, true] explanation streamchecker streamchecker = new streamchecker(["cd", "f", "kl"]); streamchecker.query("a"); // return false streamchecker.query("b"); // return false streamchecker.query("c"); // return false streamchecker.query("d"); // return true, because 'cd' is in the wordlist streamchecker.query("e"); // return false streamchecker.query("f"); // return true, because 'f' is in the wordlist streamchecker.query("g"); // return false streamchecker.query("h"); // return false streamchecker.query("i"); // return false streamchecker.query("j"); // return false streamchecker.query("k"); // return false streamchecker.query("l"); // return true, because 'kl' is in the wordlist constraints: 1 <= words.length <= 2000 1 <= words[i].length <= 200 words[i] consists of lowercase english letters. letter is a lowercase english letter. at most 4 * 104 calls will be made to query.
delivery company wants to build a new service center in a new city. the company knows the positions of all the customers in this city on a 2d-map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum. given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers. in other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized: answers within 10-5 of the actual value will be accepted. example 1: input: positions = [[0,1],[1,0],[1,2],[2,1]] output: 4.00000 explanation: as shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve. example 2: input: positions = [[1,1],[3,3]] output: 2.82843 explanation: the minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843 constraints: 1 <= positions.length <= 50 positions[i].length == 2 0 <= xi, yi <= 100
an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle. example 1: input: nums = [2,2,3,4] output: 3 explanation: valid combinations are: 2,3,4 (using the first 2) 2,3,4 (using the second 2) 2,2,3 example 2: input: nums = [4,2,3,4] output: 4 constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000
are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. the items and the groups are zero indexed. a group can have no item belonging to it. return a sorted list of the items such that: the items that belong to the same group are next to each other in the sorted list. there are some relations between these items where beforeitems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item). return any solution if there is more than one solution and return an empty list if there is no solution. example 1: input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeitems = [[],[6],[5],[6],[3,6],[],[],[]] output: [6,3,4,1,5,2,0,7] example 2: input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeitems = [[],[6],[5],[6],[3],[],[4],[]] output: [] explanation: this is the same as example 1 except that 4 needs to be before 6 in the sorted list. constraints: 1 <= m <= n <= 3 * 104 group.length == beforeitems.length == n -1 <= group[i] <= m - 1 0 <= beforeitems[i].length <= n - 1 0 <= beforeitems[i][j] <= n - 1 i != beforeitems[i][j] beforeitems[i] does not contain duplicates elements.
the world of dota2, there are two parties: the radiant and the dire. the dota2 senate consists of senators coming from two parties. now the senate wants to decide on a change in the dota2 game. the voting for this change is a round-based procedure. in each round, each senator can exercise one of the two rights: ban one senator's right: a senator can make another senator lose all his rights in this and all the following rounds. announce the victory: if this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game. given a string senate representing each senator's party belonging. the character 'r' and 'd' represent the radiant party and the dire party. then if there are n senators, the size of the given string will be n. the round-based procedure starts from the first senator to the last senator in the given order. this procedure will last until the end of voting. all the senators who have lost their rights will be skipped during the procedure. suppose every senator is smart enough and will play the best strategy for his own party. predict which party will finally announce the victory and change the dota2 game. the output should be "radiant" or "dire". example 1: input: senate = "rd" output: "radiant" explanation: the first senator comes from radiant and he can just ban the next senator's right in round 1. and the second senator can't exercise any rights anymore since his right has been banned. and in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote. example 2: input: senate = "rdd" output: "dire" explanation: the first senator comes from radiant and he can just ban the next senator's right in round 1. and the second senator can't exercise any rights anymore since his right has been banned. and the third senator comes from dire and he can ban the first senator's right in round 1. and in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote. constraints: n == senate.length 1 <= n <= 104 senate[i] is either 'r' or 'd'.
an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where: '.' matches any single character. '*' matches zero or more of the preceding element. the matching should cover the entire input string (not partial). example 1: input: s = "aa", p = "a" output: false explanation: "a" does not match the entire string "aa". example 2: input: s = "aa", p = "a*" output: true explanation: '*' means zero or more of the preceding element, 'a'. therefore, by repeating 'a' once, it becomes "aa". example 3: input: s = "ab", p = ".*" output: true explanation: ".*" means "zero or more (*) of any character (.)". constraints: 1 <= s.length <= 20 1 <= p.length <= 20 s contains only lowercase english letters. p contains only lowercase english letters, '.', and '*'. it is guaranteed for each appearance of the character '*', there will be a previous valid character to match.
are n soldiers standing in a line. each soldier is assigned a unique rating value. you have to form a team of 3 soldiers amongst them under the following rules: choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]). a team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n). return the number of teams you can form given the conditions. (soldiers can be part of multiple teams). example 1: input: rating = [2,5,3,4,1] output: 3 explanation: we can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). example 2: input: rating = [2,1,3] output: 0 explanation: we can't form any team given the conditions. example 3: input: rating = [1,2,3,4] output: 4 constraints: n == rating.length 3 <= n <= 1000 1 <= rating[i] <= 105 all the integers in rating are unique.
have information about n different recipes. you are given a string array recipes and a 2d string array ingredients. the ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes. you are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them. return a list of all the recipes that you can create. you may return the answer in any order. note that two recipes may contain each other in their ingredients. example 1: input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"] output: ["bread"] explanation: we can create "bread" since we have the ingredients "yeast" and "flour". example 2: input: recipes = ["bread","sandwich"], ingredients = [["yeast","flour"],["bread","meat"]], supplies = ["yeast","flour","meat"] output: ["bread","sandwich"] explanation: we can create "bread" since we have the ingredients "yeast" and "flour". we can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread". example 3: input: recipes = ["bread","sandwich","burger"], ingredients = [["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]], supplies = ["yeast","flour","meat"] output: ["bread","sandwich","burger"] explanation: we can create "bread" since we have the ingredients "yeast" and "flour". we can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread". we can create "burger" since we have the ingredient "meat" and can create the ingredients "bread" and "sandwich". constraints: n == recipes.length == ingredients.length 1 <= n <= 100 1 <= ingredients[i].length, supplies.length <= 100 1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10 recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase english letters. all the values of recipes and supplies combined are unique. each ingredients[i] does not contain any duplicate values.
an array of integers arr, sort the array by performing a series of pancake flips. in one pancake flip we do the following steps: choose an integer k where 1 <= k <= arr.length. reverse the sub-array arr[0...k-1] (0-indexed). for example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3. return an array of the k-values corresponding to a sequence of pancake flips that sort arr. any valid answer that sorts the array within 10 * arr.length flips will be judged as correct. example 1: input: arr = [3,2,4,1] output: [4,2,4,3] explanation: we perform 4 pancake flips, with k values 4, 2, 4, and 3. starting state: arr = [3, 2, 4, 1] after 1st flip (k = 4): arr = [1, 4, 2, 3] after 2nd flip (k = 2): arr = [4, 1, 2, 3] after 3rd flip (k = 4): arr = [3, 2, 1, 4] after 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted. example 2: input: arr = [1,2,3] output: [] explanation: the input is already sorted, so there is no need to flip anything. note that other answers, such as [3, 3], would also be accepted. constraints: 1 <= arr.length <= 100 1 <= arr[i] <= arr.length all integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).
are given two images, img1 and img2, represented as binary, square matrices of size n x n. a binary matrix has only 0s and 1s as values. we translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. we then place it on top of the other image. we can then calculate the overlap by counting the number of positions that have a 1 in both images. note also that a translation does not include any kind of rotation. any 1 bits that are translated outside of the matrix borders are erased. return the largest possible overlap. example 1: input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]] output: 3 explanation: we translate img1 to right by 1 unit and down by 1 unit. the number of positions that have a 1 in both images is 3 (shown in red). example 2: input: img1 = [[1]], img2 = [[1]] output: 1 example 3: input: img1 = [[0]], img2 = [[0]] output: 0 constraints: n == img1.length == img1[i].length n == img2.length == img2[i].length 1 <= n <= 30 img1[i][j] is either 0 or 1. img2[i][j] is either 0 or 1.
a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition. the ordering of teams is decided by who received the most position-one votes. if two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. if two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. you are given an array of strings votes which is the votes of all voters in the ranking systems. sort all teams according to the ranking system described above. return a string of all teams sorted by the ranking system. example 1: input: votes = ["abc","acb","abc","acb","acb"] output: "acb" explanation: team a was ranked first place by 5 voters. no other team was voted as first place, so team a is the first team. team b was ranked second by 2 voters and ranked third by 3 voters. team c was ranked second by 3 voters and ranked third by 2 voters. as most of the voters ranked c second, team c is the second team, and team b is the third. example 2: input: votes = ["wxyz","xyzw"] output: "xwyz" explanation: x is the winner due to the tie-breaking rule. x has the same votes as w for the first position, but x has one vote in the second position, while w does not have any votes in the second position. example 3: input: votes = ["zmnaguedsjylbophrqicwfxtvk"] output: "zmnaguedsjylbophrqicwfxtvk" explanation: only one voter, so their votes are used for the ranking. constraints: 1 <= votes.length <= 1000 1 <= votes[i].length <= 26 votes[i].length == votes[j].length for 0 <= i, j < votes.length. votes[i][j] is an english uppercase letter. all characters of votes[i] are unique. all the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes.length.
a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key. the class has three public methods: set(key, value, duration): accepts an integer key, an integer value, and a duration in milliseconds. once the duration has elapsed, the key should be inaccessible. the method should return true if the same un-expired key already exists and false otherwise. both the value and duration should be overwritten if the key already exists. get(key): if an un-expired key exists, it should return the associated value. otherwise it should return -1. count(): returns the count of un-expired keys. example 1: input: ["timelimitedcache", "set", "get", "count", "get"] [[], [1, 42, 100], [1], [], [1]] [0, 0, 50, 50, 150] output: [null, false, 42, 1, -1] explanation: at t=0, the cache is constructed. at t=0, a key-value pair (1: 42) is added with a time limit of 100ms. the value doesn't exist so false is returned. at t=50, key=1 is requested and the value of 42 is returned. at t=50, count() is called and there is one active key in the cache. at t=100, key=1 expires. at t=150, get(1) is called but -1 is returned because the cache is empty. example 2: input: ["timelimitedcache", "set", "set", "get", "get", "get", "count"] [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []] [0, 0, 40, 50, 120, 200, 250] output: [null, false, true, 50, 50, -1] explanation: at t=0, the cache is constructed. at t=0, a key-value pair (1: 42) is added with a time limit of 50ms. the value doesn't exist so false is returned. at t=40, a key-value pair (1: 50) is added with a time limit of 100ms. a non-expired value already existed so true is returned and the old value was overwritten. at t=50, get(1) is called which returned 50. at t=120, get(1) is called which returned 50. at t=140, key=1 expires. at t=200, get(1) is called but the cache is empty so -1 is returned. at t=250, count() returns 0 because the cache is empty. constraints: 0 <= key <= 109 0 <= value <= 109 0 <= duration <= 1000 total method calls will not exceed 100
an integer array nums, your goal is to make all elements in nums equal. to complete one operation, follow these steps: find the largest value in nums. let its index be i (0-indexed) and its value be largest. if there are multiple elements with the largest value, pick the smallest i. find the next largest value in nums strictly smaller than largest. let its value be nextlargest. reduce nums[i] to nextlargest. return the number of operations to make all elements in nums equal. example 1: input: nums = [5,1,3] output: 3 explanation: it takes 3 operations to make all elements in nums equal: 1. largest = 5 at index 0. nextlargest = 3. reduce nums[0] to 3. nums = [3,1,3]. 2. largest = 3 at index 0. nextlargest = 1. reduce nums[0] to 1. nums = [1,1,3]. 3. largest = 3 at index 2. nextlargest = 1. reduce nums[2] to 1. nums = [1,1,1]. example 2: input: nums = [1,1,1] output: 0 explanation: all elements in nums are already equal. example 3: input: nums = [1,1,2,2,3] output: 4 explanation: it takes 4 operations to make all elements in nums equal: 1. largest = 3 at index 4. nextlargest = 2. reduce nums[4] to 2. nums = [1,1,2,2,2]. 2. largest = 2 at index 2. nextlargest = 1. reduce nums[2] to 1. nums = [1,1,1,2,2]. 3. largest = 2 at index 3. nextlargest = 1. reduce nums[3] to 1. nums = [1,1,1,1,2]. 4. largest = 2 at index 4. nextlargest = 1. reduce nums[4] to 1. nums = [1,1,1,1,1]. constraints: 1 <= nums.length <= 5 * 104 1 <= nums[i] <= 5 * 104
complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation. for example, the integer 5 is "101" in binary and its complement is "010" which is the integer 2. given an integer n, return its complement. example 1: input: n = 5 output: 2 explanation: 5 is "101" in binary, with complement "010" in binary, which is 2 in base-10. example 2: input: n = 7 output: 0 explanation: 7 is "111" in binary, with complement "000" in binary, which is 0 in base-10. example 3: input: n = 10 output: 5 explanation: 10 is "1010" in binary, with complement "0101" in binary, which is 5 in base-10. constraints: 0 <= n < 109 note: this question is the same as 476: https://leetcode.com/problems/number-complement/
two strings s and part, perform the following operation on s until all occurrences of the substring part are removed: find the leftmost occurrence of the substring part and remove it from s. return s after removing all occurrences of part. a substring is a contiguous sequence of characters in a string. example 1: input: s = "daabcbaabcbc", part = "abc" output: "dab" explanation: the following operations are done: - s = "daabcbaabcbc", remove "abc" starting at index 2, so s = "dabaabcbc". - s = "dabaabcbc", remove "abc" starting at index 4, so s = "dababc". - s = "dababc", remove "abc" starting at index 3, so s = "dab". now s has no occurrences of "abc". example 2: input: s = "axxxxyyyyb", part = "xy" output: "ab" explanation: the following operations are done: - s = "axxxxyyyyb", remove "xy" starting at index 4 so s = "axxxyyyb". - s = "axxxyyyb", remove "xy" starting at index 3 so s = "axxyyb". - s = "axxyyb", remove "xy" starting at index 2 so s = "axyb". - s = "axyb", remove "xy" starting at index 1 so s = "ab". now s has no occurrences of "xy". constraints: 1 <= s.length <= 1000 1 <= part.length <= 1000 s and part consists of lowercase english letters.
exists an infinitely large grid. you are currently at point (1, 1), and you need to reach the point (targetx, targety) using a finite number of steps. in one step, you can move from point (x, y) to any one of the following points: (x, y - x) (x - y, y) (2 * x, y) (x, 2 * y) given two integers targetx and targety representing the x-coordinate and y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise. example 1: input: targetx = 6, targety = 9 output: false explanation: it is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned. example 2: input: targetx = 4, targety = 7 output: true explanation: you can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7). constraints: 1 <= targetx, targety <= 109
a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones. example 1: input: n = 5 output: 5 explanation: here are the non-negative integers <= 5 with their corresponding binary representations: 0 : 0 1 : 1 2 : 10 3 : 11 4 : 100 5 : 101 among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. example 2: input: n = 1 output: 2 example 3: input: n = 2 output: 3 constraints: 1 <= n <= 109
an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise. a query word queries[i] matches pattern if you can insert lowercase english letters pattern so that it equals the query. you may insert each character at any position and you may not insert any characters. example 1: input: queries = ["foobar","foobartest","football","framebuffer","forcefeedback"], pattern = "fb" output: [true,false,true,true,false] explanation: "foobar" can be generated like this "f" + "oo" + "b" + "ar". "football" can be generated like this "f" + "oot" + "b" + "all". "framebuffer" can be generated like this "f" + "rame" + "b" + "uffer". example 2: input: queries = ["foobar","foobartest","football","framebuffer","forcefeedback"], pattern = "foba" output: [true,false,true,false,false] explanation: "foobar" can be generated like this "fo" + "o" + "ba" + "r". "football" can be generated like this "fo" + "ot" + "ba" + "ll". example 3: input: queries = ["foobar","foobartest","football","framebuffer","forcefeedback"], pattern = "fobat" output: [false,true,false,false,false] explanation: "foobartest" can be generated like this "fo" + "o" + "ba" + "r" + "t" + "est". constraints: 1 <= pattern.length, queries.length <= 100 1 <= queries[i].length <= 100 queries[i] and pattern consist of english letters.
are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters: 'a': absent. 'l': late. 'p': present. the student is eligible for an attendance award if they meet both of the following criteria: the student was absent ('a') for strictly fewer than 2 days total. the student was never late ('l') for 3 or more consecutive days. return true if the student is eligible for an attendance award, or false otherwise. example 1: input: s = "ppallp" output: true explanation: the student has fewer than 2 absences and was never late 3 or more consecutive days. example 2: input: s = "ppalll" output: false explanation: the student was late 3 consecutive days in the last 3 days, so is not eligible for the award. constraints: 1 <= s.length <= 1000 s[i] is either 'a', 'l', or 'p'.
letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.). the numerical value of some string of lowercase english letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer. for example, if s = "acb", we concatenate each letter's letter value, resulting in "021". after converting it, we get 21. you are given three strings firstword, secondword, and targetword, each consisting of lowercase english letters 'a' through 'j' inclusive. return true if the summation of the numerical values of firstword and secondword equals the numerical value of targetword, or false otherwise. example 1: input: firstword = "acb", secondword = "cba", targetword = "cdb" output: true explanation: the numerical value of firstword is "acb" -> "021" -> 21. the numerical value of secondword is "cba" -> "210" -> 210. the numerical value of targetword is "cdb" -> "231" -> 231. we return true because 21 + 210 == 231. example 2: input: firstword = "aaa", secondword = "a", targetword = "aab" output: false explanation: the numerical value of firstword is "aaa" -> "000" -> 0. the numerical value of secondword is "a" -> "0" -> 0. the numerical value of targetword is "aab" -> "001" -> 1. we return false because 0 + 0 != 1. example 3: input: firstword = "aaa", secondword = "a", targetword = "aaaa" output: true explanation: the numerical value of firstword is "aaa" -> "000" -> 0. the numerical value of secondword is "a" -> "0" -> 0. the numerical value of targetword is "aaaa" -> "0000" -> 0. we return true because 0 + 0 == 0. constraints: 1 <= firstword.length, secondword.length, targetword.length <= 8 firstword, secondword, and targetword consist of lowercase english letters from 'a' to 'j' inclusive.
are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index. you need to implement the function pickindex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. the probability of picking an index i is w[i] / sum(w). for example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%). example 1: input ["solution","pickindex"] [[[1]],[]] output [null,0] explanation solution solution = new solution([1]); solution.pickindex(); // return 0. the only option is to return 0 since there is only one element in w. example 2: input ["solution","pickindex","pickindex","pickindex","pickindex","pickindex"] [[[1,3]],[],[],[],[],[]] output [null,1,1,1,1,0] explanation solution solution = new solution([1, 3]); solution.pickindex(); // return 1. it is returning the second element (index = 1) that has a probability of 3/4. solution.pickindex(); // return 1 solution.pickindex(); // return 1 solution.pickindex(); // return 1 solution.pickindex(); // return 0. it is returning the first element (index = 0) that has a probability of 1/4. since this is a randomization problem, multiple answers are allowed. all of the following outputs can be considered correct: [null,1,1,1,1,0] [null,1,1,1,1,1] [null,1,1,1,0,0] [null,1,1,1,0,1] [null,1,0,1,0,0] ...... and so on. constraints: 1 <= w.length <= 104 1 <= w[i] <= 105 pickindex will be called at most 104 times.
are given a 0-indexed string s that you must perform k replacement operations on. the replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k. to complete the ith replacement operation: check if the substring sources[i] occurs at index indices[i] in the original string s. if it does not occur, do nothing. otherwise if it does occur, replace that substring with targets[i]. for example, if s = "abcd", indices[i] = 0, sources[i] = "ab", and targets[i] = "eee", then the result of this replacement will be "eeecd". all replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. the testcases will be generated such that the replacements will not overlap. for example, a testcase with s = "abc", indices = [0, 1], and sources = ["ab","bc"] will not be generated because the "ab" and "bc" replacements overlap. return the resulting string after performing all replacement operations on s. a substring is a contiguous sequence of characters in a string. example 1: input: s = "abcd", indices = [0, 2], sources = ["a", "cd"], targets = ["eee", "ffff"] output: "eeebffff" explanation: "a" occurs at index 0 in s, so we replace it with "eee". "cd" occurs at index 2 in s, so we replace it with "ffff". example 2: input: s = "abcd", indices = [0, 2], sources = ["ab","ec"], targets = ["eee","ffff"] output: "eeecd" explanation: "ab" occurs at index 0 in s, so we replace it with "eee". "ec" does not occur at index 2 in s, so we do nothing. constraints: 1 <= s.length <= 1000 k == indices.length == sources.length == targets.length 1 <= k <= 100 0 <= indexes[i] < s.length 1 <= sources[i].length, targets[i].length <= 50 s consists of only lowercase english letters. sources[i] and targets[i] consist of only lowercase english letters.
a binary tree root and an integer target, delete all the leaf nodes with value target. note that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot). example 1: input: root = [1,2,3,2,null,2,4], target = 2 output: [1,null,3,null,4] explanation: leaf nodes in green with value (target = 2) are removed (picture in left). after removing, new nodes become leaf nodes with value (target = 2) (picture in center). example 2: input: root = [1,3,3,3,2], target = 3 output: [1,3,null,null,2] example 3: input: root = [1,2,null,2,null,2], target = 2 output: [1] explanation: leaf nodes in green with value (target = 2) are removed at each step. constraints: the number of nodes in the tree is in the range [1, 3000]. 1 <= node.val, target <= 1000
super ugly number is a positive integer whose prime factors are in the array primes. given an integer n and an array of integers primes, return the nth super ugly number. the nth super ugly number is guaranteed to fit in a 32-bit signed integer. example 1: input: n = 12, primes = [2,7,13,19] output: 32 explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19]. example 2: input: n = 1, primes = [2,3,5] output: 1 explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]. constraints: 1 <= n <= 105 1 <= primes.length <= 100 2 <= primes[i] <= 1000 primes[i] is guaranteed to be a prime number. all the values of primes are unique and sorted in ascending order.
the root of an n-ary tree, return the postorder traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples) example 1: input: root = [1,null,3,2,4,null,5,6] output: [5,6,3,2,4,1] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1] constraints: the number of nodes in the tree is in the range [0, 104]. 0 <= node.val <= 104 the height of the n-ary tree is less than or equal to 1000. follow up: recursive solution is trivial, could you do it iteratively?
an infinite plane, a robot initially stands at (0, 0) and faces north. note that: the north direction is the positive direction of the y-axis. the south direction is the negative direction of the y-axis. the east direction is the positive direction of the x-axis. the west direction is the negative direction of the x-axis. the robot can receive one of three instructions: "g": go straight 1 unit. "l": turn 90 degrees to the left (i.e., anti-clockwise direction). "r": turn 90 degrees to the right (i.e., clockwise direction). the robot performs the instructions given in order, and repeats them forever. return true if and only if there exists a circle in the plane such that the robot never leaves the circle. example 1: input: instructions = "ggllgg" output: true explanation: the robot is initially at (0, 0) facing the north direction. "g": move one step. position: (0, 1). direction: north. "g": move one step. position: (0, 2). direction: north. "l": turn 90 degrees anti-clockwise. position: (0, 2). direction: west. "l": turn 90 degrees anti-clockwise. position: (0, 2). direction: south. "g": move one step. position: (0, 1). direction: south. "g": move one step. position: (0, 0). direction: south. repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0). based on that, we return true. example 2: input: instructions = "gg" output: false explanation: the robot is initially at (0, 0) facing the north direction. "g": move one step. position: (0, 1). direction: north. "g": move one step. position: (0, 2). direction: north. repeating the instructions, keeps advancing in the north direction and does not go into cycles. based on that, we return false. example 3: input: instructions = "gl" output: true explanation: the robot is initially at (0, 0) facing the north direction. "g": move one step. position: (0, 1). direction: north. "l": turn 90 degrees anti-clockwise. position: (0, 1). direction: west. "g": move one step. position: (-1, 1). direction: west. "l": turn 90 degrees anti-clockwise. position: (-1, 1). direction: south. "g": move one step. position: (-1, 0). direction: south. "l": turn 90 degrees anti-clockwise. position: (-1, 0). direction: east. "g": move one step. position: (0, 0). direction: east. "l": turn 90 degrees anti-clockwise. position: (0, 0). direction: north. repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0). based on that, we return true. constraints: 1 <= instructions.length <= 100 instructions[i] is 'g', 'l' or, 'r'.
are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. reconstruct the itinerary in order and return it. all of the tickets belong to a man who departs from "jfk", thus, the itinerary must begin with "jfk". if there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. for example, the itinerary ["jfk", "lga"] has a smaller lexical order than ["jfk", "lgb"]. you may assume all tickets form at least one valid itinerary. you must use all the tickets once and only once. example 1: input: tickets = [["muc","lhr"],["jfk","muc"],["sfo","sjc"],["lhr","sfo"]] output: ["jfk","muc","lhr","sfo","sjc"] example 2: input: tickets = [["jfk","sfo"],["jfk","atl"],["sfo","atl"],["atl","jfk"],["atl","sfo"]] output: ["jfk","atl","jfk","sfo","atl","sfo"] explanation: another possible reconstruction is ["jfk","sfo","atl","jfk","atl","sfo"] but it is larger in lexical order. constraints: 1 <= tickets.length <= 300 tickets[i].length == 2 fromi.length == 3 toi.length == 3 fromi and toi consist of uppercase english letters. fromi != toi
a string s, return the maximum number of unique substrings that the given string can be split into. you can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. however, you must split the substrings such that all of them are unique. a substring is a contiguous sequence of characters within a string. example 1: input: s = "ababccc" output: 5 explanation: one way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times. example 2: input: s = "aba" output: 2 explanation: one way to split maximally is ['a', 'ba']. example 3: input: s = "aa" output: 1 explanation: it is impossible to split the string any further. constraints: 1 <= s.length <= 16 s contains only lower case english letters.
a sentence that consists of some words separated by a single space, and a searchword, check if searchword is a prefix of any word in sentence. return the index of the word in sentence (1-indexed) where searchword is a prefix of this word. if searchword is a prefix of more than one word, return the index of the first word (minimum index). if there is no such word return -1. a prefix of a string s is any leading contiguous substring of s. example 1: input: sentence = "i love eating burger", searchword = "burg" output: 4 explanation: "burg" is prefix of "burger" which is the 4th word in the sentence. example 2: input: sentence = "this problem is an easy problem", searchword = "pro" output: 2 explanation: "pro" is prefix of "problem" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index. example 3: input: sentence = "i am tired", searchword = "you" output: -1 explanation: "you" is not a prefix of any word in the sentence. constraints: 1 <= sentence.length <= 100 1 <= searchword.length <= 10 sentence consists of lowercase english letters and spaces. searchword consists of lowercase english letters.
schema table: customer +-------------+---------+ | column name | type | +-------------+---------+ | customer_id | int | | product_key | int | +-------------+---------+ there is no primary key for this table. it may contain duplicates. customer_id is not null. product_key is a foreign key to product table. table: product +-------------+---------+ | column name | type | +-------------+---------+ | product_key | int | +-------------+---------+ product_key is the primary key column for this table. write an sql query to report the customer ids from the customer table that bought all the products in the product table. return the result table in any order. the query result format is in the following example. example 1: input: customer table: +-------------+-------------+ | customer_id | product_key | +-------------+-------------+ | 1 | 5 | | 2 | 6 | | 3 | 5 | | 3 | 6 | | 1 | 6 | +-------------+-------------+ product table: +-------------+ | product_key | +-------------+ | 5 | | 6 | +-------------+ output: +-------------+ | customer_id | +-------------+ | 1 | | 3 | +-------------+ explanation: the customers who bought all the products (5 and 6) are customers with ids 1 and 3.
schema table: users +----------------+---------+ | column name | type | +----------------+---------+ | user_id | int | | join_date | date | | favorite_brand | varchar | +----------------+---------+ user_id is the primary key of this table. this table has the info of the users of an online shopping website where users can sell and buy items. table: orders +---------------+---------+ | column name | type | +---------------+---------+ | order_id | int | | order_date | date | | item_id | int | | buyer_id | int | | seller_id | int | +---------------+---------+ order_id is the primary key of this table. item_id is a foreign key to the items table. buyer_id and seller_id are foreign keys to the users table. table: items +---------------+---------+ | column name | type | +---------------+---------+ | item_id | int | | item_brand | varchar | +---------------+---------+ item_id is the primary key of this table. write an sql query to find for each user, the join date and the number of orders they made as a buyer in 2019. return the result table in any order. the query result format is in the following example. example 1: input: users table: +---------+------------+----------------+ | user_id | join_date | favorite_brand | +---------+------------+----------------+ | 1 | 2018-01-01 | lenovo | | 2 | 2018-02-09 | samsung | | 3 | 2018-01-19 | lg | | 4 | 2018-05-21 | hp | +---------+------------+----------------+ orders table: +----------+------------+---------+----------+-----------+ | order_id | order_date | item_id | buyer_id | seller_id | +----------+------------+---------+----------+-----------+ | 1 | 2019-08-01 | 4 | 1 | 2 | | 2 | 2018-08-02 | 2 | 1 | 3 | | 3 | 2019-08-03 | 3 | 2 | 3 | | 4 | 2018-08-04 | 1 | 4 | 2 | | 5 | 2018-08-04 | 1 | 3 | 4 | | 6 | 2019-08-05 | 2 | 2 | 4 | +----------+------------+---------+----------+-----------+ items table: +---------+------------+ | item_id | item_brand | +---------+------------+ | 1 | samsung | | 2 | lenovo | | 3 | lg | | 4 | hp | +---------+------------+ output: +-----------+------------+----------------+ | buyer_id | join_date | orders_in_2019 | +-----------+------------+----------------+ | 1 | 2018-01-01 | 1 | | 2 | 2018-02-09 | 2 | | 3 | 2018-01-19 | 0 | | 4 | 2018-05-21 | 0 | +-----------+------------+----------------+
an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing. return the length of the shortest subarray to remove. a subarray is a contiguous subsequence of the array. example 1: input: arr = [1,2,3,10,4,2,3,5] output: 3 explanation: the shortest subarray we can remove is [10,4,2] of length 3. the remaining elements after that will be [1,2,3,3,5] which are sorted. another correct solution is to remove the subarray [3,10,4]. example 2: input: arr = [5,4,3,2,1] output: 4 explanation: since the array is strictly decreasing, we can only keep a single element. therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1]. example 3: input: arr = [1,2,3] output: 0 explanation: the array is already non-decreasing. we do not need to remove any elements. constraints: 1 <= arr.length <= 105 0 <= arr[i] <= 109
are working in a ball factory where you have n balls numbered from lowlimit up to highlimit inclusive (i.e., n == highlimit - lowlimit + 1), and an infinite number of boxes numbered from 1 to infinity. your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. for example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1. given two integers lowlimit and highlimit, return the number of balls in the box with the most balls. example 1: input: lowlimit = 1, highlimit = 10 output: 2 explanation: box number: 1 2 3 4 5 6 7 8 9 10 11 ... ball count: 2 1 1 1 1 1 1 1 1 0 0 ... box 1 has the most number of balls with 2 balls. example 2: input: lowlimit = 5, highlimit = 15 output: 2 explanation: box number: 1 2 3 4 5 6 7 8 9 10 11 ... ball count: 1 1 1 1 2 2 1 1 1 0 0 ... boxes 5 and 6 have the most number of balls with 2 balls in each. example 3: input: lowlimit = 19, highlimit = 28 output: 2 explanation: box number: 1 2 3 4 5 6 7 8 9 10 11 12 ... ball count: 0 1 1 1 1 1 1 1 1 2 0 0 ... box 10 has the most number of balls with 2 balls. constraints: 1 <= lowlimit <= highlimit <= 105
a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. the word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. if word is not a substring of sequence, word's maximum k-repeating value is 0. given strings sequence and word, return the maximum k-repeating value of word in sequence. example 1: input: sequence = "ababc", word = "ab" output: 2 explanation: "abab" is a substring in "ababc". example 2: input: sequence = "ababc", word = "ba" output: 1 explanation: "ba" is a substring in "ababc". "baba" is not a substring in "ababc". example 3: input: sequence = "ababc", word = "ac" output: 0 explanation: "ac" is not a substring in "ababc". constraints: 1 <= sequence.length <= 100 1 <= word.length <= 100 sequence and word contains only lowercase english letters.
have a keyboard layout as shown above in the x-y plane, where each english uppercase letter is located at some coordinate. for example, the letter 'a' is located at coordinate (0, 0), the letter 'b' is located at coordinate (0, 1), the letter 'p' is located at coordinate (2, 3) and the letter 'z' is located at coordinate (4, 1). given the string word, return the minimum total distance to type such string using only two fingers. the distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. note that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters. example 1: input: word = "cake" output: 3 explanation: using two fingers, one optimal way to type "cake" is: finger 1 on letter 'c' -> cost = 0 finger 1 on letter 'a' -> cost = distance from letter 'c' to letter 'a' = 2 finger 2 on letter 'k' -> cost = 0 finger 2 on letter 'e' -> cost = distance from letter 'k' to letter 'e' = 1 total distance = 3 example 2: input: word = "happy" output: 6 explanation: using two fingers, one optimal way to type "happy" is: finger 1 on letter 'h' -> cost = 0 finger 1 on letter 'a' -> cost = distance from letter 'h' to letter 'a' = 2 finger 2 on letter 'p' -> cost = 0 finger 2 on letter 'p' -> cost = distance from letter 'p' to letter 'p' = 0 finger 1 on letter 'y' -> cost = distance from letter 'a' to letter 'y' = 4 total distance = 6 constraints: 2 <= word.length <= 300 word consists of uppercase english letters.
are given the root of a binary tree and a positive integer k. the level sum in the tree is the sum of the values of the nodes that are on the same level. return the kth largest level sum in the tree (not necessarily distinct). if there are fewer than k levels in the tree, return -1. note that two nodes are on the same level if they have the same distance from the root. example 1: input: root = [5,8,9,2,1,3,7,4,6], k = 2 output: 13 explanation: the level sums are the following: - level 1: 5. - level 2: 8 + 9 = 17. - level 3: 2 + 1 + 3 + 7 = 13. - level 4: 4 + 6 = 10. the 2nd largest level sum is 13. example 2: input: root = [1,2,null,3], k = 1 output: 3 explanation: the largest level sum is 3. constraints: the number of nodes in the tree is n. 2 <= n <= 105 1 <= node.val <= 106 1 <= k <= n
are given an array nums consisting of non-negative integers. you are also given a queries array, where queries[i] = [xi, mi]. the answer to the ith query is the maximum bitwise xor value of xi and any element of nums that does not exceed mi. in other words, the answer is max(nums[j] xor xi) for all j such that nums[j] <= mi. if all elements in nums are larger than mi, then the answer is -1. return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query. example 1: input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]] output: [3,3,7] explanation: 1) 0 and 1 are the only two integers not greater than 1. 0 xor 3 = 3 and 1 xor 3 = 2. the larger of the two is 3. 2) 1 xor 2 = 3. 3) 5 xor 2 = 7. example 2: input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]] output: [15,-1,5] constraints: 1 <= nums.length, queries.length <= 105 queries[i].length == 2 0 <= nums[j], xi, mi <= 109
n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. given an integer n, return the number of distinct solutions to the n-queens puzzle. example 1: input: n = 4 output: 2 explanation: there are two distinct solutions to the 4-queens puzzle as shown. example 2: input: n = 1 output: 1 constraints: 1 <= n <= 9
are given a 0-indexed binary string target of length n. you have another binary string s of length n that is initially set to all zeros. you want to make s equal to target. in one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. flip means changing '0' to '1' and '1' to '0'. return the minimum number of operations needed to make s equal to target. example 1: input: target = "10111" output: 3 explanation: initially, s = "00000". choose index i = 2: "00000" -> "00111" choose index i = 0: "00111" -> "11000" choose index i = 1: "11000" -> "10111" we need at least 3 flip operations to form target. example 2: input: target = "101" output: 3 explanation: initially, s = "000". choose index i = 0: "000" -> "111" choose index i = 1: "111" -> "100" choose index i = 2: "100" -> "101" we need at least 3 flip operations to form target. example 3: input: target = "00000" output: 0 explanation: we do not need any operations since the initial s already equals target. constraints: n == target.length 1 <= n <= 105 target[i] is either '0' or '1'.
are given an integer array heights representing the heights of buildings, some bricks, and some ladders. you start your journey from building 0 and move to the next building by possibly using bricks or ladders. while moving from building i to building i+1 (0-indexed), if the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks. if the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks. return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally. example 1: input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1 output: 4 explanation: starting at building 0, you can follow these steps: - go to building 1 without using ladders nor bricks since 4 >= 2. - go to building 2 using 5 bricks. you must use either bricks or ladders because 2 < 7. - go to building 3 without using ladders nor bricks since 7 >= 6. - go to building 4 using your only ladder. you must use either bricks or ladders because 6 < 9. it is impossible to go beyond building 4 because you do not have any more bricks or ladders. example 2: input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2 output: 7 example 3: input: heights = [14,3,19,3], bricks = 17, ladders = 0 output: 3 constraints: 1 <= heights.length <= 105 1 <= heights[i] <= 106 0 <= bricks <= 109 0 <= ladders <= heights.length
a wordlist, we want to implement a spellchecker that converts a query word into a correct word. for a given query word, the spell checker handles two categories of spelling mistakes: capitalization: if the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist. example: wordlist = ["yellow"], query = "yellow": correct = "yellow" example: wordlist = ["yellow"], query = "yellow": correct = "yellow" example: wordlist = ["yellow"], query = "yellow": correct = "yellow" vowel errors: if after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist. example: wordlist = ["yellow"], query = "yollow": correct = "yellow" example: wordlist = ["yellow"], query = "yeellow": correct = "" (no match) example: wordlist = ["yellow"], query = "yllw": correct = "" (no match) in addition, the spell checker operates under the following precedence rules: when the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back. when the query matches a word up to capitlization, you should return the first such match in the wordlist. when the query matches a word up to vowel errors, you should return the first such match in the wordlist. if the query has no matches in the wordlist, you should return the empty string. given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i]. example 1: input: wordlist = ["kite","kite","hare","hare"], queries = ["kite","kite","kite","hare","hare","hear","hear","keti","keet","keto"] output: ["kite","kite","kite","hare","hare","","","kite","","kite"] example 2: input: wordlist = ["yellow"], queries = ["yellow"] output: ["yellow"] constraints: 1 <= wordlist.length, queries.length <= 5000 1 <= wordlist[i].length, queries[i].length <= 7 wordlist[i] and queries[i] consist only of only english letters.
string s is called good if there are no two different characters in s that have the same frequency. given a string s, return the minimum number of characters you need to delete to make s good. the frequency of a character in a string is the number of times it appears in the string. for example, in the string "aab", the frequency of 'a' is 2, while the frequency of 'b' is 1. example 1: input: s = "aab" output: 0 explanation: s is already good. example 2: input: s = "aaabbbcc" output: 2 explanation: you can delete two 'b's resulting in the good string "aaabcc". another way it to delete one 'b' and one 'c' resulting in the good string "aaabbc". example 3: input: s = "ceabaacb" output: 2 explanation: you can delete both 'c's resulting in the good string "eabaab". note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored). constraints: 1 <= s.length <= 105 s contains only lowercase english letters.
are given two integer arrays nums1 and nums2 of length n. the xor sum of the two integer arrays is (nums1[0] xor nums2[0]) + (nums1[1] xor nums2[1]) + ... + (nums1[n - 1] xor nums2[n - 1]) (0-indexed). for example, the xor sum of [1,2,3] and [3,2,1] is equal to (1 xor 3) + (2 xor 2) + (3 xor 1) = 2 + 0 + 2 = 4. rearrange the elements of nums2 such that the resulting xor sum is minimized. return the xor sum after the rearrangement. example 1: input: nums1 = [1,2], nums2 = [2,3] output: 2 explanation: rearrange nums2 so that it becomes [3,2]. the xor sum is (1 xor 3) + (2 xor 2) = 2 + 0 = 2. example 2: input: nums1 = [1,0,3], nums2 = [5,3,4] output: 8 explanation: rearrange nums2 so that it becomes [5,4,3]. the xor sum is (1 xor 5) + (0 xor 4) + (3 xor 3) = 4 + 4 + 0 = 8. constraints: n == nums1.length n == nums2.length 1 <= n <= 14 0 <= nums1[i], nums2[i] <= 107
a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right. note that elements beyond the length of the original array are not written. do the above modifications to the input array in place and do not return anything. example 1: input: arr = [1,0,2,3,0,4,5,0] output: [1,0,0,2,3,0,0,4] explanation: after calling your function, the input array is modified to: [1,0,0,2,3,0,0,4] example 2: input: arr = [1,2,3] output: [1,2,3] explanation: after calling your function, the input array is modified to: [1,2,3] constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 9
the roots of two binary trees p and q, write a function to check if they are the same or not. two binary trees are considered the same if they are structurally identical, and the nodes have the same value. example 1: input: p = [1,2,3], q = [1,2,3] output: true example 2: input: p = [1,2], q = [1,null,2] output: false example 3: input: p = [1,2,1], q = [1,1,2] output: false constraints: the number of nodes in both trees is in the range [0, 100]. -104 <= node.val <= 104
an integer array nums, find the subarray with the largest sum, and return its sum. example 1: input: nums = [-2,1,-3,4,-1,2,1,-5,4] output: 6 explanation: the subarray [4,-1,2,1] has the largest sum 6. example 2: input: nums = [1] output: 1 explanation: the subarray [1] has the largest sum 1. example 3: input: nums = [5,4,-1,7,8] output: 23 explanation: the subarray [5,4,-1,7,8] has the largest sum 23. constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104 follow up: if you have figured out the o(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
are given a binary array nums (0-indexed). we define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit). for example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5. return an array of booleans answer where answer[i] is true if xi is divisible by 5. example 1: input: nums = [0,1,1] output: [true,false,false] explanation: the input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10. only the first number is divisible by 5, so answer[0] is true. example 2: input: nums = [1,1,1] output: [false,false,false] constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.
have two special characters: the first character can be represented by one bit 0. the second character can be represented by two bits (10 or 11). given a binary array bits that ends with 0, return true if the last character must be a one-bit character. example 1: input: bits = [1,0,0] output: true explanation: the only way to decode it is two-bit character and one-bit character. so the last character is one-bit character. example 2: input: bits = [1,1,1,0] output: false explanation: the only way to decode it is two-bit character and two-bit character. so the last character is not one-bit character. constraints: 1 <= bits.length <= 1000 bits[i] is either 0 or 1.
is a strange printer with the following two special properties: the printer can only print a sequence of the same character each time. at each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters. given a string s, return the minimum number of turns the printer needed to print it. example 1: input: s = "aaabbb" output: 2 explanation: print "aaa" first and then print "bbb". example 2: input: s = "aba" output: 2 explanation: print "aaa" first and then print "b" from the second place of the string, which will cover the existing character 'a'. constraints: 1 <= s.length <= 100 s consists of lowercase english letters.
are 8 prison cells in a row and each cell is either occupied or vacant. each day, whether the cell is occupied or vacant changes according to the following rules: if a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. otherwise, it becomes vacant. note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. you are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n. return the state of the prison after n days (i.e., n such changes described above). example 1: input: cells = [0,1,0,1,1,0,0,1], n = 7 output: [0,0,1,1,0,0,0,0] explanation: the following table summarizes the state of the prison on each day: day 0: [0, 1, 0, 1, 1, 0, 0, 1] day 1: [0, 1, 1, 0, 0, 0, 0, 0] day 2: [0, 0, 0, 0, 1, 1, 1, 0] day 3: [0, 1, 1, 0, 0, 1, 0, 0] day 4: [0, 0, 0, 0, 0, 1, 0, 0] day 5: [0, 1, 1, 1, 0, 1, 0, 0] day 6: [0, 0, 1, 0, 1, 1, 0, 0] day 7: [0, 0, 1, 1, 0, 0, 0, 0] example 2: input: cells = [1,0,0,1,0,0,1,0], n = 1000000000 output: [0,0,1,1,1,1,1,0] constraints: cells.length == 8 cells[i] is either 0 or 1. 1 <= n <= 109
schema table: actordirector +-------------+---------+ | column name | type | +-------------+---------+ | actor_id | int | | director_id | int | | timestamp | int | +-------------+---------+ timestamp is the primary key column for this table. write a sql query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times. return the result table in any order. the query result format is in the following example. example 1: input: actordirector table: +-------------+-------------+-------------+ | actor_id | director_id | timestamp | +-------------+-------------+-------------+ | 1 | 1 | 0 | | 1 | 1 | 1 | | 1 | 1 | 2 | | 1 | 2 | 3 | | 1 | 2 | 4 | | 2 | 1 | 5 | | 2 | 1 | 6 | +-------------+-------------+-------------+ output: +-------------+-------------+ | actor_id | director_id | +-------------+-------------+ | 1 | 1 | +-------------+-------------+ explanation: the only pair is (1, 1) where they cooperated exactly 3 times.
a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order. example 1: input: s = "let's take leetcode contest" output: "s'tel ekat edocteel tsetnoc" example 2: input: s = "god ding" output: "dog gnid" constraints: 1 <= s.length <= 5 * 104 s contains printable ascii characters. s does not contain any leading or trailing spaces. there is at least one word in s. all the words in s are separated by a single space.
the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.) (recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.) since the answer may be large, return the answer modulo 10^9 + 7. example 1: input: n = 5 output: 12 explanation: for example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1. example 2: input: n = 100 output: 682289015 constraints: 1 <= n <= 100
are given a 0-indexed integer array nums and an integer k. you are initially standing at index 0. in one move, you can jump at most k steps forward without going outside the boundaries of the array. that is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive. you want to reach the last index of the array (index n - 1). your score is the sum of all nums[j] for each index j you visited in the array. return the maximum score you can get. example 1: input: nums = [1,-1,-2,4,-7,3], k = 2 output: 7 explanation: you can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). the sum is 7. example 2: input: nums = [10,-5,-2,4,0,3], k = 3 output: 17 explanation: you can choose your jumps forming the subsequence [10,4,3] (underlined above). the sum is 17. example 3: input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2 output: 0 constraints: 1 <= nums.length, k <= 105 -104 <= nums[i] <= 104
are given a string s. a split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same. return the number of good splits you can make in s. example 1: input: s = "aacaba" output: 2 explanation: there are 5 ways to split "aacaba" and 2 of them are good. ("a", "acaba") left string and right string contains 1 and 3 different letters respectively. ("aa", "caba") left string and right string contains 1 and 3 different letters respectively. ("aac", "aba") left string and right string contains 2 and 2 different letters respectively (good split). ("aaca", "ba") left string and right string contains 2 and 2 different letters respectively (good split). ("aacab", "a") left string and right string contains 3 and 1 different letters respectively. example 2: input: s = "abcd" output: 1 explanation: split the string as follows ("ab", "cd"). constraints: 1 <= s.length <= 105 s consists of only lowercase english letters.
a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. return a list of unique strings that are valid with the minimum number of removals. you may return the answer in any order. example 1: input: s = "()())()" output: ["(())()","()()()"] example 2: input: s = "(a)())()" output: ["(a())()","(a)()()"] example 3: input: s = ")(" output: [""] constraints: 1 <= s.length <= 25 s consists of lowercase english letters and parentheses '(' and ')'. there will be at most 20 parentheses in s.
schema table: activity +--------------+---------+ | column name | type | +--------------+---------+ | player_id | int | | device_id | int | | event_date | date | | games_played | int | +--------------+---------+ (player_id, event_date) is the primary key of this table. this table shows the activity of players of some games. each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device. write an sql query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. in other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players. the query result format is in the following example. example 1: input: activity table: +-----------+-----------+------------+--------------+ | player_id | device_id | event_date | games_played | +-----------+-----------+------------+--------------+ | 1 | 2 | 2016-03-01 | 5 | | 1 | 2 | 2016-03-02 | 6 | | 2 | 3 | 2017-06-25 | 1 | | 3 | 1 | 2016-03-02 | 0 | | 3 | 4 | 2018-07-03 | 5 | +-----------+-----------+------------+--------------+ output: +-----------+ | fraction | +-----------+ | 0.33 | +-----------+ explanation: only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33
transaction is possibly invalid if: the amount exceeds $1000, or; if it occurs within (and including) 60 minutes of another transaction with the same name in a different city. you are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction. return a list of transactions that are possibly invalid. you may return the answer in any order. example 1: input: transactions = ["alice,20,800,mtv","alice,50,100,beijing"] output: ["alice,20,800,mtv","alice,50,100,beijing"] explanation: the first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. similarly the second one is invalid too. example 2: input: transactions = ["alice,20,800,mtv","alice,50,1200,mtv"] output: ["alice,50,1200,mtv"] example 3: input: transactions = ["alice,20,800,mtv","bob,50,1200,mtv"] output: ["bob,50,1200,mtv"] constraints: transactions.length <= 1000 each transactions[i] takes the form "{name},{time},{amount},{city}" each {name} and {city} consist of lowercase english letters, and have lengths between 1 and 10. each {time} consist of digits, and represent an integer between 0 and 1000. each {amount} consist of digits, and represent an integer between 0 and 2000.
a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets. a quadruplet (i, j, k, l) is increasing if: 0 <= i < j < k < l < n, and nums[i] < nums[k] < nums[j] < nums[l]. example 1: input: nums = [1,3,2,4,5] output: 2 explanation: - when i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l]. - when i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l]. there are no other quadruplets, so we return 2. example 2: input: nums = [1,2,3,4] output: 0 explanation: there exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0. constraints: 4 <= nums.length <= 4000 1 <= nums[i] <= nums.length all the integers of nums are unique. nums is a permutation.
a string s. in one step you can insert any character at any index of the string. return the minimum number of steps to make s palindrome. a palindrome string is one that reads the same backward as well as forward. example 1: input: s = "zzazz" output: 0 explanation: the string "zzazz" is already palindrome we do not need any insertions. example 2: input: s = "mbadm" output: 2 explanation: string can be "mbdadbm" or "mdbabdm". example 3: input: s = "leetcode" output: 5 explanation: inserting 5 characters the string becomes "leetcodocteel". constraints: 1 <= s.length <= 500 s consists of lowercase english letters.
a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. otherwise, return false. example 1: input: s = "aaabbb" output: true explanation: the 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5. hence, every 'a' appears before every 'b' and we return true. example 2: input: s = "abab" output: false explanation: there is an 'a' at index 2 and a 'b' at index 1. hence, not every 'a' appears before every 'b' and we return false. example 3: input: s = "bbb" output: true explanation: there are no 'a's, hence, every 'a' appears before every 'b' and we return true. constraints: 1 <= s.length <= 100 s[i] is either 'a' or 'b'.
a binary tree where node values are digits from 1 to 9. a path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome. return the number of pseudo-palindromic paths going from the root node to leaf nodes. example 1: input: root = [2,3,1,3,1,null,1] output: 2 explanation: the figure above represents the given binary tree. there are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome). example 2: input: root = [2,1,1,1,3,null,null,null,null,null,1] output: 1 explanation: the figure above represents the given binary tree. there are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome). example 3: input: root = [9] output: 1 constraints: the number of nodes in the tree is in the range [1, 105]. 1 <= node.val <= 9
are two kinds of threads: oxygen and hydrogen. your goal is to group these threads to form water molecules. there is a barrier where each thread has to wait until a complete molecule can be formed. hydrogen and oxygen threads will be given releasehydrogen and releaseoxygen methods respectively, which will allow them to pass the barrier. these threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. you must guarantee that all the threads from one molecule bond before any other threads from the next molecule do. in other words: if an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads. if a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread. we do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. the key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads. write synchronization code for oxygen and hydrogen molecules that enforces these constraints. example 1: input: water = "hoh" output: "hho" explanation: "hoh" and "ohh" are also valid answers. example 2: input: water = "oohhhh" output: "hhohho" explanation: "hohhho", "ohhhho", "hhohoh", "hohhoh", "ohhhoh", "hhoohh", "hohohh" and "ohhohh" are also valid answers. constraints: 3 * n == water.length 1 <= n <= 20 water[i] is either 'h' or 'o'. there will be exactly 2 * n 'h' in water. there will be exactly n 'o' in water.
are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi. for example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1. prerequisites can also be indirect. if course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c. you are also given an array queries where queries[j] = [uj, vj]. for the jth query, you should answer whether course uj is a prerequisite of course vj or not. return a boolean array answer, where answer[j] is the answer to the jth query. example 1: input: numcourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]] output: [false,true] explanation: the pair [1, 0] indicates that you have to take course 1 before you can take course 0. course 0 is not a prerequisite of course 1, but the opposite is true. example 2: input: numcourses = 2, prerequisites = [], queries = [[1,0],[0,1]] output: [false,false] explanation: there are no prerequisites, and each course is independent. example 3: input: numcourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]] output: [true,true] constraints: 2 <= numcourses <= 100 0 <= prerequisites.length <= (numcourses * (numcourses - 1) / 2) prerequisites[i].length == 2 0 <= ai, bi <= n - 1 ai != bi all the pairs [ai, bi] are unique. the prerequisites graph has no cycles. 1 <= queries.length <= 104 0 <= ui, vi <= n - 1 ui != vi
are given an m x n integer matrix points (0-indexed). starting with 0 points, you want to maximize the number of points you can get from the matrix. to gain points, you must pick one cell in each row. picking the cell at coordinates (r, c) will add points[r][c] to your score. however, you will lose points if you pick a cell too far from the cell that you picked in the previous row. for every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score. return the maximum number of points you can achieve. abs(x) is defined as: x for x >= 0. -x for x < 0. example 1: input: points = [[1,2,3],[1,5,1],[3,1,1]] output: 9 explanation: the blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0). you add 3 + 5 + 3 = 11 to your score. however, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score. your final score is 11 - 2 = 9. example 2: input: points = [[1,5],[2,3],[4,2]] output: 11 explanation: the blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0). you add 5 + 3 + 4 = 12 to your score. however, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score. your final score is 12 - 1 = 11. constraints: m == points.length n == points[r].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= points[r][c] <= 105
two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. if there is no common integer amongst nums1 and nums2, return -1. note that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer. example 1: input: nums1 = [1,2,3], nums2 = [2,4] output: 2 explanation: the smallest element common to both arrays is 2, so we return 2. example 2: input: nums1 = [1,2,3,6], nums2 = [2,3,4,5] output: 2 explanation: there are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned. constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[j] <= 109 both nums1 and nums2 are sorted in non-decreasing order.
the root of a binary tree, return the length of the diameter of the tree. the diameter of a binary tree is the length of the longest path between any two nodes in a tree. this path may or may not pass through the root. the length of a path between two nodes is represented by the number of edges between them. example 1: input: root = [1,2,3,4,5] output: 3 explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3]. example 2: input: root = [1,2] output: 1 constraints: the number of nodes in the tree is in the range [1, 104]. -100 <= node.val <= 100
strings are those that have an equal quantity of 'l' and 'r' characters. given a balanced string s, split it into some number of substrings such that: each substring is balanced. return the maximum number of balanced strings you can obtain. example 1: input: s = "rlrrllrlrl" output: 4 explanation: s can be split into "rl", "rrll", "rl", "rl", each substring contains same number of 'l' and 'r'. example 2: input: s = "rlrrrllrll" output: 2 explanation: s can be split into "rl", "rrrllrll", each substring contains same number of 'l' and 'r'. note that s cannot be split into "rl", "rr", "rl", "lr", "ll", because the 2nd and 5th substrings are not balanced. example 3: input: s = "llllrrrr" output: 1 explanation: s can be split into "llllrrrr". constraints: 2 <= s.length <= 1000 s[i] is either 'l' or 'r'. s is a balanced string.
are given two non-empty linked lists representing two non-negative integers. the digits are stored in reverse order, and each of their nodes contains a single digit. add the two numbers and return the sum as a linked list. you may assume the two numbers do not contain any leading zero, except the number 0 itself. example 1: input: l1 = [2,4,3], l2 = [5,6,4] output: [7,0,8] explanation: 342 + 465 = 807. example 2: input: l1 = [0], l2 = [0] output: [0] example 3: input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] output: [8,9,9,9,0,0,0,1] constraints: the number of nodes in each linked list is in the range [1, 100]. 0 <= node.val <= 9 it is guaranteed that the list represents a number that does not have leading zeros.
program was supposed to print an array of integers. the program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array. given the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. since the answer may be very large, return it modulo 109 + 7. example 1: input: s = "1000", k = 10000 output: 1 explanation: the only possible array is [1000] example 2: input: s = "1000", k = 10 output: 0 explanation: there cannot be an array that was printed this way and has all integer >= 1 and <= 10. example 3: input: s = "1317", k = 2000 output: 8 explanation: possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7] constraints: 1 <= s.length <= 105 s consists of only digits and does not contain leading zeros. 1 <= k <= 109
are given a positive integer n, that is initially placed on a board. every day, for 109 days, you perform the following procedure: for each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1. then, place those numbers on the board. return the number of distinct integers present on the board after 109 days have elapsed. note: once a number is placed on the board, it will remain on it until the end. % stands for the modulo operation. for example, 14 % 3 is 2. example 1: input: n = 5 output: 4 explanation: initially, 5 is present on the board. the next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. after that day, 3 will be added to the board because 4 % 3 == 1. at the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. example 2: input: n = 3 output: 2 explanation: since 3 % 2 == 1, 2 will be added to the board. after a billion days, the only two distinct numbers on the board are 2 and 3. constraints: 1 <= n <= 100
an integer n, return true if it is a power of three. otherwise, return false. an integer n is a power of three, if there exists an integer x such that n == 3x. example 1: input: n = 27 output: true explanation: 27 = 33 example 2: input: n = 0 output: false explanation: there is no x where 3x = 0. example 3: input: n = -1 output: false explanation: there is no x where 3x = (-1). constraints: -231 <= n <= 231 - 1 follow up: could you solve it without loops/recursion?
are given an array of integers nums and an integer target. return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. since the answer may be too large, return it modulo 109 + 7. example 1: input: nums = [3,5,6,7], target = 9 output: 4 explanation: there are 4 subsequences that satisfy the condition. [3] -> min value + max value <= target (3 + 3 <= 9) [3,5] -> (3 + 5 <= 9) [3,5,6] -> (3 + 6 <= 9) [3,6] -> (3 + 6 <= 9) example 2: input: nums = [3,3,6,8], target = 10 output: 6 explanation: there are 6 subsequences that satisfy the condition. (nums can have repeated numbers). [3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6] example 3: input: nums = [2,3,3,4,6,7], target = 12 output: 61 explanation: there are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]). number of valid subsequences (63 - 2 = 61). constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106 1 <= target <= 106
build a table of n rows (1-indexed). we start by writing 0 in the 1st row. now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10. for example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110. given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows. example 1: input: n = 1, k = 1 output: 0 explanation: row 1: 0 example 2: input: n = 2, k = 1 output: 0 explanation: row 1: 0 row 2: 01 example 3: input: n = 2, k = 2 output: 1 explanation: row 1: 0 row 2: 01 constraints: 1 <= n <= 30 1 <= k <= 2n - 1
are given an alphanumeric string s. (alphanumeric string is a string consisting of lowercase english letters and digits). you have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. that is, no two adjacent characters have the same type. return the reformatted string or return an empty string if it is impossible to reformat the string. example 1: input: s = "a0b1c2" output: "0a1b2c" explanation: no two adjacent characters have the same type in "0a1b2c". "a0b1c2", "0a1b2c", "0c2a1b" are also valid permutations. example 2: input: s = "leetcode" output: "" explanation: "leetcode" has only characters so we cannot separate them by digits. example 3: input: s = "1229857369" output: "" explanation: "1229857369" has only digits so we cannot separate them by characters. constraints: 1 <= s.length <= 500 s consists of only lowercase english letters and/or digits.
a m * n matrix of ones and zeros, return how many square submatrices have all ones. example 1: input: matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] output: 15 explanation: there are 10 squares of side 1. there are 4 squares of side 2. there is 1 square of side 3. total number of squares = 10 + 4 + 1 = 15. example 2: input: matrix = [ [1,0,1], [1,1,0], [1,1,0] ] output: 7 explanation: there are 6 squares of side 1. there is 1 square of side 2. total number of squares = 6 + 1 = 7. constraints: 1 <= arr.length <= 300 1 <= arr[0].length <= 300 0 <= arr[i][j] <= 1
the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. the first node is considered odd, and the second node is even, and so on. note that the relative order inside both the even and odd groups should remain as it was in the input. you must solve the problem in o(1) extra space complexity and o(n) time complexity. example 1: input: head = [1,2,3,4,5] output: [1,3,5,2,4] example 2: input: head = [2,1,3,5,6,4,7] output: [2,3,6,7,1,5,4] constraints: the number of nodes in the linked list is in the range [0, 104]. -106 <= node.val <= 106
are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. the tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. since node 0 is the root, parent[0] == -1. you are also given a string s of length n, where s[i] is the character assigned to node i. return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them. example 1: input: parent = [-1,0,0,1,1,2], s = "abacbe" output: 3 explanation: the longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. the length of this path is 3, so 3 is returned. it can be proven that there is no longer path that satisfies the conditions. example 2: input: parent = [-1,0,0,0], s = "aabc" output: 3 explanation: the longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. the length of this path is 3, so 3 is returned. constraints: n == parent.length == s.length 1 <= n <= 105 0 <= parent[i] <= n - 1 for all i >= 1 parent[0] == -1 parent represents a valid tree. s consists of only lowercase english letters.
day 1, one person discovers a secret. you are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. you are also given an integer forget, which means that each person will forget the secret forget days after discovering it. a person cannot share the secret on the same day they forgot it, or on any day afterwards. given an integer n, return the number of people who know the secret at the end of day n. since the answer may be very large, return it modulo 109 + 7. example 1: input: n = 6, delay = 2, forget = 4 output: 5 explanation: day 1: suppose the first person is named a. (1 person) day 2: a is the only person who knows the secret. (1 person) day 3: a shares the secret with a new person, b. (2 people) day 4: a shares the secret with a new person, c. (3 people) day 5: a forgets the secret, and b shares the secret with a new person, d. (3 people) day 6: b shares the secret with e, and c shares the secret with f. (5 people) example 2: input: n = 4, delay = 1, forget = 3 output: 6 explanation: day 1: the first person is named a. (1 person) day 2: a shares the secret with b. (2 people) day 3: a and b share the secret with 2 new people, c and d. (4 people) day 4: a forgets the secret. b, c, and d share the secret with 3 new people. (6 people) constraints: 2 <= n <= 1000 1 <= delay < forget <= n
and bob take turns playing a game, with alice starting first. initially, there are n stones in a pile. on each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile. also, if a player cannot make a move, he/she loses the game. given a positive integer n, return true if and only if alice wins the game otherwise return false, assuming both players play optimally. example 1: input: n = 1 output: true explanation: alice can remove 1 stone winning the game because bob doesn't have any moves. example 2: input: n = 2 output: false explanation: alice can only remove 1 stone, after that bob removes the last one winning the game (2 -> 1 -> 0). example 3: input: n = 4 output: true explanation: n is already a perfect square, alice can win with one move, removing 4 stones (4 -> 0). constraints: 1 <= n <= 105
an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element. we define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2). example 1: input: nums = [4,2,3] output: true explanation: you could modify the first 4 to 1 to get a non-decreasing array. example 2: input: nums = [4,2,1] output: false explanation: you cannot get a non-decreasing array by modifying at most one element. constraints: n == nums.length 1 <= n <= 104 -105 <= nums[i] <= 105
are participating in an online chess tournament. there is a chess round that starts every 15 minutes. the first round of the day starts at 00:00, and after every 15 minutes, a new round starts. for example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30. you are given two strings logintime and logouttime where: logintime is the time you will login to the game, and logouttime is the time you will logout from the game. if logouttime is earlier than logintime, this means you have played from logintime to midnight and from midnight to logouttime. return the number of full chess rounds you have played in the tournament. note: all the given times follow the 24-hour clock. that means the first round of the day starts at 00:00 and the last round of the day starts at 23:45. example 1: input: logintime = "09:31", logouttime = "10:14" output: 1 explanation: you played one full round from 09:45 to 10:00. you did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began. you did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended. example 2: input: logintime = "21:30", logouttime = "03:00" output: 22 explanation: you played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00. 10 + 12 = 22. constraints: logintime and logouttime are in the format hh:mm. 00 <= hh <= 23 00 <= mm <= 59 logintime and logouttime are not equal.
a string s, reverse only all the vowels in the string and return it. the vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once. example 1: input: s = "hello" output: "holle" example 2: input: s = "leetcode" output: "leotcede" constraints: 1 <= s.length <= 3 * 105 s consist of printable ascii characters.
are given a 0-indexed array of unique strings words. a palindrome pair is a pair of integers (i, j) such that: 0 <= i, j < words.length, i != j, and words[i] + words[j] (the concatenation of the two strings) is a palindrome . return an array of all the palindrome pairs of words. example 1: input: words = ["abcd","dcba","lls","s","sssll"] output: [[0,1],[1,0],[3,2],[2,4]] explanation: the palindromes are ["abcddcba","dcbaabcd","slls","llssssll"] example 2: input: words = ["bat","tab","cat"] output: [[0,1],[1,0]] explanation: the palindromes are ["battab","tabbat"] example 3: input: words = ["a",""] output: [[0,1],[1,0]] explanation: the palindromes are ["a","a"] constraints: 1 <= words.length <= 5000 0 <= words[i].length <= 300 words[i] consists of lowercase english letters.
a data structure that efficiently finds the majority element of a given subarray. the majority element of a subarray is an element that occurs threshold times or more in the subarray. implementing the majoritychecker class: majoritychecker(int[] arr) initializes the instance of the class with the given array arr. int query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists. example 1: input ["majoritychecker", "query", "query", "query"] [[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]] output [null, 1, -1, 2] explanation majoritychecker majoritychecker = new majoritychecker([1, 1, 2, 2, 1, 1]); majoritychecker.query(0, 5, 4); // return 1 majoritychecker.query(0, 3, 3); // return -1 majoritychecker.query(2, 3, 2); // return 2 constraints: 1 <= arr.length <= 2 * 104 1 <= arr[i] <= 2 * 104 0 <= left <= right < arr.length threshold <= right - left + 1 2 * threshold > right - left + 1 at most 104 calls will be made to query.
the root of a binary tree, return the maximum width of the given tree. the maximum width of a tree is the maximum width among all levels. the width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation. it is guaranteed that the answer will in the range of a 32-bit signed integer. example 1: input: root = [1,3,2,5,3,null,9] output: 4 explanation: the maximum width exists in the third level with length 4 (5,3,null,9). example 2: input: root = [1,3,2,5,null,null,9,6,null,7] output: 7 explanation: the maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7). example 3: input: root = [1,3,2,5] output: 2 explanation: the maximum width exists in the second level with length 2 (3,2). constraints: the number of nodes in the tree is in the range [1, 3000]. -100 <= node.val <= 100
square matrix is said to be an x-matrix if both of the following conditions hold: all the elements in the diagonals of the matrix are non-zero. all other elements are 0. given a 2d integer array grid of size n x n representing a square matrix, return true if grid is an x-matrix. otherwise, return false. example 1: input: grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]] output: true explanation: refer to the diagram above. an x-matrix should have the green elements (diagonals) be non-zero and the red elements be 0. thus, grid is an x-matrix. example 2: input: grid = [[5,7,0],[0,3,1],[0,5,0]] output: false explanation: refer to the diagram above. an x-matrix should have the green elements (diagonals) be non-zero and the red elements be 0. thus, grid is not an x-matrix. constraints: n == grid.length == grid[i].length 3 <= n <= 100 0 <= grid[i][j] <= 105
schema table: stadium +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | visit_date | date | | people | int | +---------------+---------+ visit_date is the primary key for this table. each row of this table contains the visit date and visit id to the stadium with the number of people during the visit. no two rows will have the same visit_date, and as the id increases, the dates increase as well. write an sql query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each. return the result table ordered by visit_date in ascending order. the query result format is in the following example. example 1: input: stadium table: +------+------------+-----------+ | id | visit_date | people | +------+------------+-----------+ | 1 | 2017-01-01 | 10 | | 2 | 2017-01-02 | 109 | | 3 | 2017-01-03 | 150 | | 4 | 2017-01-04 | 99 | | 5 | 2017-01-05 | 145 | | 6 | 2017-01-06 | 1455 | | 7 | 2017-01-07 | 199 | | 8 | 2017-01-09 | 188 | +------+------------+-----------+ output: +------+------------+-----------+ | id | visit_date | people | +------+------------+-----------+ | 5 | 2017-01-05 | 145 | | 6 | 2017-01-06 | 1455 | | 7 | 2017-01-07 | 199 | | 8 | 2017-01-09 | 188 | +------+------------+-----------+ explanation: the four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. note that row 8 was included even though the visit_date was not the next day after row 7. the rows with ids 2 and 3 are not included because we need at least three consecutive ids.
had a 0-indexed array arr consisting of n positive integers. she chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner: lower[i] = arr[i] - k, for every index i where 0 <= i < n higher[i] = arr[i] + k, for every index i where 0 <= i < n unfortunately, alice lost all three arrays. however, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. help alice and recover the original array. given an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. in case the answer is not unique, return any valid array. note: the test cases are generated such that there exists at least one valid array arr. example 1: input: nums = [2,10,6,4,8,12] output: [3,7,11] explanation: if arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12]. combining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums. another valid possibility is that arr = [5,7,9] and k = 3. in that case, lower = [2,4,6] and higher = [8,10,12]. example 2: input: nums = [1,1,3,3] output: [2,2] explanation: if arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3]. combining lower and higher gives us [1,1,3,3], which is equal to nums. note that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0. this is invalid since k must be positive. example 3: input: nums = [5,435] output: [220] explanation: the only possible combination is arr = [220] and k = 215. using them, we get lower = [5] and higher = [435]. constraints: 2 * n == nums.length 1 <= n <= 1000 1 <= nums[i] <= 109 the test cases are generated such that there exists at least one valid array arr.
an integer array arr and a filtering function fn, return a new array with a fewer or equal number of elements. the returned array should only contain elements where fn(arr[i], i) evaluated to a truthy value. please solve it without the built-in array.filter method. example 1: input: arr = [0,10,20,30], fn = function greaterthan10(n) { return n > 10; } output: [20,30] explanation: const newarray = filter(arr, fn); // [20, 30] the function filters out values that are not greater than 10 example 2: input: arr = [1,2,3], fn = function firstindex(n, i) { return i === 0; } output: [1] explanation: fn can also accept the index of each element in this case, the function removes elements not at index 0 example 3: input: arr = [-2,-1,0,1,2], fn = function plusone(n) { return n + 1 } output: [-2,0,1,2] explanation: falsey values such as 0 should be filtered out constraints: 0 <= arr.length <= 1000 -109 <= arr[i] <= 109
a binary tree root and a linked list with head as the first node. return true if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return false. in this context downward path means a path that starts at some node and goes downwards. example 1: input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] output: true explanation: nodes in blue form a subpath in the binary tree. example 2: input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] output: true example 3: input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] output: false explanation: there is no path in the binary tree that contains all the elements of the linked list from head. constraints: the number of nodes in the tree will be in the range [1, 2500]. the number of nodes in the list will be in the range [1, 100]. 1 <= node.val <= 100 for each node in the linked list and binary tree.
are given an m x n integer array grid. there is a robot initially located at the top-left corner (i.e., grid[0][0]). the robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). the robot can only move either down or right at any point in time. an obstacle and space are marked as 1 or 0 respectively in grid. a path that the robot takes cannot include any square that is an obstacle. return the number of possible unique paths that the robot can take to reach the bottom-right corner. the testcases are generated so that the answer will be less than or equal to 2 * 109. example 1: input: obstaclegrid = [[0,0,0],[0,1,0],[0,0,0]] output: 2 explanation: there is one obstacle in the middle of the 3x3 grid above. there are two ways to reach the bottom-right corner: 1. right -> right -> down -> down 2. down -> down -> right -> right example 2: input: obstaclegrid = [[0,1],[0,0]] output: 1 constraints: m == obstaclegrid.length n == obstaclegrid[i].length 1 <= m, n <= 100 obstaclegrid[i][j] is 0 or 1.
code that enhances all arrays such that you can call the array.groupby(fn) method on any array and it will return a grouped version of the array. a grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array with that key. the provided callback fn will accept an item in the array and return a string key. the order of each value list should be the order the items appear in the array. any order of keys is acceptable. please solve it without lodash's _.groupby function. example 1: input: array = [ {"id":"1"}, {"id":"1"}, {"id":"2"} ], fn = function (item) { return item.id; } output: { "1": [{"id": "1"}, {"id": "1"}], "2": [{"id": "2"}] } explanation: output is from array.groupby(fn). the selector function gets the "id" out of each item in the array. there are two objects with an "id" of 1. both of those objects are put in the first array. there is one object with an "id" of 2. that object is put in the second array. example 2: input: array = [ [1, 2, 3], [1, 3, 5], [1, 5, 9] ] fn = function (list) { return string(list[0]); } output: { "1": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] } explanation: the array can be of any type. in this case, the selector function defines the key as being the first element in the array. all the arrays have 1 as their first element so they are grouped together. { "1": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] } example 3: input: array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] fn = function (n) { return string(n > 5); } output: { "true": [6, 7, 8, 9, 10], "false": [1, 2, 3, 4, 5] } explanation: the selector function splits the array by whether each number is greater than 5. constraints: 0 <= array.length <= 105 fn returns a string

a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c. example 1: input: c = 5 output: true explanation: 1 * 1 + 2 * 2 = 5 example 2: input: c = 3 output: false constraints: 0 <= c <= 231 - 1
an m x n grid. each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. the sign of grid[i][j] can be: 1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1]) 2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1]) 3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j]) 4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j]) notice that there could be some signs on the cells of the grid that point outside the grid. you will initially start at the upper left cell (0, 0). a valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. the valid path does not have to be the shortest. you can modify the sign on a cell with cost = 1. you can modify the sign on a cell one time only. return the minimum cost to make the grid have at least one valid path. example 1: input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]] output: 3 explanation: you will start at point (0, 0). the path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3) the total cost = 3. example 2: input: grid = [[1,1,3],[3,2,2],[1,1,4]] output: 0 explanation: you can follow the path from (0, 0) to (2, 2). example 3: input: grid = [[1,2],[4,3]] output: 1 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 1 <= grid[i][j] <= 4
schema table: movies +---------------+---------+ | column name | type | +---------------+---------+ | movie_id | int | | title | varchar | +---------------+---------+ movie_id is the primary key for this table. title is the name of the movie. table: users +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | name | varchar | +---------------+---------+ user_id is the primary key for this table. table: movierating +---------------+---------+ | column name | type | +---------------+---------+ | movie_id | int | | user_id | int | | rating | int | | created_at | date | +---------------+---------+ (movie_id, user_id) is the primary key for this table. this table contains the rating of a movie by a user in their review. created_at is the user's review date. write an sql query to: find the name of the user who has rated the greatest number of movies. in case of a tie, return the lexicographically smaller user name. find the movie name with the highest average rating in february 2020. in case of a tie, return the lexicographically smaller movie name. the query result format is in the following example. example 1: input: movies table: +-------------+--------------+ | movie_id | title | +-------------+--------------+ | 1 | avengers | | 2 | frozen 2 | | 3 | joker | +-------------+--------------+ users table: +-------------+--------------+ | user_id | name | +-------------+--------------+ | 1 | daniel | | 2 | monica | | 3 | maria | | 4 | james | +-------------+--------------+ movierating table: +-------------+--------------+--------------+-------------+ | movie_id | user_id | rating | created_at | +-------------+--------------+--------------+-------------+ | 1 | 1 | 3 | 2020-01-12 | | 1 | 2 | 4 | 2020-02-11 | | 1 | 3 | 2 | 2020-02-12 | | 1 | 4 | 1 | 2020-01-01 | | 2 | 1 | 5 | 2020-02-17 | | 2 | 2 | 2 | 2020-02-01 | | 2 | 3 | 2 | 2020-03-01 | | 3 | 1 | 3 | 2020-02-22 | | 3 | 2 | 4 | 2020-02-25 | +-------------+--------------+--------------+-------------+ output: +--------------+ | results | +--------------+ | daniel | | frozen 2 | +--------------+ explanation: daniel and monica have rated 3 movies ("avengers", "frozen 2" and "joker") but daniel is smaller lexicographically. frozen 2 and joker have a rating average of 3.5 in february but frozen 2 is smaller lexicographically.
are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where: event1 = [starttime1, endtime1] and event2 = [starttime2, endtime2]. event times are valid 24 hours format in the form of hh:mm. a conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events). return true if there is a conflict between two events. otherwise, return false. example 1: input: event1 = ["01:15","02:00"], event2 = ["02:00","03:00"] output: true explanation: the two events intersect at time 2:00. example 2: input: event1 = ["01:00","02:00"], event2 = ["01:20","03:00"] output: true explanation: the two events intersect starting from 01:20 to 02:00. example 3: input: event1 = ["10:00","11:00"], event2 = ["14:00","15:00"] output: false explanation: the two events do not intersect. constraints: evnet1.length == event2.length == 2. event1[i].length == event2[i].length == 5 starttime1 <= endtime1 starttime2 <= endtime2 all the event times follow the hh:mm format.
an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers. return true if it is possible. otherwise, return false. example 1: input: nums = [1,2,3,3,4,4,5,6], k = 4 output: true explanation: array can be divided into [1,2,3,4] and [3,4,5,6]. example 2: input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3 output: true explanation: array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]. example 3: input: nums = [1,2,3,4], k = 3 output: false explanation: each array should be divided in subarrays of size 3. constraints: 1 <= k <= nums.length <= 105 1 <= nums[i] <= 109 note: this question is the same as 846: https://leetcode.com/problems/hand-of-straights/
is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges. you are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes. example 1: input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]] output: [8,12,6,10,10,10] explanation: the tree is shown above. we can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) equals 1 + 1 + 2 + 2 + 2 = 8. hence, answer[0] = 8, and so on. example 2: input: n = 1, edges = [] output: [0] example 3: input: n = 2, edges = [[1,0]] output: [1,1] constraints: 1 <= n <= 3 * 104 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi the given input represents a valid tree.
an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target. in case of a tie, return the minimum such integer. notice that the answer is not neccesarilly a number from arr. example 1: input: arr = [4,9,3], target = 10 output: 3 explanation: when using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer. example 2: input: arr = [2,3,5], target = 10 output: 5 example 3: input: arr = [60864,25176,27249,21296,20204], target = 56803 output: 11361 constraints: 1 <= arr.length <= 104 1 <= arr[i], target <= 105
schema table: queries +-------------+---------+ | column name | type | +-------------+---------+ | query_name | varchar | | result | varchar | | position | int | | rating | int | +-------------+---------+ there is no primary key for this table, it may have duplicate rows. this table contains information collected from some queries on a database. the position column has a value from 1 to 500. the rating column has a value from 1 to 5. query with rating less than 3 is a poor query. we define query quality as: the average of the ratio between query rating and its position. we also define poor query percentage as: the percentage of all queries with rating less than 3. write an sql query to find each query_name, the quality and poor_query_percentage. both quality and poor_query_percentage should be rounded to 2 decimal places. return the result table in any order. the query result format is in the following example. example 1: input: queries table: +------------+-------------------+----------+--------+ | query_name | result | position | rating | +------------+-------------------+----------+--------+ | dog | golden retriever | 1 | 5 | | dog | german shepherd | 2 | 5 | | dog | mule | 200 | 1 | | cat | shirazi | 5 | 2 | | cat | siamese | 3 | 3 | | cat | sphynx | 7 | 4 | +------------+-------------------+----------+--------+ output: +------------+---------+-----------------------+ | query_name | quality | poor_query_percentage | +------------+---------+-----------------------+ | dog | 2.50 | 33.33 | | cat | 0.66 | 33.33 | +------------+---------+-----------------------+ explanation: dog queries quality is ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50 dog queries poor_ query_percentage is (1 / 3) * 100 = 33.33 cat queries quality equals ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66 cat queries poor_ query_percentage is (1 / 3) * 100 = 33.33
a string s, find the longest palindromic subsequence's length in s. a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. example 1: input: s = "bbbab" output: 4 explanation: one possible longest palindromic subsequence is "bbbb". example 2: input: s = "cbbd" output: 2 explanation: one possible longest palindromic subsequence is "bb". constraints: 1 <= s.length <= 1000 s consists only of lowercase english letters.
are n students in a class numbered from 0 to n - 1. the teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. after that, the teacher will restart the process, starting with the student number 0 again. you are given a 0-indexed integer array chalk and an integer k. there are initially k pieces of chalk. when the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. however, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk. return the index of the student that will replace the chalk pieces. example 1: input: chalk = [5,1,5], k = 22 output: 0 explanation: the students go in turns as follows: - student number 0 uses 5 chalk, so k = 17. - student number 1 uses 1 chalk, so k = 16. - student number 2 uses 5 chalk, so k = 11. - student number 0 uses 5 chalk, so k = 6. - student number 1 uses 1 chalk, so k = 5. - student number 2 uses 5 chalk, so k = 0. student number 0 does not have enough chalk, so they will have to replace it. example 2: input: chalk = [3,4,1,2], k = 25 output: 1 explanation: the students go in turns as follows: - student number 0 uses 3 chalk so k = 22. - student number 1 uses 4 chalk so k = 18. - student number 2 uses 1 chalk so k = 17. - student number 3 uses 2 chalk so k = 15. - student number 0 uses 3 chalk so k = 12. - student number 1 uses 4 chalk so k = 8. - student number 2 uses 1 chalk so k = 7. - student number 3 uses 2 chalk so k = 5. - student number 0 uses 3 chalk so k = 2. student number 1 does not have enough chalk, so they will have to replace it. constraints: chalk.length == n 1 <= n <= 105 1 <= chalk[i] <= 105 1 <= k <= 109
are given a 0-indexed two-dimensional integer array nums. return the largest prime number that lies on at least one of the diagonals of nums. in case, no prime is present on any of the diagonals, return 0. note that: an integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself. an integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val. in the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7]. example 1: input: nums = [[1,2,3],[5,6,7],[9,10,11]] output: 11 explanation: the numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. since 11 is the largest prime, we return 11. example 2: input: nums = [[1,2,3],[5,17,7],[9,11,10]] output: 17 explanation: the numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17. constraints: 1 <= nums.length <= 300 nums.length == numsi.length 1 <= nums[i][j] <= 4*106
a function fn, return a memoized version of that function. a memoized function is a function that will never be called twice with the same inputs. instead it will return a cached value. you can assume there are 3 possible input functions: sum, fib, and factorial. sum accepts two integers a and b and returns a + b. fib accepts a single integer n and returns 1 if n <= 1 or fib(n - 1) + fib(n - 2) otherwise. factorial accepts a single integer n and returns 1 if n <= 1 or factorial(n - 1) * n otherwise. example 1: input "sum" ["call","call","getcallcount","call","getcallcount"] [[2,2],[2,2],[],[1,2],[]] output [4,4,1,3,2] explanation const sum = (a, b) => a + b; const memoizedsum = memoize(sum); memoizedsum(2, 2); // returns 4. sum() was called as (2, 2) was not seen before. memoizedsum(2, 2); // returns 4. however sum() was not called because the same inputs were seen before. // total call count: 1 memoizedsum(1, 2); // returns 3. sum() was called as (1, 2) was not seen before. // total call count: 2 example 2: input "factorial" ["call","call","call","getcallcount","call","getcallcount"] [[2],[3],[2],[],[3],[]] output [2,6,2,2,6,2] explanation const factorial = (n) => (n <= 1) ? 1 : (n * factorial(n - 1)); const memofactorial = memoize(factorial); memofactorial(2); // returns 2. memofactorial(3); // returns 6. memofactorial(2); // returns 2. however factorial was not called because 2 was seen before. // total call count: 2 memofactorial(3); // returns 6. however factorial was not called because 3 was seen before. // total call count: 2 example 3: input "fib" ["call","getcallcount"] [[5],[]] output [8,1] explanation fib(5) = 8 // total call count: 1 constraints: 0 <= a, b <= 105 1 <= n <= 10 at most 105 function calls at most 105 attempts to access callcount input function is sum, fib, or factorial
exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. you are given an integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i. initially, you choose to start at any vertex in the tree. then, you can perform the following operations any number of times: collect all the coins that are at a distance of at most 2 from the current vertex, or move to any adjacent vertex in the tree. find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex. note that if you pass an edge several times, you need to count it into the answer several times. example 1: input: coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]] output: 2 explanation: start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2. example 2: input: coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]] output: 2 explanation: start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2, collect the coin at vertex 7, then move back to vertex 0. constraints: n == coins.length 1 <= n <= 3 * 104 0 <= coins[i] <= 1 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.
players play a turn based game on a binary tree. we are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n. initially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. the first player colors the node with value x red, and the second player colors the node with value y blue. then, the players take turns starting with the first player. in each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.) if (and only if) a player cannot choose such a node in this way, they must pass their turn. if both players pass their turn, the game ends, and the winner is the player that colored more nodes. you are the second player. if it is possible to choose such a y to ensure you win the game, return true. if it is not possible, return false. example 1: input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3 output: true explanation: the second player can choose the node with value 2. example 2: input: root = [1,2,3], n = 3, x = 1 output: false constraints: the number of nodes in the tree is n. 1 <= x <= n <= 100 n is odd. 1 <= node.val <= n all the values of the tree are unique.
two integer arrays nums1 and nums2, return an array of their intersection. each element in the result must appear as many times as it shows in both arrays and you may return the result in any order. example 1: input: nums1 = [1,2,2,1], nums2 = [2,2] output: [2,2] example 2: input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] output: [4,9] explanation: [9,4] is also accepted. constraints: 1 <= nums1.length, nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 1000 follow up: what if the given array is already sorted? how would you optimize your algorithm? what if nums1's size is small compared to nums2's size? which algorithm is better? what if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
are given an m x n integer matrix grid. a rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid. the rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum: note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner. return the biggest three distinct rhombus sums in the grid in descending order. if there are less than three distinct values, return all of them. example 1: input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]] output: [228,216,211] explanation: the rhombus shapes for the three biggest distinct rhombus sums are depicted above. - blue: 20 + 3 + 200 + 5 = 228 - red: 200 + 2 + 10 + 4 = 216 - green: 5 + 200 + 4 + 2 = 211 example 2: input: grid = [[1,2,3],[4,5,6],[7,8,9]] output: [20,9,8] explanation: the rhombus shapes for the three biggest distinct rhombus sums are depicted above. - blue: 4 + 2 + 6 + 8 = 20 - red: 9 (area 0 rhombus in the bottom right corner) - green: 8 (area 0 rhombus in the bottom middle) example 3: input: grid = [[7,7,7]] output: [7] explanation: all three possible rhombus sums are the same, so return [7]. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j] <= 105
are given an array nums. you can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. afterward, any entries that are less than or equal to their index are worth one point. for example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. this is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point]. return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. if there are multiple answers, return the smallest such index k. example 1: input: nums = [2,3,1,4,0] output: 3 explanation: scores for each k are listed below: k = 0, nums = [2,3,1,4,0], score 2 k = 1, nums = [3,1,4,0,2], score 3 k = 2, nums = [1,4,0,2,3], score 3 k = 3, nums = [4,0,2,3,1], score 4 k = 4, nums = [0,2,3,1,4], score 3 so we should choose k = 3, which has the highest score. example 2: input: nums = [1,3,0,2,4] output: 0 explanation: nums will always have 3 points no matter how it shifts. so we will choose the smallest k, which is 0. constraints: 1 <= nums.length <= 105 0 <= nums[i] < nums.length
is a test that has n types of questions. you are given an integer target and a 0-indexed 2d integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points. return the number of ways you can earn exactly target points in the exam. since the answer may be too large, return it modulo 109 + 7. note that questions of the same type are indistinguishable. for example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions. example 1: input: target = 6, types = [[6,1],[3,2],[2,3]] output: 7 explanation: you can earn 6 points in one of the seven ways: - solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6 - solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6 - solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6 - solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6 - solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6 - solve 3 questions of the 1st type: 2 + 2 + 2 = 6 - solve 2 questions of the 2nd type: 3 + 3 = 6 example 2: input: target = 5, types = [[50,1],[50,2],[50,5]] output: 4 explanation: you can earn 5 points in one of the four ways: - solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5 - solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5 - solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5 - solve 1 question of the 2nd type: 5 example 3: input: target = 18, types = [[6,1],[3,2],[2,3]] output: 1 explanation: you can only earn 18 points by answering all questions. constraints: 1 <= target <= 1000 n == types.length 1 <= n <= 50 types[i].length == 2 1 <= counti, marksi <= 50
a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order. example 1: input: nums = [1,1,2] output: [[1,1,2], [1,2,1], [2,1,1]] example 2: input: nums = [1,2,3] output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] constraints: 1 <= nums.length <= 8 -10 <= nums[i] <= 10
are given a string s and an integer k. you can choose one of the first k letters of s and append it at the end of the string.. return the lexicographically smallest string you could have after applying the mentioned step any number of moves. example 1: input: s = "cba", k = 1 output: "acb" explanation: in the first move, we move the 1st character 'c' to the end, obtaining the string "bac". in the second move, we move the 1st character 'b' to the end, obtaining the final result "acb". example 2: input: s = "baaca", k = 3 output: "aaabc" explanation: in the first move, we move the 1st character 'b' to the end, obtaining the string "aacab". in the second move, we move the 3rd character 'c' to the end, obtaining the final result "aaabc". constraints: 1 <= k <= s.length <= 1000 s consist of lowercase english letters.
a hashset without using any built-in hash table libraries. implement myhashset class: void add(key) inserts the value key into the hashset. bool contains(key) returns whether the value key exists in the hashset or not. void remove(key) removes the value key in the hashset. if key does not exist in the hashset, do nothing. example 1: input ["myhashset", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"] [[], [1], [2], [1], [3], [2], [2], [2], [2]] output [null, null, null, true, false, null, true, null, false] explanation myhashset myhashset = new myhashset(); myhashset.add(1); // set = [1] myhashset.add(2); // set = [1, 2] myhashset.contains(1); // return true myhashset.contains(3); // return false, (not found) myhashset.add(2); // set = [1, 2] myhashset.contains(2); // return true myhashset.remove(2); // set = [1] myhashset.contains(2); // return false, (already removed) constraints: 0 <= key <= 106 at most 104 calls will be made to add, remove, and contains.
are given a 0-indexed array nums comprising of n non-negative integers. in one operation, you must: choose an integer i such that 1 <= i < n and nums[i] > 0. decrease nums[i] by 1. increase nums[i - 1] by 1. return the minimum possible value of the maximum integer of nums after performing any number of operations. example 1: input: nums = [3,7,1,6] output: 5 explanation: one set of optimal operations is as follows: 1. choose i = 1, and nums becomes [4,6,1,6]. 2. choose i = 3, and nums becomes [4,6,2,5]. 3. choose i = 1, and nums becomes [5,5,2,5]. the maximum integer of nums is 5. it can be shown that the maximum number cannot be less than 5. therefore, we return 5. example 2: input: nums = [10,1] output: 10 explanation: it is optimal to leave nums as is, and since 10 is the maximum value, we return 10. constraints: n == nums.length 2 <= n <= 105 0 <= nums[i] <= 109
are given a string s consisting of lowercase english letters. a duplicate removal consists of choosing two adjacent and equal letters and removing them. we repeatedly make duplicate removals on s until we no longer can. return the final string after all such duplicate removals have been made. it can be proven that the answer is unique. example 1: input: s = "abbaca" output: "ca" explanation: for example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move. the result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca". example 2: input: s = "azxxzy" output: "ay" constraints: 1 <= s.length <= 105 s consists of lowercase english letters.
a list of folders folder, return the folders after removing all sub-folders in those folders. you may return the answer in any order. if a folder[i] is located within another folder[j], it is called a sub-folder of it. the format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase english letters. for example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string and "/" are not. example 1: input: folder = ["/a","/a/b","/c/d","/c/d/e","/c/f"] output: ["/a","/c/d","/c/f"] explanation: folders "/a/b" is a subfolder of "/a" and "/c/d/e" is inside of folder "/c/d" in our filesystem. example 2: input: folder = ["/a","/a/b/c","/a/b/d"] output: ["/a"] explanation: folders "/a/b/c" and "/a/b/d" will be removed because they are subfolders of "/a". example 3: input: folder = ["/a/b/c","/a/b/ca","/a/b/d"] output: ["/a/b/c","/a/b/ca","/a/b/d"] constraints: 1 <= folder.length <= 4 * 104 2 <= folder[i].length <= 100 folder[i] contains only lowercase letters and '/'. folder[i] always starts with the character '/'. each folder name is unique.
are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. a mechanic with a rank r can repair n cars in r * n2 minutes. you are also given an integer cars representing the total number of cars waiting in the garage to be repaired. return the minimum time taken to repair all the cars. note: all the mechanics can repair the cars simultaneously. example 1: input: ranks = [4,2,3,1], cars = 10 output: 16 explanation: - the first mechanic will repair two cars. the time required is 4 * 2 * 2 = 16 minutes. - the second mechanic will repair two cars. the time required is 2 * 2 * 2 = 8 minutes. - the third mechanic will repair two cars. the time required is 3 * 2 * 2 = 12 minutes. - the fourth mechanic will repair four cars. the time required is 1 * 4 * 4 = 16 minutes. it can be proved that the cars cannot be repaired in less than 16 minutes. example 2: input: ranks = [5,1,8], cars = 6 output: 16 explanation: - the first mechanic will repair one car. the time required is 5 * 1 * 1 = 5 minutes. - the second mechanic will repair four cars. the time required is 1 * 4 * 4 = 16 minutes. - the third mechanic will repair one car. the time required is 8 * 1 * 1 = 8 minutes. it can be proved that the cars cannot be repaired in less than 16 minutes. constraints: 1 <= ranks.length <= 105 1 <= ranks[i] <= 100 1 <= cars <= 106
are numbottles water bottles that are initially full of water. you can exchange numexchange empty water bottles from the market with one full water bottle. the operation of drinking a full water bottle turns it into an empty bottle. given the two integers numbottles and numexchange, return the maximum number of water bottles you can drink. example 1: input: numbottles = 9, numexchange = 3 output: 13 explanation: you can exchange 3 empty bottles to get 1 full water bottle. number of water bottles you can drink: 9 + 3 + 1 = 13. example 2: input: numbottles = 15, numexchange = 4 output: 19 explanation: you can exchange 4 empty bottles to get 1 full water bottle. number of water bottles you can drink: 15 + 3 + 1 = 19. constraints: 1 <= numbottles <= 100 2 <= numexchange <= 100
a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. a minimum spanning tree (mst) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight. find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (mst). an mst edge whose deletion from the graph would cause the mst weight to increase is called a critical edge. on the other hand, a pseudo-critical edge is that which can appear in some msts but not all. note that you can return the indices of the edges in any order. example 1: input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]] output: [[0,1],[2,3,4,5]] explanation: the figure above describes the graph. the following figure shows all the possible msts: notice that the two edges 0 and 1 appear in all msts, therefore they are critical edges, so we return them in the first list of the output. the edges 2, 3, 4, and 5 are only part of some msts, therefore they are considered pseudo-critical edges. we add them to the second list of the output. example 2: input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]] output: [[],[0,1,2,3]] explanation: we can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an mst. therefore all 4 edges are pseudo-critical. constraints: 2 <= n <= 100 1 <= edges.length <= min(200, n * (n - 1) / 2) edges[i].length == 3 0 <= ai < bi < n 1 <= weighti <= 1000 all pairs (ai, bi) are distinct.
have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftchild[i] and rightchild[i], return true if and only if all the given nodes form exactly one valid binary tree. if node i has no left child then leftchild[i] will equal -1, similarly for the right child. note that the nodes have no values and that we only use the node numbers in this problem. example 1: input: n = 4, leftchild = [1,-1,3,-1], rightchild = [2,-1,-1,-1] output: true example 2: input: n = 4, leftchild = [1,-1,3,-1], rightchild = [2,3,-1,-1] output: false example 3: input: n = 2, leftchild = [1,0], rightchild = [-1,-1] output: false constraints: n == leftchild.length == rightchild.length 1 <= n <= 104 -1 <= leftchild[i], rightchild[i] <= n - 1
are given two positive integers left and right with left <= right. calculate the product of all integers in the inclusive range [left, right]. since the product may be very large, you will abbreviate it following these steps: count all trailing zeros in the product and remove them. let us denote this count as c. for example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546. denote the remaining number of digits in the product as d. if d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. if d <= 10, we keep it unchanged. for example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567. finally, represent the product as a string "<pre>...<suf>ec". for example, 12345678987600000 will be represented as "12345...89876e5". return a string denoting the abbreviated product of all integers in the inclusive range [left, right]. example 1: input: left = 1, right = 4 output: "24e0" explanation: the product is 1 × 2 × 3 × 4 = 24. there are no trailing zeros, so 24 remains the same. the abbreviation will end with "e0". since the number of digits is 2, which is less than 10, we do not have to abbreviate it further. thus, the final representation is "24e0". example 2: input: left = 2, right = 11 output: "399168e2" explanation: the product is 39916800. there are 2 trailing zeros, which we remove to get 399168. the abbreviation will end with "e2". the number of digits after removing the trailing zeros is 6, so we do not abbreviate it further. hence, the abbreviated product is "399168e2". example 3: input: left = 371, right = 375 output: "7219856259e3" explanation: the product is 7219856259000. constraints: 1 <= left <= right <= 104
define the lcp matrix of any 0-indexed string word of n lowercase english letters as an n x n grid such that: lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1]. given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. if there is no such string, return an empty string. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "aabd" is lexicographically smaller than "aaca" because the first position they differ is at the third letter, and 'b' comes before 'c'. example 1: input: lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]] output: "abab" explanation: lcp corresponds to any 4 letter string with two alternating letters. the lexicographically smallest of them is "abab". example 2: input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]] output: "aaaa" explanation: lcp corresponds to any 4 letter string with a single distinct letter. the lexicographically smallest of them is "aaaa". example 3: input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]] output: "" explanation: lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; thus, no answer exists. constraints: 1 <= n == lcp.length == lcp[i].length <= 1000 0 <= lcp[i][j] <= n
an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 <= a, b, c, d < n a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target you may return the answer in any order. example 1: input: nums = [1,0,-1,0,-2,2], target = 0 output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] example 2: input: nums = [2,2,2,2,2], target = 8 output: [[2,2,2,2]] constraints: 1 <= nums.length <= 200 -109 <= nums[i] <= 109 -109 <= target <= 109
are given a 2d integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti]. you have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other. return the minimum number of groups you need to make. two intervals intersect if there is at least one common number between them. for example, the intervals [1, 5] and [5, 8] intersect. example 1: input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]] output: 3 explanation: we can divide the intervals into the following groups: - group 1: [1, 5], [6, 8]. - group 2: [2, 3], [5, 10]. - group 3: [1, 10]. it can be proven that it is not possible to divide the intervals into fewer than 3 groups. example 2: input: intervals = [[1,3],[5,6],[8,10],[11,13]] output: 1 explanation: none of the intervals overlap, so we can put all of them in one group. constraints: 1 <= intervals.length <= 105 intervals[i].length == 2 1 <= lefti <= righti <= 106
and bob want to water n plants in their garden. the plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. each plant needs a specific amount of water. alice and bob have a watering can each, initially full. they water the plants in the following way: alice waters the plants in order from left to right, starting from the 0th plant. bob waters the plants in order from right to left, starting from the (n - 1)th plant. they begin watering the plants simultaneously. it takes the same amount of time to water each plant regardless of how much water it needs. alice/bob must water the plant if they have enough in their can to fully water it. otherwise, they first refill their can (instantaneously) then water the plant. in case both alice and bob reach the same plant, the one with more water currently in his/her watering can should water this plant. if they have the same amount of water, then alice should water this plant. given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacitya and capacityb representing the capacities of alice's and bob's watering cans respectively, return the number of times they have to refill to water all the plants. example 1: input: plants = [2,2,3,3], capacitya = 5, capacityb = 5 output: 1 explanation: - initially, alice and bob have 5 units of water each in their watering cans. - alice waters plant 0, bob waters plant 3. - alice and bob now have 3 units and 2 units of water respectively. - alice has enough water for plant 1, so she waters it. bob does not have enough water for plant 2, so he refills his can then waters it. so, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1. example 2: input: plants = [2,2,3,3], capacitya = 3, capacityb = 4 output: 2 explanation: - initially, alice and bob have 3 units and 4 units of water in their watering cans respectively. - alice waters plant 0, bob waters plant 3. - alice and bob now have 1 unit of water each, and need to water plants 1 and 2 respectively. - since neither of them have enough water for their current plants, they refill their cans and then water the plants. so, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2. example 3: input: plants = [5], capacitya = 10, capacityb = 8 output: 0 explanation: - there is only one plant. - alice's watering can has 10 units of water, whereas bob's can has 8 units. since alice has more water in her can, she waters this plant. so, the total number of times they have to refill is 0. constraints: n == plants.length 1 <= n <= 105 1 <= plants[i] <= 106 max(plants[i]) <= capacitya, capacityb <= 109
is texting bob using her phone. the mapping of digits to letters is shown in the figure below. in order to add a letter, alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key. for example, to add the letter 's', alice has to press '7' four times. similarly, to add the letter 'k', alice has to press '5' twice. note that the digits '0' and '1' do not map to any letters, so alice does not use them. however, due to an error in transmission, bob did not receive alice's text message but received a string of pressed keys instead. for example, when alice sent the message "bob", bob received the string "2266622". given a string pressedkeys representing the string received by bob, return the total number of possible text messages alice could have sent. since the answer may be very large, return it modulo 109 + 7. example 1: input: pressedkeys = "22233" output: 8 explanation: the possible text messages alice could have sent are: "aaadd", "abdd", "badd", "cdd", "aaae", "abe", "bae", and "ce". since there are 8 possible messages, we return 8. example 2: input: pressedkeys = "222222222222222222222222222222222222" output: 82876089 explanation: there are 2082876103 possible text messages alice could have sent. since we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089. constraints: 1 <= pressedkeys.length <= 105 pressedkeys only consists of digits from '2' - '9'.
are n employees, each with a unique id from 0 to n - 1. you are given a 2d integer array logs where logs[i] = [idi, leavetimei] where: idi is the id of the employee that worked on the ith task, and leavetimei is the time at which the employee finished the ith task. all the values leavetimei are unique. note that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0. return the id of the employee that worked the task with the longest time. if there is a tie between two or more employees, return the smallest id among them. example 1: input: n = 10, logs = [[0,3],[2,5],[0,9],[1,15]] output: 1 explanation: task 0 started at 0 and ended at 3 with 3 units of times. task 1 started at 3 and ended at 5 with 2 units of times. task 2 started at 5 and ended at 9 with 4 units of times. task 3 started at 9 and ended at 15 with 6 units of times. the task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1. example 2: input: n = 26, logs = [[1,1],[3,7],[2,12],[7,17]] output: 3 explanation: task 0 started at 0 and ended at 1 with 1 unit of times. task 1 started at 1 and ended at 7 with 6 units of times. task 2 started at 7 and ended at 12 with 5 units of times. task 3 started at 12 and ended at 17 with 5 units of times. the tasks with the longest time is task 1. the employee that worked on it is 3, so we return 3. example 3: input: n = 2, logs = [[0,10],[1,20]] output: 0 explanation: task 0 started at 0 and ended at 10 with 10 units of times. task 1 started at 10 and ended at 20 with 10 units of times. the tasks with the longest time are tasks 0 and 1. the employees that worked on them are 0 and 1, so we return the smallest id 0. constraints: 2 <= n <= 500 1 <= logs.length <= 500 logs[i].length == 2 0 <= idi <= n - 1 1 <= leavetimei <= 500 idi != idi+1 leavetimei are sorted in a strictly increasing order.
are given a 0-indexed integer array nums. we say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. in other words, an integer is expressible if it can be written as the bitwise or of some subsequence of nums. return the minimum positive non-zero integer that is not expressible from nums. example 1: input: nums = [2,1] output: 4 explanation: 1 and 2 are already present in the array. we know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. since 4 is not expressible, we return 4. example 2: input: nums = [5,3,2] output: 1 explanation: we can show that 1 is the smallest number that is not expressible. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
a c++ program, remove comments from it. the program source is an array of strings source where source[i] is the ith line of the source code. this represents the result of splitting the original source code string by the newline character '\n'. in c++, there are two types of comments, line comments, and block comments. the string "//" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored. the string "/*" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of "*/" should be ignored. (here, occurrences happen in reading order: line by line from left to right.) to be clear, the string "/*/" does not yet end the block comment, as the ending would be overlapping the beginning. the first effective comment takes precedence over others. for example, if the string "//" occurs in a block comment, it is ignored. similarly, if the string "/*" occurs in a line or block comment, it is also ignored. if a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty. there will be no control characters, single quote, or double quote characters. for example, source = "string s = "/* not a comment. */";" will not be a test case. also, nothing else such as defines or macros will interfere with the comments. it is guaranteed that every open block comment will eventually be closed, so "/*" outside of a line or block comment always starts a new comment. finally, implicit newline characters can be deleted by block comments. please see the examples below for details. after removing the comments from the source code, return the source code in the same format. example 1: input: source = ["/*test program */", "int main()", "{ ", " // variable declaration ", "int a, b, c;", "/* this is a test", " multiline ", " comment for ", " testing */", "a = b + c;", "}"] output: ["int main()","{ "," ","int a, b, c;","a = b + c;","}"] explanation: the line by line code is visualized as below: /*test program */ int main() { // variable declaration int a, b, c; /* this is a test multiline comment for testing */ a = b + c; } the string /* denotes a block comment, including line 1 and lines 6-9. the string // denotes line 4 as comments. the line by line output code is visualized as below: int main() { int a, b, c; a = b + c; } example 2: input: source = ["a/*comment", "line", "more_comment*/b"] output: ["ab"] explanation: the original source string is "a/*comment\nline\nmore_comment*/b", where we have bolded the newline characters. after deletion, the implicit newline characters are deleted, leaving the string "ab", which when delimited by newline characters becomes ["ab"]. constraints: 1 <= source.length <= 100 0 <= source[i].length <= 80 source[i] consists of printable ascii characters. every open block comment is eventually closed. there are no single-quote or double-quote in the input.
a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs. a pair (i, j) is fair if: 0 <= i < j < n, and lower <= nums[i] + nums[j] <= upper example 1: input: nums = [0,1,7,4,4,5], lower = 3, upper = 6 output: 6 explanation: there are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5). example 2: input: nums = [1,7,9,2,5], lower = 11, upper = 11 output: 1 explanation: there is a single fair pair: (2,3). constraints: 1 <= nums.length <= 105 nums.length == n -109 <= nums[i] <= 109 -109 <= lower <= upper <= 109
are given a 0-indexed array nums that consists of n distinct positive integers. apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1]. it is guaranteed that in the ith operation: operations[i][0] exists in nums. operations[i][1] does not exist in nums. return the array obtained after applying all the operations. example 1: input: nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]] output: [3,2,7,1] explanation: we perform the following operations on nums: - replace the number 1 with 3. nums becomes [3,2,4,6]. - replace the number 4 with 7. nums becomes [3,2,7,6]. - replace the number 6 with 1. nums becomes [3,2,7,1]. we return the final array [3,2,7,1]. example 2: input: nums = [1,2], operations = [[1,3],[2,1],[3,2]] output: [2,1] explanation: we perform the following operations to nums: - replace the number 1 with 3. nums becomes [3,2]. - replace the number 2 with 1. nums becomes [3,1]. - replace the number 3 with 2. nums becomes [2,1]. we return the array [2,1]. constraints: n == nums.length m == operations.length 1 <= n, m <= 105 all the values of nums are distinct. operations[i].length == 2 1 <= nums[i], operations[i][0], operations[i][1] <= 106 operations[i][0] will exist in nums when applying the ith operation. operations[i][1] will not exist in nums when applying the ith operation.
are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever. for example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever. you will start at the bus stop source (you are not on any bus initially), and you want to go to the bus stop target. you can travel between bus stops by buses only. return the least number of buses you must take to travel from source to target. return -1 if it is not possible. example 1: input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6 output: 2 explanation: the best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6. example 2: input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12 output: -1 constraints: 1 <= routes.length <= 500. 1 <= routes[i].length <= 105 all the values of routes[i] are unique. sum(routes[i].length) <= 105 0 <= routes[i][j] < 106 0 <= source, target < 106
two integers a and b, return any string s such that: s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters, the substring 'aaa' does not occur in s, and the substring 'bbb' does not occur in s. example 1: input: a = 1, b = 2 output: "abb" explanation: "abb", "bab" and "bba" are all correct answers. example 2: input: a = 4, b = 1 output: "aabaa" constraints: 0 <= a, b <= 100 it is guaranteed such an s exists for the given a and b.
the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on. return the smallest level x such that the sum of all the values of nodes at level x is maximal. example 1: input: root = [1,7,0,7,-8,null,null] output: 2 explanation: level 1 sum = 1. level 2 sum = 7 + 0 = 7. level 3 sum = 7 + -8 = -1. so we return the level with the maximum sum which is level 2. example 2: input: root = [989,null,10250,98693,-89388,null,null,null,-32127] output: 2 constraints: the number of nodes in the tree is in the range [1, 104]. -105 <= node.val <= 105
sentence is a string of single-space separated words where each word consists only of lowercase letters. a word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence. given two sentences s1 and s2, return a list of all the uncommon words. you may return the answer in any order. example 1: input: s1 = "this apple is sweet", s2 = "this apple is sour" output: ["sweet","sour"] example 2: input: s1 = "apple apple", s2 = "banana" output: ["banana"] constraints: 1 <= s1.length, s2.length <= 200 s1 and s2 consist of lowercase english letters and spaces. s1 and s2 do not have leading or trailing spaces. all the words in s1 and s2 are separated by a single space.
have a long flowerbed in which some of the plots are planted, and some are not. however, flowers cannot be planted in adjacent plots. given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise. example 1: input: flowerbed = [1,0,0,0,1], n = 1 output: true example 2: input: flowerbed = [1,0,0,0,1], n = 2 output: false constraints: 1 <= flowerbed.length <= 2 * 104 flowerbed[i] is 0 or 1. there are no two adjacent flowers in flowerbed. 0 <= n <= flowerbed.length
an array of integers arr and an integer k. a value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array. if |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j]. return a list of the strongest k values in the array. return the answer in any arbitrary order. median is the middle value in an ordered integer list. more formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed). for arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. the median is 6. for arr = [-7, 22, 17,â€‰3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. the median is 3. example 1: input: arr = [1,2,3,4,5], k = 2 output: [5,1] explanation: median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. the strongest 2 elements are [5, 1]. [1, 5] is also accepted answer. please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1. example 2: input: arr = [1,1,3,5,5], k = 2 output: [5,5] explanation: median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. the strongest 2 elements are [5, 5]. example 3: input: arr = [6,7,11,7,6,8], k = 5 output: [11,8,6,6,7] explanation: median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7]. any permutation of [11,8,6,6,7] is accepted. constraints: 1 <= arr.length <= 105 -105 <= arr[i] <= 105 1 <= k <= arr.length
an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums. to separate the digits of an integer is to get all the digits it has in the same order. for example, for the integer 10921, the separation of its digits is [1,0,9,2,1]. example 1: input: nums = [13,25,83,77] output: [1,3,2,5,8,3,7,7] explanation: - the separation of 13 is [1,3]. - the separation of 25 is [2,5]. - the separation of 83 is [8,3]. - the separation of 77 is [7,7]. answer = [1,3,2,5,8,3,7,7]. note that answer contains the separations in the same order. example 2: input: nums = [7,1,3,9] output: [7,1,3,9] explanation: the separation of each integer in nums is itself. answer = [7,1,3,9]. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 105
are given an integer array nums. the adjacent integers in nums will perform the float division. for example, for nums = [2,3,4], we will evaluate the expression "2/3/4". however, you can add any number of parenthesis at any position to change the priority of operations. you want to add these parentheses such the value of the expression after the evaluation is maximum. return the corresponding expression that has the maximum value in string format. note: your expression should not contain redundant parenthesis. example 1: input: nums = [1000,100,10,2] output: "1000/(100/10/2)" explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200 however, the bold parenthesis in "1000/((100/10)/2)" are redundant since they do not influence the operation priority. so you should return "1000/(100/10/2)". other cases: 1000/(100/10)/2 = 50 1000/(100/(10/2)) = 50 1000/100/10/2 = 0.5 1000/100/(10/2) = 2 example 2: input: nums = [2,3,4] output: "2/(3/4)" explanation: (2/(3/4)) = 8/3 = 2.667 it can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667 constraints: 1 <= nums.length <= 10 2 <= nums[i] <= 1000 there is only one optimal division for the given input.
an m x n integers matrix, return the length of the longest increasing path in matrix. from each cell, you can either move in four directions: left, right, up, or down. you may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed). example 1: input: matrix = [[9,9,4],[6,6,8],[2,1,1]] output: 4 explanation: the longest increasing path is [1, 2, 6, 9]. example 2: input: matrix = [[3,4,5],[3,2,6],[2,2,1]] output: 4 explanation: the longest increasing path is [3, 4, 5, 6]. moving diagonally is not allowed. example 3: input: matrix = [[1]] output: 1 constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 200 0 <= matrix[i][j] <= 231 - 1
are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers. you should rearrange the elements of nums such that the modified array follows the given conditions: every consecutive pair of integers have opposite signs. for all integers with the same sign, the order in which they were present in nums is preserved. the rearranged array begins with a positive integer. return the modified array after rearranging the elements to satisfy the aforementioned conditions. example 1: input: nums = [3,1,-2,-5,2,-4] output: [3,-2,1,-5,2,-4] explanation: the positive integers in nums are [3,1,2]. the negative integers are [-2,-5,-4]. the only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4]. other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions. example 2: input: nums = [-1,1] output: [1,-1] explanation: 1 is the only positive integer and -1 the only negative integer in nums. so nums is rearranged to [1,-1]. constraints: 2 <= nums.length <= 2 * 105 nums.length is even 1 <= |nums[i]| <= 105 nums consists of equal number of positive and negative integers.
two positive integers n and k, the binary string sn is formed as follows: s1 = "0" si = si - 1 + "1" + reverse(invert(si - 1)) for i > 1 where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0). for example, the first four strings in the above sequence are: s1 = "0" s2 = "011" s3 = "0111001" s4 = "011100110110001" return the kth bit in sn. it is guaranteed that k is valid for the given n. example 1: input: n = 3, k = 1 output: "0" explanation: s3 is "0111001". the 1st bit is "0". example 2: input: n = 4, k = 11 output: "1" explanation: s4 is "011100110110001". the 11th bit is "1". constraints: 1 <= n <= 20 1 <= k <= 2n - 1
an array of integers cost and an integer target, return the maximum integer you can paint under the following rules: the cost of painting a digit (i + 1) is given by cost[i] (0-indexed). the total cost used must be equal to target. the integer does not have 0 digits. since the answer may be very large, return it as a string. if there is no way to paint any integer given the condition, return "0". example 1: input: cost = [4,3,2,5,6,7,2,5,5], target = 9 output: "7772" explanation: the cost to paint the digit '7' is 2, and the digit '2' is 3. then cost("7772") = 2*3+ 3*1 = 9. you could also paint "977", but "7772" is the largest number. digit cost 1 -> 4 2 -> 3 3 -> 2 4 -> 5 5 -> 6 6 -> 7 7 -> 2 8 -> 5 9 -> 5 example 2: input: cost = [7,6,5,5,5,6,8,7,8], target = 12 output: "85" explanation: the cost to paint the digit '8' is 7, and the digit '5' is 5. then cost("85") = 7 + 5 = 12. example 3: input: cost = [2,4,6,2,4,6,4,4,4], target = 5 output: "0" explanation: it is impossible to paint any integer with total cost equal to target. constraints: cost.length == 9 1 <= cost[i], target <= 5000
sequence x1, x2, ..., xn is fibonacci-like if: n >= 3 xi + xi+1 == xi+2 for all i + 2 <= n given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest fibonacci-like subsequence of arr. if one does not exist, return 0. a subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. for example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8]. example 1: input: arr = [1,2,3,4,5,6,7,8] output: 5 explanation: the longest subsequence that is fibonacci-like: [1,2,3,5,8]. example 2: input: arr = [1,3,7,11,12,14,18] output: 3 explanation: the longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]. constraints: 3 <= arr.length <= 1000 1 <= arr[i] < arr[i + 1] <= 109
are given an integer array nums with the following properties: nums.length == 2 * n. nums contains n + 1 unique elements. exactly one element of nums is repeated n times. return the element that is repeated n times. example 1: input: nums = [1,2,3,3] output: 3 example 2: input: nums = [2,1,2,5,3,2] output: 2 example 3: input: nums = [5,1,5,2,5,3,5,4] output: 5 constraints: 2 <= n <= 5000 nums.length == 2 * n 0 <= nums[i] <= 104 nums contains n + 1 unique elements and one of them is repeated exactly n times.
an integer num, return the number of steps to reduce it to zero. in one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it. example 1: input: num = 14 output: 6 explanation: step 1) 14 is even; divide by 2 and obtain 7. step 2) 7 is odd; subtract 1 and obtain 6. step 3) 6 is even; divide by 2 and obtain 3. step 4) 3 is odd; subtract 1 and obtain 2. step 5) 2 is even; divide by 2 and obtain 1. step 6) 1 is odd; subtract 1 and obtain 0. example 2: input: num = 8 output: 4 explanation: step 1) 8 is even; divide by 2 and obtain 4. step 2) 4 is even; divide by 2 and obtain 2. step 3) 2 is even; divide by 2 and obtain 1. step 4) 1 is odd; subtract 1 and obtain 0. example 3: input: num = 123 output: 12 constraints: 0 <= num <= 106
3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum. given a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there? (each subgrid is contiguous). example 1: input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]] output: 1 explanation: the following subgrid is a 3 x 3 magic square: while this one is not: in total, there is only one magic square inside the given grid. example 2: input: grid = [[8]] output: 0 constraints: row == grid.length col == grid[i].length 1 <= row, col <= 10 0 <= grid[i][j] <= 15
a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for: i - k <= r <= i + k, j - k <= c <= j + k, and (r, c) is a valid position in the matrix. example 1: input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1 output: [[12,21,16],[27,45,33],[24,39,28]] example 2: input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2 output: [[45,45,45],[45,45,45],[45,45,45]] constraints: m == mat.length n == mat[i].length 1 <= m, n, k <= 100 1 <= mat[i][j] <= 100
an array of strings strs, return the length of the longest uncommon subsequence between them. if the longest uncommon subsequence does not exist, return -1. an uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others. a subsequence of a string s is a string that can be obtained after deleting any number of characters from s. for example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string). example 1: input: strs = ["aba","cdc","eae"] output: 3 example 2: input: strs = ["aaa","aaa","aa"] output: -1 constraints: 2 <= strs.length <= 50 1 <= strs[i].length <= 10 strs[i] consists of lowercase english letters.
are given an integer array arr. sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order. return the array after sorting it. example 1: input: arr = [0,1,2,3,4,5,6,7,8] output: [0,1,2,4,8,3,5,6,7] explantion: [0] is the only integer with 0 bits. [1,2,4,8] all have 1 bit. [3,5,6] have 2 bits. [7] has 3 bits. the sorted array by bits is [0,1,2,4,8,3,5,6,7] example 2: input: arr = [1024,512,256,128,64,32,16,8,4,2,1] output: [1,2,4,8,16,32,64,128,256,512,1024] explantion: all integers have 1 bit in the binary representation, you should just sort them in ascending order. constraints: 1 <= arr.length <= 500 0 <= arr[i] <= 104
are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti. a pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. a chain of pairs can be formed in this fashion. return the length longest chain which can be formed. you do not need to use up all the given intervals. you can select pairs in any order. example 1: input: pairs = [[1,2],[2,3],[3,4]] output: 2 explanation: the longest chain is [1,2] -> [3,4]. example 2: input: pairs = [[1,2],[7,8],[4,5]] output: 3 explanation: the longest chain is [1,2] -> [4,5] -> [7,8]. constraints: n == pairs.length 1 <= n <= 1000 -1000 <= lefti < righti <= 1000
are given an integer array nums that is sorted in non-decreasing order. determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true: each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer). all subsequences have a length of 3 or more. return true if you can split nums according to the above conditions, or false otherwise. a subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not). example 1: input: nums = [1,2,3,3,4,5] output: true explanation: nums can be split into the following subsequences: [1,2,3,3,4,5] --> 1, 2, 3 [1,2,3,3,4,5] --> 3, 4, 5 example 2: input: nums = [1,2,3,3,4,4,5,5] output: true explanation: nums can be split into the following subsequences: [1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5 [1,2,3,3,4,4,5,5] --> 3, 4, 5 example 3: input: nums = [1,2,3,4,4,5] output: false explanation: it is impossible to split nums into consecutive increasing subsequences of length 3 or more. constraints: 1 <= nums.length <= 104 -1000 <= nums[i] <= 1000 nums is sorted in non-decreasing order.
are given the root of a binary tree and an integer distance. a pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance. return the number of good leaf node pairs in the tree. example 1: input: root = [1,2,3,null,4], distance = 3 output: 1 explanation: the leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. this is the only good pair. example 2: input: root = [1,2,3,4,5,6,7], distance = 3 output: 2 explanation: the good pairs are [4,5] and [6,7] with shortest path = 2. the pair [4,6] is not good because the length of ther shortest path between them is 4. example 3: input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3 output: 1 explanation: the only good pair is [2,5]. constraints: the number of nodes in the tree is in the range [1, 210]. 1 <= node.val <= 100 1 <= distance <= 10
an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. a move consists of choosing 0 and a 4-directionally adjacent number and swapping it. the state of the board is solved if and only if the board is [[1,2,3],[4,5,0]]. given the puzzle board board, return the least number of moves required so that the state of the board is solved. if it is impossible for the state of the board to be solved, return -1. example 1: input: board = [[1,2,3],[4,0,5]] output: 1 explanation: swap the 0 and the 5 in one move. example 2: input: board = [[1,2,3],[5,4,0]] output: -1 explanation: no number of moves will make the board solved. example 3: input: board = [[4,1,2],[5,0,3]] output: 5 explanation: 5 is the smallest number of moves that solves the board. an example path: after move 0: [[4,1,2],[5,0,3]] after move 1: [[4,1,2],[0,5,3]] after move 2: [[0,1,2],[4,5,3]] after move 3: [[1,0,2],[4,5,3]] after move 4: [[1,2,0],[4,5,3]] after move 5: [[1,2,3],[4,5,0]] constraints: board.length == 2 board[i].length == 3 0 <= board[i][j] <= 5 each value board[i][j] is unique.
are given an integer array target and an integer n. you have an empty stack with the two following operations: "push": pushes an integer to the top of the stack. "pop": removes the integer on the top of the stack. you also have a stream of the integers in the range [1, n]. use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. you should follow the following rules: if the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack. if the stack is not empty, pop the integer at the top of the stack. if, at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack. return the stack operations needed to build target following the mentioned rules. if there are multiple valid answers, return any of them. example 1: input: target = [1,3], n = 3 output: ["push","push","pop","push"] explanation: initially the stack s is empty. the last element is the top of the stack. read 1 from the stream and push it to the stack. s = [1]. read 2 from the stream and push it to the stack. s = [1,2]. pop the integer on the top of the stack. s = [1]. read 3 from the stream and push it to the stack. s = [1,3]. example 2: input: target = [1,2,3], n = 3 output: ["push","push","push"] explanation: initially the stack s is empty. the last element is the top of the stack. read 1 from the stream and push it to the stack. s = [1]. read 2 from the stream and push it to the stack. s = [1,2]. read 3 from the stream and push it to the stack. s = [1,2,3]. example 3: input: target = [1,2], n = 4 output: ["push","push"] explanation: initially the stack s is empty. the last element is the top of the stack. read 1 from the stream and push it to the stack. s = [1]. read 2 from the stream and push it to the stack. s = [1,2]. since the stack (from the bottom to the top) is equal to target, we stop the stack operations. the answers that read integer 3 from the stream are not accepted. constraints: 1 <= target.length <= 100 1 <= n <= 100 1 <= target[i] <= n target is strictly increasing.
are given a 0-indexed integer array nums of length n. the average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. both averages should be rounded down to the nearest integer. return the index with the minimum average difference. if there are multiple such indices, return the smallest one. note: the absolute difference of two numbers is the absolute value of their difference. the average of n elements is the sum of the n elements divided (integer division) by n. the average of 0 elements is considered to be 0. example 1: input: nums = [2,5,3,9,5,3] output: 3 explanation: - the average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3. - the average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2. - the average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2. - the average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0. - the average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1. - the average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4. the average difference of index 3 is the minimum average difference so return 3. example 2: input: nums = [0] output: 0 explanation: the only index is 0 so return 0. the average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 105
array is monotonic if it is either monotone increasing or monotone decreasing. an array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. an array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j]. given an integer array nums, return true if the given array is monotonic, or false otherwise. example 1: input: nums = [1,2,2,3] output: true example 2: input: nums = [6,5,4,4] output: true example 3: input: nums = [1,3,2] output: false constraints: 1 <= nums.length <= 105 -105 <= nums[i] <= 105
the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street. return the minimum total distance between each house and its nearest mailbox. the test cases are generated so that the answer fits in a 32-bit integer. example 1: input: houses = [1,4,8,10,20], k = 3 output: 5 explanation: allocate mailboxes in position 3, 9 and 20. minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 example 2: input: houses = [2,3,5,12,18], k = 2 output: 9 explanation: allocate mailboxes in position 3 and 14. minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9. constraints: 1 <= k <= houses.length <= 100 1 <= houses[i] <= 104 all the integers of houses are unique.
schema table: cinema +----------------+----------+ | column name | type | +----------------+----------+ | id | int | | movie | varchar | | description | varchar | | rating | float | +----------------+----------+ id is the primary key for this table. each row contains information about the name of a movie, its genre, and its rating. rating is a 2 decimal places float in the range [0, 10] write an sql query to report the movies with an odd-numbered id and a description that is not "boring". return the result table ordered by rating in descending order. the query result format is in the following example. example 1: input: cinema table: +----+------------+-------------+--------+ | id | movie | description | rating | +----+------------+-------------+--------+ | 1 | war | great 3d | 8.9 | | 2 | science | fiction | 8.5 | | 3 | irish | boring | 6.2 | | 4 | ice song | fantacy | 8.6 | | 5 | house card | interesting | 9.1 | +----+------------+-------------+--------+ output: +----+------------+-------------+--------+ | id | movie | description | rating | +----+------------+-------------+--------+ | 5 | house card | interesting | 9.1 | | 1 | war | great 3d | 8.9 | +----+------------+-------------+--------+ explanation: we have three movies with odd-numbered ids: 1, 3, and 5. the movie with id = 3 is boring so we do not include it in the answer.
are given an array words of size n consisting of non-empty strings. we define the score of a string word as the number of strings words[i] such that word is a prefix of words[i]. for example, if words = ["a", "ab", "abc", "cab"], then the score of "ab" is 2, since "ab" is a prefix of both "ab" and "abc". return an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i]. note that a string is considered as a prefix of itself. example 1: input: words = ["abc","ab","bc","b"] output: [5,4,3,2] explanation: the answer for each string is the following: - "abc" has 3 prefixes: "a", "ab", and "abc". - there are 2 strings with the prefix "a", 2 strings with the prefix "ab", and 1 string with the prefix "abc". the total is answer[0] = 2 + 2 + 1 = 5. - "ab" has 2 prefixes: "a" and "ab". - there are 2 strings with the prefix "a", and 2 strings with the prefix "ab". the total is answer[1] = 2 + 2 = 4. - "bc" has 2 prefixes: "b" and "bc". - there are 2 strings with the prefix "b", and 1 string with the prefix "bc". the total is answer[2] = 2 + 1 = 3. - "b" has 1 prefix: "b". - there are 2 strings with the prefix "b". the total is answer[3] = 2. example 2: input: words = ["abcd"] output: [4] explanation: "abcd" has 4 prefixes: "a", "ab", "abc", and "abcd". each prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4. constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 1000 words[i] consists of lowercase english letters.
an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal. example 1: input: nums = [4,3,2,3,5,2,1], k = 4 output: true explanation: it is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums. example 2: input: nums = [1,2,3,4], k = 3 output: false constraints: 1 <= k <= nums.length <= 16 1 <= nums[i] <= 104 the frequency of each element is in the range [1, 4].
are given a binary string s and a positive integer k. return the length of the longest subsequence of s that makes up a binary number less than or equal to k. note: the subsequence can contain leading zeroes. the empty string is considered to be equal to 0. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. example 1: input: s = "1001010", k = 5 output: 5 explanation: the longest subsequence of s that makes up a binary number less than or equal to 5 is "00010", as this number is equal to 2 in decimal. note that "00100" and "00101" are also possible, which are equal to 4 and 5 in decimal, respectively. the length of this subsequence is 5, so 5 is returned. example 2: input: s = "00101001", k = 1 output: 6 explanation: "000001" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal. the length of this subsequence is 6, so 6 is returned. constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'. 1 <= k <= 109
are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. you are currently on the floor at height 0, and you want to reach the last rung. you are also given an integer dist. you can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. you are able to insert rungs at any positive integer height if a rung is not already there. return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung. example 1: input: rungs = [1,3,5,10], dist = 2 output: 2 explanation: you currently cannot reach the last rung. add rungs at heights 7 and 8 to climb this ladder. the ladder will now have rungs at [1,3,5,7,8,10]. example 2: input: rungs = [3,6,8,10], dist = 3 output: 0 explanation: this ladder can be climbed without adding additional rungs. example 3: input: rungs = [3,4,6,7], dist = 2 output: 1 explanation: you currently cannot reach the first rung from the ground. add a rung at height 1 to climb this ladder. the ladder will now have rungs at [1,3,4,6,7]. constraints: 1 <= rungs.length <= 105 1 <= rungs[i] <= 109 1 <= dist <= 109 rungs is strictly increasing.
are given an integer n. there is a complete binary tree with 2n - 1 nodes. the root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where: the left node has the value 2 * val, and the right node has the value 2 * val + 1. you are also given a 2d integer array queries of length m, where queries[i] = [ai, bi]. for each query, solve the following problem: add an edge between the nodes with values ai and bi. find the length of the cycle in the graph. remove the added edge between nodes with values ai and bi. note that: a cycle is a path that starts and ends at the same node, and each edge in the path is visited only once. the length of a cycle is the number of edges visited in the cycle. there could be multiple edges between two nodes in the tree after adding the edge of the query. return an array answer of length m where answer[i] is the answer to the ith query. example 1: input: n = 3, queries = [[5,3],[4,7],[2,3]] output: [4,5,3] explanation: the diagrams above show the tree of 23 - 1 nodes. nodes colored in red describe the nodes in the cycle after adding the edge. - after adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. thus answer to the first query is 4. we delete the added edge and process the next query. - after adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. thus answer to the second query is 5. we delete the added edge and process the next query. - after adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. thus answer to the third query is 3. we delete the added edge. example 2: input: n = 2, queries = [[1,2]] output: [2] explanation: the diagram above shows the tree of 22 - 1 nodes. nodes colored in red describe the nodes in the cycle after adding the edge. - after adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. thus answer for the first query is 2. we delete the added edge. constraints: 2 <= n <= 30 m == queries.length 1 <= m <= 105 queries[i].length == 2 1 <= ai, bi <= 2n - 1 ai != bi
are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). you can move up, down, left, or right from and to an empty cell in one step. return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. if it is not possible to find such walk return -1. example 1: input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1 output: 6 explanation: the shortest path without eliminating any obstacle is 10. the shortest path with one obstacle elimination at position (3,2) is 6. such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2). example 2: input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1 output: -1 explanation: we need to eliminate at least two obstacles to find such a walk. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 40 1 <= k <= m * n grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 0
a string path, where path[i] = 'n', 's', 'e' or 'w', each representing moving one unit north, south, east, or west, respectively. you start at the origin (0, 0) on a 2d plane and walk on the path specified by path. return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. return false otherwise. example 1: input: path = "nes" output: false explanation: notice that the path doesn't cross any point more than once. example 2: input: path = "nesww" output: true explanation: notice that the path visits the origin twice. constraints: 1 <= path.length <= 104 path[i] is either 'n', 's', 'e', or 'w'.
are given an integer array nums and an integer k. split the array into some number of non-empty subarrays. the cost of a split is the sum of the importance value of each subarray in the split. let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed. for example, trimmed([3,1,2,4,3,4]) = [3,4,3,4]. the importance value of a subarray is k + trimmed(subarray).length. for example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].the importance value of this subarray will be k + 5. return the minimum possible cost of a split of nums. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,2,1,2,1,3,3], k = 2 output: 8 explanation: we split nums to have two subarrays: [1,2], [1,2,1,3,3]. the importance value of [1,2] is 2 + (0) = 2. the importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6. the cost of the split is 2 + 6 = 8. it can be shown that this is the minimum possible cost among all the possible splits. example 2: input: nums = [1,2,1,2,1], k = 2 output: 6 explanation: we split nums to have two subarrays: [1,2], [1,2,1]. the importance value of [1,2] is 2 + (0) = 2. the importance value of [1,2,1] is 2 + (2) = 4. the cost of the split is 2 + 4 = 6. it can be shown that this is the minimum possible cost among all the possible splits. example 3: input: nums = [1,2,1,2,1], k = 5 output: 10 explanation: we split nums to have one subarray: [1,2,1,2,1]. the importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10. the cost of the split is 10. it can be shown that this is the minimum possible cost among all the possible splits. constraints: 1 <= nums.length <= 1000 0 <= nums[i] < nums.length 1 <= k <= 109
are given an m x n integer matrix matrix with the following two properties: each row is sorted in non-decreasing order. the first integer of each row is greater than the last integer of the previous row. given an integer target, return true if target is in matrix or false otherwise. you must write a solution in o(log(m * n)) time complexity. example 1: input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 output: true example 2: input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 output: false constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -104 <= matrix[i][j], target <= 104
have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. the ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. both starti and endi are 0-indexed. return the maximum total sum of all requests among all permutations of nums. since the answer may be too large, return it modulo 109 + 7. example 1: input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]] output: 19 explanation: one permutation of nums is [2,1,3,4,5] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8 requests[1] -> nums[0] + nums[1] = 2 + 1 = 3 total sum: 8 + 3 = 11. a permutation with a higher total sum is [3,5,4,2,1] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11 requests[1] -> nums[0] + nums[1] = 3 + 5 = 8 total sum: 11 + 8 = 19, which is the best that you can do. example 2: input: nums = [1,2,3,4,5,6], requests = [[0,1]] output: 11 explanation: a permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]. example 3: input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]] output: 47 explanation: a permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]. constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] <= 105 1 <= requests.length <= 105 requests[i].length == 2 0 <= starti <= endi < n
the roots of two binary trees root and subroot, return true if there is a subtree of root with the same structure and node values of subroot and false otherwise. a subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. the tree tree could also be considered as a subtree of itself. example 1: input: root = [3,4,5,1,2], subroot = [4,1,2] output: true example 2: input: root = [3,4,5,1,2,null,null,null,null,0], subroot = [4,1,2] output: false constraints: the number of nodes in the root tree is in the range [1, 2000]. the number of nodes in the subroot tree is in the range [1, 1000]. -104 <= root.val <= 104 -104 <= subroot.val <= 104
is a hidden integer array arr that consists of n non-negative integers. it was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] xor arr[i + 1]. for example, if arr = [1,0,2,1], then encoded = [1,2,3]. you are given the encoded array. you are also given an integer first, that is the first element of arr, i.e. arr[0]. return the original array arr. it can be proved that the answer exists and is unique. example 1: input: encoded = [1,2,3], first = 1 output: [1,0,2,1] explanation: if arr = [1,0,2,1], then first = 1 and encoded = [1 xor 0, 0 xor 2, 2 xor 1] = [1,2,3] example 2: input: encoded = [6,2,7,3], first = 4 output: [4,2,0,7,4] constraints: 2 <= n <= 104 encoded.length == n - 1 0 <= encoded[i] <= 105 0 <= first <= 105
are given a string array words and a string s, where words[i] and s comprise only of lowercase english letters. return the number of strings in words that are a prefix of s. a prefix of a string is a substring that occurs at the beginning of the string. a substring is a contiguous sequence of characters within a string. example 1: input: words = ["a","b","c","ab","bc","abc"], s = "abc" output: 3 explanation: the strings in words which are a prefix of s = "abc" are: "a", "ab", and "abc". thus the number of strings in words which are a prefix of s is 3. example 2: input: words = ["a","a"], s = "aa" output: 2 explanation: both of the strings are a prefix of s. note that the same string can occur multiple times in words, and it should be counted each time. constraints: 1 <= words.length <= 1000 1 <= words[i].length, s.length <= 10 words[i] and s consist of lowercase english letters only.
are n people, each person has a unique id between 0 and n-1. given the arrays watchedvideos and friends, where watchedvideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i. level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. in general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). for videos with the same frequency order them alphabetically from least to greatest. example 1: input: watchedvideos = [["a","b"],["c"],["b","c"],["d"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1 output: ["b","c"] explanation: you have id = 0 (green color in the figure) and your friends are (yellow color in the figure): person with id = 1 -> watchedvideos = ["c"] person with id = 2 -> watchedvideos = ["b","c"] the frequencies of watchedvideos by your friends are: b -> 1 c -> 2 example 2: input: watchedvideos = [["a","b"],["c"],["b","c"],["d"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2 output: ["d"] explanation: you have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure). constraints: n == watchedvideos.length == friends.length 2 <= n <= 100 1 <= watchedvideos[i].length <= 100 1 <= watchedvideos[i][j].length <= 8 0 <= friends[i].length < n 0 <= friends[i][j] < n 0 <= id < n 1 <= level < n if friends[i] contains j, then friends[j] contains i
schema table: dailysales +-------------+---------+ | column name | type | +-------------+---------+ | date_id | date | | make_name | varchar | | lead_id | int | | partner_id | int | +-------------+---------+ this table does not have a primary key. this table contains the date and the name of the product sold and the ids of the lead and partner it was sold to. the name consists of only lowercase english letters. write an sql query that will, for each date_id and make_name, return the number of distinct lead_id's and distinct partner_id's. return the result table in any order. the query result format is in the following example. example 1: input: dailysales table: +-----------+-----------+---------+------------+ | date_id | make_name | lead_id | partner_id | +-----------+-----------+---------+------------+ | 2020-12-8 | toyota | 0 | 1 | | 2020-12-8 | toyota | 1 | 0 | | 2020-12-8 | toyota | 1 | 2 | | 2020-12-7 | toyota | 0 | 2 | | 2020-12-7 | toyota | 0 | 1 | | 2020-12-8 | honda | 1 | 2 | | 2020-12-8 | honda | 2 | 1 | | 2020-12-7 | honda | 0 | 1 | | 2020-12-7 | honda | 1 | 2 | | 2020-12-7 | honda | 2 | 1 | +-----------+-----------+---------+------------+ output: +-----------+-----------+--------------+-----------------+ | date_id | make_name | unique_leads | unique_partners | +-----------+-----------+--------------+-----------------+ | 2020-12-8 | toyota | 2 | 3 | | 2020-12-7 | toyota | 1 | 2 | | 2020-12-8 | honda | 2 | 2 | | 2020-12-7 | honda | 3 | 2 | +-----------+-----------+--------------+-----------------+ explanation: for 2020-12-8, toyota gets leads = [0, 1] and partners = [0, 1, 2] while honda gets leads = [1, 2] and partners = [1, 2]. for 2020-12-7, toyota gets leads = [0] and partners = [1, 2] while honda gets leads = [0, 1, 2] and partners = [1, 2].
schema table: employee +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | | department | varchar | | managerid | int | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the name of an employee, their department, and the id of their manager. if managerid is null, then the employee does not have a manager. no employee will be the manager of themself. write an sql query to report the managers with at least five direct reports. return the result table in any order. the query result format is in the following example. example 1: input: employee table: +-----+-------+------------+-----------+ | id | name | department | managerid | +-----+-------+------------+-----------+ | 101 | john | a | none | | 102 | dan | a | 101 | | 103 | james | a | 101 | | 104 | amy | a | 101 | | 105 | anne | a | 101 | | 106 | ron | b | 101 | +-----+-------+------------+-----------+ output: +------+ | name | +------+ | john | +------+
schema table: employee +-------------+------+ | column name | type | +-------------+------+ | id | int | | salary | int | +-------------+------+ id is the primary key column for this table. each row of this table contains information about the salary of an employee. write an sql query to report the second highest salary from the employee table. if there is no second highest salary, the query should report null. the query result format is in the following example. example 1: input: employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ output: +---------------------+ | secondhighestsalary | +---------------------+ | 200 | +---------------------+ example 2: input: employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | +----+--------+ output: +---------------------+ | secondhighestsalary | +---------------------+ | null | +---------------------+
are given n bst (binary search tree) root nodes for n separate bsts stored in an array trees (0-indexed). each bst in trees has at most 3 nodes, and no two roots have the same value. in one operation, you can: select two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j]. replace the leaf node in trees[i] with trees[j]. remove trees[j] from trees. return the root of the resulting bst if it is possible to form a valid bst after performing n - 1 operations, or null if it is impossible to create a valid bst. a bst (binary search tree) is a binary tree where each node satisfies the following property: every node in the node's left subtree has a value strictly less than the node's value. every node in the node's right subtree has a value strictly greater than the node's value. a leaf is a node that has no children. example 1: input: trees = [[2,1],[3,2,5],[5,4]] output: [3,2,5,1,null,4] explanation: in the first operation, pick i=1 and j=0, and merge trees[0] into trees[1]. delete trees[0], so trees = [[3,2,5,1],[5,4]]. in the second operation, pick i=0 and j=1, and merge trees[1] into trees[0]. delete trees[1], so trees = [[3,2,5,1,null,4]]. the resulting tree, shown above, is a valid bst, so return its root. example 2: input: trees = [[5,3,8],[3,2,6]] output: [] explanation: pick i=0 and j=1 and merge trees[1] into trees[0]. delete trees[1], so trees = [[5,3,8,2,6]]. the resulting tree is shown above. this is the only valid operation that can be performed, but the resulting tree is not a valid bst, so return null. example 3: input: trees = [[5,4],[3]] output: [] explanation: it is impossible to perform any operations. constraints: n == trees.length 1 <= n <= 5 * 104 the number of nodes in each tree is in the range [1, 3]. each node in the input may have children but no grandchildren. no two roots of trees have the same value. all the trees in the input are valid bsts. 1 <= treenode.val <= 5 * 104.
schema table: accounts +-------------+------+ | column name | type | +-------------+------+ | account_id | int | | income | int | +-------------+------+ account_id is the primary key for this table. each row contains information about the monthly income for one bank account. write an sql query to report the number of bank accounts of each salary category. the salary categories are: "low salary": all the salaries strictly less than $20000. "average salary": all the salaries in the inclusive range [$20000, $50000]. "high salary": all the salaries strictly greater than $50000. the result table must contain all three categories. if there are no accounts in a category, then report 0. return the result table in any order. the query result format is in the following example. example 1: input: accounts table: +------------+--------+ | account_id | income | +------------+--------+ | 3 | 108939 | | 2 | 12747 | | 8 | 87709 | | 6 | 91796 | +------------+--------+ output: +----------------+----------------+ | category | accounts_count | +----------------+----------------+ | low salary | 1 | | average salary | 0 | | high salary | 3 | +----------------+----------------+ explanation: low salary: account 2. average salary: no accounts. high salary: accounts 3, 6, and 8.
an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts. a falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column. example 1: input: arr = [[1,2,3],[4,5,6],[7,8,9]] output: 13 explanation: the possible falling paths are: [1,5,9], [1,5,7], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9] the falling path with the smallest sum is [1,5,7], so the answer is 13. example 2: input: grid = [[7]] output: 7 constraints: n == grid.length == grid[i].length 1 <= n <= 200 -99 <= grid[i][j] <= 99
you have n integers labeled 1 through n. a permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true: perm[i] is divisible by i. i is divisible by perm[i]. given an integer n, return the number of the beautiful arrangements that you can construct. example 1: input: n = 2 output: 2 explanation: the first beautiful arrangement is [1,2]: - perm[1] = 1 is divisible by i = 1 - perm[2] = 2 is divisible by i = 2 the second beautiful arrangement is [2,1]: - perm[1] = 2 is divisible by i = 1 - i = 2 is divisible by perm[2] = 1 example 2: input: n = 1 output: 1 constraints: 1 <= n <= 15
are given an integer array nums. you want to maximize the number of points you get by performing the following operation any number of times: pick any nums[i] and delete it to earn nums[i] points. afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1. return the maximum number of points you can earn by applying the above operation some number of times. example 1: input: nums = [3,4,2] output: 6 explanation: you can perform the following operations: - delete 4 to earn 4 points. consequently, 3 is also deleted. nums = [2]. - delete 2 to earn 2 points. nums = []. you earn a total of 6 points. example 2: input: nums = [2,2,3,3,3,4] output: 9 explanation: you can perform the following operations: - delete a 3 to earn 3 points. all 2's and 4's are also deleted. nums = [3,3]. - delete a 3 again to earn 3 points. nums = [3]. - delete a 3 once more to earn 3 points. nums = []. you earn a total of 9 points. constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] <= 104
are given a string s. we want to partition the string into as many parts as possible so that each letter appears in at most one part. note that the partition is done so that after concatenating all the parts in order, the resultant string should be s. return a list of integers representing the size of these parts. example 1: input: s = "ababcbacadefegdehijhklij" output: [9,7,8] explanation: the partition is "ababcbaca", "defegde", "hijhklij". this is a partition so that each letter appears in at most one part. a partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts. example 2: input: s = "eccbbbbdec" output: [10] constraints: 1 <= s.length <= 500 s consists of lowercase english letters.
schema table: employee +-------------+------+ | column name | type | +-------------+------+ | id | int | | salary | int | +-------------+------+ id is the primary key column for this table. each row of this table contains information about the salary of an employee. write an sql query to report the nth highest salary from the employee table. if there is no nth highest salary, the query should report null. the query result format is in the following example. example 1: input: employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ n = 2 output: +------------------------+ | getnthhighestsalary(2) | +------------------------+ | 200 | +------------------------+ example 2: input: employee table: +----+--------+ | id | salary | +----+--------+ | 1 | 100 | +----+--------+ n = 2 output: +------------------------+ | getnthhighestsalary(2) | +------------------------+ | null | +------------------------+
min-product of an array is equal to the minimum value in the array multiplied by the array's sum. for example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20. given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. since the answer may be large, return it modulo 109 + 7. note that the min-product should be maximized before performing the modulo operation. testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer. a subarray is a contiguous part of an array. example 1: input: nums = [1,2,3,2] output: 14 explanation: the maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2). 2 * (2+3+2) = 2 * 7 = 14. example 2: input: nums = [2,3,3,1,2] output: 18 explanation: the maximum min-product is achieved with the subarray [3,3] (minimum value is 3). 3 * (3+3) = 3 * 6 = 18. example 3: input: nums = [3,1,5,6,4,2] output: 60 explanation: the maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4). 4 * (5+6+4) = 4 * 15 = 60. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 107
is a supermarket that is frequented by many customers. the products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an id of products[i] and a price of prices[i]. when a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an id of product[j], and amount[j] is how much of the product they bought. their subtotal is calculated as the sum of each amount[j] * (price of the jth product). the supermarket decided to have a sale. every nth customer paying for their groceries will be given a percentage discount. the discount amount is given by discount, where they will be given discount percent off their subtotal. more formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100). implement the cashier class: cashier(int n, int discount, int[] products, int[] prices) initializes the object with n, the discount, and the products and their prices. double getbill(int[] product, int[] amount) returns the final total of the bill with the discount applied (if any). answers within 10-5 of the actual value will be accepted. example 1: input ["cashier","getbill","getbill","getbill","getbill","getbill","getbill","getbill"] [[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]] output [null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0] explanation cashier cashier = new cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]); cashier.getbill([1,2],[1,2]); // return 500.0. 1st customer, no discount. // bill = 1 * 100 + 2 * 200 = 500. cashier.getbill([3,7],[10,10]); // return 4000.0. 2nd customer, no discount. // bill = 10 * 300 + 10 * 100 = 4000. cashier.getbill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]); // return 800.0. 3rd customer, 50% discount. // original bill = 1600 // actual bill = 1600 * ((100 - 50) / 100) = 800. cashier.getbill([4],[10]); // return 4000.0. 4th customer, no discount. cashier.getbill([7,3],[10,10]); // return 4000.0. 5th customer, no discount. cashier.getbill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6th customer, 50% discount. // original bill = 14700, but with // actual bill = 14700 * ((100 - 50) / 100) = 7350. cashier.getbill([2,3,5],[5,3,2]); // return 2500.0. 6th customer, no discount. constraints: 1 <= n <= 104 0 <= discount <= 100 1 <= products.length <= 200 prices.length == products.length 1 <= products[i] <= 200 1 <= prices[i] <= 1000 the elements in products are unique. 1 <= product.length <= products.length amount.length == product.length product[j] exists in products. 1 <= amount[j] <= 1000 the elements of product are unique. at most 1000 calls will be made to getbill. answers within 10-5 of the actual value will be accepted.
your implementation of the linked list. you can choose to use a singly or doubly linked list. a node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. if you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. assume all nodes in the linked list are 0-indexed. implement the mylinkedlist class: mylinkedlist() initializes the mylinkedlist object. int get(int index) get the value of the indexth node in the linked list. if the index is invalid, return -1. void addathead(int val) add a node of value val before the first element of the linked list. after the insertion, the new node will be the first node of the linked list. void addattail(int val) append a node of value val as the last element of the linked list. void addatindex(int index, int val) add a node of value val before the indexth node in the linked list. if index equals the length of the linked list, the node will be appended to the end of the linked list. if index is greater than the length, the node will not be inserted. void deleteatindex(int index) delete the indexth node in the linked list, if the index is valid. example 1: input ["mylinkedlist", "addathead", "addattail", "addatindex", "get", "deleteatindex", "get"] [[], [1], [3], [1, 2], [1], [1], [1]] output [null, null, null, null, 2, null, 3] explanation mylinkedlist mylinkedlist = new mylinkedlist(); mylinkedlist.addathead(1); mylinkedlist.addattail(3); mylinkedlist.addatindex(1, 2); // linked list becomes 1->2->3 mylinkedlist.get(1); // return 2 mylinkedlist.deleteatindex(1); // now the linked list is 1->3 mylinkedlist.get(1); // return 3 constraints: 0 <= index, val <= 1000 please do not use the built-in linkedlist library. at most 2000 calls will be made to get, addathead, addattail, addatindex and deleteatindex.
an array of strings strs, group the anagrams together. you can return the answer in any order. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. example 1: input: strs = ["eat","tea","tan","ate","nat","bat"] output: [["bat"],["nat","tan"],["ate","eat","tea"]] example 2: input: strs = [""] output: [[""]] example 3: input: strs = ["a"] output: [["a"]] constraints: 1 <= strs.length <= 104 0 <= strs[i].length <= 100 strs[i] consists of lowercase english letters.
own a goal parser that can interpret a string command. the command consists of an alphabet of "g", "()" and/or "(al)" in some order. the goal parser will interpret "g" as the string "g", "()" as the string "o", and "(al)" as the string "al". the interpreted strings are then concatenated in the original order. given the string command, return the goal parser's interpretation of command. example 1: input: command = "g()(al)" output: "goal" explanation: the goal parser interprets the command as follows: g -> g () -> o (al) -> al the final concatenated result is "goal". example 2: input: command = "g()()()()(al)" output: "gooooal" example 3: input: command = "(al)g(al)()()g" output: "algaloog" constraints: 1 <= command.length <= 100 command consists of "g", "()", and/or "(al)" in some order.
a given equation and return the value of 'x' in the form of a string "x=#value". the equation contains only '+', '-' operation, the variable 'x' and its coefficient. you should return "no solution" if there is no solution for the equation, or "infinite solutions" if there are infinite solutions for the equation. if there is exactly one solution for the equation, we ensure that the value of 'x' is an integer. example 1: input: equation = "x+5-3+x=6+x-2" output: "x=2" example 2: input: equation = "x=x" output: "infinite solutions" example 3: input: equation = "2x=x" output: "x=0" constraints: 3 <= equation.length <= 1000 equation has exactly one '='. equation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'.
is an n x n 0-indexed grid with some artifacts buried in it. you are given the integer n and a 0-indexed 2d integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where: (r1i, c1i) is the coordinate of the top-left cell of the ith artifact and (r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact. you will excavate some cells of the grid and remove all the mud from them. if the cell has a part of an artifact buried underneath, it will be uncovered. if all the parts of an artifact are uncovered, you can extract it. given a 0-indexed 2d integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract. the test cases are generated such that: no two artifacts overlap. each artifact only covers at most 4 cells. the entries of dig are unique. example 1: input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]] output: 1 explanation: the different colors represent different artifacts. excavated cells are labeled with a 'd' in the grid. there is 1 artifact that can be extracted, namely the red artifact. the blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it. thus, we return 1. example 2: input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]] output: 2 explanation: both the red and blue artifacts have all parts uncovered (labeled with a 'd') and can be extracted, so we return 2. constraints: 1 <= n <= 1000 1 <= artifacts.length, dig.length <= min(n2, 105) artifacts[i].length == 4 dig[i].length == 2 0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1 r1i <= r2i c1i <= c2i no two artifacts will overlap. the number of cells covered by an artifact is at most 4. the entries of dig are unique.
two integers representing the numerator and denominator of a fraction, return the fraction in string format. if the fractional part is repeating, enclose the repeating part in parentheses. if multiple answers are possible, return any of them. it is guaranteed that the length of the answer string is less than 104 for all the given inputs. example 1: input: numerator = 1, denominator = 2 output: "0.5" example 2: input: numerator = 2, denominator = 1 output: "2" example 3: input: numerator = 4, denominator = 333 output: "0.(012)" constraints: -231 <= numerator, denominator <= 231 - 1 denominator != 0
game is played by a cat and a mouse named cat and mouse. the environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (cat, mouse), or food. players are represented by the characters 'c'(cat),'m'(mouse). floors are represented by the character '.' and can be walked on. walls are represented by the character '#' and cannot be walked on. food is represented by the character 'f' and can be walked on. there is only one of each character 'c', 'm', and 'f' in grid. mouse and cat play according to the following rules: mouse moves first, then they take turns to move. during each turn, cat and mouse can jump in one of the four directions (left, right, up, down). they cannot jump over the wall nor outside of the grid. catjump, mousejump are the maximum lengths cat and mouse can jump at a time, respectively. cat and mouse can jump less than the maximum length. staying in the same position is allowed. mouse can jump over cat. the game can end in 4 ways: if cat occupies the same position as mouse, cat wins. if cat reaches the food first, cat wins. if mouse reaches the food first, mouse wins. if mouse cannot get to the food within 1000 turns, cat wins. given a rows x cols matrix grid and two integers catjump and mousejump, return true if mouse can win the game if both cat and mouse play optimally, otherwise return false. example 1: input: grid = ["####f","#c...","m...."], catjump = 1, mousejump = 2 output: true explanation: cat cannot catch mouse on its turn nor can it get the food before mouse. example 2: input: grid = ["m.c...f"], catjump = 1, mousejump = 4 output: true example 3: input: grid = ["m.c...f"], catjump = 1, mousejump = 3 output: false constraints: rows == grid.length cols = grid[i].length 1 <= rows, cols <= 8 grid[i][j] consist only of characters 'c', 'm', 'f', '.', and '#'. there is only one of each character 'c', 'm', and 'f' in grid. 1 <= catjump, mousejump <= 8
a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers. you may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit) you may also assume each line in the text file must not contain leading or trailing white spaces. example: assume that file.txt has the following content: 987-123-4567 123 456 7890 (123) 456-7890 your script should output the following valid phone numbers: 987-123-4567 (123) 456-7890
the root of a binary tree, return the inorder traversal of its nodes' values. example 1: input: root = [1,null,2,3] output: [1,3,2] example 2: input: root = [] output: [] example 3: input: root = [1] output: [1] constraints: the number of nodes in the tree is in the range [0, 100]. -100 <= node.val <= 100 follow up: recursive solution is trivial, could you do it iteratively?
are given an integer n. there is an undirected graph with n nodes, numbered from 0 to n - 1. you are given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. return the number of pairs of different nodes that are unreachable from each other. example 1: input: n = 3, edges = [[0,1],[0,2],[1,2]] output: 0 explanation: there are no pairs of nodes that are unreachable from each other. therefore, we return 0. example 2: input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]] output: 14 explanation: there are 14 pairs of nodes that are unreachable from each other: [[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]]. therefore, we return 14. constraints: 1 <= n <= 105 0 <= edges.length <= 2 * 105 edges[i].length == 2 0 <= ai, bi < n ai != bi there are no repeated edges.
schema table: stocks +---------------+---------+ | column name | type | +---------------+---------+ | stock_name | varchar | | operation | enum | | operation_day | int | | price | int | +---------------+---------+ (stock_name, operation_day) is the primary key for this table. the operation column is an enum of type ('sell', 'buy') each row of this table indicates that the stock which has stock_name had an operation on the day operation_day with the price. it is guaranteed that each 'sell' operation for a stock has a corresponding 'buy' operation in a previous day. it is also guaranteed that each 'buy' operation for a stock has a corresponding 'sell' operation in an upcoming day. write an sql query to report the capital gain/loss for each stock. the capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times. return the result table in any order. the query result format is in the following example. example 1: input: stocks table: +---------------+-----------+---------------+--------+ | stock_name | operation | operation_day | price | +---------------+-----------+---------------+--------+ | leetcode | buy | 1 | 1000 | | corona masks | buy | 2 | 10 | | leetcode | sell | 5 | 9000 | | handbags | buy | 17 | 30000 | | corona masks | sell | 3 | 1010 | | corona masks | buy | 4 | 1000 | | corona masks | sell | 5 | 500 | | corona masks | buy | 6 | 1000 | | handbags | sell | 29 | 7000 | | corona masks | sell | 10 | 10000 | +---------------+-----------+---------------+--------+ output: +---------------+-------------------+ | stock_name | capital_gain_loss | +---------------+-------------------+ | corona masks | 9500 | | leetcode | 8000 | | handbags | -23000 | +---------------+-------------------+ explanation: leetcode stock was bought at day 1 for 1000$ and was sold at day 5 for 9000$. capital gain = 9000 - 1000 = 8000$. handbags stock was bought at day 17 for 30000$ and was sold at day 29 for 7000$. capital loss = 7000 - 30000 = -23000$. corona masks stock was bought at day 1 for 10$ and was sold at day 3 for 1010$. it was bought again at day 4 for 1000$ and was sold at day 5 for 500$. at last, it was bought at day 6 for 1000$ and was sold at day 10 for 10000$. capital gain/loss is the sum of capital gains/losses for each ('buy' --> 'sell') operation = (1010 - 10) + (500 - 1000) + (10000 - 1000) = 1000 - 500 + 9000 = 9500$.
plays the following game, loosely based on the card game "21". alice starts with 0 points and draws numbers while she has less than k points. during each draw, she gains an integer number of points randomly from the range [1, maxpts], where maxpts is an integer. each draw is independent and the outcomes have equal probabilities. alice stops drawing numbers when she gets k or more points. return the probability that alice has n or fewer points. answers within 10-5 of the actual answer are considered accepted. example 1: input: n = 10, k = 1, maxpts = 10 output: 1.00000 explanation: alice gets a single card, then stops. example 2: input: n = 6, k = 1, maxpts = 10 output: 0.60000 explanation: alice gets a single card, then stops. in 6 out of 10 possibilities, she is at or below 6 points. example 3: input: n = 21, k = 17, maxpts = 10 output: 0.73278 constraints: 0 <= k <= n <= 104 1 <= maxpts <= 104
are given a 0-indexed array nums of length n, consisting of non-negative integers. for each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise or. in other words, let bij be the bitwise or of the subarray nums[i...j]. you need to find the smallest subarray starting at i, such that bitwise or of this subarray is equal to max(bik) where i <= k <= n - 1. the bitwise or of an array is the bitwise or of all the numbers in it. return an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise or. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,0,2,1,3] output: [3,3,2,2,1] explanation: the maximum possible bitwise or starting at any index is 3. - starting at index 0, the shortest subarray that yields it is [1,0,2]. - starting at index 1, the shortest subarray that yields the maximum bitwise or is [0,2,1]. - starting at index 2, the shortest subarray that yields the maximum bitwise or is [2,1]. - starting at index 3, the shortest subarray that yields the maximum bitwise or is [1,3]. - starting at index 4, the shortest subarray that yields the maximum bitwise or is [3]. therefore, we return [3,3,2,2,1]. example 2: input: nums = [1,2] output: [2,1] explanation: starting at index 0, the shortest subarray that yields the maximum bitwise or is of length 2. starting at index 1, the shortest subarray that yields the maximum bitwise or is of length 1. therefore, we return [2,1]. constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] <= 109
are given a 0-indexed integer array nums of length n. a split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime. for example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. a split at the index i = 2 is not valid because i == n - 1. return the smallest index i at which the array can be split validly or -1 if there is no such split. two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2. example 1: input: nums = [4,7,8,15,3,5] output: 2 explanation: the table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i. the only valid split is at index 2. example 2: input: nums = [4,7,15,8,3,5] output: -1 explanation: the table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i. there is no valid split. constraints: n == nums.length 1 <= n <= 104 1 <= nums[i] <= 106
are given an integer array nums and an integer k. in one operation, you can pick two numbers from the array whose sum equals k and remove them from the array. return the maximum number of operations you can perform on the array. example 1: input: nums = [1,2,3,4], k = 5 output: 2 explanation: starting with nums = [1,2,3,4]: - remove numbers 1 and 4, then nums = [2,3] - remove numbers 2 and 3, then nums = [] there are no more pairs that sum up to 5, hence a total of 2 operations. example 2: input: nums = [3,1,3,4,3], k = 6 output: 1 explanation: starting with nums = [3,1,3,4,3]: - remove the first two 3's, then nums = [1,4,3] there are no more pairs that sum up to 6, hence a total of 1 operation. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= 109
are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k. find the maximum profit you can achieve. you may complete at most k transactions: i.e. you may buy at most k times and sell at most k times. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). example 1: input: k = 2, prices = [2,4,1] output: 2 explanation: buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. example 2: input: k = 2, prices = [3,2,6,5,0,3] output: 7 explanation: buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. constraints: 1 <= k <= 100 1 <= prices.length <= 1000 0 <= prices[i] <= 1000
are n rings and each ring is either red, green, or blue. the rings are distributed across ten rods labeled from 0 to 9. you are given a string rings of length 2n that describes the n rings that are placed onto the rods. every two characters in rings forms a color-position pair that is used to describe each ring where: the first character of the ith pair denotes the ith ring's color ('r', 'g', 'b'). the second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9'). for example, "r3g2b1" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1. return the number of rods that have all three colors of rings on them. example 1: input: rings = "b0b6g0r6r0r6g9" output: 1 explanation: - the rod labeled 0 holds 3 rings with all colors: red, green, and blue. - the rod labeled 6 holds 3 rings, but it only has red and blue. - the rod labeled 9 holds only a green ring. thus, the number of rods with all three colors is 1. example 2: input: rings = "b0r0g0r9r0b0g0" output: 1 explanation: - the rod labeled 0 holds 6 rings with all colors: red, green, and blue. - the rod labeled 9 holds only a red ring. thus, the number of rods with all three colors is 1. example 3: input: rings = "g4" output: 0 explanation: only one ring is given. thus, no rods have all three colors. constraints: rings.length == 2 * n 1 <= n <= 100 rings[i] where i is even is either 'r', 'g', or 'b' (0-indexed). rings[i] where i is odd is a digit from '0' to '9' (0-indexed).
you have a long running task, and you may wish to cancel it before it completes. to help with this goal, write a function cancellable that accepts a generator object and returns an array of two values: a cancel function and a promise. you may assume the generator function will only yield promises. it is your function's responsibility to pass the values resolved by the promise back to the generator. if the promise rejects, your function should throw that error back to the generator. if the cancel callback is called before the generator is done, your function should throw an error back to the generator. that error should be the string "cancelled" (not an error object). if the error was caught, the returned promise should resolve with the next value that was yielded or returned. otherwise, the promise should reject with the thrown error. no more code should be executed. when the generator is done, the promise your function returned should resolve the value the generator returned. if, however, the generator throws an error, the returned promise should reject with the error. an example of how your code would be used: function* tasks() { const val = yield new promise(resolve => resolve(2 + 2)); yield new promise(resolve => settimeout(resolve, 100)); return val + 1; // calculation shouldn't be done. } const [cancel, promise] = cancellable(tasks()); settimeout(cancel, 50); promise.catch(console.log); // logs "cancelled" at t=50ms if instead cancel() was not called or was called after t=100ms, the promise would have resolved 5. example 1: input: generatorfunction = function*() { return 42; } cancelledat = 100 output: {"resolved": 42} explanation: const generator = generatorfunction(); const [cancel, promise] = cancellable(generator); settimeout(cancel, 100); promise.then(console.log); // resolves 42 at t=0ms the generator immediately yields 42 and finishes. because of that, the returned promise immediately resolves 42. note that cancelling a finished generator does nothing. example 2: input: generatorfunction = function*() { const msg = yield new promise(res => res("hello")); throw `error: ${msg}`; } cancelledat = null output: {"rejected": "error: hello"} explanation: a promise is yielded. the function handles this by waiting for it to resolve and then passes the resolved value back to the generator. then an error is thrown which has the effect of causing the promise to reject with the same thrown error. example 3: input: generatorfunction = function*() { yield new promise(res => settimeout(res, 200)); return "success"; } cancelledat = 100 output: {"rejected": "cancelled"} explanation: while the function is waiting for the yielded promise to resolve, cancel() is called. this causes an error message to be sent back to the generator. since this error is uncaught, the returned promise rejected with this error. example 4: input: generatorfunction = function*() { let result = 0; yield new promise(res => settimeout(res, 100)); result += yield new promise(res => res(1)); yield new promise(res => settimeout(res, 100)); result += yield new promise(res => res(1)); return result; } cancelledat = null output: {"resolved": 2} explanation: 4 promises are yielded. two of those promises have their values added to the result. after 200ms, the generator finishes with a value of 2, and that value is resolved by the returned promise. example 5: input: generatorfunction = function*() { let result = 0; try { yield new promise(res => settimeout(res, 100)); result += yield new promise(res => res(1)); yield new promise(res => settimeout(res, 100)); result += yield new promise(res => res(1)); } catch(e) { return result; } return result; } cancelledat = 150 output: {"resolved": 1} explanation: the first two yielded promises resolve and cause the result to increment. however, at t=150ms, the generator is cancelled. the error sent to the generator is caught and the result is returned and finally resolved by the returned promise. example 6: input: generatorfunction = function*() { try { yield new promise((resolve, reject) => reject("promise rejected")); } catch(e) { let a = yield new promise(resolve => resolve(2)); let b = yield new promise(resolve => resolve(2)); return a + b; }; } cancelledat = null output: {"resolved": 4} explanation: the first yielded promise immediately rejects. this error is caught. because the generator hasn't been cancelled, execution continues as usual. it ends up resolving 2 + 2 = 4. constraints: cancelledat == null or 0 <= cancelledat <= 1000 generatorfunction returns a generator object
are given the strings key and message, which represent a cipher key and a secret message, respectively. the steps to decode message are as follows: use the first appearance of all 26 lowercase english letters in key as the order of the substitution table. align the substitution table with the regular english alphabet. each letter in message is then substituted using the table. spaces ' ' are transformed to themselves. for example, given key = "happy boy" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f'). return the decoded message. example 1: input: key = "the quick brown fox jumps over the lazy dog", message = "vkbs bs t suepuv" output: "this is a secret" explanation: the diagram above shows the substitution table. it is obtained by taking the first appearance of each letter in "the quick brown fox jumps over the lazy dog". example 2: input: key = "eljuxhpwnyrdgtqkviszcfmabo", message = "zwx hnfx lqantp mnoeius ycgk vcnjrdb" output: "the five boxing wizards jump quickly" explanation: the diagram above shows the substitution table. it is obtained by taking the first appearance of each letter in "eljuxhpwnyrdgtqkviszcfmabo". constraints: 26 <= key.length <= 2000 key consists of lowercase english letters and ' '. key contains every letter in the english alphabet ('a' to 'z') at least once. 1 <= message.length <= 2000 message consists of lowercase english letters and ' '.
is a donuts shop that bakes donuts in batches of batchsize. they have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. you are given an integer batchsize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. each customer will get exactly one donut. when a group visits the shop, all customers of the group must be served before serving any of the following groups. a group will be happy if they all get fresh donuts. that is, the first customer of the group does not receive a donut that was left over from the previous group. you can freely rearrange the ordering of the groups. return the maximum possible number of happy groups after rearranging the groups. example 1: input: batchsize = 3, groups = [1,2,3,4,5,6] output: 4 explanation: you can arrange the groups as [6,2,4,5,1,3]. then the 1st, 2nd, 4th, and 6th groups will be happy. example 2: input: batchsize = 4, groups = [1,3,2,5,2,2,1,6] output: 4 constraints: 1 <= batchsize <= 9 1 <= groups.length <= 30 1 <= groups[i] <= 109
a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs. a nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] xor nums[j]) <= high. example 1: input: nums = [1,4,2,7], low = 2, high = 6 output: 6 explanation: all nice pairs (i, j) are as follows: - (0, 1): nums[0] xor nums[1] = 5 - (0, 2): nums[0] xor nums[2] = 3 - (0, 3): nums[0] xor nums[3] = 6 - (1, 2): nums[1] xor nums[2] = 6 - (1, 3): nums[1] xor nums[3] = 3 - (2, 3): nums[2] xor nums[3] = 5 example 2: input: nums = [9,8,4,2,1], low = 5, high = 14 output: 8 explanation: all nice pairs (i, j) are as follows: - (0, 2): nums[0] xor nums[2] = 13 - (0, 3): nums[0] xor nums[3] = 11 - (0, 4): nums[0] xor nums[4] = 8 - (1, 2): nums[1] xor nums[2] = 12 - (1, 3): nums[1] xor nums[3] = 10 - (1, 4): nums[1] xor nums[4] = 9 - (2, 3): nums[2] xor nums[3] = 6 - (2, 4): nums[2] xor nums[4] = 5 constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] <= 2 * 104 1 <= low <= high <= 2 * 104
power of the string is the maximum length of a non-empty substring that contains only one unique character. given a string s, return the power of s. example 1: input: s = "leetcode" output: 2 explanation: the substring "ee" is of length 2 with the character 'e' only. example 2: input: s = "abbcccddddeeeeedcba" output: 5 explanation: the substring "eeeee" is of length 5 with the character 'e' only. constraints: 1 <= s.length <= 500 s consists of only lowercase english letters.
schema table: visits +-------------+---------+ | column name | type | +-------------+---------+ | visit_id | int | | customer_id | int | +-------------+---------+ visit_id is the primary key for this table. this table contains information about the customers who visited the mall. table: transactions +----------------+---------+ | column name | type | +----------------+---------+ | transaction_id | int | | visit_id | int | | amount | int | +----------------+---------+ transaction_id is the primary key for this table. this table contains information about the transactions made during the visit_id. write a sql query to find the ids of the users who visited without making any transactions and the number of times they made these types of visits. return the result table sorted in any order. the query result format is in the following example. example 1: input: visits +----------+-------------+ | visit_id | customer_id | +----------+-------------+ | 1 | 23 | | 2 | 9 | | 4 | 30 | | 5 | 54 | | 6 | 96 | | 7 | 54 | | 8 | 54 | +----------+-------------+ transactions +----------------+----------+--------+ | transaction_id | visit_id | amount | +----------------+----------+--------+ | 2 | 5 | 310 | | 3 | 5 | 300 | | 9 | 5 | 200 | | 12 | 1 | 910 | | 13 | 2 | 970 | +----------------+----------+--------+ output: +-------------+----------------+ | customer_id | count_no_trans | +-------------+----------------+ | 54 | 2 | | 30 | 1 | | 96 | 1 | +-------------+----------------+ explanation: customer with id = 23 visited the mall once and made one transaction during the visit with id = 12. customer with id = 9 visited the mall once and made one transaction during the visit with id = 13. customer with id = 30 visited the mall once and did not make any transactions. customer with id = 54 visited the mall three times. during 2 visits they did not make any transactions, and during one visit they made 3 transactions. customer with id = 96 visited the mall once and did not make any transactions. as we can see, users with ids 30 and 96 visited the mall one time without making any transactions. also, user 54 visited the mall twice and did not make any transactions.
are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. in one move, you can choose two adjacent indices and swap their values. return the minimum number of moves required so that nums has k consecutive 1's. example 1: input: nums = [1,0,0,1,0,1], k = 2 output: 1 explanation: in 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's. example 2: input: nums = [1,0,0,0,0,0,1,1], k = 3 output: 5 explanation: in 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1]. example 3: input: nums = [1,1,0,1], k = 2 output: 0 explanation: nums already has 2 consecutive 1's. constraints: 1 <= nums.length <= 105 nums[i] is 0 or 1. 1 <= k <= sum(nums)
newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time. you are given a string keyspressed of length n, where keyspressed[i] was the ith key pressed in the testing sequence, and a sorted list releasetimes, where releasetimes[i] was the time the ith key was released. both arrays are 0-indexed. the 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released. the tester wants to know the key of the keypress that had the longest duration. the ith keypress had a duration of releasetimes[i] - releasetimes[i - 1], and the 0th keypress had a duration of releasetimes[0]. note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration. return the key of the keypress that had the longest duration. if there are multiple such keypresses, return the lexicographically largest key of the keypresses. example 1: input: releasetimes = [9,29,49,50], keyspressed = "cbcd" output: "c" explanation: the keypresses were as follows: keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9). keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29). keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49). keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50). the longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20. 'c' is lexicographically larger than 'b', so the answer is 'c'. example 2: input: releasetimes = [12,23,36,46,62], keyspressed = "spuda" output: "a" explanation: the keypresses were as follows: keypress for 's' had a duration of 12. keypress for 'p' had a duration of 23 - 12 = 11. keypress for 'u' had a duration of 36 - 23 = 13. keypress for 'd' had a duration of 46 - 36 = 10. keypress for 'a' had a duration of 62 - 46 = 16. the longest of these was the keypress for 'a' with duration 16. constraints: releasetimes.length == n keyspressed.length == n 2 <= n <= 1000 1 <= releasetimes[i] <= 109 releasetimes[i] < releasetimes[i+1] keyspressed contains only lowercase english letters.
sentence is a list of words that are separated by a single space with no leading or trailing spaces. each word consists of lowercase and uppercase english letters. a sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence. for example, the sentence "this is a sentence" can be shuffled as "sentence4 a3 is2 this1" or "is2 sentence4 this1 a3". given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence. example 1: input: s = "is2 sentence4 this1 a3" output: "this is a sentence" explanation: sort the words in s to their original positions "this1 is2 a3 sentence4", then remove the numbers. example 2: input: s = "myself2 me1 i4 and3" output: "me myself and i" explanation: sort the words in s to their original positions "me1 myself2 and3 i4", then remove the numbers. constraints: 2 <= s.length <= 200 s consists of lowercase and uppercase english letters, spaces, and digits from 1 to 9. the number of words in s is between 1 and 9. the words in s are separated by a single space. s contains no leading or trailing spaces.
the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. you should preserve the original relative order of the nodes in each of the two partitions. example 1: input: head = [1,4,3,2,5,2], x = 3 output: [1,2,2,4,3,5] example 2: input: head = [2,1], x = 2 output: [1,2] constraints: the number of nodes in the list is in the range [0, 200]. -100 <= node.val <= 100 -200 <= x <= 200
is a regular convex polygon with n vertices. the vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. the following figure shows a convex polygon of 6 vertices. each monkey moves simultaneously to a neighboring vertex. a neighboring vertex for a vertex i can be: the vertex (i + 1) % n in the clockwise direction, or the vertex (i - 1 + n) % n in the counter-clockwise direction. a collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge. return the number of ways the monkeys can move so that at least one collision happens. since the answer may be very large, return it modulo 109 + 7. note that each monkey can only move once. example 1: input: n = 3 output: 6 explanation: there are 8 total possible movements. two ways such that they collide at some point are: - monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. monkeys 1 and 2 collide. - monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. monkeys 1 and 3 collide. it can be shown 6 total movements result in a collision. example 2: input: n = 4 output: 14 explanation: it can be shown that there are 14 ways for the monkeys to collide. constraints: 3 <= n <= 109
are given two integers, m and k, and a stream of integers. you are tasked to implement a data structure that calculates the mkaverage for the stream. the mkaverage can be calculated using these steps: if the number of the elements in the stream is less than m you should consider the mkaverage to be -1. otherwise, copy the last m elements of the stream to a separate container. remove the smallest k elements and the largest k elements from the container. calculate the average value for the rest of the elements rounded down to the nearest integer. implement the mkaverage class: mkaverage(int m, int k) initializes the mkaverage object with an empty stream and the two integers m and k. void addelement(int num) inserts a new element num into the stream. int calculatemkaverage() calculates and returns the mkaverage for the current stream rounded down to the nearest integer. example 1: input ["mkaverage", "addelement", "addelement", "calculatemkaverage", "addelement", "calculatemkaverage", "addelement", "addelement", "addelement", "calculatemkaverage"] [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []] output [null, null, null, -1, null, 3, null, null, null, 5] explanation mkaverage obj = new mkaverage(3, 1); obj.addelement(3); // current elements are [3] obj.addelement(1); // current elements are [3,1] obj.calculatemkaverage(); // return -1, because m = 3 and only 2 elements exist. obj.addelement(10); // current elements are [3,1,10] obj.calculatemkaverage(); // the last 3 elements are [3,1,10]. // after removing smallest and largest 1 element the container will be [3]. // the average of [3] equals 3/1 = 3, return 3 obj.addelement(5); // current elements are [3,1,10,5] obj.addelement(5); // current elements are [3,1,10,5,5] obj.addelement(5); // current elements are [3,1,10,5,5,5] obj.calculatemkaverage(); // the last 3 elements are [5,5,5]. // after removing smallest and largest 1 element the container will be [5]. // the average of [5] equals 5/1 = 5, return 5 constraints: 3 <= m <= 105 1 <= k*2 < m 1 <= num <= 105 at most 105 calls will be made to addelement and calculatemkaverage.
are given a string s of even length. split this string into two halves of equal lengths, and let a be the first half and b be the second half. two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u'). notice that s contains uppercase and lowercase letters. return true if a and b are alike. otherwise, return false. example 1: input: s = "book" output: true explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. therefore, they are alike. example 2: input: s = "textbook" output: false explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. therefore, they are not alike. notice that the vowel o is counted twice. constraints: 2 <= s.length <= 1000 s.length is even. s consists of uppercase and lowercase letters.
is a street with n * 2 plots, where there are n plots on each side of the street. the plots on each side are numbered from 1 to n. on each plot, a house can be placed. return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. since the answer may be very large, return it modulo 109 + 7. note that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street. example 1: input: n = 1 output: 4 explanation: possible arrangements: 1. all plots are empty. 2. a house is placed on one side of the street. 3. a house is placed on the other side of the street. 4. two houses are placed, one on each side of the street. example 2: input: n = 2 output: 9 explanation: the 9 possible arrangements are shown in the diagram above. constraints: 1 <= n <= 104
are given an integer array nums sorted in non-decreasing order. build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array. in other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed). example 1: input: nums = [2,3,5] output: [4,3,5] explanation: assuming the arrays are 0-indexed, then result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4, result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3, result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5. example 2: input: nums = [1,4,6,8,10] output: [24,15,13,15,21] constraints: 2 <= nums.length <= 105 1 <= nums[i] <= nums[i + 1] <= 104
this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents. the given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. the resulting graph is given as a 2d-array of edges. each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi. return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. if there are multiple answers, return the answer that occurs last in the given 2d-array. example 1: input: edges = [[1,2],[1,3],[2,3]] output: [2,3] example 2: input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]] output: [4,1] constraints: n == edges.length 3 <= n <= 1000 edges[i].length == 2 1 <= ui, vi <= n ui != vi
are given a 0-indexed string num of length n consisting of digits. return true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false. example 1: input: num = "1210" output: true explanation: num[0] = '1'. the digit 0 occurs once in num. num[1] = '2'. the digit 1 occurs twice in num. num[2] = '1'. the digit 2 occurs once in num. num[3] = '0'. the digit 3 occurs zero times in num. the condition holds true for every index in "1210", so return true. example 2: input: num = "030" output: false explanation: num[0] = '0'. the digit 0 should occur zero times, but actually occurs twice in num. num[1] = '3'. the digit 1 should occur three times, but actually occurs zero times in num. num[2] = '0'. the digit 2 occurs zero times in num. the indices 0 and 1 both violate the condition, so return false. constraints: n == num.length 1 <= n <= 10 num consists of digits.
schema table: triangle +-------------+------+ | column name | type | +-------------+------+ | x | int | | y | int | | z | int | +-------------+------+ (x, y, z) is the primary key column for this table. each row of this table contains the lengths of three line segments. write an sql query to report for every three line segments whether they can form a triangle. return the result table in any order. the query result format is in the following example. example 1: input: triangle table: +----+----+----+ | x | y | z | +----+----+----+ | 13 | 15 | 30 | | 10 | 20 | 15 | +----+----+----+ output: +----+----+----+----------+ | x | y | z | triangle | +----+----+----+----------+ | 13 | 15 | 30 | no | | 10 | 20 | 15 | yes | +----+----+----+----------+
the head of a sorted linked list, delete all duplicates such that each element appears only once. return the linked list sorted as well. example 1: input: head = [1,1,2] output: [1,2] example 2: input: head = [1,1,2,3,3] output: [1,2,3] constraints: the number of nodes in the list is in the range [0, 300]. -100 <= node.val <= 100 the list is guaranteed to be sorted in ascending order.
are keeping the scores for a baseball game with strange rules. at the beginning of the game, you start with an empty record. you are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following: an integer x. record a new score of x. '+'. record a new score that is the sum of the previous two scores. 'd'. record a new score that is the double of the previous score. 'c'. invalidate the previous score, removing it from the record. return the sum of all the scores on the record after applying all the operations. the test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid. example 1: input: ops = ["5","2","c","d","+"] output: 30 explanation: "5" - add 5 to the record, record is now [5]. "2" - add 2 to the record, record is now [5, 2]. "c" - invalidate and remove the previous score, record is now [5]. "d" - add 2 * 5 = 10 to the record, record is now [5, 10]. "+" - add 5 + 10 = 15 to the record, record is now [5, 10, 15]. the total sum is 5 + 10 + 15 = 30. example 2: input: ops = ["5","-2","4","c","d","9","+","+"] output: 27 explanation: "5" - add 5 to the record, record is now [5]. "-2" - add -2 to the record, record is now [5, -2]. "4" - add 4 to the record, record is now [5, -2, 4]. "c" - invalidate and remove the previous score, record is now [5, -2]. "d" - add 2 * -2 = -4 to the record, record is now [5, -2, -4]. "9" - add 9 to the record, record is now [5, -2, -4, 9]. "+" - add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. "+" - add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. the total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. example 3: input: ops = ["1","c"] output: 0 explanation: "1" - add 1 to the record, record is now [1]. "c" - invalidate and remove the previous score, record is now []. since the record is empty, the total sum is 0. constraints: 1 <= operations.length <= 1000 operations[i] is "c", "d", "+", or a string representing an integer in the range [-3 * 104, 3 * 104]. for operation "+", there will always be at least two previous scores on the record. for operations "c" and "d", there will always be at least one previous score on the record.
two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. example 1: input: haystack = "sadbutsad", needle = "sad" output: 0 explanation: "sad" occurs at index 0 and 6. the first occurrence is at index 0, so we return 0. example 2: input: haystack = "leetcode", needle = "leeto" output: -1 explanation: "leeto" did not occur in "leetcode", so we return -1. constraints: 1 <= haystack.length, needle.length <= 104 haystack and needle consist of only lowercase english characters.
are given an integer array nums. a subsequence of nums is called a square streak if: the length of the subsequence is at least 2, and after sorting the subsequence, each element (except the first element) is the square of the previous number. return the length of the longest square streak in nums, or return -1 if there is no square streak. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. example 1: input: nums = [4,3,6,16,8,2] output: 3 explanation: choose the subsequence [4,16,2]. after sorting it, it becomes [2,4,16]. - 4 = 2 * 2. - 16 = 4 * 4. therefore, [4,16,2] is a square streak. it can be shown that every subsequence of length 4 is not a square streak. example 2: input: nums = [2,3,5,6,7] output: -1 explanation: there is no square streak in nums so return -1. constraints: 2 <= nums.length <= 105 2 <= nums[i] <= 105
are given a 0-indexed integer array nums and an integer p. find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. also, ensure no index appears more than once amongst the p pairs. note that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x. return the minimum maximum difference among all p pairs. we define the maximum of an empty set to be zero. example 1: input: nums = [10,1,2,7,1,3], p = 2 output: 1 explanation: the first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. the maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. therefore, we return 1. example 2: input: nums = [4,2,1,2], p = 1 output: 0 explanation: let the indices 1 and 3 form a pair. the difference of that pair is |2 - 2| = 0, which is the minimum we can attain. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 0 <= p <= (nums.length)/2
tribonacci sequence tn is defined as follows: t0 = 0, t1 = 1, t2 = 1, and tn+3 = tn + tn+1 + tn+2 for n >= 0. given n, return the value of tn. example 1: input: n = 4 output: 4 explanation: t_3 = 0 + 1 + 1 = 2 t_4 = 1 + 1 + 2 = 4 example 2: input: n = 25 output: 1389537 constraints: 0 <= n <= 37 the answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.
a signed 32-bit integer x, return x with its digits reversed. if reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. assume the environment does not allow you to store 64-bit integers (signed or unsigned). example 1: input: x = 123 output: 321 example 2: input: x = -123 output: -321 example 3: input: x = 120 output: 21 constraints: -231 <= x <= 231 - 1
a n-ary tree, find its maximum depth. the maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples). example 1: input: root = [1,null,3,2,4,null,5,6] output: 3 example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: 5 constraints: the total number of nodes is in the range [0, 104]. the depth of the n-ary tree is less than or equal to 1000.
are given a sorted array nums of n non-negative integers and an integer maximumbit. you want to perform the following query n times: find a non-negative integer k < 2maximumbit such that nums[0] xor nums[1] xor ... xor nums[nums.length-1] xor k is maximized. k is the answer to the ith query. remove the last element from the current array nums. return an array answer, where answer[i] is the answer to the ith query. example 1: input: nums = [0,1,1,3], maximumbit = 2 output: [0,3,2,3] explanation: the queries are answered as follows: 1st query: nums = [0,1,1,3], k = 0 since 0 xor 1 xor 1 xor 3 xor 0 = 3. 2nd query: nums = [0,1,1], k = 3 since 0 xor 1 xor 1 xor 3 = 3. 3rd query: nums = [0,1], k = 2 since 0 xor 1 xor 2 = 3. 4th query: nums = [0], k = 3 since 0 xor 3 = 3. example 2: input: nums = [2,3,4,7], maximumbit = 3 output: [5,2,6,5] explanation: the queries are answered as follows: 1st query: nums = [2,3,4,7], k = 5 since 2 xor 3 xor 4 xor 7 xor 5 = 7. 2nd query: nums = [2,3,4], k = 2 since 2 xor 3 xor 4 xor 2 = 7. 3rd query: nums = [2,3], k = 6 since 2 xor 3 xor 6 = 7. 4th query: nums = [2], k = 5 since 2 xor 5 = 7. example 3: input: nums = [0,1,2,2,5,7], maximumbit = 3 output: [4,3,6,4,6,7] constraints: nums.length == n 1 <= n <= 105 1 <= maximumbit <= 20 0 <= nums[i] < 2maximumbit nums is sorted in ascending order.
a binary tree root, a node x in the tree is named good if in the path from root to x there are no nodes with a value greater than x. return the number of good nodes in the binary tree. example 1: input: root = [3,1,4,3,null,1,5] output: 4 explanation: nodes in blue are good. root node (3) is always a good node. node 4 -> (3,4) is the maximum value in the path starting from the root. node 5 -> (3,4,5) is the maximum value in the path node 3 -> (3,1,3) is the maximum value in the path. example 2: input: root = [3,3,null,4,2] output: 3 explanation: node 2 -> (3, 3, 2) is not good, because "3" is higher than it. example 3: input: root = [1] output: 1 explanation: root is considered as good. constraints: the number of nodes in the binary tree is in the range [1, 10^5]. each node's value is between [-10^4, 10^4].
are given an array points representing integer coordinates of some points on a 2d-plane, where points[i] = [xi, yi]. the cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val. return the minimum cost to make all points connected. all points are connected if there is exactly one simple path between any two points. example 1: input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]] output: 20 explanation: we can connect the points as shown above to get the minimum cost of 20. notice that there is a unique path between every pair of points. example 2: input: points = [[3,12],[-2,5],[-4,1]] output: 18 constraints: 1 <= points.length <= 1000 -106 <= xi, yi <= 106 all pairs (xi, yi) are distinct.
are given an integer array nums. you need to create a 2d array from nums satisfying the following conditions: the 2d array should contain only the elements of the array nums. each row in the 2d array contains distinct integers. the number of rows in the 2d array should be minimal. return the resulting array. if there are multiple answers, return any of them. note that the 2d array can have a different number of elements on each row. example 1: input: nums = [1,3,4,1,2,3,1] output: [[1,3,4,2],[1,3],[1]] explanation: we can create a 2d array that contains the following rows: - 1,3,4,2 - 1,3 - 1 all elements of nums were used, and each row of the 2d array contains distinct integers, so it is a valid answer. it can be shown that we cannot have less than 3 rows in a valid array. example 2: input: nums = [1,2,3,4] output: [[4,3,2,1]] explanation: all elements of the array are distinct, so we can keep all of them in the first row of the 2d array. constraints: 1 <= nums.length <= 200 1 <= nums[i] <= nums.length
are given the array nums consisting of n positive integers. you computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers. return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. since the answer can be a huge number return it modulo 109 + 7. example 1: input: nums = [1,2,3,4], n = 4, left = 1, right = 5 output: 13 explanation: all subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. after sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. the sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. example 2: input: nums = [1,2,3,4], n = 4, left = 3, right = 4 output: 6 explanation: the given array is the same as example 1. we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. the sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6. example 3: input: nums = [1,2,3,4], n = 4, left = 1, right = 10 output: 50 constraints: n == nums.length 1 <= nums.length <= 1000 1 <= nums[i] <= 100 1 <= left <= right <= n * (n + 1) / 2
are given a string num representing a large integer. an integer is good if it meets the following conditions: it is a substring of num with length 3. it consists of only one unique digit. return the maximum good integer as a string or an empty string "" if no such integer exists. note: a substring is a contiguous sequence of characters within a string. there may be leading zeroes in num or a good integer. example 1: input: num = "6777133339" output: "777" explanation: there are two distinct good integers: "777" and "333". "777" is the largest, so we return "777". example 2: input: num = "2300019" output: "000" explanation: "000" is the only good integer. example 3: input: num = "42352338" output: "" explanation: no substring of length 3 consists of only one unique digit. therefore, there are no good integers. constraints: 3 <= num.length <= 1000 num only consists of digits.
are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. your goal is to form arr by concatenating the arrays in pieces in any order. however, you are not allowed to reorder the integers in each array pieces[i]. return true if it is possible to form the array arr from pieces. otherwise, return false. example 1: input: arr = [15,88], pieces = [[88],[15]] output: true explanation: concatenate [15] then [88] example 2: input: arr = [49,18,16], pieces = [[16,18,49]] output: false explanation: even though the numbers match, we cannot reorder pieces[0]. example 3: input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]] output: true explanation: concatenate [91] then [4,64] then [78] constraints: 1 <= pieces.length <= arr.length <= 100 sum(pieces[i].length) == arr.length 1 <= pieces[i].length <= arr.length 1 <= arr[i], pieces[i][j] <= 100 the integers in arr are distinct. the integers in pieces are distinct (i.e., if we flatten pieces in a 1d array, all the integers in this array are distinct).
are n different online courses numbered from 1 to n. you are given an array courses where courses[i] = [durationi, lastdayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastdayi. you will start on the 1st day and you cannot take two or more courses simultaneously. return the maximum number of courses that you can take. example 1: input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]] output: 3 explanation: there are totally 4 courses, but you can take 3 courses at most: first, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day. second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. the 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date. example 2: input: courses = [[1,2]] output: 1 example 3: input: courses = [[3,2],[4,3]] output: 0 constraints: 1 <= courses.length <= 104 1 <= durationi, lastdayi <= 104
an m x n binary matrix mat, return the distance of the nearest 0 for each cell. the distance between two adjacent cells is 1. example 1: input: mat = [[0,0,0],[0,1,0],[0,0,0]] output: [[0,0,0],[0,1,0],[0,0,0]] example 2: input: mat = [[0,0,0],[0,1,0],[1,1,1]] output: [[0,0,0],[0,1,0],[1,2,1]] constraints: m == mat.length n == mat[i].length 1 <= m, n <= 104 1 <= m * n <= 104 mat[i][j] is either 0 or 1. there is at least one 0 in mat.
are given a network of n nodes, labeled from 1 to n. you are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target. we will send a signal from a given node k. return the minimum time it takes for all the n nodes to receive the signal. if it is impossible for all the n nodes to receive the signal, return -1. example 1: input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2 output: 2 example 2: input: times = [[1,2,1]], n = 2, k = 1 output: 1 example 3: input: times = [[1,2,1]], n = 2, k = 2 output: -1 constraints: 1 <= k <= n <= 100 1 <= times.length <= 6000 times[i].length == 3 1 <= ui, vi <= n ui != vi 0 <= wi <= 100 all the pairs (ui, vi) are unique. (i.e., no multiple edges.)
are given a 0-indexed m x n integer matrix grid and an integer k. you are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right. return the number of paths where the sum of the elements on the path is divisible by k. since the answer may be very large, return it modulo 109 + 7. example 1: input: grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3 output: 2 explanation: there are two paths where the sum of the elements on the path is divisible by k. the first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3. the second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3. example 2: input: grid = [[0,0]], k = 5 output: 1 explanation: the path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5. example 3: input: grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1 output: 10 explanation: every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 5 * 104 1 <= m * n <= 5 * 104 0 <= grid[i][j] <= 100 1 <= k <= 50
schema table: sales +-------------+-------+ | column name | type | +-------------+-------+ | sale_id | int | | product_id | int | | year | int | | quantity | int | | price | int | +-------------+-------+ (sale_id, year) is the primary key of this table. product_id is a foreign key to product table. each row of this table shows a sale on the product product_id in a certain year. note that the price is per unit. table: product +--------------+---------+ | column name | type | +--------------+---------+ | product_id | int | | product_name | varchar | +--------------+---------+ product_id is the primary key of this table. each row of this table indicates the product name of each product. write an sql query that selects the product id, year, quantity, and price for the first year of every product sold. return the resulting table in any order. the query result format is in the following example. example 1: input: sales table: +---------+------------+------+----------+-------+ | sale_id | product_id | year | quantity | price | +---------+------------+------+----------+-------+ | 1 | 100 | 2008 | 10 | 5000 | | 2 | 100 | 2009 | 12 | 5000 | | 7 | 200 | 2011 | 15 | 9000 | +---------+------------+------+----------+-------+ product table: +------------+--------------+ | product_id | product_name | +------------+--------------+ | 100 | nokia | | 200 | apple | | 300 | samsung | +------------+--------------+ output: +------------+------------+----------+-------+ | product_id | first_year | quantity | price | +------------+------------+----------+-------+ | 100 | 2008 | 10 | 5000 | | 200 | 2011 | 15 | 9000 | +------------+------------+----------+-------+
parentheses string is a non-empty string consisting only of '(' and ')'. it is valid if any of the following conditions is true: it is (). it can be written as ab (a concatenated with b), where a and b are valid parentheses strings. it can be written as (a), where a is a valid parentheses string. you are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. for each index i of locked, if locked[i] is '1', you cannot change s[i]. but if locked[i] is '0', you can change s[i] to either '(' or ')'. return true if you can make s a valid parentheses string. otherwise, return false. example 1: input: s = "))()))", locked = "010100" output: true explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3]. we change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid. example 2: input: s = "()()", locked = "0000" output: true explanation: we do not need to make any changes because s is already valid. example 3: input: s = ")", locked = "0" output: false explanation: locked permits us to change s[0]. changing s[0] to either '(' or ')' will not make s valid. constraints: n == s.length == locked.length 1 <= n <= 105 s[i] is either '(' or ')'. locked[i] is either '0' or '1'.
n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other. given an integer n, return all distinct solutions to the n-queens puzzle. you may return the answer in any order. each solution contains a distinct board configuration of the n-queens' placement, where 'q' and '.' both indicate a queen and an empty space, respectively. example 1: input: n = 4 output: [[".q..","...q","q...","..q."],["..q.","q...","...q",".q.."]] explanation: there exist two distinct solutions to the 4-queens puzzle as shown above example 2: input: n = 1 output: [["q"]] constraints: 1 <= n <= 9
a class to find the kth largest element in a stream. note that it is the kth largest element in the sorted order, not the kth distinct element. implement kthlargest class: kthlargest(int k, int[] nums) initializes the object with the integer k and the stream of integers nums. int add(int val) appends the integer val to the stream and returns the element representing the kth largest element in the stream. example 1: input ["kthlargest", "add", "add", "add", "add", "add"] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] output [null, 4, 5, 5, 8, 8] explanation kthlargest kthlargest = new kthlargest(3, [4, 5, 8, 2]); kthlargest.add(3); // return 4 kthlargest.add(5); // return 5 kthlargest.add(10); // return 5 kthlargest.add(9); // return 8 kthlargest.add(4); // return 8 constraints: 1 <= k <= 104 0 <= nums.length <= 104 -104 <= nums[i] <= 104 -104 <= val <= 104 at most 104 calls will be made to add. it is guaranteed that there will be at least k elements in the array when you search for the kth element.
leetcode will start its ipo soon. in order to sell a good price of its shares to venture capital, leetcode would like to work on some projects to increase its capital before the ipo. since it has limited resources, it can only finish at most k distinct projects before the ipo. help leetcode design the best way to maximize its total capital after finishing at most k distinct projects. you are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it. initially, you have w capital. when you finish a project, you will obtain its pure profit and the profit will be added to your total capital. pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital. the answer is guaranteed to fit in a 32-bit signed integer. example 1: input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1] output: 4 explanation: since your initial capital is 0, you can only start the project indexed 0. after finishing it you will obtain profit 1 and your capital becomes 1. with capital 1, you can either start the project indexed 1 or the project indexed 2. since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital. therefore, output the final maximized capital, which is 0 + 1 + 3 = 4. example 2: input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2] output: 6 constraints: 1 <= k <= 105 0 <= w <= 109 n == profits.length n == capital.length 1 <= n <= 105 0 <= profits[i] <= 104 0 <= capital[i] <= 109
an integer array nums of size n, return the number with the value closest to 0 in nums. if there are multiple answers, return the number with the largest value. example 1: input: nums = [-4,-2,1,4,8] output: 1 explanation: the distance from -4 to 0 is |-4| = 4. the distance from -2 to 0 is |-2| = 2. the distance from 1 to 0 is |1| = 1. the distance from 4 to 0 is |4| = 4. the distance from 8 to 0 is |8| = 8. thus, the closest number to 0 in the array is 1. example 2: input: nums = [2,-1,1] output: 1 explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned. constraints: 1 <= n <= 1000 -105 <= nums[i] <= 105
the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences. after doing so, return the head of the final linked list. you may return any such answer. (note that in the examples below, all sequences are serializations of listnode objects.) example 1: input: head = [1,2,-3,3,1] output: [3,1] note: the answer [1,2,1] would also be accepted. example 2: input: head = [1,2,3,-3,4] output: [1,2,4] example 3: input: head = [1,2,3,-3,-2] output: [1] constraints: the given linked list will contain between 1 and 1000 nodes. each node in the linked list has -1000 <= node.val <= 1000.
schema table: employees +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | name | varchar | +---------------+---------+ id is the primary key for this table. each row of this table contains the id and the name of an employee in a company. table: employeeuni +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | unique_id | int | +---------------+---------+ (id, unique_id) is the primary key for this table. each row of this table contains the id and the corresponding unique id of an employee in the company. write an sql query to show the unique id of each user, if a user does not have a unique id replace just show null. return the result table in any order. the query result format is in the following example. example 1: input: employees table: +----+----------+ | id | name | +----+----------+ | 1 | alice | | 7 | bob | | 11 | meir | | 90 | winston | | 3 | jonathan | +----+----------+ employeeuni table: +----+-----------+ | id | unique_id | +----+-----------+ | 3 | 1 | | 11 | 2 | | 90 | 3 | +----+-----------+ output: +-----------+----------+ | unique_id | name | +-----------+----------+ | null | alice | | null | bob | | 2 | meir | | 3 | winston | | 1 | jonathan | +-----------+----------+ explanation: alice and bob do not have a unique id, we will show null instead. the unique id of meir is 2. the unique id of winston is 3. the unique id of jonathan is 1.
have a 1-indexed binary string of length n where all the bits are 0 initially. we will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. you are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step. a binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros. return the number of times the binary string is prefix-aligned during the flipping process. example 1: input: flips = [3,2,4,1,5] output: 2 explanation: the binary string is initially "00000". after applying step 1: the string becomes "00100", which is not prefix-aligned. after applying step 2: the string becomes "01100", which is not prefix-aligned. after applying step 3: the string becomes "01110", which is not prefix-aligned. after applying step 4: the string becomes "11110", which is prefix-aligned. after applying step 5: the string becomes "11111", which is prefix-aligned. we can see that the string was prefix-aligned 2 times, so we return 2. example 2: input: flips = [4,1,2,3] output: 1 explanation: the binary string is initially "0000". after applying step 1: the string becomes "0001", which is not prefix-aligned. after applying step 2: the string becomes "1001", which is not prefix-aligned. after applying step 3: the string becomes "1101", which is not prefix-aligned. after applying step 4: the string becomes "1111", which is prefix-aligned. we can see that the string was prefix-aligned 1 time, so we return 1. constraints: n == flips.length 1 <= n <= 5 * 104 flips is a permutation of the integers in the range [1, n].
exists an infinitely large two-dimensional grid of uncolored unit cells. you are given a positive integer n, indicating that you must do the following routine for n minutes: at the first minute, color any arbitrary unit cell blue. every minute thereafter, color blue every uncolored cell that touches a blue cell. below is a pictorial representation of the state of the grid after minutes 1, 2, and 3. return the number of colored cells at the end of n minutes. example 1: input: n = 1 output: 1 explanation: after 1 minute, there is only 1 blue cell, so we return 1. example 2: input: n = 2 output: 5 explanation: after 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5. constraints: 1 <= n <= 105
a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1. for example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. these are the only nodes with twins for n = 4. the twin sum is defined as the sum of a node and its twin. given the head of a linked list with even length, return the maximum twin sum of the linked list. example 1: input: head = [5,4,2,1] output: 6 explanation: nodes 0 and 1 are the twins of nodes 3 and 2, respectively. all have twin sum = 6. there are no other nodes with twins in the linked list. thus, the maximum twin sum of the linked list is 6. example 2: input: head = [4,2,2,3] output: 7 explanation: the nodes with twins present in this linked list are: - node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7. - node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4. thus, the maximum twin sum of the linked list is max(7, 4) = 7. example 3: input: head = [1,100000] output: 100001 explanation: there is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001. constraints: the number of nodes in the list is an even integer in the range [2, 105]. 1 <= node.val <= 105
are n people standing in a line labeled from 1 to n. the first person in the line is holding a pillow initially. every second, the person holding the pillow passes it to the next person standing in the line. once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction. for example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on. given the two positive integers n and time, return the index of the person holding the pillow after time seconds. example 1: input: n = 4, time = 5 output: 2 explanation: people pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2. afer five seconds, the pillow is given to the 2nd person. example 2: input: n = 3, time = 2 output: 3 explanation: people pass the pillow in the following way: 1 -> 2 -> 3. afer two seconds, the pillow is given to the 3rd person. constraints: 2 <= n <= 1000 1 <= time <= 1000
schema table: employees +-------------+----------+ | column name | type | +-------------+----------+ | employee_id | int | | name | varchar | | reports_to | int | | age | int | +-------------+----------+ employee_id is the primary key for this table. this table contains information about the employees and the id of the manager they report to. some employees do not report to anyone (reports_to is null). for this problem, we will consider a manager an employee who has at least 1 other employee reporting to them. write an sql query to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer. return the result table ordered by employee_id. the query result format is in the following example. example 1: input: employees table: +-------------+---------+------------+-----+ | employee_id | name | reports_to | age | +-------------+---------+------------+-----+ | 9 | hercy | null | 43 | | 6 | alice | 9 | 41 | | 4 | bob | 9 | 36 | | 2 | winston | null | 37 | +-------------+---------+------------+-----+ output: +-------------+-------+---------------+-------------+ | employee_id | name | reports_count | average_age | +-------------+-------+---------------+-------------+ | 9 | hercy | 2 | 39 | +-------------+-------+---------------+-------------+ explanation: hercy has 2 people report directly to him, alice and bob. their average age is (41+36)/2 = 38.5, which is 39 after rounding it to the nearest integer.
are given an m x n matrix m initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means m[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi. count and return the number of maximum integers in the matrix after performing all the operations. example 1: input: m = 3, n = 3, ops = [[2,2],[3,3]] output: 4 explanation: the maximum integer in m is 2, and there are four of it in m. so return 4. example 2: input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]] output: 4 example 3: input: m = 3, n = 3, ops = [] output: 9 constraints: 1 <= m, n <= 4 * 104 0 <= ops.length <= 104 ops[i].length == 2 1 <= ai <= m 1 <= bi <= n
an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums. note that: a number greater than 1 is called prime if it is divisible by only 1 and itself. an integer val1 is a factor of another integer val2 if val2 / val1 is an integer. example 1: input: nums = [2,4,3,7,10,6] output: 4 explanation: the product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7. there are 4 distinct prime factors so we return 4. example 2: input: nums = [2,4,8,16] output: 1 explanation: the product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210. there is 1 distinct prime factor so we return 1. constraints: 1 <= nums.length <= 104 2 <= nums[i] <= 1000
are n flights that are labeled from 1 to n. you are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range. return an array answer of length n, where answer[i] is the total number of seats reserved for flight i. example 1: input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 output: [10,55,45,25,25] explanation: flight labels: 1 2 3 4 5 booking 1 reserved: 10 10 booking 2 reserved: 20 20 booking 3 reserved: 25 25 25 25 total seats: 10 55 45 25 25 hence, answer = [10,55,45,25,25] example 2: input: bookings = [[1,2,10],[2,2,15]], n = 2 output: [10,25] explanation: flight labels: 1 2 booking 1 reserved: 10 10 booking 2 reserved: 15 total seats: 10 25 hence, answer = [10,25] constraints: 1 <= n <= 2 * 104 1 <= bookings.length <= 2 * 104 bookings[i].length == 3 1 <= firsti <= lasti <= n 1 <= seatsi <= 104
are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits. you are also given a 0-indexed 2d integer array queries where queries[i] = [ki, trimi]. for each queries[i], you need to: trim each number in nums to its rightmost trimi digits. determine the index of the kith smallest trimmed number in nums. if two trimmed numbers are equal, the number with the lower index is considered to be smaller. reset each number in nums to its original length. return an array answer of the same length as queries, where answer[i] is the answer to the ith query. note: to trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain. strings in nums may contain leading zeros. example 1: input: nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]] output: [2,2,1,0] explanation: 1. after trimming to the last digit, nums = ["2","3","1","4"]. the smallest number is 1 at index 2. 2. trimmed to the last 3 digits, nums is unchanged. the 2nd smallest number is 251 at index 2. 3. trimmed to the last 2 digits, nums = ["02","73","51","14"]. the 4th smallest number is 73. 4. trimmed to the last 2 digits, the smallest number is 2 at index 0. note that the trimmed number "02" is evaluated as 2. example 2: input: nums = ["24","37","96","04"], queries = [[2,1],[2,2]] output: [3,0] explanation: 1. trimmed to the last digit, nums = ["4","7","6","4"]. the 2nd smallest number is 4 at index 3. there are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3. 2. trimmed to the last 2 digits, nums is unchanged. the 2nd smallest number is 24. constraints: 1 <= nums.length <= 100 1 <= nums[i].length <= 100 nums[i] consists of only digits. all nums[i].length are equal. 1 <= queries.length <= 100 queries[i].length == 2 1 <= ki <= nums.length 1 <= trimi <= nums[i].length follow up: could you use the radix sort algorithm to solve this problem? what will be the complexity of that solution?
two positive integers num1 and num2, find the positive integer x such that: x has the same number of set bits as num2, and the value x xor num1 is minimal. note that xor is the bitwise xor operation. return the integer x. the test cases are generated such that x is uniquely determined. the number of set bits of an integer is the number of 1's in its binary representation. example 1: input: num1 = 3, num2 = 5 output: 3 explanation: the binary representations of num1 and num2 are 0011 and 0101, respectively. the integer 3 has the same number of set bits as num2, and the value 3 xor 3 = 0 is minimal. example 2: input: num1 = 1, num2 = 12 output: 3 explanation: the binary representations of num1 and num2 are 0001 and 1100, respectively. the integer 3 has the same number of set bits as num2, and the value 3 xor 1 = 2 is minimal. constraints: 1 <= num1, num2 <= 109
an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed). specifically, ans is the concatenation of two nums arrays. return the array ans. example 1: input: nums = [1,2,1] output: [1,2,1,1,2,1] explanation: the array ans is formed as follows: - ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]] - ans = [1,2,1,1,2,1] example 2: input: nums = [1,3,2,1] output: [1,3,2,1,1,3,2,1] explanation: the array ans is formed as follows: - ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]] - ans = [1,3,2,1,1,3,2,1] constraints: n == nums.length 1 <= n <= 1000 1 <= nums[i] <= 1000
have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity. implement the dinnerplates class: dinnerplates(int capacity) initializes the object with the maximum capacity of the stacks capacity. void push(int val) pushes the given integer val into the leftmost stack with a size less than capacity. int pop() returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty. int popatstack(int index) returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty. example 1: input ["dinnerplates", "push", "push", "push", "push", "push", "popatstack", "push", "push", "popatstack", "popatstack", "pop", "pop", "pop", "pop", "pop"] [[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []] output [null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1] explanation: dinnerplates d = dinnerplates(2); // initialize with capacity = 2 d.push(1); d.push(2); d.push(3); d.push(4); d.push(5); // the stacks are now: 2 4 1 3 5 ﹈ ﹈ ﹈ d.popatstack(0); // returns 2. the stacks are now: 4 1 3 5 ﹈ ﹈ ﹈ d.push(20); // the stacks are now: 20 4 1 3 5 ﹈ ﹈ ﹈ d.push(21); // the stacks are now: 20 4 21 1 3 5 ﹈ ﹈ ﹈ d.popatstack(0); // returns 20. the stacks are now: 4 21 1 3 5 ﹈ ﹈ ﹈ d.popatstack(2); // returns 21. the stacks are now: 4 1 3 5 ﹈ ﹈ ﹈ d.pop() // returns 5. the stacks are now: 4 1 3 ﹈ ﹈ d.pop() // returns 4. the stacks are now: 1 3 ﹈ ﹈ d.pop() // returns 3. the stacks are now: 1 ﹈ d.pop() // returns 1. there are no stacks. d.pop() // returns -1. there are still no stacks. constraints: 1 <= capacity <= 2 * 104 1 <= val <= 2 * 104 0 <= index <= 105 at most 2 * 105 calls will be made to push, pop, and popatstack.
an integer array nums and two integers firstlen and secondlen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstlen and secondlen. the array with length firstlen could occur before or after the array with length secondlen, but they have to be non-overlapping. a subarray is a contiguous part of an array. example 1: input: nums = [0,6,5,2,2,5,1,9,4], firstlen = 1, secondlen = 2 output: 20 explanation: one choice of subarrays is [9] with length 1, and [6,5] with length 2. example 2: input: nums = [3,8,1,3,2,1,8,9,0], firstlen = 3, secondlen = 2 output: 29 explanation: one choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2. example 3: input: nums = [2,1,5,6,0,9,5,0,3,8], firstlen = 4, secondlen = 3 output: 31 explanation: one choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3. constraints: 1 <= firstlen, secondlen <= 1000 2 <= firstlen + secondlen <= 1000 firstlen + secondlen <= nums.length <= 1000 0 <= nums[i] <= 1000
are implementing a program to use as your calendar. we can add a new event if adding the event will not cause a double booking. a double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.). the event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end. implement the mycalendar class: mycalendar() initializes the calendar object. boolean book(int start, int end) returns true if the event can be added to the calendar successfully without causing a double booking. otherwise, return false and do not add the event to the calendar. example 1: input ["mycalendar", "book", "book", "book"] [[], [10, 20], [15, 25], [20, 30]] output [null, true, false, true] explanation mycalendar mycalendar = new mycalendar(); mycalendar.book(10, 20); // return true mycalendar.book(15, 25); // return false, it can not be booked because time 15 is already booked by another event. mycalendar.book(20, 30); // return true, the event can be booked, as the first event takes every time less than 20, but not including 20. constraints: 0 <= start < end <= 109 at most 1000 calls will be made to book.


an array arr of positive integers, consider all binary trees such that: each node has either 0 or 2 children; the values of arr correspond to the values of each leaf in an in-order traversal of the tree. the value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively. among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. it is guaranteed this sum fits into a 32-bit integer. a node is a leaf if and only if it has zero children. example 1: input: arr = [6,2,4] output: 32 explanation: there are two possible trees shown. the first has a non-leaf node sum 36, and the second has non-leaf node sum 32. example 2: input: arr = [4,11] output: 44 constraints: 2 <= arr.length <= 40 1 <= arr[i] <= 15 it is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 231).
are given a 0-indexed array of n integers arr. the interval between two elements in arr is defined as the absolute difference between their indices. more formally, the interval between arr[i] and arr[j] is |i - j|. return an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i]. note: |x| is the absolute value of x. example 1: input: arr = [2,1,3,1,2,3,3] output: [4,2,7,2,4,4,5] explanation: - index 0: another 2 is found at index 4. |0 - 4| = 4 - index 1: another 1 is found at index 3. |1 - 3| = 2 - index 2: two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7 - index 3: another 1 is found at index 1. |3 - 1| = 2 - index 4: another 2 is found at index 0. |4 - 0| = 4 - index 5: two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4 - index 6: two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5 example 2: input: arr = [10,5,10,10] output: [5,0,3,4] explanation: - index 0: two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5 - index 1: there is only one 5 in the array, so its sum of intervals to identical elements is 0. - index 2: two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3 - index 3: two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4 constraints: n == arr.length 1 <= n <= 105 1 <= arr[i] <= 105
n orders, each order consist in pickup and delivery services. count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). since the answer may be too large, return it modulo 10^9 + 7. example 1: input: n = 1 output: 1 explanation: unique order (p1, d1), delivery 1 always is after of pickup 1. example 2: input: n = 2 output: 6 explanation: all possible orders: (p1,p2,d1,d2), (p1,p2,d2,d1), (p1,d1,p2,d2), (p2,p1,d1,d2), (p2,p1,d2,d1) and (p2,d2,p1,d1). this is an invalid order (p1,d2,p2,d1) because pickup 2 is after of delivery 2. example 3: input: n = 3 output: 90 constraints: 1 <= n <= 500
exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. each node has an associated price. you are given an integer array price, where price[i] is the price of the ith node. the price sum of a given path is the sum of the prices of all nodes lying on that path. additionally, you are given a 2d integer array trips, where trips[i] = [starti, endi] indicates that you start the ith trip from the node starti and travel to the node endi by any path you like. before performing your first trip, you can choose some non-adjacent nodes and halve the prices. return the minimum total price sum to perform all the given trips. example 1: input: n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]] output: 23 explanation: the diagram above denotes the tree after rooting it at node 2. the first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half. for the 1st trip, we choose path [0,1,3]. the price sum of that path is 1 + 2 + 3 = 6. for the 2nd trip, we choose path [2,1]. the price sum of that path is 2 + 5 = 7. for the 3rd trip, we choose path [2,1,3]. the price sum of that path is 5 + 2 + 3 = 10. the total price sum of all trips is 6 + 7 + 10 = 23. it can be proven, that 23 is the minimum answer that we can achieve. example 2: input: n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]] output: 1 explanation: the diagram above denotes the tree after rooting it at node 0. the first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half. for the 1st trip, we choose path [0]. the price sum of that path is 1. the total price sum of all trips is 1. it can be proven, that 1 is the minimum answer that we can achieve. constraints: 1 <= n <= 50 edges.length == n - 1 0 <= ai, bi <= n - 1 edges represents a valid tree. price.length == n price[i] is an even integer. 1 <= price[i] <= 1000 1 <= trips.length <= 100 0 <= starti, endi <= n - 1
an m x n binary matrix mat, return the number of submatrices that have all ones. example 1: input: mat = [[1,0,1],[1,1,0],[1,1,0]] output: 13 explanation: there are 6 rectangles of side 1x1. there are 2 rectangles of side 1x2. there are 3 rectangles of side 2x1. there is 1 rectangle of side 2x2. there is 1 rectangle of side 3x1. total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13. example 2: input: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]] output: 24 explanation: there are 8 rectangles of side 1x1. there are 5 rectangles of side 1x2. there are 2 rectangles of side 1x3. there are 4 rectangles of side 2x1. there are 2 rectangles of side 2x2. there are 2 rectangles of side 3x1. there is 1 rectangle of side 3x2. total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24. constraints: 1 <= m, n <= 150 mat[i][j] is either 0 or 1.
school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. all students stand in a queue. each student either prefers square or circular sandwiches. the number of sandwiches in the cafeteria is equal to the number of students. the sandwiches are placed in a stack. at each step: if the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue. otherwise, they will leave it and go to the queue's end. this continues until none of the queue students want to take the top sandwich and are thus unable to eat. you are given two integer arrays students and sandwiches where sandwiches[i] is the type of the ith sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the jth student in the initial queue (j = 0 is the front of the queue). return the number of students that are unable to eat. example 1: input: students = [1,1,0,0], sandwiches = [0,1,0,1] output: 0 explanation: - front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1]. - front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1]. - front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1]. - front student leaves the top sandwich and returns to the end of the line making students = [1,1,0]. - front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1]. - front student leaves the top sandwich and returns to the end of the line making students = [0,1]. - front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1]. - front student takes the top sandwich and leaves the line making students = [] and sandwiches = []. hence all students are able to eat. example 2: input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1] output: 3 constraints: 1 <= students.length, sandwiches.length <= 100 students.length == sandwiches.length sandwiches[i] is 0 or 1. students[i] is 0 or 1.
are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. you are given the expansion plan as a 0-indexed integer array of length n, prevroom, where prevroom[i] indicates that you must build room prevroom[i] before building room i, and these two rooms must be connected directly. room 0 is already built, so prevroom[0] = -1. the expansion plan is given such that once all the rooms are built, every room will be reachable from room 0. you can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. you can choose to build any room as long as its previous room is already built. return the number of different orders you can build all the rooms in. since the answer may be large, return it modulo 109 + 7. example 1: input: prevroom = [-1,0,1] output: 1 explanation: there is only one way to build the additional rooms: 0 → 1 → 2 example 2: input: prevroom = [-1,0,0,1,2] output: 6 explanation: the 6 ways are: 0 → 1 → 3 → 2 → 4 0 → 2 → 4 → 1 → 3 0 → 1 → 2 → 3 → 4 0 → 1 → 2 → 4 → 3 0 → 2 → 1 → 3 → 4 0 → 2 → 1 → 4 → 3 constraints: n == prevroom.length 2 <= n <= 105 prevroom[0] == -1 0 <= prevroom[i] < n for all 1 <= i < n every room is reachable from room 0 once all the rooms are built.
alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices. for example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4. given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence). a subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not. example 1: input: nums = [4,2,5,3] output: 7 explanation: it is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7. example 2: input: nums = [5,6,7,8] output: 8 explanation: it is optimal to choose the subsequence [8] with alternating sum 8. example 3: input: nums = [6,2,1,2,4,5] output: 10 explanation: it is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105
are given a positive integer n. each digit of n has a sign according to the following rules: the most significant digit is assigned a positive sign. each other digit has an opposite sign to its adjacent digits. return the sum of all digits with their corresponding sign. example 1: input: n = 521 output: 4 explanation: (+5) + (-2) + (+1) = 4. example 2: input: n = 111 output: 1 explanation: (+1) + (-1) + (+1) = 1. example 3: input: n = 886996 output: 0 explanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0. constraints: 1 <= n <= 109
two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false. swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j]. for example, swapping at indices 0 and 2 in "abcd" results in "cbad". example 1: input: s = "ab", goal = "ba" output: true explanation: you can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal. example 2: input: s = "ab", goal = "ab" output: false explanation: the only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal. example 3: input: s = "aa", goal = "aa" output: true explanation: you can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal. constraints: 1 <= s.length, goal.length <= 2 * 104 s and goal consist of lowercase letters.
are given an integer array nums and an integer x. in one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. note that this modifies the array for future operations. return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1. example 1: input: nums = [1,1,4,2,3], x = 5 output: 2 explanation: the optimal solution is to remove the last two elements to reduce x to zero. example 2: input: nums = [5,6,7,8,9], x = 4 output: -1 example 3: input: nums = [3,2,20,1,1,3], x = 10 output: 5 explanation: the optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 104 1 <= x <= 109
maximum tree is a tree where every node has a value greater than any other value in its subtree. you are given the root of a maximum binary tree and an integer val. just as in the previous problem, the given tree was constructed from a list a (root = construct(a)) recursively with the following construct(a) routine: if a is empty, return null. otherwise, let a[i] be the largest element of a. create a root node with the value a[i]. the left child of root will be construct([a[0], a[1], ..., a[i - 1]]). the right child of root will be construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]). return root. note that we were not given a directly, only a root node root = construct(a). suppose b is a copy of a with the value val appended to it. it is guaranteed that b has unique values. return construct(b). example 1: input: root = [4,1,3,null,null,2], val = 5 output: [5,4,null,1,3,null,null,2] explanation: a = [1,4,2,3], b = [1,4,2,3,5] example 2: input: root = [5,2,4,null,1], val = 3 output: [5,2,4,null,1,null,3] explanation: a = [2,1,5,4], b = [2,1,5,4,3] example 3: input: root = [5,2,3,null,1], val = 4 output: [5,2,4,null,1,3] explanation: a = [2,1,5,3], b = [2,1,5,3,4] constraints: the number of nodes in the tree is in the range [1, 100]. 1 <= node.val <= 100 all the values of the tree are unique. 1 <= val <= 100
an integer array nums of unique elements, return all possible subsets (the power set). the solution set must not contain duplicate subsets. return the solution in any order. example 1: input: nums = [1,2,3] output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] example 2: input: nums = [0] output: [[],[0]] constraints: 1 <= nums.length <= 10 -10 <= nums[i] <= 10 all the numbers of nums are unique.
frequency of an element is the number of times it occurs in an array. you are given an integer array nums and an integer k. in one operation, you can choose an index of nums and increment the element at that index by 1. return the maximum possible frequency of an element after performing at most k operations. example 1: input: nums = [1,2,4], k = 5 output: 3 explanation: increment the first element three times and the second element two times to make nums = [4,4,4]. 4 has a frequency of 3. example 2: input: nums = [1,4,8,13], k = 5 output: 2 explanation: there are multiple optimal solutions: - increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2. - increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2. - increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2. example 3: input: nums = [3,9,6], k = 2 output: 1 constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= k <= 105
an unsorted integer array nums, return the smallest missing positive integer. you must implement an algorithm that runs in o(n) time and uses constant extra space. example 1: input: nums = [1,2,0] output: 3 explanation: the numbers in the range [1,2] are all in the array. example 2: input: nums = [3,4,-1,1] output: 2 explanation: 1 is in the array but 2 is missing. example 3: input: nums = [7,8,9,11,12] output: 1 explanation: the smallest positive integer 1 is missing. constraints: 1 <= nums.length <= 105 -231 <= nums[i] <= 231 - 1
are given a 2d integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). the size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1. you are also given an integer array queries. the answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. if no such interval exists, the answer is -1. return an array containing the answers to the queries. example 1: input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5] output: [3,3,1,4] explanation: the queries are processed as follows: - query = 2: the interval [2,4] is the smallest interval containing 2. the answer is 4 - 2 + 1 = 3. - query = 3: the interval [2,4] is the smallest interval containing 3. the answer is 4 - 2 + 1 = 3. - query = 4: the interval [4,4] is the smallest interval containing 4. the answer is 4 - 4 + 1 = 1. - query = 5: the interval [3,6] is the smallest interval containing 5. the answer is 6 - 3 + 1 = 4. example 2: input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22] output: [2,-1,4,6] explanation: the queries are processed as follows: - query = 2: the interval [2,3] is the smallest interval containing 2. the answer is 3 - 2 + 1 = 2. - query = 19: none of the intervals contain 19. the answer is -1. - query = 5: the interval [2,5] is the smallest interval containing 5. the answer is 5 - 2 + 1 = 4. - query = 22: the interval [20,25] is the smallest interval containing 22. the answer is 25 - 20 + 1 = 6. constraints: 1 <= intervals.length <= 105 1 <= queries.length <= 105 intervals[i].length == 2 1 <= lefti <= righti <= 107 1 <= queries[j] <= 107
are given an array nums of positive integers. in one operation, you can choose any number from nums and reduce it to exactly half the number. (note that you may choose this reduced number in future operations.) return the minimum number of operations to reduce the sum of nums by at least half. example 1: input: nums = [5,19,8,1] output: 3 explanation: the initial sum of nums is equal to 5 + 19 + 8 + 1 = 33. the following is one of the ways to reduce the sum by at least half: pick the number 19 and reduce it to 9.5. pick the number 9.5 and reduce it to 4.75. pick the number 8 and reduce it to 4. the final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. the sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5. overall, 3 operations were used so we return 3. it can be shown that we cannot reduce the sum by at least half in less than 3 operations. example 2: input: nums = [3,8,20] output: 3 explanation: the initial sum of nums is equal to 3 + 8 + 20 = 31. the following is one of the ways to reduce the sum by at least half: pick the number 20 and reduce it to 10. pick the number 10 and reduce it to 5. pick the number 3 and reduce it to 1.5. the final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. the sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5. overall, 3 operations were used so we return 3. it can be shown that we cannot reduce the sum by at least half in less than 3 operations. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 107
strings, x and y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string x. for example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts". together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}. notice that "tars" and "arts" are in the same group even though they are not similar. formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group. we are given a list strs of strings where every string in strs is an anagram of every other string in strs. how many groups are there? example 1: input: strs = ["tars","rats","arts","star"] output: 2 example 2: input: strs = ["omv","ovm"] output: 1 constraints: 1 <= strs.length <= 300 1 <= strs[i].length <= 300 strs[i] consists of lowercase letters only. all words in strs have the same length and are anagrams of each other.
stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row. each glass holds one cup of champagne. then, some champagne is poured into the first glass at the top. when the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. when those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (a glass at the bottom row has its excess champagne fall on the floor.) for example, after one cup of champagne is poured, the top most glass is full. after two cups of champagne are poured, the two glasses on the second row are half full. after three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. after four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.) example 1: input: poured = 1, query_row = 1, query_glass = 1 output: 0.00000 explanation: we poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). there will be no excess liquid so all the glasses under the top glass will remain empty. example 2: input: poured = 2, query_row = 1, query_glass = 1 output: 0.50000 explanation: we poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). there is one cup of excess liquid. the glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange. example 3: input: poured = 100000009, query_row = 33, query_glass = 17 output: 1.00000 constraints: 0 <= poured <= 109 0 <= query_glass <= query_row < 100
a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. each number in candidates may only be used once in the combination. note: the solution set must not contain duplicate combinations. example 1: input: candidates = [10,1,2,7,6,1,5], target = 8 output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] example 2: input: candidates = [2,5,2,1,2], target = 5 output: [ [1,2,2], [5] ] constraints: 1 <= candidates.length <= 100 1 <= candidates[i] <= 50 1 <= target <= 30
f(x) be the number of zeroes at the end of x!. recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1. for example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end. given an integer k, return the number of non-negative integers x have the property that f(x) = k. example 1: input: k = 0 output: 5 explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes. example 2: input: k = 5 output: 0 explanation: there is no x such that x! ends in k = 5 zeroes. example 3: input: k = 3 output: 5 constraints: 0 <= k <= 109
a non-negative integer x, return the square root of x rounded down to the nearest integer. the returned integer should be non-negative as well. you must not use any built-in exponent function or operator. for example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python. example 1: input: x = 4 output: 2 explanation: the square root of 4 is 2, so we return 2. example 2: input: x = 8 output: 2 explanation: the square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned. constraints: 0 <= x <= 231 - 1
an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k. an array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array. we define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. for example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5. example 1: input: nums = [3,5,2,6], k = 2 output: [2,6] explanation: among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive. example 2: input: nums = [2,4,3,3,5,4,9,6], k = 4 output: [2,3,3,4] constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 1 <= k <= nums.length
are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. any server can reach other servers directly or indirectly through the network. a critical connection is a connection that, if removed, will make some servers unable to reach some other server. return all critical connections in the network in any order. example 1: input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]] output: [[1,3]] explanation: [[3,1]] is also accepted. example 2: input: n = 2, connections = [[0,1]] output: [[0,1]] constraints: 2 <= n <= 105 n - 1 <= connections.length <= 105 0 <= ai, bi <= n - 1 ai != bi there are no repeated connections.
is a one-dimensional garden on the x-axis. the garden starts at the point 0 and ends at the point n. (i.e the length of the garden is n). there are n + 1 taps located at points [0, 1, ..., n] in the garden. given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open. return the minimum number of taps that should be open to water the whole garden, if the garden cannot be watered return -1. example 1: input: n = 5, ranges = [3,4,1,1,0,0] output: 1 explanation: the tap at point 0 can cover the interval [-3,3] the tap at point 1 can cover the interval [-3,5] the tap at point 2 can cover the interval [1,3] the tap at point 3 can cover the interval [2,4] the tap at point 4 can cover the interval [4,4] the tap at point 5 can cover the interval [5,5] opening only the second tap will water the whole garden [0,5] example 2: input: n = 3, ranges = [0,0,0,0] output: -1 explanation: even if you activate all the four taps you cannot water the whole garden. constraints: 1 <= n <= 104 ranges.length == n + 1 0 <= ranges[i] <= 100
are given a square board of characters. you can move on the board starting at the bottom right square marked with the character 's'. you need to reach the top left square marked with the character 'e'. the rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'x'. in one move you can go up, left or up-left (diagonally) only if there is no obstacle there. return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7. in case there is no path, return [0, 0]. example 1: input: board = ["e23","2x2","12s"] output: [7,1] example 2: input: board = ["e12","1x1","21s"] output: [4,2] example 3: input: board = ["e11","xxx","11s"] output: [0,0] constraints: 2 <= board.length == board[i].length <= 100
if a 9 x 9 sudoku board is valid. only the filled cells need to be validated according to the following rules: each row must contain the digits 1-9 without repetition. each column must contain the digits 1-9 without repetition. each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. note: a sudoku board (partially filled) could be valid but is not necessarily solvable. only the filled cells need to be validated according to the mentioned rules. example 1: input: board = [["5","3",".",".","7",".",".",".","."] ,["6",".",".","1","9","5",".",".","."] ,[".","9","8",".",".",".",".","6","."] ,["8",".",".",".","6",".",".",".","3"] ,["4",".",".","8",".","3",".",".","1"] ,["7",".",".",".","2",".",".",".","6"] ,[".","6",".",".",".",".","2","8","."] ,[".",".",".","4","1","9",".",".","5"] ,[".",".",".",".","8",".",".","7","9"]] output: true example 2: input: board = [["8","3",".",".","7",".",".",".","."] ,["6",".",".","1","9","5",".",".","."] ,[".","9","8",".",".",".",".","6","."] ,["8",".",".",".","6",".",".",".","3"] ,["4",".",".","8",".","3",".",".","1"] ,["7",".",".",".","2",".",".",".","6"] ,[".","6",".",".",".",".","2","8","."] ,[".",".",".","4","1","9",".",".","5"] ,[".",".",".",".","8",".",".","7","9"]] output: false explanation: same as example 1, except with the 5 in the top left corner being modified to 8. since there are two 8's in the top left 3x3 sub-box, it is invalid. constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit 1-9 or '.'.
an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. note that abs(x) is the absolute value of x. return abs(i - start). it is guaranteed that target exists in nums. example 1: input: nums = [1,2,3,4,5], target = 5, start = 3 output: 1 explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1. example 2: input: nums = [1], target = 1, start = 0 output: 0 explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0. example 3: input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0 output: 0 explanation: every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 0 <= start < nums.length target is in nums.
the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. the formatted layout matrix should be constructed using the following rules: the height of the tree is height and the number of rows m should be equal to height + 1. the number of columns n should be equal to 2height+1 - 1. place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]). for each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1]. continue this process until all the nodes in the tree have been placed. any empty cells should contain the empty string "". return the constructed matrix res. example 1: input: root = [1,2] output: [["","1",""], ["2","",""]] example 2: input: root = [1,2,3,null,4] output: [["","","","1","","",""], ["","2","","","","3",""], ["","","4","","","",""]] constraints: the number of nodes in the tree is in the range [1, 210]. -99 <= node.val <= 99 the depth of the tree will be in the range [1, 10].
message containing letters from a-z can be encoded into numbers using the following mapping: 'a' -> "1" 'b' -> "2" ... 'z' -> "26" to decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, "11106" can be mapped into: "aajf" with the grouping (1 1 10 6) "kjf" with the grouping (11 10 6) note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'f' since "6" is different from "06". in addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). for example, the encoded message "1*" may represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19". decoding "1*" is equivalent to decoding any of the encoded messages it can represent. given a string s consisting of digits and '*' characters, return the number of ways to decode it. since the answer may be very large, return it modulo 109 + 7. example 1: input: s = "*" output: 9 explanation: the encoded message can represent any of the encoded messages "1", "2", "3", "4", "5", "6", "7", "8", or "9". each of these can be decoded to the strings "a", "b", "c", "d", "e", "f", "g", "h", and "i" respectively. hence, there are a total of 9 ways to decode "*". example 2: input: s = "1*" output: 18 explanation: the encoded message can represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19". each of these encoded messages have 2 ways to be decoded (e.g. "11" can be decoded to "aa" or "k"). hence, there are a total of 9 * 2 = 18 ways to decode "1*". example 3: input: s = "2*" output: 15 explanation: the encoded message can represent any of the encoded messages "21", "22", "23", "24", "25", "26", "27", "28", or "29". "21", "22", "23", "24", "25", and "26" have 2 ways of being decoded, but "27", "28", and "29" only have 1 way. hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode "2*". constraints: 1 <= s.length <= 105 s[i] is a digit or '*'.
an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit. example 1: input: n = 20 output: 1 explanation: the only positive number (<= 20) with at least 1 repeated digit is 11. example 2: input: n = 100 output: 10 explanation: the positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100. example 3: input: n = 1000 output: 262 constraints: 1 <= n <= 109
a balanced parentheses string s, return the score of the string. the score of a balanced parentheses string is based on the following rule: "()" has score 1. ab has score a + b, where a and b are balanced parentheses strings. (a) has score 2 * a, where a is a balanced parentheses string. example 1: input: s = "()" output: 1 example 2: input: s = "(())" output: 2 example 3: input: s = "()()" output: 2 constraints: 2 <= s.length <= 50 s consists of only '(' and ')'. s is a balanced parentheses string.
an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,1,1], k = 2 output: 2 example 2: input: nums = [1,2,3], k = 3 output: 2 constraints: 1 <= nums.length <= 2 * 104 -1000 <= nums[i] <= 1000 -107 <= k <= 107
a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c. example 1: input: c = 5 output: true explanation: 1 * 1 + 2 * 2 = 5 example 2: input: c = 3 output: false constraints: 0 <= c <= 231 - 1
are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2. the cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. the groups are connected if each point in both groups is connected to one or more points in the opposite group. in other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group. return the minimum cost it takes to connect the two groups. example 1: input: cost = [[15, 96], [36, 2]] output: 17 explanation: the optimal way of connecting the groups is: 1--a 2--b this results in a total cost of 17. example 2: input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] output: 4 explanation: the optimal way of connecting the groups is: 1--a 2--b 2--c 3--a this results in a total cost of 4. note that there are multiple points connected to point 2 in the first group and point a in the second group. this does not matter as there is no limit to the number of points that can be connected. we only care about the minimum total cost. example 3: input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]] output: 10 constraints: size1 == cost.length size2 == cost[i].length 1 <= size1, size2 <= 12 size1 >= size2 0 <= cost[i][j] <= 100
the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values. two nodes of a binary tree are cousins if they have the same depth with different parents. return the root of the modified tree. note that the depth of a node is the number of edges in the path from the root node to it. example 1: input: root = [5,4,9,1,10,null,7] output: [0,0,0,7,7,null,11] explanation: the diagram above shows the initial binary tree and the binary tree after changing the value of each node. - node with value 5 does not have any cousins so its sum is 0. - node with value 4 does not have any cousins so its sum is 0. - node with value 9 does not have any cousins so its sum is 0. - node with value 1 has a cousin with value 7 so its sum is 7. - node with value 10 has a cousin with value 7 so its sum is 7. - node with value 7 has cousins with values 1 and 10 so its sum is 11. example 2: input: root = [3,1,2] output: [0,0,0] explanation: the diagram above shows the initial binary tree and the binary tree after changing the value of each node. - node with value 3 does not have any cousins so its sum is 0. - node with value 1 does not have any cousins so its sum is 0. - node with value 2 does not have any cousins so its sum is 0. constraints: the number of nodes in the tree is in the range [1, 105]. 1 <= node.val <= 104
an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. if target is not found in the array, return [-1, -1]. you must write an algorithm with o(log n) runtime complexity. example 1: input: nums = [5,7,7,8,8,10], target = 8 output: [3,4] example 2: input: nums = [5,7,7,8,8,10], target = 6 output: [-1,-1] example 3: input: nums = [], target = 0 output: [-1,-1] constraints: 0 <= nums.length <= 105 -109 <= nums[i] <= 109 nums is a non-decreasing array. -109 <= target <= 109
have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: red, yellow, or green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color). given n the number of rows of the grid, return the number of ways you can paint this grid. as the answer may grow large, the answer must be computed modulo 109 + 7. example 1: input: n = 1 output: 12 explanation: there are 12 possible way to paint the grid as shown. example 2: input: n = 5000 output: 30228214 constraints: n == grid.length 1 <= n <= 5000
is a safe protected by a password. the password is a sequence of n digits where each digit can be in the range [0, k - 1]. the safe has a peculiar way of checking the password. when you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit. for example, the correct password is "345" and you enter in "012345": after typing 0, the most recent 3 digits is "0", which is incorrect. after typing 1, the most recent 3 digits is "01", which is incorrect. after typing 2, the most recent 3 digits is "012", which is incorrect. after typing 3, the most recent 3 digits is "123", which is incorrect. after typing 4, the most recent 3 digits is "234", which is incorrect. after typing 5, the most recent 3 digits is "345", which is correct and the safe unlocks. return any string of minimum length that will unlock the safe at some point of entering it. example 1: input: n = 1, k = 2 output: "10" explanation: the password is a single digit, so enter each digit. "01" would also unlock the safe. example 2: input: n = 2, k = 2 output: "01100" explanation: for each possible password: - "00" is typed in starting from the 4th digit. - "01" is typed in starting from the 1st digit. - "10" is typed in starting from the 3rd digit. - "11" is typed in starting from the 2nd digit. thus "01100" will unlock the safe. "10011", and "11001" would also unlock the safe. constraints: 1 <= n <= 4 1 <= k <= 10 1 <= kn <= 4096
the following details of a matrix with n columns and 2 rows : the matrix is a binary matrix, which means each element in the matrix can be 0 or 1. the sum of elements of the 0-th(upper) row is given as upper. the sum of elements of the 1-st(lower) row is given as lower. the sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n. your task is to reconstruct the matrix with upper, lower and colsum. return it as a 2-d integer array. if there are more than one valid solution, any of them will be accepted. if no valid solution exists, return an empty 2-d array. example 1: input: upper = 2, lower = 1, colsum = [1,1,1] output: [[1,1,0],[0,0,1]] explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers. example 2: input: upper = 2, lower = 3, colsum = [2,2,1,1] output: [] example 3: input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1] output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]] constraints: 1 <= colsum.length <= 10^5 0 <= upper, lower <= colsum.length 0 <= colsum[i] <= 2
a class to find the kth largest element in a stream. note that it is the kth largest element in the sorted order, not the kth distinct element. implement kthlargest class: kthlargest(int k, int[] nums) initializes the object with the integer k and the stream of integers nums. int add(int val) appends the integer val to the stream and returns the element representing the kth largest element in the stream. example 1: input ["kthlargest", "add", "add", "add", "add", "add"] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] output [null, 4, 5, 5, 8, 8] explanation kthlargest kthlargest = new kthlargest(3, [4, 5, 8, 2]); kthlargest.add(3); // return 4 kthlargest.add(5); // return 5 kthlargest.add(10); // return 5 kthlargest.add(9); // return 8 kthlargest.add(4); // return 8 constraints: 1 <= k <= 104 0 <= nums.length <= 104 -104 <= nums[i] <= 104 -104 <= val <= 104 at most 104 calls will be made to add. it is guaranteed that there will be at least k elements in the array when you search for the kth element.
schema table: users +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | name | varchar | | mail | varchar | +---------------+---------+ user_id is the primary key for this table. this table contains information of the users signed up in a website. some e-mails are invalid. write an sql query to find the users who have valid emails. a valid e-mail has a prefix name and a domain where: the prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. the prefix name must start with a letter. the domain is '@leetcode.com'. return the result table in any order. the query result format is in the following example. example 1: input: users table: +---------+-----------+-------------------------+ | user_id | name | mail | +---------+-----------+-------------------------+ | 1 | winston | winston@leetcode.com | | 2 | jonathan | jonathanisgreat | | 3 | annabelle | bella-@leetcode.com | | 4 | sally | sally.come@leetcode.com | | 5 | marwan | quarz#2020@leetcode.com | | 6 | david | david69@gmail.com | | 7 | shapiro | .shapo@leetcode.com | +---------+-----------+-------------------------+ output: +---------+-----------+-------------------------+ | user_id | name | mail | +---------+-----------+-------------------------+ | 1 | winston | winston@leetcode.com | | 3 | annabelle | bella-@leetcode.com | | 4 | sally | sally.come@leetcode.com | +---------+-----------+-------------------------+ explanation: the mail of user 2 does not have a domain. the mail of user 5 has the # sign which is not allowed. the mail of user 6 does not have the leetcode domain. the mail of user 7 starts with a period.
string s is called good if there are no two different characters in s that have the same frequency. given a string s, return the minimum number of characters you need to delete to make s good. the frequency of a character in a string is the number of times it appears in the string. for example, in the string "aab", the frequency of 'a' is 2, while the frequency of 'b' is 1. example 1: input: s = "aab" output: 0 explanation: s is already good. example 2: input: s = "aaabbbcc" output: 2 explanation: you can delete two 'b's resulting in the good string "aaabcc". another way it to delete one 'b' and one 'c' resulting in the good string "aaabbc". example 3: input: s = "ceabaacb" output: 2 explanation: you can delete both 'c's resulting in the good string "eabaab". note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored). constraints: 1 <= s.length <= 105 s contains only lowercase english letters.
are given two binary trees root1 and root2. imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. you need to merge the two trees into a new binary tree. the merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. otherwise, the not null node will be used as the node of the new tree. return the merged tree. note: the merging process must start from the root nodes of both trees. example 1: input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7] output: [3,4,5,5,4,null,7] example 2: input: root1 = [1], root2 = [1,2] output: [2,2] constraints: the number of nodes in both trees is in the range [0, 2000]. -104 <= node.val <= 104
the root of a binary tree, return the length of the diameter of the tree. the diameter of a binary tree is the length of the longest path between any two nodes in a tree. this path may or may not pass through the root. the length of a path between two nodes is represented by the number of edges between them. example 1: input: root = [1,2,3,4,5] output: 3 explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3]. example 2: input: root = [1,2] output: 1 constraints: the number of nodes in the tree is in the range [1, 104]. -100 <= node.val <= 100
an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them. return the result as a list of indices representing the starting position of each interval (0-indexed). if there are multiple answers, return the lexicographically smallest one. example 1: input: nums = [1,2,1,2,6,7,5,1], k = 2 output: [0,3,5] explanation: subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5]. we could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger. example 2: input: nums = [1,2,1,2,1,2,1,2,1], k = 2 output: [0,2,4] constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] < 216 1 <= k <= floor(nums.length / 3)
a function that reverses a string. the input string is given as an array of characters s. you must do this by modifying the input array in-place with o(1) extra memory. example 1: input: s = ["h","e","l","l","o"] output: ["o","l","l","e","h"] example 2: input: s = ["h","a","n","n","a","h"] output: ["h","a","n","n","a","h"] constraints: 1 <= s.length <= 105 s[i] is a printable ascii character.
an integer array arr and a filtering function fn, return a new array with a fewer or equal number of elements. the returned array should only contain elements where fn(arr[i], i) evaluated to a truthy value. please solve it without the built-in array.filter method. example 1: input: arr = [0,10,20,30], fn = function greaterthan10(n) { return n > 10; } output: [20,30] explanation: const newarray = filter(arr, fn); // [20, 30] the function filters out values that are not greater than 10 example 2: input: arr = [1,2,3], fn = function firstindex(n, i) { return i === 0; } output: [1] explanation: fn can also accept the index of each element in this case, the function removes elements not at index 0 example 3: input: arr = [-2,-1,0,1,2], fn = function plusone(n) { return n + 1 } output: [-2,0,1,2] explanation: falsey values such as 0 should be filtered out constraints: 0 <= arr.length <= 1000 -109 <= arr[i] <= 109
the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list. example 1: input: head = [1,2,3,4,5], left = 2, right = 4 output: [1,4,3,2,5] example 2: input: head = [5], left = 1, right = 1 output: [5] constraints: the number of nodes in the list is n. 1 <= n <= 500 -500 <= node.val <= 500 1 <= left <= right <= n follow up: could you do it in one pass?
run a preorder depth-first search (dfs) on the root of a binary tree. at each node in this traversal, we output d dashes (where d is the depth of this node), then we output the value of this node. if the depth of a node is d, the depth of its immediate child is d + 1. the depth of the root node is 0. if a node has only one child, that child is guaranteed to be the left child. given the output traversal of this traversal, recover the tree and return its root. example 1: input: traversal = "1-2--3--4-5--6--7" output: [1,2,5,3,4,6,7] example 2: input: traversal = "1-2--3---4-5--6---7" output: [1,2,5,3,null,6,null,4,null,7] example 3: input: traversal = "1-401--349---90--88" output: [1,401,null,349,88,90] constraints: the number of nodes in the original tree is in the range [1, 1000]. 1 <= node.val <= 109
a 2d integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order. example 1: input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]] output: [3,4] explanation: the only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4]. example 2: input: nums = [[1,2,3],[4,5,6]] output: [] explanation: there does not exist any integer present both in nums[0] and nums[1], so we return an empty list []. constraints: 1 <= nums.length <= 1000 1 <= sum(nums[i].length) <= 1000 1 <= nums[i][j] <= 1000 all the values of nums[i] are unique.
an m x n binary matrix mat, return the number of submatrices that have all ones. example 1: input: mat = [[1,0,1],[1,1,0],[1,1,0]] output: 13 explanation: there are 6 rectangles of side 1x1. there are 2 rectangles of side 1x2. there are 3 rectangles of side 2x1. there is 1 rectangle of side 2x2. there is 1 rectangle of side 3x1. total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13. example 2: input: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]] output: 24 explanation: there are 8 rectangles of side 1x1. there are 5 rectangles of side 1x2. there are 2 rectangles of side 1x3. there are 4 rectangles of side 2x1. there are 2 rectangles of side 2x2. there are 2 rectangles of side 3x1. there is 1 rectangle of side 3x2. total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24. constraints: 1 <= m, n <= 150 mat[i][j] is either 0 or 1.
the video game fallout 4, the quest "road to freedom" requires players to reach a metal dial called the "freedom trail ring" and use the dial to spell a specific keyword to open the door. given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword. initially, the first character of the ring is aligned at the "12:00" direction. you should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the "12:00" direction and then by pressing the center button. at the stage of rotating the ring to spell the key character key[i]: you can rotate the ring clockwise or anticlockwise by one place, which counts as one step. the final purpose of the rotation is to align one of ring's characters at the "12:00" direction, where this character must equal key[i]. if the character key[i] has been aligned at the "12:00" direction, press the center button to spell, which also counts as one step. after the pressing, you could begin to spell the next character in the key (next stage). otherwise, you have finished all the spelling. example 1: input: ring = "godding", key = "gd" output: 4 explanation: for the first key character 'g', since it is already in place, we just need 1 step to spell this character. for the second key character 'd', we need to rotate the ring "godding" anticlockwise by two steps to make it become "ddinggo". also, we need 1 more step for spelling. so the final output is 4. example 2: input: ring = "godding", key = "godding" output: 13 constraints: 1 <= ring.length, key.length <= 100 ring and key consist of only lower case english letters. it is guaranteed that key could always be spelled by rotating ring.
are given a 0-indexed array arr consisting of n positive integers, and a positive integer k. the array arr is called k-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1. for example, arr = [4, 1, 5, 2, 6, 2] is k-increasing for k = 2 because: arr[0] <= arr[2] (4 <= 5) arr[1] <= arr[3] (1 <= 2) arr[2] <= arr[4] (5 <= 6) arr[3] <= arr[5] (2 <= 2) however, the same arr is not k-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]). in one operation, you can choose an index i and change arr[i] into any positive integer. return the minimum number of operations required to make the array k-increasing for the given k. example 1: input: arr = [5,4,3,2,1], k = 1 output: 4 explanation: for k = 1, the resultant array has to be non-decreasing. some of the k-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. all of them require 4 operations. it is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations. it can be shown that we cannot make the array k-increasing in less than 4 operations. example 2: input: arr = [4,1,5,2,6,2], k = 2 output: 0 explanation: this is the same example as the one in the problem description. here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i]. since the given array is already k-increasing, we do not need to perform any operations. example 3: input: arr = [4,1,5,2,6,2], k = 3 output: 2 explanation: indices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5. one of the ways we can make the array k-increasing is by changing arr[3] to 4 and arr[5] to 5. the array will now be [4,1,5,4,6,5]. note that there can be other ways to make the array k-increasing, but none of them require less than 2 operations. constraints: 1 <= arr.length <= 105 1 <= arr[i], k <= arr.length
a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise. for example, in s = "110100010" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3. note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. the same applies if there is no 1's. example 1: input: s = "1101" output: true explanation: the longest contiguous segment of 1s has length 2: "1101" the longest contiguous segment of 0s has length 1: "1101" the segment of 1s is longer, so return true. example 2: input: s = "111000" output: false explanation: the longest contiguous segment of 1s has length 3: "111000" the longest contiguous segment of 0s has length 3: "111000" the segment of 1s is not longer, so return false. example 3: input: s = "110100010" output: false explanation: the longest contiguous segment of 1s has length 2: "110100010" the longest contiguous segment of 0s has length 3: "110100010" the segment of 1s is not longer, so return false. constraints: 1 <= s.length <= 100 s[i] is either '0' or '1'.
an m x n 2d binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. an island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. you may assume all four edges of the grid are all surrounded by water. example 1: input: grid = [ ["1","1","1","1","0"], ["1","1","0","1","0"], ["1","1","0","0","0"], ["0","0","0","0","0"] ] output: 1 example 2: input: grid = [ ["1","1","0","0","0"], ["1","1","0","0","0"], ["0","0","1","0","0"], ["0","0","0","1","1"] ] output: 3 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 300 grid[i][j] is '0' or '1'.
an integer number n, return the difference between the product of its digits and the sum of its digits. example 1: input: n = 234 output: 15 explanation: product of digits = 2 * 3 * 4 = 24 sum of digits = 2 + 3 + 4 = 9 result = 24 - 9 = 15 example 2: input: n = 4421 output: 21 explanation: product of digits = 4 * 4 * 2 * 1 = 32 sum of digits = 4 + 4 + 2 + 1 = 11 result = 32 - 11 = 21 constraints: 1 <= n <= 10^5
have information about n different recipes. you are given a string array recipes and a 2d string array ingredients. the ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes. you are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them. return a list of all the recipes that you can create. you may return the answer in any order. note that two recipes may contain each other in their ingredients. example 1: input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"] output: ["bread"] explanation: we can create "bread" since we have the ingredients "yeast" and "flour". example 2: input: recipes = ["bread","sandwich"], ingredients = [["yeast","flour"],["bread","meat"]], supplies = ["yeast","flour","meat"] output: ["bread","sandwich"] explanation: we can create "bread" since we have the ingredients "yeast" and "flour". we can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread". example 3: input: recipes = ["bread","sandwich","burger"], ingredients = [["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]], supplies = ["yeast","flour","meat"] output: ["bread","sandwich","burger"] explanation: we can create "bread" since we have the ingredients "yeast" and "flour". we can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread". we can create "burger" since we have the ingredient "meat" and can create the ingredients "bread" and "sandwich". constraints: n == recipes.length == ingredients.length 1 <= n <= 100 1 <= ingredients[i].length, supplies.length <= 100 1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10 recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase english letters. all the values of recipes and supplies combined are unique. each ingredients[i] does not contain any duplicate values.
is a biker going on a road trip. the road trip consists of n + 1 points at different altitudes. the biker starts his trip on point 0 with altitude equal 0. you are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). return the highest altitude of a point. example 1: input: gain = [-5,1,5,0,-7] output: 1 explanation: the altitudes are [0,-5,-4,1,1,-6]. the highest is 1. example 2: input: gain = [-4,-3,-2,-1,4,3,2] output: 0 explanation: the altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. the highest is 0. constraints: n == gain.length 1 <= n <= 100 -100 <= gain[i] <= 100
an integer array arr and a mapping function fn, return a new array with a transformation applied to each element. the returned array should be created such that returnedarray[i] = fn(arr[i], i). please solve it without the built-in array.map method. example 1: input: arr = [1,2,3], fn = function plusone(n) { return n + 1; } output: [2,3,4] explanation: const newarray = map(arr, plusone); // [2,3,4] the function increases each value in the array by one. example 2: input: arr = [1,2,3], fn = function plusi(n, i) { return n + i; } output: [1,3,5] explanation: the function increases each value by the index it resides in. example 3: input: arr = [10,20,30], fn = function constant() { return 42; } output: [42,42,42] explanation: the function always returns 42. constraints: 0 <= arr.length <= 1000 -109 <= arr[i] <= 109 fn returns a number
a positive integer num, split it into two non-negative integers num1 and num2 such that: the concatenation of num1 and num2 is a permutation of num. in other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num. num1 and num2 can contain leading zeros. return the minimum possible sum of num1 and num2. notes: it is guaranteed that num does not contain any leading zeros. the order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num. example 1: input: num = 4325 output: 59 explanation: we can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. we can prove that 59 is indeed the minimal possible sum. example 2: input: num = 687 output: 75 explanation: we can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75. constraints: 10 <= num <= 109
are given an array of integers stones where stones[i] is the weight of the ith stone. we are playing a game with the stones. on each turn, we choose the heaviest two stones and smash them together. suppose the heaviest two stones have weights x and y with x <= y. the result of this smash is: if x == y, both stones are destroyed, and if x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. at the end of the game, there is at most one stone left. return the weight of the last remaining stone. if there are no stones left, return 0. example 1: input: stones = [2,7,4,1,8,1] output: 1 explanation: we combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone. example 2: input: stones = [1] output: 1 constraints: 1 <= stones.length <= 30 1 <= stones[i] <= 1000
an integer array arr and an integer k, modify the array by repeating it k times. for example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2]. return the maximum sub-array sum in the modified array. note that the length of the sub-array can be 0 and its sum in that case is 0. as the answer can be very large, return the answer modulo 109 + 7. example 1: input: arr = [1,2], k = 3 output: 9 example 2: input: arr = [1,-2,1], k = 5 output: 2 example 3: input: arr = [-1,-2], k = 7 output: 0 constraints: 1 <= arr.length <= 105 1 <= k <= 105 -104 <= arr[i] <= 104
given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. each character in stones is a type of stone you have. you want to know how many of the stones you have are also jewels. letters are case sensitive, so "a" is considered a different type of stone from "a". example 1: input: jewels = "aa", stones = "aaabbbb" output: 3 example 2: input: jewels = "z", stones = "zz" output: 0 constraints: 1 <= jewels.length, stones.length <= 50 jewels and stones consist of only english letters. all the characters of jewels are unique.
are given an integer array nums (0-indexed). in one operation, you can choose an element of the array and increment it by 1. for example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3]. return the minimum number of operations needed to make nums strictly increasing. an array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. an array of length 1 is trivially strictly increasing. example 1: input: nums = [1,1,1] output: 3 explanation: you can do the following operations: 1) increment nums[2], so nums becomes [1,1,2]. 2) increment nums[1], so nums becomes [1,2,2]. 3) increment nums[2], so nums becomes [1,2,3]. example 2: input: nums = [1,5,2,4,1] output: 14 example 3: input: nums = [8] output: 0 constraints: 1 <= nums.length <= 5000 1 <= nums[i] <= 104
a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row. in case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected. return an array containing the index of the row, and the number of ones in it. example 1: input: mat = [[0,1],[1,0]] output: [0,1] explanation: both rows have the same number of 1's. so we return the index of the smaller row, 0, and the maximum count of ones (1). so, the answer is [0,1]. example 2: input: mat = [[0,0,0],[0,1,1]] output: [1,2] explanation: the row indexed 1 has the maximum count of ones (2). so we return its index, 1, and the count. so, the answer is [1,2]. example 3: input: mat = [[0,0],[1,1],[0,0]] output: [1,2] explanation: the row indexed 1 has the maximum count of ones (2). so the answer is [1,2]. constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 mat[i][j] is either 0 or 1.
an integer n, return the smallest prime palindrome greater than or equal to n. an integer is prime if it has exactly two divisors: 1 and itself. note that 1 is not a prime number. for example, 2, 3, 5, 7, 11, and 13 are all primes. an integer is a palindrome if it reads the same from left to right as it does from right to left. for example, 101 and 12321 are palindromes. the test cases are generated so that the answer always exists and is in the range [2, 2 * 108]. example 1: input: n = 6 output: 7 example 2: input: n = 8 output: 11 example 3: input: n = 13 output: 101 constraints: 1 <= n <= 108
this is a companion problem to the system design problem: design tinyurl. tinyurl is a url shortening service where you enter a url such as https://leetcode.com/problems/design-tinyurl and it returns a short url such as http://tinyurl.com/4e9iak. design a class to encode a url and decode a tiny url. there is no restriction on how your encode/decode algorithm should work. you just need to ensure that a url can be encoded to a tiny url and the tiny url can be decoded to the original url. implement the solution class: solution() initializes the object of the system. string encode(string longurl) returns a tiny url for the given longurl. string decode(string shorturl) returns the original long url for the given shorturl. it is guaranteed that the given shorturl was encoded by the same object. example 1: input: url = "https://leetcode.com/problems/design-tinyurl" output: "https://leetcode.com/problems/design-tinyurl" explanation: solution obj = new solution(); string tiny = obj.encode(url); // returns the encoded tiny url. string ans = obj.decode(tiny); // returns the original url after decoding it. constraints: 1 <= url.length <= 104 url is guranteed to be a valid url.
happy string is a string that: consists only of letters of the set ['a', 'b', 'c']. s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed). for example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings. given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order. return the kth string of this list or return an empty string if there are less than k happy strings of length n. example 1: input: n = 1, k = 3 output: "c" explanation: the list ["a", "b", "c"] contains all happy strings of length 1. the third string is "c". example 2: input: n = 1, k = 4 output: "" explanation: there are only 3 happy strings of length 1. example 3: input: n = 3, k = 9 output: "cab" explanation: there are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. you will find the 9th string = "cab" constraints: 1 <= n <= 10 1 <= k <= 100
are given an integer array nums and an array queries where queries[i] = [vali, indexi]. for each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums. return an integer array answer where answer[i] is the answer to the ith query. example 1: input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]] output: [8,6,2,4] explanation: at the beginning, the array is [1,2,3,4]. after adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8. after adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6. after adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2. after adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4. example 2: input: nums = [1], queries = [[4,0]] output: [0] constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 1 <= queries.length <= 104 -104 <= vali <= 104 0 <= indexi < nums.length
an array arr of positive integers sorted in a strictly increasing order, and an integer k. return the kth positive integer that is missing from this array. example 1: input: arr = [2,3,4,7,11], k = 5 output: 9 explanation: the missing positive integers are [1,5,6,8,9,10,12,13,...]. the 5th missing positive integer is 9. example 2: input: arr = [1,2,3,4], k = 2 output: 6 explanation: the missing positive integers are [5,6,7,...]. the 2nd missing positive integer is 6. constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 1000 1 <= k <= 1000 arr[i] < arr[j] for 1 <= i < j <= arr.length follow up: could you solve this problem in less than o(n) complexity?
two numbers arr1 and arr2 in base -2, return the result of adding them together. each number is given in array format: as an array of 0s and 1s, from most significant bit to least significant bit. for example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3. a number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1. return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros. example 1: input: arr1 = [1,1,1,1,1], arr2 = [1,0,1] output: [1,0,0,0,0] explanation: arr1 represents 11, arr2 represents 5, the output represents 16. example 2: input: arr1 = [0], arr2 = [0] output: [0] example 3: input: arr1 = [0], arr2 = [1] output: [1] constraints: 1 <= arr1.length, arr2.length <= 1000 arr1[i] and arr2[i] are 0 or 1 arr1 and arr2 have no leading zeros
are 3n piles of coins of varying size, you and your friends will take piles of coins as follows: in each step, you will choose any 3 piles of coins (not necessarily consecutive). of your choice, alice will pick the pile with the maximum number of coins. you will pick the next pile with the maximum number of coins. your friend bob will pick the last pile. repeat until there are no more piles of coins. given an array of integers piles where piles[i] is the number of coins in the ith pile. return the maximum number of coins that you can have. example 1: input: piles = [2,4,1,2,7,8] output: 9 explanation: choose the triplet (2, 7, 8), alice pick the pile with 8 coins, you the pile with 7 coins and bob the last one. choose the triplet (1, 2, 4), alice pick the pile with 4 coins, you the pile with 2 coins and bob the last one. the maximum number of coins which you can have are: 7 + 2 = 9. on the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal. example 2: input: piles = [2,4,5] output: 4 example 3: input: piles = [9,8,7,6,5,1,2,3,4] output: 18 constraints: 3 <= piles.length <= 105 piles.length % 3 == 0 1 <= piles[i] <= 104
are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. in each round, you can complete either 2 or 3 tasks of the same difficulty level. return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks. example 1: input: tasks = [2,2,3,3,2,4,4,4,4,4] output: 4 explanation: to complete all the tasks, a possible plan is: - in the first round, you complete 3 tasks of difficulty level 2. - in the second round, you complete 2 tasks of difficulty level 3. - in the third round, you complete 3 tasks of difficulty level 4. - in the fourth round, you complete 2 tasks of difficulty level 4. it can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4. example 2: input: tasks = [2,3,3] output: -1 explanation: there is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. hence, you cannot complete all the tasks, and the answer is -1. constraints: 1 <= tasks.length <= 105 1 <= tasks[i] <= 109
are some stones in different positions on the x-axis. you are given an integer array stones, the positions of the stones. call a stone an endpoint stone if it has the smallest or largest position. in one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone. in particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone. the game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play. example 1: input: stones = [7,4,9] output: [1,2] explanation: we can move 4 -> 8 for one move to finish the game. or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game. example 2: input: stones = [6,5,4,3,10] output: [2,3] explanation: we can move 3 -> 8 then 10 -> 7 to finish the game. or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game. notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move. constraints: 3 <= stones.length <= 104 1 <= stones[i] <= 109 all the values of stones are unique.
a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area. example 1: input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]] output: 6 explanation: the maximal rectangle is shown in the above picture. example 2: input: matrix = [["0"]] output: 0 example 3: input: matrix = [["1"]] output: 1 constraints: rows == matrix.length cols == matrix[i].length 1 <= row, cols <= 200 matrix[i][j] is '0' or '1'.
a string s of lower and upper case english letters. a good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where: 0 <= i <= s.length - 2 s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa. to make the string good, you can choose two adjacent characters that make the string bad and remove them. you can keep doing this until the string becomes good. return the string after making it good. the answer is guaranteed to be unique under the given constraints. notice that an empty string is also good. example 1: input: s = "leeeetcode" output: "leetcode" explanation: in the first step, either you choose i = 1 or i = 2, both will result "leeeetcode" to be reduced to "leetcode". example 2: input: s = "abbacc" output: "" explanation: we have many possible scenarios, and all lead to the same answer. for example: "abbacc" --> "aacc" --> "cc" --> "" "abbacc" --> "abba" --> "aa" --> "" example 3: input: s = "s" output: "s" constraints: 1 <= s.length <= 100 s contains only lower and upper case english letters.
are n flights that are labeled from 1 to n. you are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range. return an array answer of length n, where answer[i] is the total number of seats reserved for flight i. example 1: input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 output: [10,55,45,25,25] explanation: flight labels: 1 2 3 4 5 booking 1 reserved: 10 10 booking 2 reserved: 20 20 booking 3 reserved: 25 25 25 25 total seats: 10 55 45 25 25 hence, answer = [10,55,45,25,25] example 2: input: bookings = [[1,2,10],[2,2,15]], n = 2 output: [10,25] explanation: flight labels: 1 2 booking 1 reserved: 10 10 booking 2 reserved: 15 total seats: 10 25 hence, answer = [10,25] constraints: 1 <= n <= 2 * 104 1 <= bookings.length <= 2 * 104 bookings[i].length == 3 1 <= firsti <= lasti <= n 1 <= seatsi <= 104
an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them. a grid is said to be valid if all the cells above the main diagonal are zeros. return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid. the main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n). example 1: input: grid = [[0,0,1],[1,1,0],[1,0,0]] output: 3 example 2: input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]] output: -1 explanation: all rows are similar, swaps have no effect on the grid. example 3: input: grid = [[1,0,0],[1,1,0],[1,1,1]] output: 0 constraints: n == grid.length == grid[i].length 1 <= n <= 200 grid[i][j] is either 0 or 1
an array nums. we define a running sum of an array as runningsum[i] = sum(nums[0]â€¦nums[i]). return the running sum of nums. example 1: input: nums = [1,2,3,4] output: [1,3,6,10] explanation: running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]. example 2: input: nums = [1,1,1,1,1] output: [1,2,3,4,5] explanation: running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]. example 3: input: nums = [3,1,2,10,1] output: [3,4,6,16,17] constraints: 1 <= nums.length <= 1000 -10^6 <= nums[i] <= 10^6
schema table: activity +--------------+---------+ | column name | type | +--------------+---------+ | player_id | int | | device_id | int | | event_date | date | | games_played | int | +--------------+---------+ (player_id, event_date) is the primary key of this table. this table shows the activity of players of some games. each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device. write an sql query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. in other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players. the query result format is in the following example. example 1: input: activity table: +-----------+-----------+------------+--------------+ | player_id | device_id | event_date | games_played | +-----------+-----------+------------+--------------+ | 1 | 2 | 2016-03-01 | 5 | | 1 | 2 | 2016-03-02 | 6 | | 2 | 3 | 2017-06-25 | 1 | | 3 | 1 | 2016-03-02 | 0 | | 3 | 4 | 2018-07-03 | 5 | +-----------+-----------+------------+--------------+ output: +-----------+ | fraction | +-----------+ | 0.33 | +-----------+ explanation: only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33
schema table activities: +-------------+---------+ | column name | type | +-------------+---------+ | sell_date | date | | product | varchar | +-------------+---------+ there is no primary key for this table, it may contain duplicates. each row of this table contains the product name and the date it was sold in a market. write an sql query to find for each date the number of different products sold and their names. the sold products names for each date should be sorted lexicographically. return the result table ordered by sell_date. the query result format is in the following example. example 1: input: activities table: +------------+------------+ | sell_date | product | +------------+------------+ | 2020-05-30 | headphone | | 2020-06-01 | pencil | | 2020-06-02 | mask | | 2020-05-30 | basketball | | 2020-06-01 | bible | | 2020-06-02 | mask | | 2020-05-30 | t-shirt | +------------+------------+ output: +------------+----------+------------------------------+ | sell_date | num_sold | products | +------------+----------+------------------------------+ | 2020-05-30 | 3 | basketball,headphone,t-shirt | | 2020-06-01 | 2 | bible,pencil | | 2020-06-02 | 1 | mask | +------------+----------+------------------------------+ explanation: for 2020-05-30, sold items were (headphone, basketball, t-shirt), we sort them lexicographically and separate them by a comma. for 2020-06-01, sold items were (pencil, bible), we sort them lexicographically and separate them by a comma. for 2020-06-02, the sold item is (mask), we just return it.
have two types of tiles: a 2 x 1 domino shape and a tromino shape. you may rotate these shapes. given an integer n, return the number of ways to tile an 2 x n board. since the answer may be very large, return it modulo 109 + 7. in a tiling, every square must be covered by a tile. two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile. example 1: input: n = 3 output: 5 explanation: the five different ways are show above. example 2: input: n = 1 output: 1 constraints: 1 <= n <= 1000
a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array. return the minimum number of patches required. example 1: input: nums = [1,3], n = 6 output: 1 explanation: combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. so we only need 1 patch. example 2: input: nums = [1,5,10], n = 20 output: 2 explanation: the two patches can be [2, 4]. example 3: input: nums = [1,2,2], n = 5 output: 0 constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 nums is sorted in ascending order. 1 <= n <= 231 - 1
letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.). the numerical value of some string of lowercase english letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer. for example, if s = "acb", we concatenate each letter's letter value, resulting in "021". after converting it, we get 21. you are given three strings firstword, secondword, and targetword, each consisting of lowercase english letters 'a' through 'j' inclusive. return true if the summation of the numerical values of firstword and secondword equals the numerical value of targetword, or false otherwise. example 1: input: firstword = "acb", secondword = "cba", targetword = "cdb" output: true explanation: the numerical value of firstword is "acb" -> "021" -> 21. the numerical value of secondword is "cba" -> "210" -> 210. the numerical value of targetword is "cdb" -> "231" -> 231. we return true because 21 + 210 == 231. example 2: input: firstword = "aaa", secondword = "a", targetword = "aab" output: false explanation: the numerical value of firstword is "aaa" -> "000" -> 0. the numerical value of secondword is "a" -> "0" -> 0. the numerical value of targetword is "aab" -> "001" -> 1. we return false because 0 + 0 != 1. example 3: input: firstword = "aaa", secondword = "a", targetword = "aaaa" output: true explanation: the numerical value of firstword is "aaa" -> "000" -> 0. the numerical value of secondword is "a" -> "0" -> 0. the numerical value of targetword is "aaaa" -> "0000" -> 0. we return true because 0 + 0 == 0. constraints: 1 <= firstword.length, secondword.length, targetword.length <= 8 firstword, secondword, and targetword consist of lowercase english letters from 'a' to 'j' inclusive.
have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. the ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. both starti and endi are 0-indexed. return the maximum total sum of all requests among all permutations of nums. since the answer may be too large, return it modulo 109 + 7. example 1: input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]] output: 19 explanation: one permutation of nums is [2,1,3,4,5] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8 requests[1] -> nums[0] + nums[1] = 2 + 1 = 3 total sum: 8 + 3 = 11. a permutation with a higher total sum is [3,5,4,2,1] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11 requests[1] -> nums[0] + nums[1] = 3 + 5 = 8 total sum: 11 + 8 = 19, which is the best that you can do. example 2: input: nums = [1,2,3,4,5,6], requests = [[0,1]] output: 11 explanation: a permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]. example 3: input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]] output: 47 explanation: a permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]. constraints: n == nums.length 1 <= n <= 105 0 <= nums[i] <= 105 1 <= requests.length <= 105 requests[i].length == 2 0 <= starti <= endi < n
is a tournament where n players are participating. the players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.). the tournament consists of multiple rounds (starting from round number 1). in each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. when the number of players is odd for the current round, the player in the middle automatically advances to the next round. for example, if the row consists of players 1, 2, 4, 6, 7 player 1 competes against player 7. player 2 competes against player 6. player 4 automatically advances to the next round. after each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order). the players numbered firstplayer and secondplayer are the best in the tournament. they can win against any other player before they compete against each other. if any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round. given the integers n, firstplayer, and secondplayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively. example 1: input: n = 11, firstplayer = 2, secondplayer = 4 output: [3,4] explanation: one possible scenario which leads to the earliest round number: first round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 second round: 2, 3, 4, 5, 6, 11 third round: 2, 3, 4 one possible scenario which leads to the latest round number: first round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 second round: 1, 2, 3, 4, 5, 6 third round: 1, 2, 4 fourth round: 2, 4 example 2: input: n = 5, firstplayer = 1, secondplayer = 5 output: [1,1] explanation: the players numbered 1 and 5 compete in the first round. there is no way to make them compete in any other round. constraints: 2 <= n <= 28 1 <= firstplayer < secondplayer <= n
leetcode store, there are n items to sell. each item has a price. however, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. you are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy. you are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer. return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. you are not allowed to buy more items than you want, even if that would lower the overall price. you could use any of the special offers as many times as you want. example 1: input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2] output: 14 explanation: there are two kinds of items, a and b. their prices are $2 and $5 respectively. in special offer 1, you can pay $5 for 3a and 0b in special offer 2, you can pay $10 for 1a and 2b. you need to buy 3a and 2b, so you may pay $10 for 1a and 2b (special offer #2), and $4 for 2a. example 2: input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1] output: 11 explanation: the price of a is $2, and $3 for b, $4 for c. you may pay $4 for 1a and 1b, and $9 for 2a ,2b and 1c. you need to buy 1a ,2b and 1c, so you may pay $4 for 1a and 1b (special offer #1), and $3 for 1b, $4 for 1c. you cannot add more items, though only $9 for 2a ,2b and 1c. constraints: n == price.length == needs.length 1 <= n <= 6 0 <= price[i], needs[i] <= 10 1 <= special.length <= 100 special[i].length == n + 1 0 <= special[i][j] <= 50
are given a string num representing a large integer. an integer is good if it meets the following conditions: it is a substring of num with length 3. it consists of only one unique digit. return the maximum good integer as a string or an empty string "" if no such integer exists. note: a substring is a contiguous sequence of characters within a string. there may be leading zeroes in num or a good integer. example 1: input: num = "6777133339" output: "777" explanation: there are two distinct good integers: "777" and "333". "777" is the largest, so we return "777". example 2: input: num = "2300019" output: "000" explanation: "000" is the only good integer. example 3: input: num = "42352338" output: "" explanation: no substring of length 3 consists of only one unique digit. therefore, there are no good integers. constraints: 3 <= num.length <= 1000 num only consists of digits.
a 0-indexed integer array nums, find a 0-indexed integer array answer where: answer.length == nums.length. answer[i] = |leftsum[i] - rightsum[i]|. where: leftsum[i] is the sum of elements to the left of the index i in the array nums. if there is no such element, leftsum[i] = 0. rightsum[i] is the sum of elements to the right of the index i in the array nums. if there is no such element, rightsum[i] = 0. return the array answer. example 1: input: nums = [10,4,8,3] output: [15,1,11,22] explanation: the array leftsum is [0,10,14,22] and the array rightsum is [15,11,3,0]. the array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22]. example 2: input: nums = [1] output: [0] explanation: the array leftsum is [0] and the array rightsum is [0]. the array answer is [|0 - 0|] = [0]. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 105
are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. note that no word is both positive and negative. initially every student has 0 points. each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1. you are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the id of the student who has received the feedback report report[i]. the id of each student is unique. given an integer k, return the top k students after ranking them in non-increasing order by their points. in case more than one student has the same points, the one with the lower id ranks higher. example 1: input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is studious","the student is smart"], student_id = [1,2], k = 2 output: [1,2] explanation: both the students have 1 positive feedback and 3 points but since student 1 has a lower id he ranks higher. example 2: input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is not studious","the student is smart"], student_id = [1,2], k = 2 output: [2,1] explanation: - the student with id 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. - the student with id 2 has 1 positive feedback, so he has 3 points. since student 2 has more points, [2,1] is returned. constraints: 1 <= positive_feedback.length, negative_feedback.length <= 104 1 <= positive_feedback[i].length, negative_feedback[j].length <= 100 both positive_feedback[i] and negative_feedback[j] consists of lowercase english letters. no word is present in both positive_feedback and negative_feedback. n == report.length == student_id.length 1 <= n <= 104 report[i] consists of lowercase english letters and spaces ' '. there is a single space between consecutive words of report[i]. 1 <= report[i].length <= 100 1 <= student_id[i] <= 109 all the values of student_id[i] are unique. 1 <= k <= n
have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity. implement the dinnerplates class: dinnerplates(int capacity) initializes the object with the maximum capacity of the stacks capacity. void push(int val) pushes the given integer val into the leftmost stack with a size less than capacity. int pop() returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty. int popatstack(int index) returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty. example 1: input ["dinnerplates", "push", "push", "push", "push", "push", "popatstack", "push", "push", "popatstack", "popatstack", "pop", "pop", "pop", "pop", "pop"] [[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []] output [null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1] explanation: dinnerplates d = dinnerplates(2); // initialize with capacity = 2 d.push(1); d.push(2); d.push(3); d.push(4); d.push(5); // the stacks are now: 2 4 1 3 5 ﹈ ﹈ ﹈ d.popatstack(0); // returns 2. the stacks are now: 4 1 3 5 ﹈ ﹈ ﹈ d.push(20); // the stacks are now: 20 4 1 3 5 ﹈ ﹈ ﹈ d.push(21); // the stacks are now: 20 4 21 1 3 5 ﹈ ﹈ ﹈ d.popatstack(0); // returns 20. the stacks are now: 4 21 1 3 5 ﹈ ﹈ ﹈ d.popatstack(2); // returns 21. the stacks are now: 4 1 3 5 ﹈ ﹈ ﹈ d.pop() // returns 5. the stacks are now: 4 1 3 ﹈ ﹈ d.pop() // returns 4. the stacks are now: 1 3 ﹈ ﹈ d.pop() // returns 3. the stacks are now: 1 ﹈ d.pop() // returns 1. there are no stacks. d.pop() // returns -1. there are still no stacks. constraints: 1 <= capacity <= 2 * 104 1 <= val <= 2 * 104 0 <= index <= 105 at most 2 * 105 calls will be made to push, pop, and popatstack.
have a bomb to defuse, and your time is running out! your informer will provide you with a circular array code of length of n and a key k. to decrypt the code, you must replace every number. all the numbers are replaced simultaneously. if k > 0, replace the ith number with the sum of the next k numbers. if k < 0, replace the ith number with the sum of the previous k numbers. if k == 0, replace the ith number with 0. as code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1]. given the circular array code and an integer key k, return the decrypted code to defuse the bomb! example 1: input: code = [5,7,1,4], k = 3 output: [12,10,16,13] explanation: each number is replaced by the sum of the next 3 numbers. the decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. notice that the numbers wrap around. example 2: input: code = [1,2,3,4], k = 0 output: [0,0,0,0] explanation: when k is zero, the numbers are replaced by 0. example 3: input: code = [2,4,9,3], k = -2 output: [12,5,6,13] explanation: the decrypted code is [3+9, 2+3, 4+2, 9+4]. notice that the numbers wrap around again. if k is negative, the sum is of the previous numbers. constraints: n == code.length 1 <= n <= 100 1 <= code[i] <= 100 -(n - 1) <= k <= n - 1
a square matrix mat, return the sum of the matrix diagonals. only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal. example 1: input: mat = [[1,2,3], [4,5,6], [7,8,9]] output: 25 explanation: diagonals sum: 1 + 5 + 9 + 3 + 7 = 25 notice that element mat[1][1] = 5 is counted only once. example 2: input: mat = [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]] output: 8 example 3: input: mat = [[5]] output: 5 constraints: n == mat.length == mat[i].length 1 <= n <= 100 1 <= mat[i][j] <= 100
an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7. example 1: input: n = 1 output: 1 explanation: "1" in binary corresponds to the decimal value 1. example 2: input: n = 3 output: 27 explanation: in binary, 1, 2, and 3 corresponds to "1", "10", and "11". after concatenating them, we have "11011", which corresponds to the decimal value 27. example 3: input: n = 12 output: 505379714 explanation: the concatenation results in "1101110010111011110001001101010111100". the decimal value of that is 118505380540. after modulo 109 + 7, the result is 505379714. constraints: 1 <= n <= 105
are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. you can move in this matrix from a cell to any other cell in the next row. that is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). note that it is not possible to move from cells in the last row. each possible move has a cost given by a 0-indexed 2d array movecost of size (m * n) x n, where movecost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. the cost of moving from cells in the last row of grid can be ignored. the cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row. example 1: input: grid = [[5,3],[4,0],[2,1]], movecost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]] output: 17 explanation: the path with the minimum possible cost is the path 5 -> 0 -> 1. - the sum of the values of cells visited is 5 + 0 + 1 = 6. - the cost of moving from 5 to 0 is 3. - the cost of moving from 0 to 1 is 8. so the total cost of the path is 6 + 3 + 8 = 17. example 2: input: grid = [[5,1,2],[4,0,3]], movecost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]] output: 6 explanation: the path with the minimum possible cost is the path 2 -> 3. - the sum of the values of cells visited is 2 + 3 = 5. - the cost of moving from 2 to 3 is 1. so the total cost of this path is 5 + 1 = 6. constraints: m == grid.length n == grid[i].length 2 <= m, n <= 50 grid consists of distinct integers from 0 to m * n - 1. movecost.length == m * n movecost[i].length == n 1 <= movecost[i][j] <= 100
a 2d grid consists of 0s (land) and 1s (water). an island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s. return the number of closed islands. example 1: input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]] output: 2 explanation: islands in gray are closed because they are completely surrounded by water (group of 1s). example 2: input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]] output: 1 example 3: input: grid = [[1,1,1,1,1,1,1], [1,0,0,0,0,0,1], [1,0,1,1,1,0,1], [1,0,1,0,1,0,1], [1,0,1,1,1,0,1], [1,0,0,0,0,0,1], [1,1,1,1,1,1,1]] output: 2 constraints: 1 <= grid.length, grid[0].length <= 100 0 <= grid[i][j] <=1
are n dominoes in a line, and we place each domino vertically upright. in the beginning, we simultaneously push some of the dominoes either to the left or to the right. after each second, each domino that is falling to the left pushes the adjacent domino on the left. similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. when a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. for the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. you are given a string dominoes representing the initial state where: dominoes[i] = 'l', if the ith domino has been pushed to the left, dominoes[i] = 'r', if the ith domino has been pushed to the right, and dominoes[i] = '.', if the ith domino has not been pushed. return a string representing the final state. example 1: input: dominoes = "rr.l" output: "rr.l" explanation: the first domino expends no additional force on the second domino. example 2: input: dominoes = ".l.r...lr..l.." output: "ll.rr.llrrll.." constraints: n == dominoes.length 1 <= n <= 105 dominoes[i] is either 'l', 'r', or '.'.
two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree. if there exist multiple answers, you can return any of them. example 1: input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1] output: [1,2,3,4,5,6,7] example 2: input: preorder = [1], postorder = [1] output: [1] constraints: 1 <= preorder.length <= 30 1 <= preorder[i] <= preorder.length all the values of preorder are unique. postorder.length == preorder.length 1 <= postorder[i] <= postorder.length all the values of postorder are unique. it is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.
string s is called happy if it satisfies the following conditions: s only contains the letters 'a', 'b', and 'c'. s does not contain any of "aaa", "bbb", or "ccc" as a substring. s contains at most a occurrences of the letter 'a'. s contains at most b occurrences of the letter 'b'. s contains at most c occurrences of the letter 'c'. given three integers a, b, and c, return the longest possible happy string. if there are multiple longest happy strings, return any of them. if there is no such string, return the empty string "". a substring is a contiguous sequence of characters within a string. example 1: input: a = 1, b = 1, c = 7 output: "ccaccbcc" explanation: "ccbccacc" would also be a correct answer. example 2: input: a = 7, b = 1, c = 0 output: "aabaa" explanation: it is the only correct answer in this case. constraints: 0 <= a, b, c <= 100 a + b + c > 0
are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits. you are also given a 0-indexed 2d integer array queries where queries[i] = [ki, trimi]. for each queries[i], you need to: trim each number in nums to its rightmost trimi digits. determine the index of the kith smallest trimmed number in nums. if two trimmed numbers are equal, the number with the lower index is considered to be smaller. reset each number in nums to its original length. return an array answer of the same length as queries, where answer[i] is the answer to the ith query. note: to trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain. strings in nums may contain leading zeros. example 1: input: nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]] output: [2,2,1,0] explanation: 1. after trimming to the last digit, nums = ["2","3","1","4"]. the smallest number is 1 at index 2. 2. trimmed to the last 3 digits, nums is unchanged. the 2nd smallest number is 251 at index 2. 3. trimmed to the last 2 digits, nums = ["02","73","51","14"]. the 4th smallest number is 73. 4. trimmed to the last 2 digits, the smallest number is 2 at index 0. note that the trimmed number "02" is evaluated as 2. example 2: input: nums = ["24","37","96","04"], queries = [[2,1],[2,2]] output: [3,0] explanation: 1. trimmed to the last digit, nums = ["4","7","6","4"]. the 2nd smallest number is 4 at index 3. there are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3. 2. trimmed to the last 2 digits, nums is unchanged. the 2nd smallest number is 24. constraints: 1 <= nums.length <= 100 1 <= nums[i].length <= 100 nums[i] consists of only digits. all nums[i].length are equal. 1 <= queries.length <= 100 queries[i].length == 2 1 <= ki <= nums.length 1 <= trimi <= nums[i].length follow up: could you use the radix sort algorithm to solve this problem? what will be the complexity of that solution?
are given a character array keys containing unique characters and a string array values containing strings of length 2. you are also given another string array dictionary that contains all permitted original strings after decryption. you should implement a data structure that can encrypt or decrypt a 0-indexed string. a string is encrypted with the following process: for each character c in the string, we find the index i satisfying keys[i] == c in keys. replace c with values[i] in the string. note that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string "" is returned. a string is decrypted with the following process: for each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. if there are multiple valid i, we choose any one of them. this means a string could have multiple possible strings it can decrypt to. replace s with keys[i] in the string. implement the encrypter class: encrypter(char[] keys, string[] values, string[] dictionary) initializes the encrypter class with keys, values, and dictionary. string encrypt(string word1) encrypts word1 with the encryption process described above and returns the encrypted string. int decrypt(string word2) returns the number of possible strings word2 could decrypt to that also appear in dictionary. example 1: input ["encrypter", "encrypt", "decrypt"] [[['a', 'b', 'c', 'd'], ["ei", "zf", "ei", "am"], ["abcd", "acbd", "adbc", "badc", "dacb", "cadb", "cbda", "abad"]], ["abcd"], ["eizfeiam"]] output [null, "eizfeiam", 2] explanation encrypter encrypter = new encrypter([['a', 'b', 'c', 'd'], ["ei", "zf", "ei", "am"], ["abcd", "acbd", "adbc", "badc", "dacb", "cadb", "cbda", "abad"]); encrypter.encrypt("abcd"); // return "eizfeiam". // 'a' maps to "ei", 'b' maps to "zf", 'c' maps to "ei", and 'd' maps to "am". encrypter.decrypt("eizfeiam"); // return 2. // "ei" can map to 'a' or 'c', "zf" maps to 'b', and "am" maps to 'd'. // thus, the possible strings after decryption are "abad", "cbad", "abcd", and "cbcd". // 2 of those strings, "abad" and "abcd", appear in dictionary, so the answer is 2. constraints: 1 <= keys.length == values.length <= 26 values[i].length == 2 1 <= dictionary.length <= 100 1 <= dictionary[i].length <= 100 all keys[i] and dictionary[i] are unique. 1 <= word1.length <= 2000 1 <= word2.length <= 200 all word1[i] appear in keys. word2.length is even. keys, values[i], dictionary[i], word1, and word2 only contain lowercase english letters. at most 200 calls will be made to encrypt and decrypt in total.
an integer array nums and an integer k, modify the array in the following way: choose an index i and replace nums[i] with -nums[i]. you should apply this process exactly k times. you may choose the same index i multiple times. return the largest possible sum of the array after modifying it in this way. example 1: input: nums = [4,2,3], k = 1 output: 5 explanation: choose index 1 and nums becomes [4,-2,3]. example 2: input: nums = [3,-1,0,2], k = 3 output: 6 explanation: choose indices (1, 2, 2) and nums becomes [3,1,0,2]. example 3: input: nums = [2,-3,-1,5,-4], k = 2 output: 13 explanation: choose indices (1, 4) and nums becomes [2,3,-1,5,4]. constraints: 1 <= nums.length <= 104 -100 <= nums[i] <= 100 1 <= k <= 104
a string path, where path[i] = 'n', 's', 'e' or 'w', each representing moving one unit north, south, east, or west, respectively. you start at the origin (0, 0) on a 2d plane and walk on the path specified by path. return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. return false otherwise. example 1: input: path = "nes" output: false explanation: notice that the path doesn't cross any point more than once. example 2: input: path = "nesww" output: true explanation: notice that the path visits the origin twice. constraints: 1 <= path.length <= 104 path[i] is either 'n', 's', 'e', or 'w'.
and bob continue their games with piles of stones. there are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. the objective of the game is to end with the most stones. alice and bob take turns, with alice starting first. initially, m = 1. on each player's turn, that player can take all the stones in the first x remaining piles, where 1 <= x <= 2m. then, we set m = max(m, x). the game continues until all the stones have been taken. assuming alice and bob play optimally, return the maximum number of stones alice can get. example 1: input: piles = [2,7,9,4,4] output: 10 explanation: if alice takes one pile at the beginning, bob takes two piles, then alice takes 2 piles again. alice can get 2 + 4 + 4 = 10 piles in total. if alice takes two piles at the beginning, then bob can take all three piles left. in this case, alice get 2 + 7 = 9 piles in total. so we return 10 since it's larger. example 2: input: piles = [1,2,3,4,5,100] output: 104 constraints: 1 <= piles.length <= 100 1 <= piles[i] <= 104
a parentheses string s containing only the characters '(' and ')'. a parentheses string is balanced if: any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'. left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'. in other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis. for example, "())", "())(())))" and "(())())))" are balanced, ")()", "()))" and "(()))" are not balanced. you can insert the characters '(' and ')' at any position of the string to balance it if needed. return the minimum number of insertions needed to make s balanced. example 1: input: s = "(()))" output: 1 explanation: the second '(' has two matching '))', but the first '(' has only ')' matching. we need to add one more ')' at the end of the string to be "(())))" which is balanced. example 2: input: s = "())" output: 0 explanation: the string is already balanced. example 3: input: s = "))())(" output: 3 explanation: add '(' to match the first '))', add '))' to match the last '('. constraints: 1 <= s.length <= 105 s consists of '(' and ')' only.
a palindromic string of lowercase english letters palindrome, replace exactly one character with any lowercase english letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. return the resulting string. if there is no way to replace a character to make it not a palindrome, return an empty string. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. for example, "abcc" is lexicographically smaller than "abcd" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'. example 1: input: palindrome = "abccba" output: "aaccba" explanation: there are many ways to make "abccba" not a palindrome, such as "zbccba", "aaccba", and "abacba". of all the ways, "aaccba" is the lexicographically smallest. example 2: input: palindrome = "a" output: "" explanation: there is no way to replace a single character to make "a" not a palindrome, so return an empty string. constraints: 1 <= palindrome.length <= 1000 palindrome consists of only lowercase english letters.
are given n bst (binary search tree) root nodes for n separate bsts stored in an array trees (0-indexed). each bst in trees has at most 3 nodes, and no two roots have the same value. in one operation, you can: select two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j]. replace the leaf node in trees[i] with trees[j]. remove trees[j] from trees. return the root of the resulting bst if it is possible to form a valid bst after performing n - 1 operations, or null if it is impossible to create a valid bst. a bst (binary search tree) is a binary tree where each node satisfies the following property: every node in the node's left subtree has a value strictly less than the node's value. every node in the node's right subtree has a value strictly greater than the node's value. a leaf is a node that has no children. example 1: input: trees = [[2,1],[3,2,5],[5,4]] output: [3,2,5,1,null,4] explanation: in the first operation, pick i=1 and j=0, and merge trees[0] into trees[1]. delete trees[0], so trees = [[3,2,5,1],[5,4]]. in the second operation, pick i=0 and j=1, and merge trees[1] into trees[0]. delete trees[1], so trees = [[3,2,5,1,null,4]]. the resulting tree, shown above, is a valid bst, so return its root. example 2: input: trees = [[5,3,8],[3,2,6]] output: [] explanation: pick i=0 and j=1 and merge trees[1] into trees[0]. delete trees[1], so trees = [[5,3,8,2,6]]. the resulting tree is shown above. this is the only valid operation that can be performed, but the resulting tree is not a valid bst, so return null. example 3: input: trees = [[5,4],[3]] output: [] explanation: it is impossible to perform any operations. constraints: n == trees.length 1 <= n <= 5 * 104 the number of nodes in each tree is in the range [1, 3]. each node in the input may have children but no grandchildren. no two roots of trees have the same value. all the trees in the input are valid bsts. 1 <= treenode.val <= 5 * 104.
are keeping the scores for a baseball game with strange rules. at the beginning of the game, you start with an empty record. you are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following: an integer x. record a new score of x. '+'. record a new score that is the sum of the previous two scores. 'd'. record a new score that is the double of the previous score. 'c'. invalidate the previous score, removing it from the record. return the sum of all the scores on the record after applying all the operations. the test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid. example 1: input: ops = ["5","2","c","d","+"] output: 30 explanation: "5" - add 5 to the record, record is now [5]. "2" - add 2 to the record, record is now [5, 2]. "c" - invalidate and remove the previous score, record is now [5]. "d" - add 2 * 5 = 10 to the record, record is now [5, 10]. "+" - add 5 + 10 = 15 to the record, record is now [5, 10, 15]. the total sum is 5 + 10 + 15 = 30. example 2: input: ops = ["5","-2","4","c","d","9","+","+"] output: 27 explanation: "5" - add 5 to the record, record is now [5]. "-2" - add -2 to the record, record is now [5, -2]. "4" - add 4 to the record, record is now [5, -2, 4]. "c" - invalidate and remove the previous score, record is now [5, -2]. "d" - add 2 * -2 = -4 to the record, record is now [5, -2, -4]. "9" - add 9 to the record, record is now [5, -2, -4, 9]. "+" - add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. "+" - add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. the total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. example 3: input: ops = ["1","c"] output: 0 explanation: "1" - add 1 to the record, record is now [1]. "c" - invalidate and remove the previous score, record is now []. since the record is empty, the total sum is 0. constraints: 1 <= operations.length <= 1000 operations[i] is "c", "d", "+", or a string representing an integer in the range [-3 * 104, 3 * 104]. for operation "+", there will always be at least two previous scores on the record. for operations "c" and "d", there will always be at least one previous score on the record.
matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. for example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2]. given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix. example 1: input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]] output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]] example 2: input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]] output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]] constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 1 <= mat[i][j] <= 100
scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. locations can be ranked from the best to the worst. the higher the score, the better the location. if the scores of two locations are equal, then the location with the lexicographically smaller name is better. you are building a system that tracks the ranking of locations with the system initially starting with no locations. it supports: adding scenic locations, one at a time. querying the ith best location of all locations already added, where i is the number of times the system has been queried (including the current query). for example, when the system is queried for the 4th time, it returns the 4th best location of all locations already added. note that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system. implement the sortracker class: sortracker() initializes the tracker system. void add(string name, int score) adds a scenic location with name and score to the system. string get() queries and returns the ith best location, where i is the number of times this method has been invoked (including this invocation). example 1: input ["sortracker", "add", "add", "get", "add", "get", "add", "get", "add", "get", "add", "get", "get"] [[], ["bradford", 2], ["branford", 3], [], ["alps", 2], [], ["orland", 2], [], ["orlando", 3], [], ["alpine", 2], [], []] output [null, null, null, "branford", null, "alps", null, "bradford", null, "bradford", null, "bradford", "orland"] explanation sortracker tracker = new sortracker(); // initialize the tracker system. tracker.add("bradford", 2); // add location with name="bradford" and score=2 to the system. tracker.add("branford", 3); // add location with name="branford" and score=3 to the system. tracker.get(); // the sorted locations, from best to worst, are: branford, bradford. // note that branford precedes bradford due to its higher score (3 > 2). // this is the 1st time get() is called, so return the best location: "branford". tracker.add("alps", 2); // add location with name="alps" and score=2 to the system. tracker.get(); // sorted locations: branford, alps, bradford. // note that alps precedes bradford even though they have the same score (2). // this is because "alps" is lexicographically smaller than "bradford". // return the 2nd best location "alps", as it is the 2nd time get() is called. tracker.add("orland", 2); // add location with name="orland" and score=2 to the system. tracker.get(); // sorted locations: branford, alps, bradford, orland. // return "bradford", as it is the 3rd time get() is called. tracker.add("orlando", 3); // add location with name="orlando" and score=3 to the system. tracker.get(); // sorted locations: branford, orlando, alps, bradford, orland. // return "bradford". tracker.add("alpine", 2); // add location with name="alpine" and score=2 to the system. tracker.get(); // sorted locations: branford, orlando, alpine, alps, bradford, orland. // return "bradford". tracker.get(); // sorted locations: branford, orlando, alpine, alps, bradford, orland. // return "orland". constraints: name consists of lowercase english letters, and is unique among all locations. 1 <= name.length <= 10 1 <= score <= 105 at any time, the number of calls to get does not exceed the number of calls to add. at most 4 * 104 calls in total will be made to add and get.
are given a positive integer primefactors. you are asked to construct a positive integer n that satisfies the following conditions: the number of prime factors of n (not necessarily distinct) is at most primefactors. the number of nice divisors of n is maximized. note that a divisor of n is nice if it is divisible by every prime factor of n. for example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not. return the number of nice divisors of n. since that number can be too large, return it modulo 109 + 7. note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. the prime factors of a number n is a list of prime numbers such that their product equals n. example 1: input: primefactors = 5 output: 6 explanation: 200 is a valid value of n. it has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200]. there is not other value of n that has at most 5 prime factors and more nice divisors. example 2: input: primefactors = 8 output: 18 constraints: 1 <= primefactors <= 109
a 0-indexed 8 x 8 chessboard, there can be multiple black queens ad one white king. you are given a 2d integer array queens where queens[i] = [xqueeni, yqueeni] represents the position of the ith black queen on the chessboard. you are also given an integer array king of length 2 where king = [xking, yking] represents the position of the white king. return the coordinates of the black queens that can directly attack the king. you may return the answer in any order. example 1: input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0] output: [[0,1],[1,0],[3,3]] explanation: the diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes). example 2: input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3] output: [[2,2],[3,4],[4,4]] explanation: the diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes). constraints: 1 <= queens.length < 64 queens[i].length == king.length == 2 0 <= xqueeni, yqueeni, xking, yking < 8 all the given positions are unique.
are given two binary trees root1 and root2. imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. you need to merge the two trees into a new binary tree. the merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. otherwise, the not null node will be used as the node of the new tree. return the merged tree. note: the merging process must start from the root nodes of both trees. example 1: input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7] output: [3,4,5,5,4,null,7] example 2: input: root1 = [1], root2 = [1,2] output: [2,2] constraints: the number of nodes in both trees is in the range [0, 2000]. -104 <= node.val <= 104
sentence is a list of words that are separated by a single space with no leading or trailing spaces. you are given an array of strings sentences, where each sentences[i] represents a single sentence. return the maximum number of words that appear in a single sentence. example 1: input: sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"] output: 6 explanation: - the first sentence, "alice and bob love leetcode", has 5 words in total. - the second sentence, "i think so too", has 4 words in total. - the third sentence, "this is great thanks very much", has 6 words in total. thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words. example 2: input: sentences = ["please wait", "continue to fight", "continue to win"] output: 3 explanation: it is possible that multiple sentences contain the same number of words. in this example, the second and third sentences (underlined) have the same number of words. constraints: 1 <= sentences.length <= 100 1 <= sentences[i].length <= 100 sentences[i] consists only of lowercase english letters and ' ' only. sentences[i] does not have leading or trailing spaces. all the words in sentences[i] are separated by a single space.
an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences. if after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0). example 1: input: nums = [2,2,1,1,5,3,3,5] output: 7 explanation: for the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice. example 2: input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5] output: 13 constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 105
schema table: views +---------------+---------+ | column name | type | +---------------+---------+ | article_id | int | | author_id | int | | viewer_id | int | | view_date | date | +---------------+---------+ there is no primary key for this table, it may have duplicate rows. each row of this table indicates that some viewer viewed an article (written by some author) on some date. note that equal author_id and viewer_id indicate the same person. write an sql query to find all the authors that viewed at least one of their own articles. return the result table sorted by id in ascending order. the query result format is in the following example. example 1: input: views table: +------------+-----------+-----------+------------+ | article_id | author_id | viewer_id | view_date | +------------+-----------+-----------+------------+ | 1 | 3 | 5 | 2019-08-01 | | 1 | 3 | 6 | 2019-08-02 | | 2 | 7 | 7 | 2019-08-01 | | 2 | 7 | 6 | 2019-08-02 | | 4 | 7 | 1 | 2019-07-22 | | 3 | 4 | 4 | 2019-07-21 | | 3 | 4 | 4 | 2019-07-21 | +------------+-----------+-----------+------------+ output: +------+ | id | +------+ | 4 | | 7 | +------+
is a robot starting at the position (0, 0), the origin, on a 2d plane. given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves. you are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. valid moves are 'r' (right), 'l' (left), 'u' (up), and 'd' (down). return true if the robot returns to the origin after it finishes all of its moves, or false otherwise. note: the way that the robot is "facing" is irrelevant. 'r' will always make the robot move to the right once, 'l' will always make it move left, etc. also, assume that the magnitude of the robot's movement is the same for each move. example 1: input: moves = "ud" output: true explanation: the robot moves up once, and then down once. all moves have the same magnitude, so it ended up at the origin where it started. therefore, we return true. example 2: input: moves = "ll" output: false explanation: the robot moves left twice. it ends up two "moves" to the left of the origin. we return false because it is not at the origin at the end of its moves. constraints: 1 <= moves.length <= 2 * 104 moves only contains the characters 'u', 'd', 'l' and 'r'.
an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k. example 1: input: nums = [10,5,2,6], k = 100 output: 8 explanation: the 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] note that [10, 5, 2] is not included as the product of 100 is not strictly less than k. example 2: input: nums = [1,2,3], k = 0 output: 0 constraints: 1 <= nums.length <= 3 * 104 1 <= nums[i] <= 1000 0 <= k <= 106
n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. example 1: input: height = [0,1,0,2,1,0,1,3,2,1,2,1] output: 6 explanation: the above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. in this case, 6 units of rain water (blue section) are being trapped. example 2: input: height = [4,2,0,3,2,5] output: 9 constraints: n == height.length 1 <= n <= 2 * 104 0 <= height[i] <= 105
are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. you are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. all bus departure times are unique. all passenger arrival times are unique. you are given an integer capacity, which represents the maximum number of passengers that can get on each bus. when a passenger arrives, they will wait in line for the next available bus. you can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. passengers with the earliest arrival times get on the bus first. more formally when a bus arrives, either: if capacity or fewer passengers are waiting for a bus, they will all get on the bus, or the capacity passengers with the earliest arrival times will get on the bus. return the latest time you may arrive at the bus station to catch a bus. you cannot arrive at the same time as another passenger. note: the arrays buses and passengers are not necessarily sorted. example 1: input: buses = [10,20], passengers = [2,17,18,19], capacity = 2 output: 16 explanation: suppose you arrive at time 16. at time 10, the first bus departs with the 0th passenger. at time 20, the second bus departs with you and the 1st passenger. note that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus. example 2: input: buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2 output: 20 explanation: suppose you arrive at time 20. at time 10, the first bus departs with the 3rd passenger. at time 20, the second bus departs with the 5th and 1st passengers. at time 30, the third bus departs with the 0th passenger and you. notice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus. constraints: n == buses.length m == passengers.length 1 <= n, m, capacity <= 105 2 <= buses[i], passengers[i] <= 109 each element in buses is unique. each element in passengers is unique.
a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid. example 1: input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] output: 8 explanation: there are 8 negatives number in the matrix. example 2: input: grid = [[3,2],[1,0]] output: 0 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 -100 <= grid[i][j] <= 100 follow up: could you find an o(n + m) solution?
are given a 0-indexed integer array nums. the concatenation of two numbers is the number formed by concatenating their numerals. for example, the concatenation of 15, 49 is 1549. the concatenation value of nums is initially equal to 0. perform this operation until nums becomes empty: if there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums. if one element exists, add its value to the concatenation value of nums, then delete it. return the concatenation value of the nums. example 1: input: nums = [7,52,2,4] output: 596 explanation: before performing any operation, nums is [7,52,2,4] and concatenation value is 0. - in the first operation: we pick the first element, 7, and the last element, 4. their concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74. then we delete them from nums, so nums becomes equal to [52,2]. - in the second operation: we pick the first element, 52, and the last element, 2. their concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596. then we delete them from the nums, so nums becomes empty. since the concatenation value is 596 so the answer is 596. example 2: input: nums = [5,14,13,8,12] output: 673 explanation: before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0. - in the first operation: we pick the first element, 5, and the last element, 12. their concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512. then we delete them from the nums, so nums becomes equal to [14,13,8]. - in the second operation: we pick the first element, 14, and the last element, 8. their concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660. then we delete them from the nums, so nums becomes equal to [13]. - in the third operation: nums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673. then we delete it from nums, so nums become empty. since the concatenation value is 673 so the answer is 673. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104
and bob take turns playing a game, with alice starting first. there are n stones arranged in a row. on each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. the winner is the one with the higher score when there are no stones left to remove. bob found that he will always lose this game (poor bob, he always loses), so he decided to minimize the score's difference. alice's goal is to maximize the difference in the score. given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in alice and bob's score if they both play optimally. example 1: input: stones = [5,3,1,4,2] output: 6 explanation: - alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. alice = 13, bob = 0, stones = [5,3,1,4]. - bob removes 5 and gets 3 + 1 + 4 = 8 points. alice = 13, bob = 8, stones = [3,1,4]. - alice removes 3 and gets 1 + 4 = 5 points. alice = 18, bob = 8, stones = [1,4]. - bob removes 1 and gets 4 points. alice = 18, bob = 12, stones = [4]. - alice removes 4 and gets 0 points. alice = 18, bob = 12, stones = []. the score difference is 18 - 12 = 6. example 2: input: stones = [7,90,5,1,100,10,10,2] output: 122 constraints: n == stones.length 2 <= n <= 1000 1 <= stones[i] <= 1000
a 2d integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order. example 1: input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]] output: [3,4] explanation: the only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4]. example 2: input: nums = [[1,2,3],[4,5,6]] output: [] explanation: there does not exist any integer present both in nums[0] and nums[1], so we return an empty list []. constraints: 1 <= nums.length <= 1000 1 <= sum(nums[i].length) <= 1000 1 <= nums[i][j] <= 1000 all the values of nums[i] are unique.
are given an array of n strings strs, all of the same length. we may choose any deletion indices, and we delete all the characters in those indices for each string. for example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"]. suppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). return the minimum possible value of answer.length. example 1: input: strs = ["babca","bbazb"] output: 3 explanation: after deleting columns 0, 1, and 4, the final array is strs = ["bc", "az"]. both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]). note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order. example 2: input: strs = ["edcba"] output: 4 explanation: if we delete less than 4 columns, the only row will not be lexicographically sorted. example 3: input: strs = ["ghi","def","abc"] output: 0 explanation: all rows are already lexicographically sorted. constraints: n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 100 strs[i] consists of lowercase english letters.
are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. you are also given an interval newinterval = [start, end] that represents the start and end of another interval. insert newinterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary). return intervals after the insertion. example 1: input: intervals = [[1,3],[6,9]], newinterval = [2,5] output: [[1,5],[6,9]] example 2: input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newinterval = [4,8] output: [[1,2],[3,10],[12,16]] explanation: because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. constraints: 0 <= intervals.length <= 104 intervals[i].length == 2 0 <= starti <= endi <= 105 intervals is sorted by starti in ascending order. newinterval.length == 2 0 <= start <= end <= 105
are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. each minute, you may take either the leftmost character of s, or the rightmost character of s. return the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character. example 1: input: s = "aabaaaacaabc", k = 2 output: 8 explanation: take three characters from the left of s. you now have two 'a' characters, and one 'b' character. take five characters from the right of s. you now have four 'a' characters, two 'b' characters, and two 'c' characters. a total of 3 + 5 = 8 minutes is needed. it can be proven that 8 is the minimum number of minutes needed. example 2: input: s = "a", k = 1 output: -1 explanation: it is not possible to take one 'b' or 'c' so return -1. constraints: 1 <= s.length <= 105 s consists of only the letters 'a', 'b', and 'c'. 0 <= k <= s.length
the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. if there are no nodes with an even-valued grandparent, return 0. a grandparent of a node is the parent of its parent if it exists. example 1: input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] output: 18 explanation: the red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents. example 2: input: root = [1] output: 0 constraints: the number of nodes in the tree is in the range [1, 104]. 1 <= node.val <= 100
concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. you need to design a ticketing system that can allocate seats in the following cases: if a group of k spectators can sit together in a row. if every member of a group of k spectators can get a seat. they may or may not sit together. note that the spectators are very picky. hence: they will book seats only if each member of their group can get a seat with row number less than or equal to maxrow. maxrow can vary from group to group. in case there are multiple rows to choose from, the row with the smallest number is chosen. if there are multiple seats to choose in the same row, the seat with the smallest number is chosen. implement the bookmyshow class: bookmyshow(int n, int m) initializes the object with n as number of rows and m as number of seats per row. int[] gather(int k, int maxrow) returns an array of length 2 denoting the row and seat number (respectively) of the first seat being allocated to the k members of the group, who must sit together. in other words, it returns the smallest possible r and c such that all [c, c + k - 1] seats are valid and empty in row r, and r <= maxrow. returns [] in case it is not possible to allocate seats to the group. boolean scatter(int k, int maxrow) returns true if all k members of the group can be allocated seats in rows 0 to maxrow, who may or may not sit together. if the seats can be allocated, it allocates k seats to the group with the smallest row numbers, and the smallest possible seat numbers in each row. otherwise, returns false. example 1: input ["bookmyshow", "gather", "gather", "scatter", "scatter"] [[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]] output [null, [0, 0], [], true, false] explanation bookmyshow bms = new bookmyshow(2, 5); // there are 2 rows with 5 seats each bms.gather(4, 0); // return [0, 0] // the group books seats [0, 3] of row 0. bms.gather(2, 0); // return [] // there is only 1 seat left in row 0, // so it is not possible to book 2 consecutive seats. bms.scatter(5, 1); // return true // the group books seat 4 of row 0 and seats [0, 3] of row 1. bms.scatter(5, 1); // return false // there is only one seat left in the hall. constraints: 1 <= n <= 5 * 104 1 <= m, k <= 109 0 <= maxrow <= n - 1 at most 5 * 104 calls in total will be made to gather and scatter.
are standing at position 0 on an infinite number line. there is a destination at position target. you can make some number of moves nummoves so that: on each move, you can either go left or right. during the ith move (starting from i == 1 to i == nummoves), you take i steps in the chosen direction. given the integer target, return the minimum number of moves required (i.e., the minimum nummoves) to reach the destination. example 1: input: target = 2 output: 3 explanation: on the 1st move, we step from 0 to 1 (1 step). on the 2nd move, we step from 1 to -1 (2 steps). on the 3rd move, we step from -1 to 2 (3 steps). example 2: input: target = 3 output: 2 explanation: on the 1st move, we step from 0 to 1 (1 step). on the 2nd move, we step from 1 to 3 (2 steps). constraints: -109 <= target <= 109 target != 0
the root of a binary tree, return the sum of values of its deepest leaves. example 1: input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] output: 15 example 2: input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] output: 19 constraints: the number of nodes in the tree is in the range [1, 104]. 1 <= node.val <= 100
are given an m x n integer matrix grid, where m and n are both even integers, and an integer k. the matrix is composed of several layers, which is shown in the below image, where each color is its own layer: a cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. to cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. an example rotation is shown below: return the matrix after applying k cyclic rotations to it. example 1: input: grid = [[40,10],[30,20]], k = 1 output: [[10,20],[40,30]] explanation: the figures above represent the grid at every state. example 2: input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2 output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]] explanation: the figures above represent the grid at every state. constraints: m == grid.length n == grid[i].length 2 <= m, n <= 50 both m and n are even integers. 1 <= grid[i][j] <= 5000 1 <= k <= 109
are given a 0-indexed integer array nums of size n and a positive integer k. we call an index i in the range k <= i < n - k good if the following conditions are satisfied: the k elements that are just before the index i are in non-increasing order. the k elements that are just after the index i are in non-decreasing order. return an array of all good indices sorted in increasing order. example 1: input: nums = [2,1,1,1,3,4,1], k = 2 output: [2,3] explanation: there are two good indices in the array: - index 2. the subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order. - index 3. the subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order. note that the index 4 is not good because [4,1] is not non-decreasing. example 2: input: nums = [2,1,1,2], k = 2 output: [] explanation: there are no good indices in this array. constraints: n == nums.length 3 <= n <= 105 1 <= nums[i] <= 106 1 <= k <= n / 2
a hashmap without using any built-in hash table libraries. implement the myhashmap class: myhashmap() initializes the object with an empty map. void put(int key, int value) inserts a (key, value) pair into the hashmap. if the key already exists in the map, update the corresponding value. int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key. void remove(key) removes the key and its corresponding value if the map contains the mapping for the key. example 1: input ["myhashmap", "put", "put", "get", "get", "put", "get", "remove", "get"] [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]] output [null, null, null, 1, -1, null, 1, null, -1] explanation myhashmap myhashmap = new myhashmap(); myhashmap.put(1, 1); // the map is now [[1,1]] myhashmap.put(2, 2); // the map is now [[1,1], [2,2]] myhashmap.get(1); // return 1, the map is now [[1,1], [2,2]] myhashmap.get(3); // return -1 (i.e., not found), the map is now [[1,1], [2,2]] myhashmap.put(2, 1); // the map is now [[1,1], [2,1]] (i.e., update the existing value) myhashmap.get(2); // return 1, the map is now [[1,1], [2,1]] myhashmap.remove(2); // remove the mapping for 2, the map is now [[1,1]] myhashmap.get(2); // return -1 (i.e., not found), the map is now [[1,1]] constraints: 0 <= key, value <= 106 at most 104 calls will be made to put, get, and remove.
two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. if it is impossible for b to be a substring of a after repeating it, return -1. notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc". example 1: input: a = "abcd", b = "cdabcdab" output: 3 explanation: we return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it. example 2: input: a = "a", b = "aa" output: 2 constraints: 1 <= a.length, b.length <= 104 a and b consist of lowercase english letters.
an integer array arr of distinct integers and an integer k. a game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). in each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. the game ends when an integer wins k consecutive rounds. return the integer which will win the game. it is guaranteed that there will be a winner of the game. example 1: input: arr = [2,1,3,5,4,6,7], k = 2 output: 5 explanation: let's see the rounds of the game: round | arr | winner | win_count 1 | [2,1,3,5,4,6,7] | 2 | 1 2 | [2,3,5,4,6,7,1] | 3 | 1 3 | [3,5,4,6,7,1,2] | 5 | 1 4 | [5,4,6,7,1,2,3] | 5 | 2 so we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games. example 2: input: arr = [3,2,1], k = 10 output: 3 explanation: 3 will win the first 10 rounds consecutively. constraints: 2 <= arr.length <= 105 1 <= arr[i] <= 106 arr contains distinct integers. 1 <= k <= 109
a string s containing only three types of characters: '(', ')' and '*', return true if s is valid. the following rules define a valid string: any left parenthesis '(' must have a corresponding right parenthesis ')'. any right parenthesis ')' must have a corresponding left parenthesis '('. left parenthesis '(' must go before the corresponding right parenthesis ')'. '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "". example 1: input: s = "()" output: true example 2: input: s = "(*)" output: true example 3: input: s = "(*))" output: true constraints: 1 <= s.length <= 100 s[i] is '(', ')' or '*'.
all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. for example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8). two binary trees are considered leaf-similar if their leaf value sequence is the same. return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar. example 1: input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8] output: true example 2: input: root1 = [1,2,3], root2 = [1,3,2] output: false constraints: the number of nodes in each tree will be in the range [1, 200]. both of the given trees will have values in the range [0, 200].
an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false. example 1: input: nums = [1,0,0,0,1,0,0,1], k = 2 output: true explanation: each of the 1s are at least 2 places away from each other. example 2: input: nums = [1,0,0,1,0,1], k = 2 output: false explanation: the second 1 and third 1 are only one apart from each other. constraints: 1 <= nums.length <= 105 0 <= k <= nums.length nums[i] is 0 or 1
an array arr that represents a permutation of numbers from 1 to n. you have a binary string of size n that initially has all its bits set to zero. at each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1. you are also given an integer m. find the latest step at which there exists a group of ones of length m. a group of ones is a contiguous substring of 1's such that it cannot be extended in either direction. return the latest step at which there exists a group of ones of length exactly m. if no such group exists, return -1. example 1: input: arr = [3,5,1,2,4], m = 1 output: 4 explanation: step 1: "00100", groups: ["1"] step 2: "00101", groups: ["1", "1"] step 3: "10101", groups: ["1", "1", "1"] step 4: "11101", groups: ["111", "1"] step 5: "11111", groups: ["11111"] the latest step at which there exists a group of size 1 is step 4. example 2: input: arr = [3,1,5,4,2], m = 2 output: -1 explanation: step 1: "00100", groups: ["1"] step 2: "10100", groups: ["1", "1"] step 3: "10101", groups: ["1", "1", "1"] step 4: "10111", groups: ["1", "111"] step 5: "11111", groups: ["11111"] no group of size 2 exists during any step. constraints: n == arr.length 1 <= m <= n <= 105 1 <= arr[i] <= n all integers in arr are distinct.
have a convex n-sided polygon where each vertex has an integer value. you are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order). you will triangulate the polygon into n - 2 triangles. for each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation. return the smallest possible total score that you can achieve with some triangulation of the polygon. example 1: input: values = [1,2,3] output: 6 explanation: the polygon is already triangulated, and the score of the only triangle is 6. example 2: input: values = [3,7,4,5] output: 144 explanation: there are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144. the minimum score is 144. example 3: input: values = [1,3,1,4,1,5] output: 13 explanation: the minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13. constraints: n == values.length 3 <= n <= 50 1 <= values[i] <= 100
are given a 0-indexed integer array nums and an integer value. in one operation, you can add or subtract value from any element of nums. for example, if nums = [1,2,3] and value = 2, you can choose to subtract value from nums[0] to make nums = [-1,2,3]. the mex (minimum excluded) of an array is the smallest missing non-negative integer in it. for example, the mex of [-1,2,3] is 0 while the mex of [1,0,3] is 2. return the maximum mex of nums after applying the mentioned operation any number of times. example 1: input: nums = [1,-10,7,13,6,8], value = 5 output: 4 explanation: one can achieve this result by applying the following operations: - add value to nums[1] twice to make nums = [1,0,7,13,6,8] - subtract value from nums[2] once to make nums = [1,0,2,13,6,8] - subtract value from nums[3] twice to make nums = [1,0,2,3,6,8] the mex of nums is 4. it can be shown that 4 is the maximum mex we can achieve. example 2: input: nums = [1,-10,7,13,6,8], value = 7 output: 2 explanation: one can achieve this result by applying the following operation: - subtract value from nums[2] once to make nums = [1,-10,0,13,6,8] the mex of nums is 2. it can be shown that 2 is the maximum mex we can achieve. constraints: 1 <= nums.length, value <= 105 -109 <= nums[i] <= 109
minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. if all elements of a are the same, the minimum absolute difference is -1. for example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. note that it is not 0 because a[i] and a[j] must be different. you are given an integer array nums and the array queries where queries[i] = [li, ri]. for each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive). return an array ans where ans[i] is the answer to the ith query. a subarray is a contiguous sequence of elements in an array. the value of |x| is defined as: x if x >= 0. -x if x < 0. example 1: input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]] output: [2,1,4,1] explanation: the queries are processed as follows: - queries[0] = [0,1]: the subarray is [1,3] and the minimum absolute difference is |1-3| = 2. - queries[1] = [1,2]: the subarray is [3,4] and the minimum absolute difference is |3-4| = 1. - queries[2] = [2,3]: the subarray is [4,8] and the minimum absolute difference is |4-8| = 4. - queries[3] = [0,3]: the subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1. example 2: input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]] output: [-1,1,1,3] explanation: the queries are processed as follows: - queries[0] = [2,3]: the subarray is [2,2] and the minimum absolute difference is -1 because all the elements are the same. - queries[1] = [0,2]: the subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1. - queries[2] = [0,5]: the subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1. - queries[3] = [3,5]: the subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3. constraints: 2 <= nums.length <= 105 1 <= nums[i] <= 100 1 <= queries.length <= 2 * 104 0 <= li < ri < nums.length
a string s of lower and upper case english letters. a good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where: 0 <= i <= s.length - 2 s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa. to make the string good, you can choose two adjacent characters that make the string bad and remove them. you can keep doing this until the string becomes good. return the string after making it good. the answer is guaranteed to be unique under the given constraints. notice that an empty string is also good. example 1: input: s = "leeeetcode" output: "leetcode" explanation: in the first step, either you choose i = 1 or i = 2, both will result "leeeetcode" to be reduced to "leetcode". example 2: input: s = "abbacc" output: "" explanation: we have many possible scenarios, and all lead to the same answer. for example: "abbacc" --> "aacc" --> "cc" --> "" "abbacc" --> "abba" --> "aa" --> "" example 3: input: s = "s" output: "s" constraints: 1 <= s.length <= 100 s contains only lower and upper case english letters.
have a wooden plank of the length n units. some ants are walking on the plank, each ant moves with a speed of 1 unit per second. some of the ants move to the left, the other move to the right. when two ants moving in two different directions meet at some point, they change their directions and continue moving again. assume changing directions does not take any additional time. when an ant reaches one end of the plank at a time t, it falls out of the plank immediately. given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank. example 1: input: n = 4, left = [4,3], right = [0,1] output: 4 explanation: in the image above: -the ant at index 0 is named a and going to the right. -the ant at index 1 is named b and going to the right. -the ant at index 3 is named c and going to the left. -the ant at index 4 is named d and going to the left. the last moment when an ant was on the plank is t = 4 seconds. after that, it falls immediately out of the plank. (i.e., we can say that at t = 4.0000000001, there are no ants on the plank). example 2: input: n = 7, left = [], right = [0,1,2,3,4,5,6,7] output: 7 explanation: all ants are going to the right, the ant at index 0 needs 7 seconds to fall. example 3: input: n = 7, left = [0,1,2,3,4,5,6,7], right = [] output: 7 explanation: all ants are going to the left, the ant at index 7 needs 7 seconds to fall. constraints: 1 <= n <= 104 0 <= left.length <= n + 1 0 <= left[i] <= n 0 <= right.length <= n + 1 0 <= right[i] <= n 1 <= left.length + right.length <= n + 1 all values of left and right are unique, and each value can appear only in one of the two arrays.
a binary tree with the following rules: root.val == 0 if treenode.val == x and treenode.left != null, then treenode.left.val == 2 * x + 1 if treenode.val == x and treenode.right != null, then treenode.right.val == 2 * x + 2 now the binary tree is contaminated, which means all treenode.val have been changed to -1. implement the findelements class: findelements(treenode* root) initializes the object with a contaminated binary tree and recovers it. bool find(int target) returns true if the target value exists in the recovered binary tree. example 1: input ["findelements","find","find"] [[[-1,null,-1]],[1],[2]] output [null,false,true] explanation findelements findelements = new findelements([-1,null,-1]); findelements.find(1); // return false findelements.find(2); // return true example 2: input ["findelements","find","find","find"] [[[-1,-1,-1,-1,-1]],[1],[3],[5]] output [null,true,true,false] explanation findelements findelements = new findelements([-1,-1,-1,-1,-1]); findelements.find(1); // return true findelements.find(3); // return true findelements.find(5); // return false example 3: input ["findelements","find","find","find","find"] [[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]] output [null,true,false,false,true] explanation findelements findelements = new findelements([-1,null,-1,-1,null,-1]); findelements.find(2); // return true findelements.find(3); // return false findelements.find(4); // return false findelements.find(5); // return true constraints: treenode.val == -1 the height of the binary tree is less than or equal to 20 the total number of nodes is between [1, 104] total calls of find() is between [1, 104] 0 <= target <= 106
the class subrectanglequeries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods: 1. updatesubrectangle(int row1, int col1, int row2, int col2, int newvalue) updates all values with newvalue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2). 2. getvalue(int row, int col) returns the current value of the coordinate (row,col) from the rectangle. example 1: input ["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue","getvalue"] [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]] output [null,1,null,5,5,null,10,5] explanation subrectanglequeries subrectanglequeries = new subrectanglequeries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]); // the initial rectangle (4x3) looks like: // 1 2 1 // 4 3 4 // 3 2 1 // 1 1 1 subrectanglequeries.getvalue(0, 2); // return 1 subrectanglequeries.updatesubrectangle(0, 0, 3, 2, 5); // after this update the rectangle looks like: // 5 5 5 // 5 5 5 // 5 5 5 // 5 5 5 subrectanglequeries.getvalue(0, 2); // return 5 subrectanglequeries.getvalue(3, 1); // return 5 subrectanglequeries.updatesubrectangle(3, 0, 3, 2, 10); // after this update the rectangle looks like: // 5 5 5 // 5 5 5 // 5 5 5 // 10 10 10 subrectanglequeries.getvalue(3, 1); // return 10 subrectanglequeries.getvalue(0, 2); // return 5 example 2: input ["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue"] [[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]] output [null,1,null,100,100,null,20] explanation subrectanglequeries subrectanglequeries = new subrectanglequeries([[1,1,1],[2,2,2],[3,3,3]]); subrectanglequeries.getvalue(0, 0); // return 1 subrectanglequeries.updatesubrectangle(0, 0, 2, 2, 100); subrectanglequeries.getvalue(0, 0); // return 100 subrectanglequeries.getvalue(2, 2); // return 100 subrectanglequeries.updatesubrectangle(1, 1, 2, 2, 20); subrectanglequeries.getvalue(2, 2); // return 20 constraints: there will be at most 500 operations considering both methods: updatesubrectangle and getvalue. 1 <= rows, cols <= 100 rows == rectangle.length cols == rectangle[i].length 0 <= row1 <= row2 < rows 0 <= col1 <= col2 < cols 1 <= newvalue, rectangle[i][j] <= 10^9 0 <= row < rows 0 <= col < cols
two binary strings a and b, return their sum as a binary string. example 1: input: a = "11", b = "1" output: "100" example 2: input: a = "1010", b = "1011" output: "10101" constraints: 1 <= a.length, b.length <= 104 a and b consist only of '0' or '1' characters. each string does not contain leading zeros except for the zero itself.
are given an integer array banned and two integers n and maxsum. you are choosing some number of integers following the below rules: the chosen integers have to be in the range [1, n]. each integer can be chosen at most once. the chosen integers should not be in the array banned. the sum of the chosen integers should not exceed maxsum. return the maximum number of integers you can choose following the mentioned rules. example 1: input: banned = [1,6,5], n = 5, maxsum = 6 output: 2 explanation: you can choose the integers 2 and 4. 2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxsum. example 2: input: banned = [1,2,3,4,5,6,7], n = 8, maxsum = 1 output: 0 explanation: you cannot choose any integer while following the mentioned conditions. example 3: input: banned = [11], n = 7, maxsum = 50 output: 7 explanation: you can choose the integers 1, 2, 3, 4, 5, 6, and 7. they are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxsum. constraints: 1 <= banned.length <= 104 1 <= banned[i], n <= 104 1 <= maxsum <= 109
is only one character 'a' on the screen of a notepad. you can perform one of two operations on this notepad for each step: copy all: you can copy all the characters present on the screen (a partial copy is not allowed). paste: you can paste the characters which are copied last time. given an integer n, return the minimum number of operations to get the character 'a' exactly n times on the screen. example 1: input: n = 3 output: 3 explanation: initially, we have one character 'a'. in step 1, we use copy all operation. in step 2, we use paste operation to get 'aa'. in step 3, we use paste operation to get 'aaa'. example 2: input: n = 1 output: 0 constraints: 1 <= n <= 1000
has n balloons arranged on a rope. you are given a 0-indexed string colors where colors[i] is the color of the ith balloon. alice wants the rope to be colorful. she does not want two consecutive balloons to be of the same color, so she asks bob for help. bob can remove some balloons from the rope to make it colorful. you are given a 0-indexed integer array neededtime where neededtime[i] is the time (in seconds) that bob needs to remove the ith balloon from the rope. return the minimum time bob needs to make the rope colorful. example 1: input: colors = "abaac", neededtime = [1,2,3,4,5] output: 3 explanation: in the above image, 'a' is blue, 'b' is red, and 'c' is green. bob can remove the blue balloon at index 2. this takes 3 seconds. there are no longer two consecutive balloons of the same color. total time = 3. example 2: input: colors = "abc", neededtime = [1,2,3] output: 0 explanation: the rope is already colorful. bob does not need to remove any balloons from the rope. example 3: input: colors = "aabaa", neededtime = [1,2,3,4,1] output: 2 explanation: bob will remove the ballons at indices 0 and 4. each ballon takes 1 second to remove. there are no longer two consecutive balloons of the same color. total time = 1 + 1 = 2. constraints: n == colors.length == neededtime.length 1 <= n <= 105 1 <= neededtime[i] <= 104 colors contains only lowercase english letters.
an array points where points[i] = [xi, yi] represents a point on the x-y plane, return true if these points are a boomerang. a boomerang is a set of three points that are all distinct and not in a straight line. example 1: input: points = [[1,1],[2,3],[3,2]] output: true example 2: input: points = [[1,1],[2,2],[3,3]] output: false constraints: points.length == 3 points[i].length == 2 0 <= xi, yi <= 100
has n candies, where the ith candy is of type candytype[i]. alice noticed that she started to gain weight, so she visited a doctor. the doctor advised alice to only eat n / 2 of the candies she has (n is always even). alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. given the integer array candytype of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them. example 1: input: candytype = [1,1,2,2,3,3] output: 3 explanation: alice can only eat 6 / 2 = 3 candies. since there are only 3 types, she can eat one of each type. example 2: input: candytype = [1,1,2,3] output: 2 explanation: alice can only eat 4 / 2 = 2 candies. whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types. example 3: input: candytype = [6,6,6,6] output: 1 explanation: alice can only eat 4 / 2 = 2 candies. even though she can eat 2 candies, she only has 1 type. constraints: n == candytype.length 2 <= n <= 104 n is even. -105 <= candytype[i] <= 105
are n oranges in the kitchen and you decided to eat some of these oranges every day as follows: eat one orange. if the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges. if the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges. you can only choose one of the actions per day. given the integer n, return the minimum number of days to eat n oranges. example 1: input: n = 10 output: 4 explanation: you have 10 oranges. day 1: eat 1 orange, 10 - 1 = 9. day 2: eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (since 9 is divisible by 3) day 3: eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. day 4: eat the last orange 1 - 1 = 0. you need at least 4 days to eat the 10 oranges. example 2: input: n = 6 output: 3 explanation: you have 6 oranges. day 1: eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (since 6 is divisible by 2). day 2: eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (since 3 is divisible by 3) day 3: eat the last orange 1 - 1 = 0. you need at least 3 days to eat the 6 oranges. constraints: 1 <= n <= 2 * 109
strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2. an interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that: s = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| <= 1 the interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ... note: a + b is the concatenation of strings a and b. example 1: input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac" output: true explanation: one way to obtain s3 is: split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a". interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac". since s3 can be obtained by interleaving s1 and s2, we return true. example 2: input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc" output: false explanation: notice how it is impossible to interleave s2 with any other string to obtain s3. example 3: input: s1 = "", s2 = "", s3 = "" output: true constraints: 0 <= s1.length, s2.length <= 100 0 <= s3.length <= 200 s1, s2, and s3 consist of lowercase english letters. follow up: could you solve it using only o(s2.length) additional memory space?
are given two integers m and n, which represent the dimensions of a matrix. you are also given the head of a linked list of integers. generate an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. if there are remaining empty spaces, fill them with -1. return the generated matrix. example 1: input: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0] output: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]] explanation: the diagram above shows how the values are printed in the matrix. note that the remaining spaces in the matrix are filled with -1. example 2: input: m = 1, n = 4, head = [0,1,2] output: [[0,1,2,-1]] explanation: the diagram above shows how the values are printed from left to right in the matrix. the last space in the matrix is set to -1. constraints: 1 <= m, n <= 105 1 <= m * n <= 105 the number of nodes in the list is in the range [1, m * n]. 0 <= node.val <= 1000
an array nums. we define a running sum of an array as runningsum[i] = sum(nums[0]â€¦nums[i]). return the running sum of nums. example 1: input: nums = [1,2,3,4] output: [1,3,6,10] explanation: running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]. example 2: input: nums = [1,1,1,1,1] output: [1,2,3,4,5] explanation: running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]. example 3: input: nums = [3,1,2,10,1] output: [3,4,6,16,17] constraints: 1 <= nums.length <= 1000 -10^6 <= nums[i] <= 10^6
schema table: salary +-------------+----------+ | column name | type | +-------------+----------+ | id | int | | name | varchar | | sex | enum | | salary | int | +-------------+----------+ id is the primary key for this table. the sex column is enum value of type ('m', 'f'). the table contains information about an employee. write an sql query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables. note that you must write a single update statement, do not write any select statement for this problem. the query result format is in the following example. example 1: input: salary table: +----+------+-----+--------+ | id | name | sex | salary | +----+------+-----+--------+ | 1 | a | m | 2500 | | 2 | b | f | 1500 | | 3 | c | m | 5500 | | 4 | d | f | 500 | +----+------+-----+--------+ output: +----+------+-----+--------+ | id | name | sex | salary | +----+------+-----+--------+ | 1 | a | f | 2500 | | 2 | b | m | 1500 | | 3 | c | f | 5500 | | 4 | d | m | 500 | +----+------+-----+--------+ explanation: (1, a) and (3, c) were changed from 'm' to 'f'. (2, b) and (4, d) were changed from 'f' to 'm'.
have n packages that you are trying to place in boxes, one package in each box. there are m suppliers that each produce boxes of different sizes (with infinite supply). a package can be placed in a box if the size of the package is less than or equal to the size of the box. the package sizes are given as an integer array packages, where packages[i] is the size of the ith package. the suppliers are given as a 2d integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces. you want to choose a single supplier and use boxes from them such that the total wasted space is minimized. for each package in a box, we define the space wasted to be size of the box - size of the package. the total wasted space is the sum of the space wasted in all the boxes. for example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. this would result in a waste of (4-2) + (4-3) + (8-5) = 6. return the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. since the answer may be large, return it modulo 109 + 7. example 1: input: packages = [2,3,5], boxes = [[4,8],[2,8]] output: 6 explanation: it is optimal to choose the first supplier, using two size-4 boxes and one size-8 box. the total waste is (4-2) + (4-3) + (8-5) = 6. example 2: input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]] output: -1 explanation: there is no box that the package of size 5 can fit in. example 3: input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]] output: 9 explanation: it is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes. the total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9. constraints: n == packages.length m == boxes.length 1 <= n <= 105 1 <= m <= 105 1 <= packages[i] <= 105 1 <= boxes[j].length <= 105 1 <= boxes[j][k] <= 105 sum(boxes[j].length) <= 105 the elements in boxes[j] are distinct.
a 0-indexed integer array nums, find a 0-indexed integer array answer where: answer.length == nums.length. answer[i] = |leftsum[i] - rightsum[i]|. where: leftsum[i] is the sum of elements to the left of the index i in the array nums. if there is no such element, leftsum[i] = 0. rightsum[i] is the sum of elements to the right of the index i in the array nums. if there is no such element, rightsum[i] = 0. return the array answer. example 1: input: nums = [10,4,8,3] output: [15,1,11,22] explanation: the array leftsum is [0,10,14,22] and the array rightsum is [15,11,3,0]. the array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22]. example 2: input: nums = [1] output: [0] explanation: the array leftsum is [0] and the array rightsum is [0]. the array answer is [|0 - 0|] = [0]. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 105
and bob play a game with piles of stones. there are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. the objective of the game is to end with the most stones. the total number of stones across all the piles is odd, so there are no ties. alice and bob take turns, with alice starting first. each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. this continues until there are no more piles left, at which point the person with the most stones wins. assuming alice and bob play optimally, return true if alice wins the game, or false if bob wins. example 1: input: piles = [5,3,4,5] output: true explanation: alice starts first, and can only take the first 5 or the last 5. say she takes the first 5, so that the row becomes [3, 4, 5]. if bob takes 3, then the board is [4, 5], and alice takes 5 to win with 10 points. if bob takes the last 5, then the board is [3, 4], and alice takes 4 to win with 9 points. this demonstrated that taking the first 5 was a winning move for alice, so we return true. example 2: input: piles = [3,7,2,3] output: true constraints: 2 <= piles.length <= 500 piles.length is even. 1 <= piles[i] <= 500 sum(piles[i]) is odd.
are given an integer n, which indicates that there are n courses labeled from 1 to n. you are also given an array relations where relations[i] = [prevcoursei, nextcoursei], representing a prerequisite relationship between course prevcoursei and course nextcoursei: course prevcoursei has to be taken before course nextcoursei. also, you are given the integer k. in one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking. return the minimum number of semesters needed to take all courses. the testcases will be generated such that it is possible to take every course. example 1: input: n = 4, relations = [[2,1],[3,1],[1,4]], k = 2 output: 3 explanation: the figure above represents the given graph. in the first semester, you can take courses 2 and 3. in the second semester, you can take course 1. in the third semester, you can take course 4. example 2: input: n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2 output: 4 explanation: the figure above represents the given graph. in the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester. in the second semester, you can take course 4. in the third semester, you can take course 1. in the fourth semester, you can take course 5. constraints: 1 <= n <= 15 1 <= k <= n 0 <= relations.length <= n * (n-1) / 2 relations[i].length == 2 1 <= prevcoursei, nextcoursei <= n prevcoursei != nextcoursei all the pairs [prevcoursei, nextcoursei] are unique. the given graph is a directed acyclic graph.
two arrays of integers nums and index. your task is to create target array under the following rules: initially target array is empty. from left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array. repeat the previous step until there are no elements to read in nums and index. return the target array. it is guaranteed that the insertion operations will be valid. example 1: input: nums = [0,1,2,3,4], index = [0,1,2,2,1] output: [0,4,1,3,2] explanation: nums index target 0 0 [0] 1 1 [0,1] 2 2 [0,1,2] 3 2 [0,1,3,2] 4 1 [0,4,1,3,2] example 2: input: nums = [1,2,3,4,0], index = [0,1,2,3,0] output: [0,1,2,3,4] explanation: nums index target 1 0 [1] 2 1 [1,2] 3 2 [1,2,3] 4 3 [1,2,3,4] 0 0 [0,1,2,3,4] example 3: input: nums = [1], index = [0] output: [1] constraints: 1 <= nums.length, index.length <= 100 nums.length == index.length 0 <= nums[i] <= 100 0 <= index[i] <= i
are given two integer arrays nums1 and nums2 of equal length n and an integer k. you can perform the following operation on nums1: choose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. in other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k. nums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i]. return the minimum number of operations required to make nums1 equal to nums2. if it is impossible to make them equal, return -1. example 1: input: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3 output: 2 explanation: in 2 operations, we can transform nums1 to nums2. 1st operation: i = 2, j = 0. after applying the operation, nums1 = [1,3,4,4]. 2nd operation: i = 2, j = 3. after applying the operation, nums1 = [1,3,7,1]. one can prove that it is impossible to make arrays equal in fewer operations. example 2: input: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1 output: -1 explanation: it can be proved that it is impossible to make the two arrays equal. constraints: n == nums1.length == nums2.length 2 <= n <= 105 0 <= nums1[i], nums2[j] <= 109 0 <= k <= 105
a string s, return the maximum number of occurrences of any substring under the following rules: the number of unique characters in the substring must be less than or equal to maxletters. the substring size must be between minsize and maxsize inclusive. example 1: input: s = "aababcaab", maxletters = 2, minsize = 3, maxsize = 4 output: 2 explanation: substring "aab" has 2 occurrences in the original string. it satisfies the conditions, 2 unique letters and size 3 (between minsize and maxsize). example 2: input: s = "aaaa", maxletters = 1, minsize = 3, maxsize = 3 output: 2 explanation: substring "aaa" occur 2 times in the string. it can overlap. constraints: 1 <= s.length <= 105 1 <= maxletters <= 26 1 <= minsize <= maxsize <= min(26, s.length) s consists of only lowercase english letters.
a multi-dimensional array of integers, return a generator object which yields integers in the same order as inorder traversal. a multi-dimensional array is a recursive data structure that contains both integers and other multi-dimensional arrays. inorder traversal iterates over each array from left to right, yielding any integers it encounters or applying inorder traversal to any arrays it encounters. example 1: input: arr = [[[6]],[1,3],[]] output: [6,1,3] explanation: const generator = inordertraversal(arr); generator.next().value; // 6 generator.next().value; // 1 generator.next().value; // 3 generator.next().done; // true example 2: input: arr = [] output: [] explanation: there are no integers so the generator doesn't yield anything. constraints: 0 <= arr.flat().length <= 105 0 <= arr.flat()[i] <= 105 maxnestingdepth <= 105 can you solve this without creating a new flattened version of the array?
complex number can be represented as a string on the form "real+imaginaryi" where: real is the real part and is an integer in the range [-100, 100]. imaginary is the imaginary part and is an integer in the range [-100, 100]. i2 == -1. given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications. example 1: input: num1 = "1+1i", num2 = "1+1i" output: "0+2i" explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i. example 2: input: num1 = "1+-1i", num2 = "1+-1i" output: "0+-2i" explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i. constraints: num1 and num2 are valid complex numbers.
an array of unique integers, arr, where each integer arr[i] is strictly greater than 1. we make a binary tree using these integers, and each number may be used for any number of times. each non-leaf node's value should be equal to the product of the values of its children. return the number of binary trees we can make. the answer may be too large so return the answer modulo 109 + 7. example 1: input: arr = [2,4] output: 3 explanation: we can make these trees: [2], [4], [4, 2, 2] example 2: input: arr = [2,4,5,10] output: 7 explanation: we can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]. constraints: 1 <= arr.length <= 1000 2 <= arr[i] <= 109 all the values of arr are unique.
split of an integer array is good if: the array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right. the sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right. given nums, an array of non-negative integers, return the number of good ways to split nums. as the number may be too large, return it modulo 109 + 7. example 1: input: nums = [1,1,1] output: 1 explanation: the only good way to split nums is [1] [1] [1]. example 2: input: nums = [1,2,2,2,5,0] output: 3 explanation: there are three good ways of splitting nums: [1] [2] [2,2,5,0] [1] [2,2] [2,5,0] [1,2] [2,2] [5,0] example 3: input: nums = [3,2,1] output: 0 explanation: there is no good way to split nums. constraints: 3 <= nums.length <= 105 0 <= nums[i] <= 104
is a long and thin painting that can be represented by a number line. the painting was painted with multiple overlapping segments where each segment was painted with a unique color. you are given a 2d integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color. the colors in the overlapping segments of the painting were mixed when it was painted. when two or more colors mix, they form a new color that can be represented as a set of mixed colors. for example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}. for the sake of simplicity, you should only output the sum of the elements in the set rather than the full set. you want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. these segments can be represented by the 2d array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj. for example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because: [1,4) is colored {5,7} (with a sum of 12) from both the first and second segments. [4,7) is colored {7} from only the second segment. return the 2d array painting describing the finished painting (excluding any parts that are not painted). you may return the segments in any order. a half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b. example 1: input: segments = [[1,4,5],[4,7,7],[1,7,9]] output: [[1,4,14],[4,7,16]] explanation: the painting can be described as follows: - [1,4) is colored {5,9} (with a sum of 14) from the first and third segments. - [4,7) is colored {7,9} (with a sum of 16) from the second and third segments. example 2: input: segments = [[1,7,9],[6,8,15],[8,10,7]] output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]] explanation: the painting can be described as follows: - [1,6) is colored 9 from the first segment. - [6,7) is colored {9,15} (with a sum of 24) from the first and second segments. - [7,8) is colored 15 from the second segment. - [8,10) is colored 7 from the third segment. example 3: input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]] output: [[1,4,12],[4,7,12]] explanation: the painting can be described as follows: - [1,4) is colored {5,7} (with a sum of 12) from the first and second segments. - [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments. note that returning a single segment [1,7) is incorrect because the mixed color sets are different. constraints: 1 <= segments.length <= 2 * 104 segments[i].length == 3 1 <= starti < endi <= 105 1 <= colori <= 109 each colori is distinct.
are given two positive integers n and k. a factor of an integer n is defined as an integer i where n % i == 0. consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors. example 1: input: n = 12, k = 3 output: 3 explanation: factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3. example 2: input: n = 7, k = 2 output: 7 explanation: factors list is [1, 7], the 2nd factor is 7. example 3: input: n = 4, k = 4 output: -1 explanation: factors list is [1, 2, 4], there is only 3 factors. we should return -1. constraints: 1 <= k <= n <= 1000 follow up: could you solve this problem in less than o(n) complexity?
pangram is a sentence where every letter of the english alphabet appears at least once. given a string sentence containing only lowercase english letters, return true if sentence is a pangram, or false otherwise. example 1: input: sentence = "thequickbrownfoxjumpsoverthelazydog" output: true explanation: sentence contains at least one of every letter of the english alphabet. example 2: input: sentence = "leetcode" output: false constraints: 1 <= sentence.length <= 1000 sentence consists of lowercase english letters.
are given a 0-indexed string word of length n consisting of digits, and a positive integer m. the divisibility array div of word is an integer array of length n such that: div[i] = 1 if the numeric value of word[0,...,i] is divisible by m, or div[i] = 0 otherwise. return the divisibility array of word. example 1: input: word = "998244353", m = 3 output: [1,1,0,0,0,1,1,0,0] explanation: there are only 4 prefixes that are divisible by 3: "9", "99", "998244", and "9982443". example 2: input: word = "1010", m = 10 output: [0,1,0,1] explanation: there are only 2 prefixes that are divisible by 10: "10", and "1010". constraints: 1 <= n <= 105 word.length == n word consists of digits from 0 to 9 1 <= m <= 109
schema table: orders +-----------------+----------+ | column name | type | +-----------------+----------+ | order_number | int | | customer_number | int | +-----------------+----------+ order_number is the primary key for this table. this table contains information about the order id and the customer id. write an sql query to find the customer_number for the customer who has placed the largest number of orders. the test cases are generated so that exactly one customer will have placed more orders than any other customer. the query result format is in the following example. example 1: input: orders table: +--------------+-----------------+ | order_number | customer_number | +--------------+-----------------+ | 1 | 1 | | 2 | 2 | | 3 | 3 | | 4 | 3 | +--------------+-----------------+ output: +-----------------+ | customer_number | +-----------------+ | 3 | +-----------------+ explanation: the customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. so the result is customer_number 3. follow up: what if more than one customer has the largest number of orders, can you find all the customer_number in this case?
are n dominoes in a line, and we place each domino vertically upright. in the beginning, we simultaneously push some of the dominoes either to the left or to the right. after each second, each domino that is falling to the left pushes the adjacent domino on the left. similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. when a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. for the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. you are given a string dominoes representing the initial state where: dominoes[i] = 'l', if the ith domino has been pushed to the left, dominoes[i] = 'r', if the ith domino has been pushed to the right, and dominoes[i] = '.', if the ith domino has not been pushed. return a string representing the final state. example 1: input: dominoes = "rr.l" output: "rr.l" explanation: the first domino expends no additional force on the second domino. example 2: input: dominoes = ".l.r...lr..l.." output: "ll.rr.llrrll.." constraints: n == dominoes.length 1 <= n <= 105 dominoes[i] is either 'l', 'r', or '.'.
are given an integer num. you will apply the following steps exactly two times: pick a digit x (0 <= x <= 9). pick another digit y (0 <= y <= 9). the digit y can be equal to x. replace all the occurrences of x in the decimal representation of num by y. the new integer cannot have any leading zeros, also the new integer cannot be 0. let a and b be the results of applying the operations to num the first and second times, respectively. return the max difference between a and b. example 1: input: num = 555 output: 888 explanation: the first time pick x = 5 and y = 9 and store the new integer in a. the second time pick x = 5 and y = 1 and store the new integer in b. we have now a = 999 and b = 111 and max difference = 888 example 2: input: num = 9 output: 8 explanation: the first time pick x = 9 and y = 9 and store the new integer in a. the second time pick x = 9 and y = 1 and store the new integer in b. we have now a = 9 and b = 1 and max difference = 8 constraints: 1 <= num <= 108
schema table: customer +---------------+---------+ | column name | type | +---------------+---------+ | customer_id | int | | name | varchar | | visited_on | date | | amount | int | +---------------+---------+ (customer_id, visited_on) is the primary key for this table. this table contains data about customer transactions in a restaurant. visited_on is the date on which the customer with id (customer_id) has visited the restaurant. amount is the total paid by a customer. you are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day). write an sql query to compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places. return result table ordered by visited_on in ascending order. the query result format is in the following example. example 1: input: customer table: +-------------+--------------+--------------+-------------+ | customer_id | name | visited_on | amount | +-------------+--------------+--------------+-------------+ | 1 | jhon | 2019-01-01 | 100 | | 2 | daniel | 2019-01-02 | 110 | | 3 | jade | 2019-01-03 | 120 | | 4 | khaled | 2019-01-04 | 130 | | 5 | winston | 2019-01-05 | 110 | | 6 | elvis | 2019-01-06 | 140 | | 7 | anna | 2019-01-07 | 150 | | 8 | maria | 2019-01-08 | 80 | | 9 | jaze | 2019-01-09 | 110 | | 1 | jhon | 2019-01-10 | 130 | | 3 | jade | 2019-01-10 | 150 | +-------------+--------------+--------------+-------------+ output: +--------------+--------------+----------------+ | visited_on | amount | average_amount | +--------------+--------------+----------------+ | 2019-01-07 | 860 | 122.86 | | 2019-01-08 | 840 | 120 | | 2019-01-09 | 840 | 120 | | 2019-01-10 | 1000 | 142.86 | +--------------+--------------+----------------+ explanation: 1st moving average from 2019-01-01 to 2019-01-07 has an average_amount of (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86 2nd moving average from 2019-01-02 to 2019-01-08 has an average_amount of (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120 3rd moving average from 2019-01-03 to 2019-01-09 has an average_amount of (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120 4th moving average from 2019-01-04 to 2019-01-10 has an average_amount of (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86
an array of integers nums, sort the array in increasing order based on the frequency of the values. if multiple values have the same frequency, sort them in decreasing order. return the sorted array. example 1: input: nums = [1,1,2,2,2,3] output: [3,1,1,2,2,2] explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3. example 2: input: nums = [2,3,1,3,2] output: [1,3,3,2,2] explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order. example 3: input: nums = [-1,1,-6,4,5,-6,1,4,1] output: [5,-1,4,4,-6,-6,1,1,1] constraints: 1 <= nums.length <= 100 -100 <= nums[i] <= 100
are given a string sentence that consist of words separated by spaces. each word consists of lowercase and uppercase letters only. we would like to convert the sentence to "goat latin" (a made-up language similar to pig latin.) the rules of goat latin are as follows: if a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append "ma" to the end of the word. for example, the word "apple" becomes "applema". if a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add "ma". for example, the word "goat" becomes "oatgma". add one letter 'a' to the end of each word per its word index in the sentence, starting with 1. for example, the first word gets "a" added to the end, the second word gets "aa" added to the end, and so on. return the final sentence representing the conversion from sentence to goat latin. example 1: input: sentence = "i speak goat latin" output: "imaa peaksmaaa oatgmaaaa atinlmaaaaa" example 2: input: sentence = "the quick brown fox jumped over the lazy dog" output: "hetmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa" constraints: 1 <= sentence.length <= 150 sentence consists of english letters and spaces. sentence has no leading or trailing spaces. all the words in sentence are separated by a single space.
is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). you are given the integer n and an integer array startpos where startpos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol). you are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'l' (move left), 'r' (move right), 'u' (move up), and 'd' (move down). the robot can begin executing from any ith instruction in s. it executes the instructions one by one towards the end of s but it stops if either of these conditions is met: the next instruction will move the robot off the grid. there are no more instructions left to execute. return an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s. example 1: input: n = 3, startpos = [0,1], s = "rrddlu" output: [1,5,4,3,1,0] explanation: starting from startpos and beginning execution from the ith instruction: - 0th: "rrddlu". only one instruction "r" can be executed before it moves off the grid. - 1st: "rddlu". all five instructions can be executed while it stays in the grid and ends at (1, 1). - 2nd: "ddlu". all four instructions can be executed while it stays in the grid and ends at (1, 0). - 3rd: "dlu". all three instructions can be executed while it stays in the grid and ends at (0, 0). - 4th: "lu". only one instruction "l" can be executed before it moves off the grid. - 5th: "u". if moving up, it would move off the grid. example 2: input: n = 2, startpos = [1,1], s = "lurd" output: [4,1,0,0] explanation: - 0th: "lurd". - 1st: "urd". - 2nd: "rd". - 3rd: "d". example 3: input: n = 1, startpos = [0,0], s = "lrud" output: [0,0,0,0] explanation: no matter which instruction the robot begins execution from, it would move off the grid. constraints: m == s.length 1 <= n, m <= 500 startpos.length == 2 0 <= startrow, startcol < n s consists of 'l', 'r', 'u', and 'd'.
an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3].... you may assume the input array always has a valid answer. example 1: input: nums = [1,5,1,1,6,4] output: [1,6,1,5,1,4] explanation: [1,4,1,5,1,6] is also accepted. example 2: input: nums = [1,3,2,2,3,1] output: [2,3,1,3,1,2] constraints: 1 <= nums.length <= 5 * 104 0 <= nums[i] <= 5000 it is guaranteed that there will be an answer for the given input nums. follow up: can you do it in o(n) time and/or in-place with o(1) extra space?
swap is defined as taking two distinct positions in an array and swapping the values in them. a circular array is defined as an array where we consider the first element and the last element to be adjacent. given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location. example 1: input: nums = [0,1,0,1,1,0,0] output: 1 explanation: here are a few of the ways to group all the 1's together: [0,0,1,1,1,0,0] using 1 swap. [0,1,1,1,0,0,0] using 1 swap. [1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array). there is no way to group all 1's together with 0 swaps. thus, the minimum number of swaps required is 1. example 2: input: nums = [0,1,1,1,0,0,1,1,0] output: 2 explanation: here are a few of the ways to group all the 1's together: [1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array). [1,1,1,1,1,0,0,0,0] using 2 swaps. there is no way to group all 1's together with 0 or 1 swaps. thus, the minimum number of swaps required is 2. example 3: input: nums = [1,1,0,0,1] output: 0 explanation: all the 1's are already grouped together due to the circular property of the array. thus, the minimum number of swaps required is 0. constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1.
are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. the root of the tree is node 0. find the kth ancestor of a given node. the kth ancestor of a tree node is the kth node in the path from that node to the root node. implement the treeancestor class: treeancestor(int n, int[] parent) initializes the object with the number of nodes in the tree and the parent array. int getkthancestor(int node, int k) return the kth ancestor of the given node node. if there is no such ancestor, return -1. example 1: input ["treeancestor", "getkthancestor", "getkthancestor", "getkthancestor"] [[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]] output [null, 1, 0, -1] explanation treeancestor treeancestor = new treeancestor(7, [-1, 0, 0, 1, 1, 2, 2]); treeancestor.getkthancestor(3, 1); // returns 1 which is the parent of 3 treeancestor.getkthancestor(5, 2); // returns 0 which is the grandparent of 5 treeancestor.getkthancestor(6, 3); // returns -1 because there is no such ancestor constraints: 1 <= k <= n <= 5 * 104 parent.length == n parent[0] == -1 0 <= parent[i] < n for all 0 < i < n 0 <= node < n there will be at most 5 * 104 queries.
are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive). the triangular sum of nums is the value of the only element present in nums after the following process terminates: let nums comprise of n elements. if n == 1, end the process. otherwise, create a new 0-indexed integer array newnums of length n - 1. for each index i, where 0 <= i < n - 1, assign the value of newnums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator. replace the array nums with newnums. repeat the entire process starting from step 1. return the triangular sum of nums. example 1: input: nums = [1,2,3,4,5] output: 8 explanation: the above diagram depicts the process from which we obtain the triangular sum of the array. example 2: input: nums = [5] output: 5 explanation: since there is only one element in nums, the triangular sum is the value of that element itself. constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 9
are given two strings start and target, both of length n. each string consists only of the characters 'l', 'r', and '_' where: the characters 'l' and 'r' represent pieces, where a piece 'l' can move to the left only if there is a blank space directly to its left, and a piece 'r' can move to the right only if there is a blank space directly to its right. the character '_' represents a blank space that can be occupied by any of the 'l' or 'r' pieces. return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. otherwise, return false. example 1: input: start = "_l__r__r_", target = "l______rr" output: true explanation: we can obtain the string target from start by doing the following moves: - move the first piece one step to the left, start becomes equal to "l___r__r_". - move the last piece one step to the right, start becomes equal to "l___r___r". - move the second piece three steps to the right, start becomes equal to "l______rr". since it is possible to get the string target from start, we return true. example 2: input: start = "r_l_", target = "__lr" output: false explanation: the 'r' piece in the string start can move one step to the right to obtain "_rl_". after that, no pieces can move anymore, so it is impossible to obtain the string target from start. example 3: input: start = "_r", target = "r_" output: false explanation: the piece in the string start can move only to the right, so it is impossible to obtain the string target from start. constraints: n == start.length == target.length 1 <= n <= 105 start and target consist of the characters 'l', 'r', and '_'.
a 2d integer array nums, return all elements of nums in diagonal order as shown in the below images. example 1: input: nums = [[1,2,3],[4,5,6],[7,8,9]] output: [1,4,2,7,5,3,8,6,9] example 2: input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]] output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16] constraints: 1 <= nums.length <= 105 1 <= nums[i].length <= 105 1 <= sum(nums[i].length) <= 105 1 <= nums[i][j] <= 105
k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.) you are given some events [starttime, endtime), after each given event, return an integer k representing the maximum k-booking between all the previous events. implement the mycalendarthree class: mycalendarthree() initializes the object. int book(int starttime, int endtime) returns an integer k representing the largest integer such that there exists a k-booking in the calendar. example 1: input ["mycalendarthree", "book", "book", "book", "book", "book", "book"] [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]] output [null, 1, 1, 2, 3, 3, 3] explanation mycalendarthree mycalendarthree = new mycalendarthree(); mycalendarthree.book(10, 20); // return 1 mycalendarthree.book(50, 60); // return 1 mycalendarthree.book(10, 40); // return 2 mycalendarthree.book(5, 15); // return 3 mycalendarthree.book(5, 10); // return 3 mycalendarthree.book(25, 55); // return 3 constraints: 0 <= starttime < endtime <= 109 at most 400 calls will be made to book.
the bstiterator class that represents an iterator over the in-order traversal of a binary search tree (bst): bstiterator(treenode root) initializes an object of the bstiterator class. the root of the bst is given as part of the constructor. the pointer should be initialized to a non-existent number smaller than any element in the bst. boolean hasnext() returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false. int next() moves the pointer to the right, then returns the number at the pointer. notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the bst. you may assume that next() calls will always be valid. that is, there will be at least a next number in the in-order traversal when next() is called. example 1: input ["bstiterator", "next", "next", "hasnext", "next", "hasnext", "next", "hasnext", "next", "hasnext"] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] output [null, 3, 7, true, 9, true, 15, true, 20, false] explanation bstiterator bstiterator = new bstiterator([7, 3, 15, null, null, 9, 20]); bstiterator.next(); // return 3 bstiterator.next(); // return 7 bstiterator.hasnext(); // return true bstiterator.next(); // return 9 bstiterator.hasnext(); // return true bstiterator.next(); // return 15 bstiterator.hasnext(); // return true bstiterator.next(); // return 20 bstiterator.hasnext(); // return false constraints: the number of nodes in the tree is in the range [1, 105]. 0 <= node.val <= 106 at most 105 calls will be made to hasnext, and next. follow up: could you implement next() and hasnext() to run in average o(1) time and use o(h) memory, where h is the height of the tree?
cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above. given the array reservedseats containing the numbers of seats already reserved, for example, reservedseats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved. return the maximum number of four-person groups you can assign on the cinema seats. a four-person group occupies four adjacent seats in one single row. seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side. example 1: input: n = 3, reservedseats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]] output: 4 explanation: the figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group. example 2: input: n = 2, reservedseats = [[2,1],[1,8],[2,6]] output: 2 example 3: input: n = 4, reservedseats = [[4,3],[1,4],[4,6],[1,7]] output: 4 constraints: 1 <= n <= 10^9 1 <= reservedseats.length <= min(10*n, 10^4) reservedseats[i].length == 2 1 <= reservedseats[i][0] <= n 1 <= reservedseats[i][1] <= 10 all reservedseats[i] are distinct.
width of a sequence is the difference between the maximum and minimum elements in the sequence. given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. since the answer may be very large, return it modulo 109 + 7. a subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. for example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7]. example 1: input: nums = [2,1,3] output: 6 explanation: the subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3]. the corresponding widths are 0, 0, 0, 1, 1, 2, 2. the sum of these widths is 6. example 2: input: nums = [2] output: 0 constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105
company is organizing a meeting and has a list of n employees, waiting to be invited. they have arranged for a large circular table, capable of seating any number of employees. the employees are numbered from 0 to n - 1. each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. the favorite person of an employee is not themself. given a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting. example 1: input: favorite = [2,2,1,2] output: 3 explanation: the above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table. all employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously. note that the company can also invite employees 1, 2, and 3, and give them their desired seats. the maximum number of employees that can be invited to the meeting is 3. example 2: input: favorite = [1,2,0] output: 3 explanation: each employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee. the seating arrangement will be the same as that in the figure given in example 1: - employee 0 will sit between employees 2 and 1. - employee 1 will sit between employees 0 and 2. - employee 2 will sit between employees 1 and 0. the maximum number of employees that can be invited to the meeting is 3. example 3: input: favorite = [3,0,1,4,1] output: 4 explanation: the above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table. employee 2 cannot be invited because the two spots next to their favorite employee 1 are taken. so the company leaves them out of the meeting. the maximum number of employees that can be invited to the meeting is 4. constraints: n == favorite.length 2 <= n <= 105 0 <= favorite[i] <= n - 1 favorite[i] != i
are given a string s of lowercase english letters and an array widths denoting how many pixels wide each lowercase english letter is. specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on. you are trying to write s across several lines, where each line is no longer than 100 pixels. starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. then, from where you stopped in s, continue writing as many letters as you can on the second line. continue this process until you have written all of s. return an array result of length 2 where: result[0] is the total number of lines. result[1] is the width of the last line in pixels. example 1: input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "abcdefghijklmnopqrstuvwxyz" output: [3,60] explanation: you can write s as follows: abcdefghij // 100 pixels wide klmnopqrst // 100 pixels wide uvwxyz // 60 pixels wide there are a total of 3 lines, and the last line is 60 pixels wide. example 2: input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = "bbbcccdddaaa" output: [2,4] explanation: you can write s as follows: bbbcccdddaa // 98 pixels wide a // 4 pixels wide there are a total of 2 lines, and the last line is 4 pixels wide. constraints: widths.length == 26 2 <= widths[i] <= 10 1 <= s.length <= 1000 s contains only lowercase english letters.
an integer array nums, handle multiple queries of the following type: calculate the sum of the elements of nums between indices left and right inclusive where left <= right. implement the numarray class: numarray(int[] nums) initializes the object with the integer array nums. int sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]). example 1: input ["numarray", "sumrange", "sumrange", "sumrange"] [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]] output [null, 1, -1, -3] explanation numarray numarray = new numarray([-2, 0, 3, -5, 2, -1]); numarray.sumrange(0, 2); // return (-2) + 0 + 3 = 1 numarray.sumrange(2, 5); // return 3 + (-5) + 2 + (-1) = -1 numarray.sumrange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3 constraints: 1 <= nums.length <= 104 -105 <= nums[i] <= 105 0 <= left <= right < nums.length at most 104 calls will be made to sumrange.
a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. return the answer in any order. a mapping of digits to letters (just like on the telephone buttons) is given below. note that 1 does not map to any letters. example 1: input: digits = "23" output: ["ad","ae","af","bd","be","bf","cd","ce","cf"] example 2: input: digits = "" output: [] example 3: input: digits = "2" output: ["a","b","c"] constraints: 0 <= digits.length <= 4 digits[i] is a digit in the range ['2', '9'].
are given an integer n. a 0-indexed integer array nums of length n + 1 is generated in the following way: nums[0] = 0 nums[1] = 1 nums[2 * i] = nums[i] when 2 <= 2 * i <= n nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n return the maximum integer in the array nums. example 1: input: n = 7 output: 3 explanation: according to the given rules: nums[0] = 0 nums[1] = 1 nums[(1 * 2) = 2] = nums[1] = 1 nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2 nums[(2 * 2) = 4] = nums[2] = 1 nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3 nums[(3 * 2) = 6] = nums[3] = 2 nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3 hence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3. example 2: input: n = 2 output: 1 explanation: according to the given rules, nums = [0,1,1]. the maximum is max(0,1,1) = 1. example 3: input: n = 3 output: 2 explanation: according to the given rules, nums = [0,1,1,2]. the maximum is max(0,1,1,2) = 2. constraints: 0 <= n <= 100
are n couples sitting in 2n seats arranged in a row and want to hold hands. the people and seats are represented by an integer array row where row[i] is the id of the person sitting in the ith seat. the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1). return the minimum number of swaps so that every couple is sitting side by side. a swap consists of choosing any two people, then they stand up and switch seats. example 1: input: row = [0,2,1,3] output: 1 explanation: we only need to swap the second (row[1]) and third (row[2]) person. example 2: input: row = [3,2,0,1] output: 0 explanation: all couples are already seated side by side. constraints: 2n == row.length 2 <= n <= 30 n is even. 0 <= row[i] < 2n all the elements of row are unique.
is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness. you are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. all the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time). return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x. example 1: input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0] output: [5,5,2,5,4,5,6,7] explanation: answer[0] = 5. person 5 has more money than 3, which has more money than 1, which has more money than 0. the only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0. answer[7] = 7. among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7. the other answers can be filled out with similar reasoning. example 2: input: richer = [], quiet = [0] output: [0] constraints: n == quiet.length 1 <= n <= 500 0 <= quiet[i] < n all the values of quiet are unique. 0 <= richer.length <= n * (n - 1) / 2 0 <= ai, bi < n ai != bi all the pairs of richer are unique. the observations in richer are all logically consistent.
are given a large sample of integers in the range [0, 255]. since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample. calculate the following statistics: minimum: the minimum element in the sample. maximum: the maximum element in the sample. mean: the average of the sample, calculated as the total sum of all elements divided by the total number of elements. median: if the sample has an odd number of elements, then the median is the middle element once the sample is sorted. if the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted. mode: the number that appears the most in the sample. it is guaranteed to be unique. return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. answers within 10-5 of the actual answer will be accepted. example 1: input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] output: [1.00000,3.00000,2.37500,2.50000,3.00000] explanation: the sample represented by count is [1,2,2,2,3,3,3,3]. the minimum and maximum are 1 and 3 respectively. the mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375. since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5. the mode is 3 as it appears the most in the sample. example 2: input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] output: [1.00000,4.00000,2.18182,2.00000,1.00000] explanation: the sample represented by count is [1,1,1,1,2,2,2,3,3,4,4]. the minimum and maximum are 1 and 4 respectively. the mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182). since the size of the sample is odd, the median is the middle element 2. the mode is 1 as it appears the most in the sample. constraints: count.length == 256 0 <= count[i] <= 109 1 <= sum(count) <= 109 the mode of the sample that count represents is unique.
are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1]. we split arr into some number of chunks (i.e., partitions), and individually sort each chunk. after concatenating them, the result should equal the sorted array. return the largest number of chunks we can make to sort the array. example 1: input: arr = [4,3,2,1,0] output: 1 explanation: splitting into two or more chunks will not return the required result. for example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted. example 2: input: arr = [1,0,2,3,4] output: 4 explanation: we can split into two chunks, such as [1, 0], [2, 3, 4]. however, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible. constraints: n == arr.length 1 <= n <= 10 0 <= arr[i] < n all the elements of arr are unique.
are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit. return the minimum number of boats to carry every given person. example 1: input: people = [1,2], limit = 3 output: 1 explanation: 1 boat (1, 2) example 2: input: people = [3,2,2,1], limit = 3 output: 3 explanation: 3 boats (1, 2), (2) and (3) example 3: input: people = [3,5,3,4], limit = 5 output: 4 explanation: 4 boats (3), (3), (4), (5) constraints: 1 <= people.length <= 5 * 104 1 <= people[i] <= limit <= 3 * 104
the root of a perfect binary tree, reverse the node values at each odd level of the tree. for example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2]. return the root of the reversed tree. a binary tree is perfect if all parent nodes have two children and all leaves are on the same level. the level of a node is the number of edges along the path between it and the root node. example 1: input: root = [2,3,5,8,13,21,34] output: [2,5,3,8,13,21,34] explanation: the tree has only one odd level. the nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3. example 2: input: root = [7,13,11] output: [7,11,13] explanation: the nodes at level 1 are 13, 11, which are reversed and become 11, 13. example 3: input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2] output: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1] explanation: the odd levels have non-zero values. the nodes at level 1 were 1, 2, and are 2, 1 after the reversal. the nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal. constraints: the number of nodes in the tree is in the range [1, 214]. 0 <= node.val <= 105 root is a perfect binary tree.
count-and-say sequence is a sequence of digit strings defined by the recursive formula: countandsay(1) = "1" countandsay(n) is the way you would "say" the digit string from countandsay(n-1), which is then converted into a different digit string. to determine how you "say" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. then for each substring, say the number of digits, then say the digit. finally, concatenate every said digit. for example, the saying and conversion for digit string "3322251": given a positive integer n, return the nth term of the count-and-say sequence. example 1: input: n = 1 output: "1" explanation: this is the base case. example 2: input: n = 4 output: "1211" explanation: countandsay(1) = "1" countandsay(2) = say "1" = one 1 = "11" countandsay(3) = say "11" = two 1's = "21" countandsay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211" constraints: 1 <= n <= 30
a lemonade stand, each lemonade costs $5. customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. you must provide the correct change to each customer so that the net transaction is that the customer pays $5. note that you do not have any change in hand at first. given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise. example 1: input: bills = [5,5,5,10,20] output: true explanation: from the first 3 customers, we collect three $5 bills in order. from the fourth customer, we collect a $10 bill and give back a $5. from the fifth customer, we give a $10 bill and a $5 bill. since all customers got correct change, we output true. example 2: input: bills = [5,5,10,10,20] output: false explanation: from the first two customers in order, we collect two $5 bills. for the next two customers in order, we collect a $10 bill and give back a $5 bill. for the last customer, we can not give the change of $15 back because we only have two $10 bills. since not every customer received the correct change, the answer is false. constraints: 1 <= bills.length <= 105 bills[i] is either 5, 10, or 20.
is a malfunctioning keyboard where some letter keys do not work. all other keys on the keyboard work properly. given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenletters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard. example 1: input: text = "hello world", brokenletters = "ad" output: 1 explanation: we cannot type "world" because the 'd' key is broken. example 2: input: text = "leet code", brokenletters = "lt" output: 1 explanation: we cannot type "leet" because the 'l' and 't' keys are broken. example 3: input: text = "leet code", brokenletters = "e" output: 0 explanation: we cannot type either word because the 'e' key is broken. constraints: 1 <= text.length <= 104 0 <= brokenletters.length <= 26 text consists of words separated by a single space without any leading or trailing spaces. each word only consists of lowercase english letters. brokenletters consists of distinct lowercase english letters.
schema table: seat +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | student | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the name and the id of a student. id is a continuous increment. write an sql query to swap the seat id of every two consecutive students. if the number of students is odd, the id of the last student is not swapped. return the result table ordered by id in ascending order. the query result format is in the following example. example 1: input: seat table: +----+---------+ | id | student | +----+---------+ | 1 | abbot | | 2 | doris | | 3 | emerson | | 4 | green | | 5 | jeames | +----+---------+ output: +----+---------+ | id | student | +----+---------+ | 1 | doris | | 2 | abbot | | 3 | green | | 4 | emerson | | 5 | jeames | +----+---------+ explanation: note that if the number of students is odd, there is no need to change the last one's seat.
an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7. example 1: input: n = 1 output: 1 explanation: "1" in binary corresponds to the decimal value 1. example 2: input: n = 3 output: 27 explanation: in binary, 1, 2, and 3 corresponds to "1", "10", and "11". after concatenating them, we have "11011", which corresponds to the decimal value 27. example 3: input: n = 12 output: 505379714 explanation: the concatenation results in "1101110010111011110001001101010111100". the decimal value of that is 118505380540. after modulo 109 + 7, the result is 505379714. constraints: 1 <= n <= 105
are given an array of positive integers arr. perform some operations (possibly none) on arr so that it satisfies these conditions: the value of the first element in arr must be 1. the absolute difference between any 2 adjacent elements must be less than or equal to 1. in other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x. there are 2 types of operations that you can perform any number of times: decrease the value of any element of arr to a smaller positive integer. rearrange the elements of arr to be in any order. return the maximum possible value of an element in arr after performing the operations to satisfy the conditions. example 1: input: arr = [2,2,1,2,1] output: 2 explanation: we can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1]. the largest element in arr is 2. example 2: input: arr = [100,1,1000] output: 3 explanation: one possible way to satisfy the conditions is by doing the following: 1. rearrange arr so it becomes [1,100,1000]. 2. decrease the value of the second element to 2. 3. decrease the value of the third element to 3. now arr = [1,2,3], which satisfies the conditions. the largest element in arr is 3. example 3: input: arr = [1,2,3,4,5] output: 5 explanation: the array already satisfies the conditions, and the largest element is 5. constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 109
an integer array nums, rotate the array to the right by k steps, where k is non-negative. example 1: input: nums = [1,2,3,4,5,6,7], k = 3 output: [5,6,7,1,2,3,4] explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] example 2: input: nums = [-1,-100,3,99], k = 2 output: [3,99,-1,-100] explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] constraints: 1 <= nums.length <= 105 -231 <= nums[i] <= 231 - 1 0 <= k <= 105 follow up: try to come up with as many solutions as you can. there are at least three different ways to solve this problem. could you do it in-place with o(1) extra space?
are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase english letters. you can add either pattern[0] or pattern[1] anywhere in text exactly once. note that the character can be added even at the beginning or at the end of text. return the maximum number of times pattern can occur as a subsequence of the modified text. a subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. example 1: input: text = "abdcdbc", pattern = "ac" output: 4 explanation: if we add pattern[0] = 'a' in between text[1] and text[2], we get "abadcdbc". now, the number of times "ac" occurs as a subsequence is 4. some other strings which have 4 subsequences "ac" after adding a character to text are "aabdcdbc" and "abdacdbc". however, strings such as "abdcadbc", "abdccdbc", and "abdcdbcc", although obtainable, have only 3 subsequences "ac" and are thus suboptimal. it can be shown that it is not possible to get more than 4 subsequences "ac" by adding only one character. example 2: input: text = "aabb", pattern = "ab" output: 6 explanation: some of the strings which can be obtained from text and have 6 subsequences "ab" are "aaabb", "aaabb", and "aabbb". constraints: 1 <= text.length <= 105 pattern.length == 2 text and pattern consist only of lowercase english letters.
schema table: users +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | name | varchar | | mail | varchar | +---------------+---------+ user_id is the primary key for this table. this table contains information of the users signed up in a website. some e-mails are invalid. write an sql query to find the users who have valid emails. a valid e-mail has a prefix name and a domain where: the prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. the prefix name must start with a letter. the domain is '@leetcode.com'. return the result table in any order. the query result format is in the following example. example 1: input: users table: +---------+-----------+-------------------------+ | user_id | name | mail | +---------+-----------+-------------------------+ | 1 | winston | winston@leetcode.com | | 2 | jonathan | jonathanisgreat | | 3 | annabelle | bella-@leetcode.com | | 4 | sally | sally.come@leetcode.com | | 5 | marwan | quarz#2020@leetcode.com | | 6 | david | david69@gmail.com | | 7 | shapiro | .shapo@leetcode.com | +---------+-----------+-------------------------+ output: +---------+-----------+-------------------------+ | user_id | name | mail | +---------+-----------+-------------------------+ | 1 | winston | winston@leetcode.com | | 3 | annabelle | bella-@leetcode.com | | 4 | sally | sally.come@leetcode.com | +---------+-----------+-------------------------+ explanation: the mail of user 2 does not have a domain. the mail of user 5 has the # sign which is not allowed. the mail of user 6 does not have the leetcode domain. the mail of user 7 starts with a period.
a string s, find the length of the longest substring without repeating characters. example 1: input: s = "abcabcbb" output: 3 explanation: the answer is "abc", with the length of 3. example 2: input: s = "bbbbb" output: 1 explanation: the answer is "b", with the length of 1. example 3: input: s = "pwwkew" output: 3 explanation: the answer is "wke", with the length of 3. notice that the answer must be a substring, "pwke" is a subsequence and not a substring. constraints: 0 <= s.length <= 5 * 104 s consists of english letters, digits, symbols and spaces.
are given a 2d integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white. you are also given an integer carpetlen, the length of a single carpet that can be placed anywhere. return the maximum number of white tiles that can be covered by the carpet. example 1: input: tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetlen = 10 output: 9 explanation: place the carpet starting on tile 10. it covers 9 white tiles, so we return 9. note that there may be other places where the carpet covers 9 white tiles. it can be shown that the carpet cannot cover more than 9 white tiles. example 2: input: tiles = [[10,11],[1,1]], carpetlen = 2 output: 2 explanation: place the carpet starting on tile 10. it covers 2 white tiles, so we return 2. constraints: 1 <= tiles.length <= 5 * 104 tiles[i].length == 2 1 <= li <= ri <= 109 1 <= carpetlen <= 109 the tiles are non-overlapping.
schema table: prices +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | start_date | date | | end_date | date | | price | int | +---------------+---------+ (product_id, start_date, end_date) is the primary key for this table. each row of this table indicates the price of the product_id in the period from start_date to end_date. for each product_id there will be no two overlapping periods. that means there will be no two intersecting periods for the same product_id. table: unitssold +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | purchase_date | date | | units | int | +---------------+---------+ there is no primary key for this table, it may contain duplicates. each row of this table indicates the date, units, and product_id of each product sold. write an sql query to find the average selling price for each product. average_price should be rounded to 2 decimal places. return the result table in any order. the query result format is in the following example. example 1: input: prices table: +------------+------------+------------+--------+ | product_id | start_date | end_date | price | +------------+------------+------------+--------+ | 1 | 2019-02-17 | 2019-02-28 | 5 | | 1 | 2019-03-01 | 2019-03-22 | 20 | | 2 | 2019-02-01 | 2019-02-20 | 15 | | 2 | 2019-02-21 | 2019-03-31 | 30 | +------------+------------+------------+--------+ unitssold table: +------------+---------------+-------+ | product_id | purchase_date | units | +------------+---------------+-------+ | 1 | 2019-02-25 | 100 | | 1 | 2019-03-01 | 15 | | 2 | 2019-02-10 | 200 | | 2 | 2019-03-22 | 30 | +------------+---------------+-------+ output: +------------+---------------+ | product_id | average_price | +------------+---------------+ | 1 | 6.96 | | 2 | 16.96 | +------------+---------------+ explanation: average selling price = total price of product / number of products sold. average selling price for product 1 = ((100 * 5) + (15 * 20)) / 115 = 6.96 average selling price for product 2 = ((200 * 15) + (30 * 30)) / 230 = 16.96
are given an integer array values where values[i] represents the value of the ith sightseeing spot. two sightseeing spots i and j have a distance j - i between them. the score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them. return the maximum score of a pair of sightseeing spots. example 1: input: values = [8,1,5,2,6] output: 11 explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11 example 2: input: values = [1,2] output: 2 constraints: 2 <= values.length <= 5 * 104 1 <= values[i] <= 1000
an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers. in other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg. note that 0 is neither positive nor negative. example 1: input: nums = [-2,-1,-1,1,2,3] output: 3 explanation: there are 3 positive integers and 3 negative integers. the maximum count among them is 3. example 2: input: nums = [-3,-2,-1,0,0,1,2] output: 3 explanation: there are 2 positive integers and 3 negative integers. the maximum count among them is 3. example 3: input: nums = [5,20,66,1314] output: 4 explanation: there are 4 positive integers and 0 negative integers. the maximum count among them is 4. constraints: 1 <= nums.length <= 2000 -2000 <= nums[i] <= 2000 nums is sorted in a non-decreasing order. follow up: can you solve the problem in o(log(n)) time complexity?
a string s, return the number of different non-empty palindromic subsequences in s. since the answer may be very large, return it modulo 109 + 7. a subsequence of a string is obtained by deleting zero or more characters from the string. a sequence is palindromic if it is equal to the sequence reversed. two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi. example 1: input: s = "bccb" output: 6 explanation: the 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'. note that 'bcb' is counted only once, even though it occurs twice. example 2: input: s = "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba" output: 104860361 explanation: there are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7. constraints: 1 <= s.length <= 1000 s[i] is either 'a', 'b', 'c', or 'd'.
are given two 0-indexed integer arrays nums and divisors. the divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i]. return the integer divisors[i] with the maximum divisibility score. if there is more than one integer with the maximum score, return the minimum of them. example 1: input: nums = [4,7,9,3,9], divisors = [5,2,3] output: 3 explanation: the divisibility score for every element in divisors is: the divisibility score of divisors[0] is 0 since no number in nums is divisible by 5. the divisibility score of divisors[1] is 1 since nums[0] is divisible by 2. the divisibility score of divisors[2] is 3 since nums[2], nums[3], and nums[4] are divisible by 3. since divisors[2] has the maximum divisibility score, we return it. example 2: input: nums = [20,14,21,10], divisors = [5,7,5] output: 5 explanation: the divisibility score for every element in divisors is: the divisibility score of divisors[0] is 2 since nums[0] and nums[3] are divisible by 5. the divisibility score of divisors[1] is 2 since nums[1] and nums[2] are divisible by 7. the divisibility score of divisors[2] is 2 since nums[0] and nums[3] are divisible by 5. since divisors[0], divisors[1], and divisors[2] all have the maximum divisibility score, we return the minimum of them (i.e., divisors[2]). example 3: input: nums = [12], divisors = [10,16] output: 10 explanation: the divisibility score for every element in divisors is: the divisibility score of divisors[0] is 0 since no number in nums is divisible by 10. the divisibility score of divisors[1] is 0 since no number in nums is divisible by 16. since divisors[0] and divisors[1] both have the maximum divisibility score, we return the minimum of them (i.e., divisors[0]). constraints: 1 <= nums.length, divisors.length <= 1000 1 <= nums[i], divisors[i] <= 109
an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's. you must do it in place. example 1: input: matrix = [[1,1,1],[1,0,1],[1,1,1]] output: [[1,0,1],[0,0,0],[1,0,1]] example 2: input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]] constraints: m == matrix.length n == matrix[0].length 1 <= m, n <= 200 -231 <= matrix[i][j] <= 231 - 1 follow up: a straightforward solution using o(mn) space is probably a bad idea. a simple improvement uses o(m + n) space, but still not the best solution. could you devise a constant space solution?
are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile. in one move, you can perform either of the following: if the pile is not empty, remove the topmost element of the pile. if there are one or more removed elements, add any one of them back onto the pile. this element becomes the new topmost element. you are also given an integer k, which denotes the total number of moves to be made. return the maximum value of the topmost element of the pile possible after exactly k moves. in case it is not possible to obtain a non-empty pile after k moves, return -1. example 1: input: nums = [5,2,2,4,0,6], k = 4 output: 5 explanation: one of the ways we can end with 5 at the top of the pile after 4 moves is as follows: - step 1: remove the topmost element = 5. the pile becomes [2,2,4,0,6]. - step 2: remove the topmost element = 2. the pile becomes [2,4,0,6]. - step 3: remove the topmost element = 2. the pile becomes [4,0,6]. - step 4: add 5 back onto the pile. the pile becomes [5,4,0,6]. note that this is not the only way to end with 5 at the top of the pile. it can be shown that 5 is the largest answer possible after 4 moves. example 2: input: nums = [2], k = 1 output: -1 explanation: in the first move, our only option is to pop the topmost element of the pile. since it is not possible to obtain a non-empty pile after one move, we return -1. constraints: 1 <= nums.length <= 105 0 <= nums[i], k <= 109
a stack that supports increment operations on its elements. implement the customstack class: customstack(int maxsize) initializes the object with maxsize which is the maximum number of elements in the stack. void push(int x) adds x to the top of the stack if the stack has not reached the maxsize. int pop() pops and returns the top of the stack or -1 if the stack is empty. void inc(int k, int val) increments the bottom k elements of the stack by val. if there are less than k elements in the stack, increment all the elements in the stack. example 1: input ["customstack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"] [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]] output [null,null,null,2,null,null,null,null,null,103,202,201,-1] explanation customstack stk = new customstack(3); // stack is empty [] stk.push(1); // stack becomes [1] stk.push(2); // stack becomes [1, 2] stk.pop(); // return 2 --> return top of the stack 2, stack becomes [1] stk.push(2); // stack becomes [1, 2] stk.push(3); // stack becomes [1, 2, 3] stk.push(4); // stack still [1, 2, 3], do not add another elements as size is 4 stk.increment(5, 100); // stack becomes [101, 102, 103] stk.increment(2, 100); // stack becomes [201, 202, 103] stk.pop(); // return 103 --> return top of the stack 103, stack becomes [201, 202] stk.pop(); // return 202 --> return top of the stack 202, stack becomes [201] stk.pop(); // return 201 --> return top of the stack 201, stack becomes [] stk.pop(); // return -1 --> stack is empty return -1. constraints: 1 <= maxsize, x, k <= 1000 0 <= val <= 100 at most 1000 calls will be made to each method of increment, push and pop each separately.
3 positives numbers a, b and c. return the minimum flips required in some bits of a and b to make ( a or b == c ). (bitwise or operation). flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation. example 1: input: a = 2, b = 6, c = 5 output: 3 explanation: after flips a = 1 , b = 4 , c = 5 such that (a or b == c) example 2: input: a = 4, b = 2, c = 7 output: 1 example 3: input: a = 1, b = 2, c = 3 output: 0 constraints: 1 <= a <= 10^9 1 <= b <= 10^9 1 <= c <= 10^9
an array of asyncronous functions functions and a pool limit n, return an asyncronous function promisepool. it should return a promise that resolves when all the input functions resolve. pool limit is defined as the maximum number promises that can be pending at once. promisepool should begin execution of as many functions as possible and continue executing new functions when old promises resolve. promisepool should execute functions[i] then functions[i + 1] then functions[i + 2], etc. when the last promise resolves, promisepool should also resolve. for example, if n = 1, promisepool will execute one function at a time in series. however, if n = 2, it first executes two functions. when either of the two functions resolve, a 3rd function should be executed (if available), and so on until there are no functions left to execute. you can assume all functions never reject. it is acceptable for promisepool to return a promise that resolves any value. example 1: input: functions = [ () => new promise(res => settimeout(res, 300)), () => new promise(res => settimeout(res, 400)), () => new promise(res => settimeout(res, 200)) ] n = 2 output: [[300,400,500],500] explanation: three functions are passed in. they sleep for 300ms, 400ms, and 200ms respectively. they resolve at 300ms, 400ms, and 500ms respectively. the returned promise resolves at 500ms. at t=0, the first 2 functions are executed. the pool size limit of 2 is reached. at t=300, the 1st function resolves, and the 3rd function is executed. pool size is 2. at t=400, the 2nd function resolves. there is nothing left to execute. pool size is 1. at t=500, the 3rd function resolves. pool size is zero so the returned promise also resolves. example 2: input: functions = [ () => new promise(res => settimeout(res, 300)), () => new promise(res => settimeout(res, 400)), () => new promise(res => settimeout(res, 200)) ] n = 5 output: [[300,400,200],400] explanation: the three input promises resolve at 300ms, 400ms, and 200ms respectively. the returned promise resolves at 400ms. at t=0, all 3 functions are executed. the pool limit of 5 is never met. at t=200, the 3rd function resolves. pool size is 2. at t=300, the 1st function resolved. pool size is 1. at t=400, the 2nd function resolves. pool size is 0, so the returned promise also resolves. example 3: input: functions = [ () => new promise(res => settimeout(res, 300)), () => new promise(res => settimeout(res, 400)), () => new promise(res => settimeout(res, 200)) ] n = 1 output: [[300,700,900],900] explanation: the three input promises resolve at 300ms, 700ms, and 900ms respectively. the returned promise resolves at 900ms. at t=0, the 1st function is executed. pool size is 1. at t=300, the 1st function resolves and the 2nd function is executed. pool size is 1. at t=700, the 2nd function resolves and the 3rd function is executed. pool size is 1. at t=900, the 3rd function resolves. pool size is 0 so the returned promise resolves. constraints: 0 <= functions.length <= 10 1 <= n <= 10
are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job. there are k workers that you can assign jobs to. each job should be assigned to exactly one worker. the working time of a worker is the sum of the time it takes to complete all jobs assigned to them. your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized. return the minimum possible maximum working time of any assignment. example 1: input: jobs = [3,2,3], k = 3 output: 3 explanation: by assigning each person one job, the maximum time is 3. example 2: input: jobs = [1,2,4,7,8], k = 2 output: 11 explanation: assign the jobs the following way: worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11) worker 2: 4, 7 (working time = 4 + 7 = 11) the maximum working time is 11. constraints: 1 <= k <= jobs.length <= 12 1 <= jobs[i] <= 107
a string s consisting only of characters a, b and c. return the number of substrings containing at least one occurrence of all these characters a, b and c. example 1: input: s = "abcabc" output: 10 explanation: the substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). example 2: input: s = "aaacb" output: 3 explanation: the substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". example 3: input: s = "abc" output: 1 constraints: 3 <= s.length <= 5 x 10^4 s only consists of a, b or c characters.
country has an infinite number of lakes. initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. if it rains over a lake that is full of water, there will be a flood. your goal is to avoid floods in any lake. given an integer array rains where: rains[i] > 0 means there will be rains over the rains[i] lake. rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it. return an array ans where: ans.length == rains.length ans[i] == -1 if rains[i] > 0. ans[i] is the lake you choose to dry in the ith day if rains[i] == 0. if there are multiple valid answers return any of them. if it is impossible to avoid flood return an empty array. notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. example 1: input: rains = [1,2,3,4] output: [-1,-1,-1,-1] explanation: after the first day full lakes are [1] after the second day full lakes are [1,2] after the third day full lakes are [1,2,3] after the fourth day full lakes are [1,2,3,4] there's no day to dry any lake and there is no flood in any lake. example 2: input: rains = [1,2,0,0,2,1] output: [-1,-1,2,1,-1,-1] explanation: after the first day full lakes are [1] after the second day full lakes are [1,2] after the third day, we dry lake 2. full lakes are [1] after the fourth day, we dry lake 1. there is no full lakes. after the fifth day, full lakes are [2]. after the sixth day, full lakes are [1,2]. it is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario. example 3: input: rains = [1,2,0,1,2] output: [] explanation: after the second day, full lakes are [1,2]. we have to dry one lake in the third day. after that, it will rain over lakes [1,2]. it's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood. constraints: 1 <= rains.length <= 105 0 <= rains[i] <= 109
range module is a module that tracks ranges of numbers. design a data structure to track the ranges represented as half-open intervals and query about them. a half-open interval [left, right) denotes all the real numbers x where left <= x < right. implement the rangemodule class: rangemodule() initializes the object of the data structure. void addrange(int left, int right) adds the half-open interval [left, right), tracking every real number in that interval. adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked. boolean queryrange(int left, int right) returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise. void removerange(int left, int right) stops tracking every real number currently being tracked in the half-open interval [left, right). example 1: input ["rangemodule", "addrange", "removerange", "queryrange", "queryrange", "queryrange"] [[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]] output [null, null, null, true, false, true] explanation rangemodule rangemodule = new rangemodule(); rangemodule.addrange(10, 20); rangemodule.removerange(14, 16); rangemodule.queryrange(10, 14); // return true,(every number in [10, 14) is being tracked) rangemodule.queryrange(13, 15); // return false,(numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked) rangemodule.queryrange(16, 17); // return true, (the number 16 in [16, 17) is still being tracked, despite the remove operation) constraints: 1 <= left < right <= 109 at most 104 calls will be made to addrange, queryrange, and removerange.
an array of strings words, return the first palindromic string in the array. if there is no such string, return an empty string "". a string is palindromic if it reads the same forward and backward. example 1: input: words = ["abc","car","ada","racecar","cool"] output: "ada" explanation: the first string that is palindromic is "ada". note that "racecar" is also palindromic, but it is not the first. example 2: input: words = ["notapalindrome","racecar"] output: "racecar" explanation: the first and only string that is palindromic is "racecar". example 3: input: words = ["def","ghi"] output: "" explanation: there are no palindromic strings, so the empty string is returned. constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists only of lowercase english letters.
an alien language, surprisingly, they also use english lowercase letters, but possibly in a different order. the order of the alphabet is some permutation of lowercase letters. given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language. example 1: input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz" output: true explanation: as 'h' comes before 'l' in this language, then the sequence is sorted. example 2: input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz" output: false explanation: as 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted. example 3: input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz" output: false explanation: the first three characters "app" match, and the second string is shorter (in size.) according to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (more info). constraints: 1 <= words.length <= 100 1 <= words[i].length <= 20 order.length == 26 all characters in words[i] and order are english lowercase letters.
schema table: employee +--------------+---------+ | column name | type | +--------------+---------+ | id | int | | name | varchar | | salary | int | | departmentid | int | +--------------+---------+ id is the primary key column for this table. departmentid is a foreign key of the id from the department table. each row of this table indicates the id, name, and salary of an employee. it also contains the id of their department. table: department +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id of a department and its name. a company's executives are interested in seeing who earns the most money in each of the company's departments. a high earner in a department is an employee who has a salary in the top three unique salaries for that department. write an sql query to find the employees who are high earners in each of the departments. return the result table in any order. the query result format is in the following example. example 1: input: employee table: +----+-------+--------+--------------+ | id | name | salary | departmentid | +----+-------+--------+--------------+ | 1 | joe | 85000 | 1 | | 2 | henry | 80000 | 2 | | 3 | sam | 60000 | 2 | | 4 | max | 90000 | 1 | | 5 | janet | 69000 | 1 | | 6 | randy | 85000 | 1 | | 7 | will | 70000 | 1 | +----+-------+--------+--------------+ department table: +----+-------+ | id | name | +----+-------+ | 1 | it | | 2 | sales | +----+-------+ output: +------------+----------+--------+ | department | employee | salary | +------------+----------+--------+ | it | max | 90000 | | it | joe | 85000 | | it | randy | 85000 | | it | will | 70000 | | sales | henry | 80000 | | sales | sam | 60000 | +------------+----------+--------+ explanation: in the it department: - max earns the highest unique salary - both randy and joe earn the second-highest unique salary - will earns the third-highest unique salary in the sales department: - henry earns the highest salary - sam earns the second-highest salary - there is no third-highest salary as there are only two employees
a string s, return the number of unique palindromes of length three that are a subsequence of s. note that even if there are multiple ways to obtain the same subsequence, it is still only counted once. a palindrome is a string that reads the same forwards and backwards. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, "ace" is a subsequence of "abcde". example 1: input: s = "aabca" output: 3 explanation: the 3 palindromic subsequences of length 3 are: - "aba" (subsequence of "aabca") - "aaa" (subsequence of "aabca") - "aca" (subsequence of "aabca") example 2: input: s = "adc" output: 0 explanation: there are no palindromic subsequences of length 3 in "adc". example 3: input: s = "bbcbaba" output: 4 explanation: the 4 palindromic subsequences of length 3 are: - "bbb" (subsequence of "bbcbaba") - "bcb" (subsequence of "bbcbaba") - "bab" (subsequence of "bbcbaba") - "aba" (subsequence of "bbcbaba") constraints: 3 <= s.length <= 105 s consists of only lowercase english letters.
permutation of an array of integers is an arrangement of its members into a sequence or linear order. for example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]. the next permutation of an array of integers is the next lexicographically greater permutation of its integer. more formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. if such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). for example, the next permutation of arr = [1,2,3] is [1,3,2]. similarly, the next permutation of arr = [2,3,1] is [3,1,2]. while the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement. given an array of integers nums, find the next permutation of nums. the replacement must be in place and use only constant extra memory. example 1: input: nums = [1,2,3] output: [1,3,2] example 2: input: nums = [3,2,1] output: [1,2,3] example 3: input: nums = [1,1,5] output: [1,5,1] constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 100
an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold. example 1: input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4 output: 3 explanation: sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. all other sub-arrays of size 3 have averages less than 4 (the threshold). example 2: input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5 output: 6 explanation: the first 6 sub-arrays of size 3 have averages greater than 5. note that averages are not integers. constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 104 1 <= k <= arr.length 0 <= threshold <= 104
a parking system for a parking lot. the parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size. implement the parkingsystem class: parkingsystem(int big, int medium, int small) initializes object of the parkingsystem class. the number of slots for each parking space are given as part of the constructor. bool addcar(int cartype) checks whether there is a parking space of cartype for the car that wants to get into the parking lot. cartype can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. a car can only park in a parking space of its cartype. if there is no space available, return false, else park the car in that size space and return true. example 1: input ["parkingsystem", "addcar", "addcar", "addcar", "addcar"] [[1, 1, 0], [1], [2], [3], [1]] output [null, true, true, false, false] explanation parkingsystem parkingsystem = new parkingsystem(1, 1, 0); parkingsystem.addcar(1); // return true because there is 1 available slot for a big car parkingsystem.addcar(2); // return true because there is 1 available slot for a medium car parkingsystem.addcar(3); // return false because there is no available slot for a small car parkingsystem.addcar(1); // return false because there is no available slot for a big car. it is already occupied. constraints: 0 <= big, medium, small <= 1000 cartype is 1, 2, or 3 at most 1000 calls will be made to addcar
a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp. implement the timemap class: timemap() initializes the object of the data structure. void set(string key, string value, int timestamp) stores the key key with the value value at the given time timestamp. string get(string key, int timestamp) returns a value such that set was called previously, with timestamp_prev <= timestamp. if there are multiple such values, it returns the value associated with the largest timestamp_prev. if there are no values, it returns "". example 1: input ["timemap", "set", "get", "get", "set", "get", "get"] [[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]] output [null, null, "bar", "bar", null, "bar2", "bar2"] explanation timemap timemap = new timemap(); timemap.set("foo", "bar", 1); // store the key "foo" and value "bar" along with timestamp = 1. timemap.get("foo", 1); // return "bar" timemap.get("foo", 3); // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar". timemap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4. timemap.get("foo", 4); // return "bar2" timemap.get("foo", 5); // return "bar2" constraints: 1 <= key.length, value.length <= 100 key and value consist of lowercase english letters and digits. 1 <= timestamp <= 107 all the timestamps timestamp of set are strictly increasing. at most 2 * 105 calls will be made to set and get.
are given a string s consisting of digits and an integer k. a round can be completed if the length of s is greater than k. in one round, do the following: divide s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. note that the size of the last group can be smaller than k. replace each group of s with a string representing the sum of all its digits. for example, "346" is replaced with "13" because 3 + 4 + 6 = 13. merge consecutive groups together to form a new string. if the length of the string is greater than k, repeat from step 1. return s after all rounds have been completed. example 1: input: s = "11111222223", k = 3 output: "135" explanation: - for the first round, we divide s into groups of size 3: "111", "112", "222", and "23". then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. so, s becomes "3" + "4" + "6" + "5" = "3465" after the first round. - for the second round, we divide s into "346" and "5". then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. so, s becomes "13" + "5" = "135" after second round. now, s.length <= k, so we return "135" as the answer. example 2: input: s = "00000000", k = 3 output: "000" explanation: we divide s into "000", "000", and "00". then we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. s becomes "0" + "0" + "0" = "000", whose length is equal to k, so we return "000". constraints: 1 <= s.length <= 100 2 <= k <= 100 s consists of digits only.
two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. the strings may use parentheses to denote the repeating part of the rational number. a rational number can be represented using up to three parts: <integerpart>, <nonrepeatingpart>, and a <repeatingpart>. the number will be represented in one of the following three ways: <integerpart> for example, 12, 0, and 123. <integerpart><.><nonrepeatingpart> for example, 0.5, 1., 2.12, and 123.0001. <integerpart><.><nonrepeatingpart><(><repeatingpart><)> for example, 0.1(6), 1.(9), 123.00(1212). the repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. for example: 1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66). example 1: input: s = "0.(52)", t = "0.5(25)" output: true explanation: because "0.(52)" represents 0.52525252..., and "0.5(25)" represents 0.52525252525..... , the strings represent the same number. example 2: input: s = "0.1666(6)", t = "0.166(66)" output: true example 3: input: s = "0.9(9)", t = "1." output: true explanation: "0.9(9)" represents 0.999999999... repeated forever, which equals 1. [see this link for an explanation.] "1." represents the number 1, which is formed correctly: (integerpart) = "1" and (nonrepeatingpart) = "". constraints: each part consists only of digits. the <integerpart> does not have leading zeros (except for the zero itself). 1 <= <integerpart>.length <= 4 0 <= <nonrepeatingpart>.length <= 4 1 <= <repeatingpart>.length <= 4
is a knight on an n x n chessboard. in a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once. you are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. the moves are 0-indexed. return true if grid represents a valid configuration of the knight's movements or false otherwise. note that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. the figure below illustrates all the possible eight moves of a knight from some cell. example 1: input: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]] output: true explanation: the above diagram represents the grid. it can be shown that it is a valid configuration. example 2: input: grid = [[0,3,6],[5,8,1],[2,7,4]] output: false explanation: the above diagram represents the grid. the 8th move of the knight is not valid considering its position after the 7th move. constraints: n == grid.length == grid[i].length 3 <= n <= 7 0 <= grid[row][col] < n * n all integers in grid are unique.
are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k. you are allowed to choose exactly one element from each row to form an array. return the kth smallest array sum among all possible arrays. example 1: input: mat = [[1,3,11],[2,4,6]], k = 5 output: 7 explanation: choosing one element from each row, the first k smallest sum are: [1,2], [1,4], [3,2], [3,4], [1,6]. where the 5th sum is 7. example 2: input: mat = [[1,3,11],[2,4,6]], k = 9 output: 17 example 3: input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7 output: 9 explanation: choosing one element from each row, the first k smallest sum are: [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. where the 7th sum is 9. constraints: m == mat.length n == mat.length[i] 1 <= m, n <= 40 1 <= mat[i][j] <= 5000 1 <= k <= min(200, nm) mat[i] is a non-decreasing array.
product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d). for example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16. given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized. return the maximum such product difference. example 1: input: nums = [5,6,2,7,4] output: 34 explanation: we can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4). the product difference is (6 * 7) - (2 * 4) = 34. example 2: input: nums = [4,2,5,9,7,4,8] output: 64 explanation: we can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4). the product difference is (9 * 8) - (2 * 4) = 64. constraints: 4 <= nums.length <= 104 1 <= nums[i] <= 104
triplet is an array of three integers. you are given a 2d integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. you are also given an integer array target = [x, y, z] that describes the triplet you want to obtain. to obtain target, you may apply the following operation on triplets any number of times (possibly zero): choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)]. for example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]. return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise. example 1: input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5] output: true explanation: perform the following operations: - choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]] the target triplet [2,7,5] is now an element of triplets. example 2: input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5] output: false explanation: it is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets. example 3: input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5] output: true explanation: perform the following operations: - choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. - choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]]. the target triplet [5,5,5] is now an element of triplets. constraints: 1 <= triplets.length <= 105 triplets[i].length == target.length == 3 1 <= ai, bi, ci, x, y, z <= 1000
are given an integer num. you know that danny mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit. return the difference between the maximum and minimum values danny can make by remapping exactly one digit in num. notes: when danny remaps a digit d1 to another digit d2, danny replaces all occurrences of d1 in num with d2. danny can remap a digit to itself, in which case num does not change. danny can remap different digits for obtaining minimum and maximum values respectively. the resulting number after remapping can contain leading zeroes. we mentioned "danny mittal" to congratulate him on being in the top 10 in weekly contest 326. example 1: input: num = 11891 output: 99009 explanation: to achieve the maximum value, danny can remap the digit 1 to the digit 9 to yield 99899. to achieve the minimum value, danny can remap the digit 1 to the digit 0, yielding 890. the difference between these two numbers is 99009. example 2: input: num = 90 output: 99 explanation: the maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0). thus, we return 99. constraints: 1 <= num <= 108
a binary tree t, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees. a binary tree x is flip equivalent to a binary tree y if and only if we can make x equal to y after some number of flip operations. given the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise. example 1: input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7] output: true explanation: we flipped at nodes with values 1, 3, and 5. example 2: input: root1 = [], root2 = [] output: true example 3: input: root1 = [], root2 = [1] output: false constraints: the number of nodes in each tree is in the range [0, 100]. each tree will have unique node values in the range [0, 99].
a palindromic string of lowercase english letters palindrome, replace exactly one character with any lowercase english letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. return the resulting string. if there is no way to replace a character to make it not a palindrome, return an empty string. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. for example, "abcc" is lexicographically smaller than "abcd" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'. example 1: input: palindrome = "abccba" output: "aaccba" explanation: there are many ways to make "abccba" not a palindrome, such as "zbccba", "aaccba", and "abacba". of all the ways, "aaccba" is the lexicographically smallest. example 2: input: palindrome = "a" output: "" explanation: there is no way to replace a single character to make "a" not a palindrome, so return an empty string. constraints: 1 <= palindrome.length <= 1000 palindrome consists of only lowercase english letters.
an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums. example 1: input: nums = [11,7,2,15] output: 2 explanation: the element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it. element 11 has element 7 strictly smaller than it and element 15 strictly greater than it. in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums. example 2: input: nums = [-3,3,3,90] output: 2 explanation: the element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it. since there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums. constraints: 1 <= nums.length <= 100 -105 <= nums[i] <= 105
an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. if there is no future day for which this is possible, keep answer[i] == 0 instead. example 1: input: temperatures = [73,74,75,71,69,72,76,73] output: [1,1,4,2,1,1,0,0] example 2: input: temperatures = [30,40,50,60] output: [1,1,1,0] example 3: input: temperatures = [30,60,90] output: [1,1,0] constraints: 1 <= temperatures.length <= 105 30 <= temperatures[i] <= 100
have a function printnumber that can be called with an integer parameter and prints it to the console. for example, calling printnumber(7) prints 7 to the console. you are given an instance of the class zeroevenodd that has three functions: zero, even, and odd. the same instance of zeroevenodd will be passed to three different threads: thread a: calls zero() that should only output 0's. thread b: calls even() that should only output even numbers. thread c: calls odd() that should only output odd numbers. modify the given class to output the series "010203040506..." where the length of the series must be 2n. implement the zeroevenodd class: zeroevenodd(int n) initializes the object with the number n that represents the numbers that should be printed. void zero(printnumber) calls printnumber to output one zero. void even(printnumber) calls printnumber to output one even number. void odd(printnumber) calls printnumber to output one odd number. example 1: input: n = 2 output: "0102" explanation: there are three threads being fired asynchronously. one of them calls zero(), the other calls even(), and the last one calls odd(). "0102" is the correct output. example 2: input: n = 5 output: "0102030405" constraints: 1 <= n <= 1000
image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). if one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother). given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it. example 1: input: img = [[1,1,1],[1,0,1],[1,1,1]] output: [[0,0,0],[0,0,0],[0,0,0]] explanation: for the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0 for the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0 for the point (1,1): floor(8/9) = floor(0.88888889) = 0 example 2: input: img = [[100,200,100],[200,50,200],[100,200,100]] output: [[137,141,137],[141,138,141],[137,141,137]] explanation: for the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137 for the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141 for the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138 constraints: m == img.length n == img[i].length 1 <= m, n <= 200 0 <= img[i][j] <= 255
are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). an island is a group of 1's connected 4-directionally (horizontal or vertical). any cells outside of the grid are considered water cells. an island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2. return the number of islands in grid2 that are considered sub-islands. example 1: input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]] output: 3 explanation: in the picture above, the grid on the left is grid1 and the grid on the right is grid2. the 1s colored red in grid2 are those considered to be part of a sub-island. there are three sub-islands. example 2: input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]] output: 2 explanation: in the picture above, the grid on the left is grid1 and the grid on the right is grid2. the 1s colored red in grid2 are those considered to be part of a sub-island. there are two sub-islands. constraints: m == grid1.length == grid2.length n == grid1[i].length == grid2[i].length 1 <= m, n <= 500 grid1[i][j] and grid2[i][j] are either 0 or 1.
are given the root node of a binary search tree (bst) and a value to insert into the tree. return the root node of the bst after the insertion. it is guaranteed that the new value does not exist in the original bst. notice that there may exist multiple valid ways for the insertion, as long as the tree remains a bst after insertion. you can return any of them. example 1: input: root = [4,2,7,1,3], val = 5 output: [4,2,7,1,3,5] explanation: another accepted tree is: example 2: input: root = [40,20,60,10,30,50,70], val = 25 output: [40,20,60,10,30,50,70,null,null,25] example 3: input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5 output: [4,2,7,1,3,5] constraints: the number of nodes in the tree will be in the range [0, 104]. -108 <= node.val <= 108 all the values node.val are unique. -108 <= val <= 108 it's guaranteed that val does not exist in the original bst.
are given two strings s and p where p is a subsequence of s. you are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed). you want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. more formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence. return the maximum k you can choose such that p is still a subsequence of s after the removals. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. example 1: input: s = "abcacb", p = "ab", removable = [3,1,0] output: 2 explanation: after removing the characters at indices 3 and 1, "abcacb" becomes "accb". "ab" is a subsequence of "accb". if we remove the characters at indices 3, 1, and 0, "abcacb" becomes "ccb", and "ab" is no longer a subsequence. hence, the maximum k is 2. example 2: input: s = "abcbddddd", p = "abcd", removable = [3,2,1,4,5,6] output: 1 explanation: after removing the character at index 3, "abcbddddd" becomes "abcddddd". "abcd" is a subsequence of "abcddddd". example 3: input: s = "abcab", p = "abc", removable = [0,1,2,3,4] output: 0 explanation: if you remove the first index in the array removable, "abc" is no longer a subsequence. constraints: 1 <= p.length <= s.length <= 105 0 <= removable.length < s.length 0 <= removable[i] < s.length p is a subsequence of s. s and p both consist of lowercase english letters. the elements in removable are distinct.
the myatoi(string s) function, which converts a string to a 32-bit signed integer (similar to c/c++'s atoi function). the algorithm for myatoi(string s) is as follows: read in and ignore any leading whitespace. check if the next character (if not already at the end of the string) is '-' or '+'. read this character in if it is either. this determines if the final result is negative or positive respectively. assume the result is positive if neither is present. read in next the characters until the next non-digit character or the end of the input is reached. the rest of the string is ignored. convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). if no digits were read, then the integer is 0. change the sign as necessary (from step 2). if the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1. return the integer as the final result. note: only the space character ' ' is considered a whitespace character. do not ignore any characters other than the leading whitespace or the rest of the string after the digits. example 1: input: s = "42" output: 42 explanation: the underlined characters are what is read in, the caret is the current reader position. step 1: "42" (no characters read because there is no leading whitespace) ^ step 2: "42" (no characters read because there is neither a '-' nor '+') ^ step 3: "42" ("42" is read in) ^ the parsed integer is 42. since 42 is in the range [-231, 231 - 1], the final result is 42. example 2: input: s = " -42" output: -42 explanation: step 1: " -42" (leading whitespace is read and ignored) ^ step 2: " -42" ('-' is read, so the result should be negative) ^ step 3: " -42" ("42" is read in) ^ the parsed integer is -42. since -42 is in the range [-231, 231 - 1], the final result is -42. example 3: input: s = "4193 with words" output: 4193 explanation: step 1: "4193 with words" (no characters read because there is no leading whitespace) ^ step 2: "4193 with words" (no characters read because there is neither a '-' nor '+') ^ step 3: "4193 with words" ("4193" is read in; reading stops because the next character is a non-digit) ^ the parsed integer is 4193. since 4193 is in the range [-231, 231 - 1], the final result is 4193. constraints: 0 <= s.length <= 200 s consists of english letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.
have a bomb to defuse, and your time is running out! your informer will provide you with a circular array code of length of n and a key k. to decrypt the code, you must replace every number. all the numbers are replaced simultaneously. if k > 0, replace the ith number with the sum of the next k numbers. if k < 0, replace the ith number with the sum of the previous k numbers. if k == 0, replace the ith number with 0. as code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1]. given the circular array code and an integer key k, return the decrypted code to defuse the bomb! example 1: input: code = [5,7,1,4], k = 3 output: [12,10,16,13] explanation: each number is replaced by the sum of the next 3 numbers. the decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. notice that the numbers wrap around. example 2: input: code = [1,2,3,4], k = 0 output: [0,0,0,0] explanation: when k is zero, the numbers are replaced by 0. example 3: input: code = [2,4,9,3], k = -2 output: [12,5,6,13] explanation: the decrypted code is [3+9, 2+3, 4+2, 9+4]. notice that the numbers wrap around again. if k is negative, the sum is of the previous numbers. constraints: n == code.length 1 <= n <= 100 1 <= code[i] <= 100 -(n - 1) <= k <= n - 1
two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. if there is no such substring, return the empty string "". the testcases will be generated such that the answer is unique. example 1: input: s = "adobecodebanc", t = "abc" output: "banc" explanation: the minimum window substring "banc" includes 'a', 'b', and 'c' from string t. example 2: input: s = "a", t = "a" output: "a" explanation: the entire string s is the minimum window. example 3: input: s = "a", t = "aa" output: "" explanation: both 'a's from t must be included in the window. since the largest window of s only has one 'a', return empty string. constraints: m == s.length n == t.length 1 <= m, n <= 105 s and t consist of uppercase and lowercase english letters. follow up: could you find an algorithm that runs in o(m + n) time?
a program to count the number of days between two dates. the two dates are given as strings, their format is yyyy-mm-dd as shown in the examples. example 1: input: date1 = "2019-06-29", date2 = "2019-06-30" output: 1 example 2: input: date1 = "2020-01-15", date2 = "2019-12-31" output: 15 constraints: the given dates are valid dates between the years 1971 and 2100.
are given two lists of closed intervals, firstlist and secondlist, where firstlist[i] = [starti, endi] and secondlist[j] = [startj, endj]. each list of intervals is pairwise disjoint and in sorted order. return the intersection of these two interval lists. a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b. the intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. for example, the intersection of [1, 3] and [2, 4] is [2, 3]. example 1: input: firstlist = [[0,2],[5,10],[13,23],[24,25]], secondlist = [[1,5],[8,12],[15,24],[25,26]] output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] example 2: input: firstlist = [[1,3],[5,9]], secondlist = [] output: [] constraints: 0 <= firstlist.length, secondlist.length <= 1000 firstlist.length + secondlist.length >= 1 0 <= starti < endi <= 109 endi < starti+1 0 <= startj < endj <= 109 endj < startj+1
two binary trees original and cloned and given a reference to a node target in the original tree. the cloned tree is a copy of the original tree. return a reference to the same node in the cloned tree. note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree. example 1: input: tree = [7,4,3,null,null,6,19], target = 3 output: 3 explanation: in all examples the original and cloned trees are shown. the target node is a green node from the original tree. the answer is the yellow node from the cloned tree. example 2: input: tree = [7], target = 7 output: 7 example 3: input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4 output: 4 constraints: the number of nodes in the tree is in the range [1, 104]. the values of the nodes of the tree are unique. target node is a node from the original tree and is not null. follow up: could you solve the problem if repeated values on the tree are allowed?
a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array. return the minimum number of patches required. example 1: input: nums = [1,3], n = 6 output: 1 explanation: combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. so we only need 1 patch. example 2: input: nums = [1,5,10], n = 20 output: 2 explanation: the two patches can be [2, 4]. example 3: input: nums = [1,2,2], n = 5 output: 0 constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 nums is sorted in ascending order. 1 <= n <= 231 - 1
an array of non-negative integers arr, you are initially positioned at start index of the array. when you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0. notice that you can not jump outside of the array at any time. example 1: input: arr = [4,2,3,0,3,1,2], start = 5 output: true explanation: all possible ways to reach at index 3 with value 0 are: index 5 -> index 4 -> index 1 -> index 3 index 5 -> index 6 -> index 4 -> index 1 -> index 3 example 2: input: arr = [4,2,3,0,3,1,2], start = 0 output: true explanation: one possible way to reach at index 3 with value 0 is: index 0 -> index 4 -> index 1 -> index 3 example 3: input: arr = [3,0,2,1,2], start = 2 output: false explanation: there is no way to reach at index 1 with value 0. constraints: 1 <= arr.length <= 5 * 104 0 <= arr[i] < arr.length 0 <= start < arr.length
are given a 0-indexed integer array nums. in one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length. return the number of steps performed until nums becomes a non-decreasing array. example 1: input: nums = [5,3,4,4,7,3,6,11,8,5,11] output: 3 explanation: the following are the steps performed: - step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11] - step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11] - step 3: [5,4,7,11,11] becomes [5,7,11,11] [5,7,11,11] is a non-decreasing array. therefore, we return 3. example 2: input: nums = [4,5,7,7,13] output: 0 explanation: nums is already a non-decreasing array. therefore, we return 0. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. if no such indices exists, return false. example 1: input: nums = [1,2,3,4,5] output: true explanation: any triplet where i < j < k is valid. example 2: input: nums = [5,4,3,2,1] output: false explanation: no triplet exists. example 3: input: nums = [2,1,5,0,4,6] output: true explanation: the triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6. constraints: 1 <= nums.length <= 5 * 105 -231 <= nums[i] <= 231 - 1 follow up: could you implement a solution that runs in o(n) time complexity and o(1) space complexity?
an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k. a subarray is a contiguous non-empty sequence of elements within an array. the greatest common divisor of an array is the largest integer that evenly divides all the array elements. example 1: input: nums = [9,3,1,2,6,3], k = 3 output: 4 explanation: the subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are: - [9,3,1,2,6,3] - [9,3,1,2,6,3] - [9,3,1,2,6,3] - [9,3,1,2,6,3] example 2: input: nums = [4], k = 7 output: 0 explanation: there are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements. constraints: 1 <= nums.length <= 1000 1 <= nums[i], k <= 109
are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x. notice that x does not have to be an element in nums. return x if the array is special, otherwise, return -1. it can be proven that if nums is special, the value for x is unique. example 1: input: nums = [3,5] output: 2 explanation: there are 2 values (3 and 5) that are greater than or equal to 2. example 2: input: nums = [0,0] output: -1 explanation: no numbers fit the criteria for x. if x = 0, there should be 0 numbers >= x, but there are 2. if x = 1, there should be 1 number >= x, but there are 0. if x = 2, there should be 2 numbers >= x, but there are 0. x cannot be greater since there are only 2 numbers in nums. example 3: input: nums = [0,4,3,0,4] output: 3 explanation: there are 3 values that are greater than or equal to 3. constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 1000
are given an array nums of positive integers and a positive integer k. a subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k. return the number of non-empty beautiful subsets of the array nums. a subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. two subsets are different if and only if the chosen indices to delete are different. example 1: input: nums = [2,4,6], k = 2 output: 4 explanation: the beautiful subsets of the array nums are: [2], [4], [6], [2, 6]. it can be proved that there are only 4 beautiful subsets in the array [2,4,6]. example 2: input: nums = [1], k = 1 output: 1 explanation: the beautiful subset of the array nums is [1]. it can be proved that there is only 1 beautiful subset in the array [1]. constraints: 1 <= nums.length <= 20 1 <= nums[i], k <= 1000
perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. a divisor of an integer x is an integer that can divide x evenly. given an integer n, return true if n is a perfect number, otherwise return false. example 1: input: num = 28 output: true explanation: 28 = 1 + 2 + 4 + 7 + 14 1, 2, 4, 7, and 14 are all divisors of 28. example 2: input: num = 7 output: false constraints: 1 <= num <= 108
are given an integer array arr. from some starting index, you can make a series of jumps. the (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. note that the jumps are numbered, not the indices. you may jump forward from index i to index j (with i < j) in the following way: during odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. if there are multiple such indices j, you can only jump to the smallest such index j. during even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. if there are multiple such indices j, you can only jump to the smallest such index j. it may be the case that for some index i, there are no legal jumps. a starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once). return the number of good starting indices. example 1: input: arr = [10,13,12,14,15] output: 2 explanation: from starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more. from starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more. from starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end. from starting index i = 4, we have reached the end already. in total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of jumps. example 2: input: arr = [2,3,1,1,4] output: 3 explanation: from starting index i = 0, we make jumps to i = 1, i = 2, i = 3: during our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0]. during our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3 during our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2]. we can't jump from i = 3 to i = 4, so the starting index i = 0 is not good. in a similar manner, we can deduce that: from starting index i = 1, we jump to i = 4, so we reach the end. from starting index i = 2, we jump to i = 3, and then we can't jump anymore. from starting index i = 3, we jump to i = 4, so we reach the end. from starting index i = 4, we are already at the end. in total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some number of jumps. example 3: input: arr = [5,1,3,4,2] output: 3 explanation: we can reach the end from starting indices 1, 2, and 4. constraints: 1 <= arr.length <= 2 * 104 0 <= arr[i] < 105
are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. you can move in this matrix from a cell to any other cell in the next row. that is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). note that it is not possible to move from cells in the last row. each possible move has a cost given by a 0-indexed 2d array movecost of size (m * n) x n, where movecost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. the cost of moving from cells in the last row of grid can be ignored. the cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row. example 1: input: grid = [[5,3],[4,0],[2,1]], movecost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]] output: 17 explanation: the path with the minimum possible cost is the path 5 -> 0 -> 1. - the sum of the values of cells visited is 5 + 0 + 1 = 6. - the cost of moving from 5 to 0 is 3. - the cost of moving from 0 to 1 is 8. so the total cost of the path is 6 + 3 + 8 = 17. example 2: input: grid = [[5,1,2],[4,0,3]], movecost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]] output: 6 explanation: the path with the minimum possible cost is the path 2 -> 3. - the sum of the values of cells visited is 2 + 3 = 5. - the cost of moving from 2 to 3 is 1. so the total cost of this path is 5 + 1 = 6. constraints: m == grid.length n == grid[i].length 2 <= m, n <= 50 grid consists of distinct integers from 0 to m * n - 1. movecost.length == m * n movecost[i].length == n 1 <= movecost[i][j] <= 100
pair sum of a pair (a,b) is equal to a + b. the maximum pair sum is the largest pair sum in a list of pairs. for example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8. given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that: each element of nums is in exactly one pair, and the maximum pair sum is minimized. return the minimized maximum pair sum after optimally pairing up the elements. example 1: input: nums = [3,5,2,3] output: 7 explanation: the elements can be paired up into pairs (3,3) and (5,2). the maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7. example 2: input: nums = [3,5,4,2,4,6] output: 8 explanation: the elements can be paired up into pairs (3,5), (4,4), and (6,2). the maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8. constraints: n == nums.length 2 <= n <= 105 n is even. 1 <= nums[i] <= 105
are given an array of n integers, nums, where there are at most 50 unique values in the array. you are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. determine if it is possible to distribute nums such that: the ith customer gets exactly quantity[i] integers, the integers the ith customer gets are all equal, and every customer is satisfied. return true if it is possible to distribute nums according to the above conditions. example 1: input: nums = [1,2,3,4], quantity = [2] output: false explanation: the 0th customer cannot be given two different integers. example 2: input: nums = [1,2,3,3], quantity = [2] output: true explanation: the 0th customer is given [3,3]. the integers [1,2] are not used. example 3: input: nums = [1,1,2,2], quantity = [2,2] output: true explanation: the 0th customer is given [1,1], and the 1st customer is given [2,2]. constraints: n == nums.length 1 <= n <= 105 1 <= nums[i] <= 1000 m == quantity.length 1 <= m <= 10 1 <= quantity[i] <= 105 there are at most 50 unique values in nums.
are given an integer n denoting the number of nodes of a weighted directed graph. the nodes are numbered from 0 to n - 1. you are also given a 2d integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti. lastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph. return the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. in case such a subgraph does not exist, return -1. a subgraph is a graph whose vertices and edges are subsets of the original graph. the weight of a subgraph is the sum of weights of its constituent edges. example 1: input: n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5 output: 9 explanation: the above figure represents the input graph. the blue edges represent one of the subgraphs that yield the optimal answer. note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. it is not possible to get a subgraph with less weight satisfying all the constraints. example 2: input: n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2 output: -1 explanation: the above figure represents the input graph. it can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints. constraints: 3 <= n <= 105 0 <= edges.length <= 105 edges[i].length == 3 0 <= fromi, toi, src1, src2, dest <= n - 1 fromi != toi src1, src2, and dest are pairwise distinct. 1 <= weight[i] <= 105
are given two arrays rowsum and colsum of non-negative integers where rowsum[i] is the sum of the elements in the ith row and colsum[j] is the sum of the elements of the jth column of a 2d matrix. in other words, you do not know the elements of the matrix, but you do know the sums of each row and column. find any matrix of non-negative integers of size rowsum.length x colsum.length that satisfies the rowsum and colsum requirements. return a 2d array representing any matrix that fulfills the requirements. it's guaranteed that at least one matrix that fulfills the requirements exists. example 1: input: rowsum = [3,8], colsum = [4,7] output: [[3,0], [1,7]] explanation: 0th row: 3 + 0 = 3 == rowsum[0] 1st row: 1 + 7 = 8 == rowsum[1] 0th column: 3 + 1 = 4 == colsum[0] 1st column: 0 + 7 = 7 == colsum[1] the row and column sums match, and all matrix elements are non-negative. another possible matrix is: [[1,2], [3,5]] example 2: input: rowsum = [5,7,10], colsum = [8,6,8] output: [[0,5,0], [6,1,0], [2,0,8]] constraints: 1 <= rowsum.length, colsum.length <= 500 0 <= rowsum[i], colsum[i] <= 108 sum(rowsum) == sum(colsum)
the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b. a node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b. example 1: input: root = [8,3,10,1,6,null,14,null,null,4,7,13] output: 7 explanation: we have various ancestor-node differences, some of which are given below : |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7. example 2: input: root = [1,null,2,null,0,3] output: 3 constraints: the number of nodes in the tree is in the range [2, 5000]. 0 <= node.val <= 105
have n cities labeled from 1 to n. two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. more formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true: x % z == 0, y % z == 0, and z > threshold. given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them). return an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path. example 1: input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]] output: [false,false,true] explanation: the divisors for each number: 1: 1 2: 1, 2 3: 1, 3 4: 1, 2, 4 5: 1, 5 6: 1, 2, 3, 6 using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the only ones directly connected. the result of each query: [1,4] 1 is not connected to 4 [2,5] 2 is not connected to 5 [3,6] 3 is connected to 6 through path 3--6 example 2: input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]] output: [true,true,true,true,true] explanation: the divisors for each number are the same as the previous example. however, since the threshold is 0, all divisors can be used. since all numbers share 1 as a divisor, all cities are connected. example 3: input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]] output: [false,false,false,false,false] explanation: only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected. please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x]. constraints: 2 <= n <= 104 0 <= threshold <= n 1 <= queries.length <= 105 queries[i].length == 2 1 <= ai, bi <= cities ai != bi
people repeat letters to represent extra feeling. for example: "hello" -> "heeellooo" "hi" -> "hiiii" in these strings like "heeellooo", we have groups of adjacent letters that are all the same: "h", "eee", "ll", "ooo". you are given a string s and an array of query strings words. a query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more. for example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has a size less than three. also, we could do another extension like "ll" -> "lllll" to get "helllllooo". if s = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: query = "hello" -> "hellooo" -> "helllllooo" = s. return the number of query strings that are stretchy. example 1: input: s = "heeellooo", words = ["hello", "hi", "helo"] output: 1 explanation: we can extend "e" and "o" in the word "hello" to get "heeellooo". we can't extend "helo" to get "heeellooo" because the group "ll" is not size 3 or more. example 2: input: s = "zzzzzyyyyy", words = ["zzyy","zy","zyy"] output: 3 constraints: 1 <= s.length, words.length <= 100 1 <= words[i].length <= 100 s and words[i] consist of lowercase letters.
numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on. the numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. for example, the numeric value of the string "abe" is equal to 1 + 2 + 5 = 8. you are given two integers n and k. return the lexicographically smallest string with length equal to n and numeric value equal to k. note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order. example 1: input: n = 3, k = 27 output: "aay" explanation: the numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3. example 2: input: n = 5, k = 73 output: "aaszz" constraints: 1 <= n <= 105 n <= k <= 26 * n
a positive integer n, return the smallest positive integer that is a multiple of both 2 and n. example 1: input: n = 5 output: 10 explanation: the smallest multiple of both 5 and 2 is 10. example 2: input: n = 6 output: 6 explanation: the smallest multiple of both 6 and 2 is 6. note that a number is a multiple of itself. constraints: 1 <= n <= 150
an array of integers arr. we want to select three indices i, j and k where (0 <= i < j <= k < arr.length). let's define a and b as follows: a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k] note that ^ denotes the bitwise-xor operation. return the number of triplets (i, j and k) where a == b. example 1: input: arr = [2,3,1,6,7] output: 4 explanation: the triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4) example 2: input: arr = [1,1,1,1,1] output: 10 constraints: 1 <= arr.length <= 300 1 <= arr[i] <= 108
an integer array arr, partition the array into (contiguous) subarrays of length at most k. after partitioning, each subarray has their values changed to become the maximum value of that subarray. return the largest sum of the given array after partitioning. test cases are generated so that the answer fits in a 32-bit integer. example 1: input: arr = [1,15,7,9,2,5,10], k = 3 output: 84 explanation: arr becomes [15,15,15,9,10,10,10] example 2: input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4 output: 83 example 3: input: arr = [1], k = 1 output: 1 constraints: 1 <= arr.length <= 500 0 <= arr[i] <= 109 1 <= k <= arr.length
two integers num and k, consider a set of positive integers with the following properties: the units digit of each integer is k. the sum of the integers is num. return the minimum possible size of such a set, or -1 if no such set exists. note: the set can contain multiple instances of the same integer, and the sum of an empty set is considered 0. the units digit of a number is the rightmost digit of the number. example 1: input: num = 58, k = 9 output: 2 explanation: one valid set is [9,49], as the sum is 58 and each integer has a units digit of 9. another valid set is [19,39]. it can be shown that 2 is the minimum possible size of a valid set. example 2: input: num = 37, k = 2 output: -1 explanation: it is not possible to obtain a sum of 37 using only integers that have a units digit of 2. example 3: input: num = 0, k = 7 output: 0 explanation: the sum of an empty set is considered 0. constraints: 0 <= num <= 3000 0 <= k <= 9
are given a 0-indexed m x n integer matrix grid. the width of a column is the maximum length of its integers. for example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3. return an integer array ans of size n where ans[i] is the width of the ith column. the length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise. example 1: input: grid = [[1],[22],[333]] output: [3] explanation: in the 0th column, 333 is of length 3. example 2: input: grid = [[-15,1,3],[15,7,12],[5,6,-2]] output: [3,1,2] explanation: in the 0th column, only -15 is of length 3. in the 1st column, all integers are of length 1. in the 2nd column, both 12 and -2 are of length 2. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 100 -109 <= grid[r][c] <= 109
an undirected tree consisting of n vertices numbered from 1 to n. a frog starts jumping from vertex 1. in one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. the frog can not jump back to a visited vertex. in case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex. the edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. return the probability that after t seconds the frog is on the vertex target. answers within 10-5 of the actual answer will be accepted. example 1: input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4 output: 0.16666666666666666 explanation: the figure above shows the given graph. the frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. example 2: input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7 output: 0.3333333333333333 explanation: the figure above shows the given graph. the frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. constraints: 1 <= n <= 100 edges.length == n - 1 edges[i].length == 2 1 <= ai, bi <= n 1 <= t <= 50 1 <= target <= n
are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed). there is at least one empty seat, and at least one person sitting. alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. return that maximum distance to the closest person. example 1: input: seats = [1,0,0,0,1,0,1] output: 2 explanation: if alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2. if alex sits in any other open seat, the closest person has distance 1. thus, the maximum distance to the closest person is 2. example 2: input: seats = [1,0,0,0] output: 3 explanation: if alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away. this is the maximum distance possible, so the answer is 3. example 3: input: seats = [0,1] output: 1 constraints: 2 <= seats.length <= 2 * 104 seats[i] is 0 or 1. at least one seat is empty. at least one seat is occupied.
schema table: users +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | name | varchar | +---------------+---------+ id is the primary key for this table. name is the name of the user. table: rides +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | user_id | int | | distance | int | +---------------+---------+ id is the primary key for this table. user_id is the id of the user who traveled the distance "distance". write an sql query to report the distance traveled by each user. return the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order. the query result format is in the following example. example 1: input: users table: +------+-----------+ | id | name | +------+-----------+ | 1 | alice | | 2 | bob | | 3 | alex | | 4 | donald | | 7 | lee | | 13 | jonathan | | 19 | elvis | +------+-----------+ rides table: +------+----------+----------+ | id | user_id | distance | +------+----------+----------+ | 1 | 1 | 120 | | 2 | 2 | 317 | | 3 | 3 | 222 | | 4 | 7 | 100 | | 5 | 13 | 312 | | 6 | 19 | 50 | | 7 | 7 | 120 | | 8 | 19 | 400 | | 9 | 7 | 230 | +------+----------+----------+ output: +----------+--------------------+ | name | travelled_distance | +----------+--------------------+ | elvis | 450 | | lee | 450 | | bob | 317 | | jonathan | 312 | | alex | 222 | | alice | 120 | | donald | 0 | +----------+--------------------+ explanation: elvis and lee traveled 450 miles, elvis is the top traveler as his name is alphabetically smaller than lee. bob, jonathan, alex, and alice have only one ride and we just order them by the total distances of the ride. donald did not have any rides, the distance traveled by him is 0.
are given an array of unique integers salary where salary[i] is the salary of the ith employee. return the average salary of employees excluding the minimum and maximum salary. answers within 10-5 of the actual answer will be accepted. example 1: input: salary = [4000,3000,1000,2000] output: 2500.00000 explanation: minimum salary and maximum salary are 1000 and 4000 respectively. average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500 example 2: input: salary = [1000,2000,3000] output: 2000.00000 explanation: minimum salary and maximum salary are 1000 and 3000 respectively. average salary excluding minimum and maximum salary is (2000) / 1 = 2000 constraints: 3 <= salary.length <= 100 1000 <= salary[i] <= 106 all the integers of salary are unique.
two strings s1 and s2, return the lowest ascii sum of deleted characters to make two strings equal. example 1: input: s1 = "sea", s2 = "eat" output: 231 explanation: deleting "s" from "sea" adds the ascii value of "s" (115) to the sum. deleting "t" from "eat" adds 116 to the sum. at the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this. example 2: input: s1 = "delete", s2 = "leet" output: 403 explanation: deleting "dee" from "delete" to turn the string into "let", adds 100[d] + 101[e] + 101[e] to the sum. deleting "e" from "leet" adds 101[e] to the sum. at the end, both strings are equal to "let", and the answer is 100+101+101+101 = 403. if instead we turned both strings into "lee" or "eet", we would get answers of 433 or 417, which are higher. constraints: 1 <= s1.length, s2.length <= 1000 s1 and s2 consist of lowercase english letters.
the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. if the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. you may not alter the values in the list's nodes, only nodes themselves may be changed. example 1: input: head = [1,2,3,4,5], k = 2 output: [2,1,4,3,5] example 2: input: head = [1,2,3,4,5], k = 3 output: [3,2,1,4,5] constraints: the number of nodes in the list is n. 1 <= k <= n <= 5000 0 <= node.val <= 1000 follow-up: can you solve the problem in o(1) extra memory space?
the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node. you can return the answer in any order. example 1: input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2 output: [7,4,1] explanation: the nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1. example 2: input: root = [1], target = 1, k = 3 output: [] constraints: the number of nodes in the tree is in the range [1, 500]. 0 <= node.val <= 500 all the values node.val are unique. target is the value of one of the nodes in the tree. 0 <= k <= 1000
a string n representing an integer, return the closest integer (not including itself), which is a palindrome. if there is a tie, return the smaller one. the closest is defined as the absolute difference minimized between two integers. example 1: input: n = "123" output: "121" example 2: input: n = "1" output: "0" explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0. constraints: 1 <= n.length <= 18 n consists of only digits. n does not have leading zeros. n is representing an integer in the range [1, 1018 - 1].
a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. if no such two words exist, return 0. example 1: input: words = ["abcw","baz","foo","bar","xtfn","abcdef"] output: 16 explanation: the two words can be "abcw", "xtfn". example 2: input: words = ["a","ab","abc","d","cd","bcd","abcd"] output: 4 explanation: the two words can be "ab", "cd". example 3: input: words = ["a","aa","aaa","aaaa"] output: 0 explanation: no such pair of words. constraints: 2 <= words.length <= 1000 1 <= words[i].length <= 1000 words[i] consists only of lowercase english letters.
schema table: employee +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | name | varchar | | salary | int | | managerid | int | +-------------+---------+ id is the primary key column for this table. each row of this table indicates the id of an employee, their name, salary, and the id of their manager. write an sql query to find the employees who earn more than their managers. return the result table in any order. the query result format is in the following example. example 1: input: employee table: +----+-------+--------+-----------+ | id | name | salary | managerid | +----+-------+--------+-----------+ | 1 | joe | 70000 | 3 | | 2 | henry | 80000 | 4 | | 3 | sam | 60000 | null | | 4 | max | 90000 | null | +----+-------+--------+-----------+ output: +----------+ | employee | +----------+ | joe | +----------+ explanation: joe is the only employee who earns more than his manager.
are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. check if these points make a straight line in the xy plane. example 1: input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] output: true example 2: input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]] output: false constraints: 2 <= coordinates.length <= 1000 coordinates[i].length == 2 -10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4 coordinates contains no duplicate point.
two positive integers a and b, return the number of common factors of a and b. an integer x is a common factor of a and b if x divides both a and b. example 1: input: a = 12, b = 6 output: 4 explanation: the common factors of 12 and 6 are 1, 2, 3, 6. example 2: input: a = 25, b = 30 output: 2 explanation: the common factors of 25 and 30 are 1, 5. constraints: 1 <= a, b <= 1000
an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value. return the largest lucky integer in the array. if there is no lucky integer return -1. example 1: input: arr = [2,2,3,4] output: 2 explanation: the only lucky number in the array is 2 because frequency[2] == 2. example 2: input: arr = [1,2,2,3,3,3] output: 3 explanation: 1, 2 and 3 are all lucky numbers, return the largest of them. example 3: input: arr = [2,2,2,3,3] output: -1 explanation: there are no lucky numbers in the array. constraints: 1 <= arr.length <= 500 1 <= arr[i] <= 500
is a rectangular brick wall in front of you with n rows of bricks. the ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. the total width of each row is the same. draw a vertical line from the top to the bottom and cross the least bricks. if your line goes through the edge of a brick, then the brick is not considered as crossed. you cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. given the 2d array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line. example 1: input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]] output: 2 example 2: input: wall = [[1],[1],[1]] output: 3 constraints: n == wall.length 1 <= n <= 104 1 <= wall[i].length <= 104 1 <= sum(wall[i].length) <= 2 * 104 sum(wall[i]) is the same for each row i. 1 <= wall[i][j] <= 231 - 1
is an integer array nums sorted in non-decreasing order (not necessarily with distinct values). before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). for example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4]. given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums. you must decrease the overall operation steps as much as possible. example 1: input: nums = [2,5,6,0,0,1,2], target = 0 output: true example 2: input: nums = [2,5,6,0,0,1,2], target = 3 output: false constraints: 1 <= nums.length <= 5000 -104 <= nums[i] <= 104 nums is guaranteed to be rotated at some pivot. -104 <= target <= 104 follow up: this problem is similar to search in rotated sorted array, but nums may contain duplicates. would this affect the runtime complexity? how and why?
have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps. implement the browserhistory class: browserhistory(string homepage) initializes the object with the homepage of the browser. void visit(string url) visits url from the current page. it clears up all the forward history. string back(int steps) move steps back in history. if you can only return x steps in the history and steps > x, you will return only x steps. return the current url after moving back in history at most steps. string forward(int steps) move steps forward in history. if you can only forward x steps in the history and steps > x, you will forward only x steps. return the current url after forwarding in history at most steps. example: input: ["browserhistory","visit","visit","visit","back","back","forward","visit","forward","back","back"] [["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]] output: [null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"] explanation: browserhistory browserhistory = new browserhistory("leetcode.com"); browserhistory.visit("google.com"); // you are in "leetcode.com". visit "google.com" browserhistory.visit("facebook.com"); // you are in "google.com". visit "facebook.com" browserhistory.visit("youtube.com"); // you are in "facebook.com". visit "youtube.com" browserhistory.back(1); // you are in "youtube.com", move back to "facebook.com" return "facebook.com" browserhistory.back(1); // you are in "facebook.com", move back to "google.com" return "google.com" browserhistory.forward(1); // you are in "google.com", move forward to "facebook.com" return "facebook.com" browserhistory.visit("linkedin.com"); // you are in "facebook.com". visit "linkedin.com" browserhistory.forward(2); // you are in "linkedin.com", you cannot move forward any steps. browserhistory.back(2); // you are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com" browserhistory.back(7); // you are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com" constraints: 1 <= homepage.length <= 20 1 <= url.length <= 20 1 <= steps <= 100 homepage and url consist of '.' or lower case english letters. at most 5000 calls will be made to visit, back, and forward.
n points on a 2d plane where points[i] = [xi, yi], return the widest vertical area between two points such that no points are inside the area. a vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). the widest vertical area is the one with the maximum width. note that points on the edge of a vertical area are not considered included in the area. example 1: input: points = [[8,7],[9,9],[7,4],[9,7]] output: 1 explanation: both the red and the blue area are optimal. example 2: input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]] output: 3 constraints: n == points.length 2 <= n <= 105 points[i].length == 2 0 <= xi, yi <= 109
good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two. you can pick any two different foods to make a good meal. given an array of integers deliciousness where deliciousness[i] is the deliciousness of the ith item of food, return the number of different good meals you can make from this list modulo 109 + 7. note that items with different indices are considered different even if they have the same deliciousness value. example 1: input: deliciousness = [1,3,5,7,9] output: 4 explanation: the good meals are (1,3), (1,7), (3,5) and, (7,9). their respective sums are 4, 8, 8, and 16, all of which are powers of 2. example 2: input: deliciousness = [1,1,1,3,3,3,7] output: 15 explanation: the good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways. constraints: 1 <= deliciousness.length <= 105 0 <= deliciousness[i] <= 220
are given a string s consisting only of characters 'a' and 'b'. you can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'. return the minimum number of deletions needed to make s balanced. example 1: input: s = "aababbab" output: 2 explanation: you can either: delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb"). example 2: input: s = "bbaaaaabb" output: 2 explanation: the only solution is to delete the first two characters. constraints: 1 <= s.length <= 105 s[i] is 'a' or 'b'.
are given an m x n integer matrix grid and an array queries of size k. find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process: if queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right. otherwise, you do not get any points, and you end this process. after the process, answer[i] is the maximum number of points you can get. note that for each query you are allowed to visit the same cell multiple times. return the resulting array answer. example 1: input: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2] output: [5,8,1] explanation: the diagrams above show which cells we visit to get points for each query. example 2: input: grid = [[5,2,1],[1,1,2]], queries = [3] output: [0] explanation: we can not get any points because the value of the top left cell is already greater than or equal to 3. constraints: m == grid.length n == grid[i].length 2 <= m, n <= 1000 4 <= m * n <= 105 k == queries.length 1 <= k <= 104 1 <= grid[i][j], queries[i] <= 106
are given a nested list of integers nestedlist. each element is either an integer or a list whose elements may also be integers or other lists. implement an iterator to flatten it. implement the nestediterator class: nestediterator(list<nestedinteger> nestedlist) initializes the iterator with the nested list nestedlist. int next() returns the next integer in the nested list. boolean hasnext() returns true if there are still some integers in the nested list and false otherwise. your code will be tested with the following pseudocode: initialize iterator with nestedlist res = [] while iterator.hasnext() append iterator.next() to the end of res return res if res matches the expected flattened list, then your code will be judged as correct. example 1: input: nestedlist = [[1,1],2,[1,1]] output: [1,1,2,1,1] explanation: by calling next repeatedly until hasnext returns false, the order of elements returned by next should be: [1,1,2,1,1]. example 2: input: nestedlist = [1,[4,[6]]] output: [1,4,6] explanation: by calling next repeatedly until hasnext returns false, the order of elements returned by next should be: [1,4,6]. constraints: 1 <= nestedlist.length <= 500 the values of the integers in the nested list is in the range [-106, 106].
are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse. a point of the cheese with index i (0-indexed) is: reward1[i] if the first mouse eats it. reward2[i] if the second mouse eats it. you are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k. return the maximum points the mice can achieve if the first mouse eats exactly k types of cheese. example 1: input: reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2 output: 15 explanation: in this example, the first mouse eats the 2nd (0-indexed) and the 3rd types of cheese, and the second mouse eats the 0th and the 1st types of cheese. the total points are 4 + 4 + 3 + 4 = 15. it can be proven that 15 is the maximum total points that the mice can achieve. example 2: input: reward1 = [1,1], reward2 = [1,1], k = 2 output: 2 explanation: in this example, the first mouse eats the 0th (0-indexed) and 1st types of cheese, and the second mouse does not eat any cheese. the total points are 1 + 1 = 2. it can be proven that 2 is the maximum total points that the mice can achieve. constraints: 1 <= n == reward1.length == reward2.length <= 105 1 <= reward1[i], reward2[i] <= 1000 0 <= k <= n
schema table: world +-------------+---------+ | column name | type | +-------------+---------+ | name | varchar | | continent | varchar | | area | int | | population | int | | gdp | bigint | +-------------+---------+ name is the primary key column for this table. each row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its gdp value. a country is big if: it has an area of at least three million (i.e., 3000000 km2), or it has a population of at least twenty-five million (i.e., 25000000). write an sql query to report the name, population, and area of the big countries. return the result table in any order. the query result format is in the following example. example 1: input: world table: +-------------+-----------+---------+------------+--------------+ | name | continent | area | population | gdp | +-------------+-----------+---------+------------+--------------+ | afghanistan | asia | 652230 | 25500100 | 20343000000 | | albania | europe | 28748 | 2831741 | 12960000000 | | algeria | africa | 2381741 | 37100000 | 188681000000 | | andorra | europe | 468 | 78115 | 3712000000 | | angola | africa | 1246700 | 20609294 | 100990000000 | +-------------+-----------+---------+------------+--------------+ output: +-------------+------------+---------+ | name | population | area | +-------------+------------+---------+ | afghanistan | 25500100 | 652230 | | algeria | 37100000 | 2381741 | +-------------+------------+---------+
is a group of n members, and a list of various crimes they could commit. the ith crime generates a profit[i] and requires group[i] members to participate in it. if a member participates in one crime, that member can't participate in another crime. let's call a profitable scheme any subset of these crimes that generates at least minprofit profit, and the total number of members participating in that subset of crimes is at most n. return the number of schemes that can be chosen. since the answer may be very large, return it modulo 109 + 7. example 1: input: n = 5, minprofit = 3, group = [2,2], profit = [2,3] output: 2 explanation: to make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1. in total, there are 2 schemes. example 2: input: n = 10, minprofit = 5, group = [2,3,5], profit = [6,7,8] output: 7 explanation: to make a profit of at least 5, the group could commit any crimes, as long as they commit one. there are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2). constraints: 1 <= n <= 100 0 <= minprofit <= 100 1 <= group.length <= 100 1 <= group[i] <= 100 profit.length == group.length 0 <= profit[i] <= 100
are given an integer array of unique positive integers nums. consider the following graph: there are nums.length nodes, labeled nums[0] to nums[nums.length - 1], there is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1. return the size of the largest connected component in the graph. example 1: input: nums = [4,6,15,35] output: 4 example 2: input: nums = [20,50,9,63] output: 2 example 3: input: nums = [2,3,6,7,4,12,21,39] output: 8 constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] <= 105 all the values of nums are unique.
a string array words, return an array of all characters that show up in all strings within the words (including duplicates). you may return the answer in any order. example 1: input: words = ["bella","label","roller"] output: ["e","l","l"] example 2: input: words = ["cool","lock","cook"] output: ["c","o"] constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists of lowercase english letters.
are given a 0-indexed binary string floor, which represents the colors of tiles on a floor: floor[i] = '0' denotes that the ith tile of the floor is colored black. on the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white. you are also given numcarpets and carpetlen. you have numcarpets black carpets, each of length carpetlen tiles. cover the tiles with the given carpets such that the number of white tiles still visible is minimum. carpets may overlap one another. return the minimum number of white tiles still visible. example 1: input: floor = "10110101", numcarpets = 2, carpetlen = 2 output: 2 explanation: the figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible. no other way of covering the tiles with the carpets can leave less than 2 white tiles visible. example 2: input: floor = "11111", numcarpets = 2, carpetlen = 3 output: 0 explanation: the figure above shows one way of covering the tiles with the carpets such that no white tiles are visible. note that the carpets are able to overlap one another. constraints: 1 <= carpetlen <= floor.length <= 1000 floor[i] is either '0' or '1'. 1 <= numcarpets <= 1000
the root of a binary tree, calculate the vertical order traversal of the binary tree. for each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. the root of the tree is at (0, 0). the vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. there may be multiple nodes in the same row and same column. in such a case, sort these nodes by their values. return the vertical order traversal of the binary tree. example 1: input: root = [3,9,20,null,null,15,7] output: [[9],[3,15],[20],[7]] explanation: column -1: only node 9 is in this column. column 0: nodes 3 and 15 are in this column in that order from top to bottom. column 1: only node 20 is in this column. column 2: only node 7 is in this column. example 2: input: root = [1,2,3,4,5,6,7] output: [[4],[2],[1,5,6],[3],[7]] explanation: column -2: only node 4 is in this column. column -1: only node 2 is in this column. column 0: nodes 1, 5, and 6 are in this column. 1 is at the top, so it comes first. 5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6. column 1: only node 3 is in this column. column 2: only node 7 is in this column. example 3: input: root = [1,2,3,4,6,5,7] output: [[4],[2],[1,5,6],[3],[7]] explanation: this case is the exact same as example 2, but with nodes 5 and 6 swapped. note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values. constraints: the number of nodes in the tree is in the range [1, 1000]. 0 <= node.val <= 1000
is a special kind of apple tree that grows apples every day for n days. on the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. on some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0. you decided to eat at most one apple a day (to keep the doctors away). note that you can keep eating after the first n days. given two integer arrays days and apples of length n, return the maximum number of apples you can eat. example 1: input: apples = [1,2,3,5,2], days = [3,2,1,4,2] output: 7 explanation: you can eat 7 apples: - on the first day, you eat an apple that grew on the first day. - on the second day, you eat an apple that grew on the second day. - on the third day, you eat an apple that grew on the second day. after this day, the apples that grew on the third day rot. - on the fourth to the seventh days, you eat apples that grew on the fourth day. example 2: input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2] output: 5 explanation: you can eat 5 apples: - on the first to the third day you eat apples that grew on the first day. - do nothing on the fouth and fifth days. - on the sixth and seventh days you eat apples that grew on the sixth day. constraints: n == apples.length == days.length 1 <= n <= 2 * 104 0 <= apples[i], days[i] <= 2 * 104 days[i] = 0 if and only if apples[i] = 0.
are given an array of integers arr and an integer target. you have to find two non-overlapping sub-arrays of arr each with a sum equal target. there can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum. return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays. example 1: input: arr = [3,2,2,4,3], target = 3 output: 2 explanation: only two sub-arrays have sum = 3 ([3] and [3]). the sum of their lengths is 2. example 2: input: arr = [7,3,4,7], target = 7 output: 2 explanation: although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2. example 3: input: arr = [4,3,2,6,2,3,4], target = 6 output: -1 explanation: we have only one sub-array of sum = 6. constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 1000 1 <= target <= 108
square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2. given an integer n, return the number of square triples such that 1 <= a, b, c <= n. example 1: input: n = 5 output: 2 explanation: the square triples are (3,4,5) and (4,3,5). example 2: input: n = 10 output: 4 explanation: the square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10). constraints: 1 <= n <= 250
an integer n, return true if it is a power of four. otherwise, return false. an integer n is a power of four, if there exists an integer x such that n == 4x. example 1: input: n = 16 output: true example 2: input: n = 5 output: false example 3: input: n = 1 output: true constraints: -231 <= n <= 231 - 1 follow up: could you solve it without loops/recursion?
are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stonevalue. in each round of the game, alice divides the row into two non-empty rows (i.e. left row and right row), then bob calculates the value of each row which is the sum of the values of all the stones in this row. bob throws away the row which has the maximum value, and alice's score increases by the value of the remaining row. if the value of the two rows are equal, bob lets alice decide which row will be thrown away. the next round starts with the remaining row. the game ends when there is only one stone remaining. alice's is initially zero. return the maximum score that alice can obtain. example 1: input: stonevalue = [6,2,3,4,5,5] output: 18 explanation: in the first round, alice divides the row to [6,2,3], [4,5,5]. the left row has the value 11 and the right row has value 14. bob throws away the right row and alice's score is now 11. in the second round alice divides the row to [6], [2,3]. this time bob throws away the left row and alice's score becomes 16 (11 + 5). the last round alice has only one choice to divide the row which is [2], [3]. bob throws away the right row and alice's score is now 18 (16 + 2). the game ends because only one stone is remaining in the row. example 2: input: stonevalue = [7,7,7,7,7,7,7] output: 28 example 3: input: stonevalue = [4] output: 0 constraints: 1 <= stonevalue.length <= 500 1 <= stonevalue[i] <= 106
valid ip address consists of exactly four integers separated by single dots. each integer is between 0 and 255 (inclusive) and cannot have leading zeros. for example, "0.1.2.201" and "192.168.1.1" are valid ip addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid ip addresses. given a string s containing only digits, return all possible valid ip addresses that can be formed by inserting dots into s. you are not allowed to reorder or remove any digits in s. you may return the valid ip addresses in any order. example 1: input: s = "25525511135" output: ["255.255.11.135","255.255.111.35"] example 2: input: s = "0000" output: ["0.0.0.0"] example 3: input: s = "101023" output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"] constraints: 1 <= s.length <= 20 s consists of digits only.
a list of strings words and a string pattern, return a list of words[i] that match pattern. you may return the answer in any order. a word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word. recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter. example 1: input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb" output: ["mee","aqq"] explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. "ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter. example 2: input: words = ["a","b","c"], pattern = "a" output: ["a","b","c"] constraints: 1 <= pattern.length <= 20 1 <= words.length <= 50 words[i].length == pattern.length pattern and words[i] are lowercase english letters.
are given a 2d integer array orders, where each orders[i] = [pricei, amounti, ordertypei] denotes that amounti orders have been placed of type ordertypei at the price pricei. the ordertypei is: 0 if it is a batch of buy orders, or 1 if it is a batch of sell orders. note that orders[i] represents a batch of amounti independent orders with the same price and order type. all orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i. there is a backlog that consists of orders that have not been executed. the backlog is initially empty. when an order is placed, the following happens: if the order is a buy order, you look at the sell order with the smallest price in the backlog. if that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. else, the buy order is added to the backlog. vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. if that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. else, the sell order is added to the backlog. return the total amount of orders in the backlog after placing all the orders from the input. since this number can be large, return it modulo 109 + 7. example 1: input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]] output: 6 explanation: here is what happens with the orders: - 5 orders of type buy with price 10 are placed. there are no sell orders, so the 5 orders are added to the backlog. - 2 orders of type sell with price 15 are placed. there are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog. - 1 order of type sell with price 25 is placed. there are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog. - 4 orders of type buy with price 30 are placed. the first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. the 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. then, there are no more sell orders in the backlog, so the 4th order is added to the backlog. finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. so the total number of orders in the backlog is 6. example 2: input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]] output: 999999984 explanation: here is what happens with the orders: - 109 orders of type sell with price 7 are placed. there are no buy orders, so the 109 orders are added to the backlog. - 3 orders of type buy with price 15 are placed. they are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog. - 999999995 orders of type buy with price 5 are placed. the least price of a sell order is 7, so the 999999995 orders are added to the backlog. - 1 order of type sell with price 5 is placed. it is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog. finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. so the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7). constraints: 1 <= orders.length <= 105 orders[i].length == 3 1 <= pricei, amounti <= 109 ordertypei is either 0 or 1.
a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row. in case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected. return an array containing the index of the row, and the number of ones in it. example 1: input: mat = [[0,1],[1,0]] output: [0,1] explanation: both rows have the same number of 1's. so we return the index of the smaller row, 0, and the maximum count of ones (1). so, the answer is [0,1]. example 2: input: mat = [[0,0,0],[0,1,1]] output: [1,2] explanation: the row indexed 1 has the maximum count of ones (2). so we return its index, 1, and the count. so, the answer is [1,2]. example 3: input: mat = [[0,0],[1,1],[0,0]] output: [1,2] explanation: the row indexed 1 has the maximum count of ones (2). so the answer is [1,2]. constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 mat[i][j] is either 0 or 1.
are given an integer n. you roll a fair 6-sided dice n times. determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied: the greatest common divisor of any adjacent values in the sequence is equal to 1. there is at least a gap of 2 rolls between equal valued rolls. more formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2. return the total number of distinct sequences possible. since the answer may be very large, return it modulo 109 + 7. two sequences are considered distinct if at least one element is different. example 1: input: n = 4 output: 184 explanation: some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc. some invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6). (1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed). (1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3. there are a total of 184 distinct sequences possible, so we return 184. example 2: input: n = 2 output: 22 explanation: some of the possible sequences are (1, 2), (2, 1), (3, 2). some invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1. there are a total of 22 distinct sequences possible, so we return 22. constraints: 1 <= n <= 104
are given a string s containing one or more words. every consecutive pair of words is separated by a single space ' '. a string t is an anagram of string s if the ith word of t is a permutation of the ith word of s. for example, "acb dfe" is an anagram of "abc def", but "def cab" and "adc bef" are not. return the number of distinct anagrams of s. since the answer may be very large, return it modulo 109 + 7. example 1: input: s = "too hot" output: 18 explanation: some of the anagrams of the given string are "too hot", "oot hot", "oto toh", "too toh", and "too oht". example 2: input: s = "aa" output: 1 explanation: there is only one anagram possible for the given string. constraints: 1 <= s.length <= 105 s consists of lowercase english letters and spaces ' '. there is single space between consecutive words.
schema table: mynumbers +-------------+------+ | column name | type | +-------------+------+ | num | int | +-------------+------+ there is no primary key for this table. it may contain duplicates. each row of this table contains an integer. a single number is a number that appeared only once in the mynumbers table. write an sql query to report the largest single number. if there is no single number, report null. the query result format is in the following example. example 1: input: mynumbers table: +-----+ | num | +-----+ | 8 | | 8 | | 3 | | 3 | | 1 | | 4 | | 5 | | 6 | +-----+ output: +-----+ | num | +-----+ | 6 | +-----+ explanation: the single numbers are 1, 4, 5, and 6. since 6 is the largest single number, we return it. example 2: input: mynumbers table: +-----+ | num | +-----+ | 8 | | 8 | | 7 | | 7 | | 3 | | 3 | | 3 | +-----+ output: +------+ | num | +------+ | null | +------+ explanation: there are no single numbers in the input table so we return null.
schema table: queue +-------------+---------+ | column name | type | +-------------+---------+ | person_id | int | | person_name | varchar | | weight | int | | turn | int | +-------------+---------+ person_id is the primary key column for this table. this table has the information about all people waiting for a bus. the person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table. turn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board. weight is the weight of the person in kilograms. there is a queue of people waiting to board a bus. however, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board. write an sql query to find the person_name of the last person that can fit on the bus without exceeding the weight limit. the test cases are generated such that the first person does not exceed the weight limit. the query result format is in the following example. example 1: input: queue table: +-----------+-------------+--------+------+ | person_id | person_name | weight | turn | +-----------+-------------+--------+------+ | 5 | alice | 250 | 1 | | 4 | bob | 175 | 5 | | 3 | alex | 350 | 2 | | 6 | john cena | 400 | 3 | | 1 | winston | 500 | 6 | | 2 | marie | 200 | 4 | +-----------+-------------+--------+------+ output: +-------------+ | person_name | +-------------+ | john cena | +-------------+ explanation: the folowing table is ordered by the turn for simplicity. +------+----+-----------+--------+--------------+ | turn | id | name | weight | total weight | +------+----+-----------+--------+--------------+ | 1 | 5 | alice | 250 | 250 | | 2 | 3 | alex | 350 | 600 | | 3 | 6 | john cena | 400 | 1000 | (last person to board) | 4 | 2 | marie | 200 | 1200 | (cannot board) | 5 | 4 | bob | 175 | ___ | | 6 | 1 | winston | 500 | ___ | +------+----+-----------+--------+--------------+
are given a 0-indexed array of integers nums of length n. you are initially positioned at nums[0]. each element nums[i] represents the maximum length of a forward jump from index i. in other words, if you are at nums[i], you can jump to any nums[i + j] where: 0 <= j <= nums[i] and i + j < n return the minimum number of jumps to reach nums[n - 1]. the test cases are generated such that you can reach nums[n - 1]. example 1: input: nums = [2,3,1,1,4] output: 2 explanation: the minimum number of jumps to reach the last index is 2. jump 1 step from index 0 to 1, then 3 steps to the last index. example 2: input: nums = [2,3,0,1,4] output: 2 constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 1000 it's guaranteed that you can reach nums[n - 1].
an integer array arr and a mapping function fn, return a new array with a transformation applied to each element. the returned array should be created such that returnedarray[i] = fn(arr[i], i). please solve it without the built-in array.map method. example 1: input: arr = [1,2,3], fn = function plusone(n) { return n + 1; } output: [2,3,4] explanation: const newarray = map(arr, plusone); // [2,3,4] the function increases each value in the array by one. example 2: input: arr = [1,2,3], fn = function plusi(n, i) { return n + i; } output: [1,3,5] explanation: the function increases each value by the index it resides in. example 3: input: arr = [10,20,30], fn = function constant() { return 42; } output: [42,42,42] explanation: the function always returns 42. constraints: 0 <= arr.length <= 1000 -109 <= arr[i] <= 109 fn returns a number
a date string in the form day month year, where: day is in the set {"1st", "2nd", "3rd", "4th", ..., "30th", "31st"}. month is in the set {"jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"}. year is in the range [1900, 2100]. convert the date string to the format yyyy-mm-dd, where: yyyy denotes the 4 digit year. mm denotes the 2 digit month. dd denotes the 2 digit day. example 1: input: date = "20th oct 2052" output: "2052-10-20" example 2: input: date = "6th jun 1933" output: "1933-06-06" example 3: input: date = "26th may 1960" output: "1960-05-26" constraints: the given dates are guaranteed to be valid, so no error handling is necessary.
two strings s and t, transform string s into string t using the following operation any number of times: choose a non-empty substring in s and sort it in place so the characters are in ascending order. for example, applying the operation on the underlined substring in "14234" results in "12344". return true if it is possible to transform s into t. otherwise, return false. a substring is a contiguous sequence of characters within a string. example 1: input: s = "84532", t = "34852" output: true explanation: you can transform s into t using the following sort operations: "84532" (from index 2 to 3) -> "84352" "84352" (from index 0 to 2) -> "34852" example 2: input: s = "34521", t = "23415" output: true explanation: you can transform s into t using the following sort operations: "34521" -> "23451" "23451" -> "23415" example 3: input: s = "12345", t = "12435" output: false constraints: s.length == t.length 1 <= s.length <= 105 s and t consist of only digits.
define the conversion array conver of an array arr as follows: conver[i] = arr[i] + max(arr[0..i]) where max(arr[0..i]) is the maximum value of arr[j] over 0 <= j <= i. we also define the score of an array arr as the sum of the values of the conversion array of arr. given a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i]. example 1: input: nums = [2,3,7,5,10] output: [4,10,24,36,56] explanation: for the prefix [2], the conversion array is [4] hence the score is 4 for the prefix [2, 3], the conversion array is [4, 6] hence the score is 10 for the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24 for the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36 for the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56 example 2: input: nums = [1,1,2,4,8,16] output: [2,4,8,16,32,64] explanation: for the prefix [1], the conversion array is [2] hence the score is 2 for the prefix [1, 1], the conversion array is [2, 2] hence the score is 4 for the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8 for the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16 for the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32 for the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64 constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee. find the maximum profit you can achieve. you may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). example 1: input: prices = [1,3,2,8,4,9], fee = 2 output: 8 explanation: the maximum profit can be achieved by: - buying at prices[0] = 1 - selling at prices[3] = 8 - buying at prices[4] = 4 - selling at prices[5] = 9 the total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8. example 2: input: prices = [1,3,7,5,10,3], fee = 3 output: 6 constraints: 1 <= prices.length <= 5 * 104 1 <= prices[i] < 5 * 104 0 <= fee < 5 * 104
a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. you may return the answer in any order. a group of duplicate files consists of at least two files that have the same content. a single directory info string in the input list has the following format: "root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)" it means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory "root/d1/d2/.../dm". note that n >= 1 and m >= 0. if m = 0, it means the directory is just the root directory. the output is a list of groups of duplicate file paths. for each group, it contains all the file paths of the files that have the same content. a file path is a string that has the following format: "directory_path/file_name.txt" example 1: input: paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"] output: [["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]] example 2: input: paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)"] output: [["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]] constraints: 1 <= paths.length <= 2 * 104 1 <= paths[i].length <= 3000 1 <= sum(paths[i].length) <= 5 * 105 paths[i] consist of english letters, digits, '/', '.', '(', ')', and ' '. you may assume no files or directories share the same name in the same directory. you may assume each given directory info represents a unique directory. a single blank space separates the directory path and file info. follow up: imagine you are given a real file system, how will you search files? dfs or bfs? if the file content is very large (gb level), how will you modify your solution? if you can only read the file by 1kb each time, how will you modify your solution? what is the time complexity of your modified solution? what is the most time-consuming part and memory-consuming part of it? how to optimize? how to make sure the duplicated files you find are not false positive?
schema table: scores +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | score | decimal | +-------------+---------+ id is the primary key for this table. each row of this table contains the score of a game. score is a floating point value with two decimal places. write an sql query to rank the scores. the ranking should be calculated according to the following rules: the scores should be ranked from the highest to the lowest. if there is a tie between two scores, both should have the same ranking. after a tie, the next ranking number should be the next consecutive integer value. in other words, there should be no holes between ranks. return the result table ordered by score in descending order. the query result format is in the following example. example 1: input: scores table: +----+-------+ | id | score | +----+-------+ | 1 | 3.50 | | 2 | 3.65 | | 3 | 4.00 | | 4 | 3.85 | | 5 | 4.00 | | 6 | 3.65 | +----+-------+ output: +-------+------+ | score | rank | +-------+------+ | 4.00 | 1 | | 4.00 | 1 | | 3.85 | 2 | | 3.65 | 3 | | 3.65 | 3 | | 3.50 | 4 | +-------+------+
are given an m x n binary matrix grid. an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) you may assume all four edges of the grid are surrounded by water. the area of an island is the number of cells with a value 1 in the island. return the maximum area of an island in grid. if there is no island, return 0. example 1: input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]] output: 6 explanation: the answer is not 11, because the island must be connected 4-directionally. example 2: input: grid = [[0,0,0,0,0,0,0,0]] output: 0 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 grid[i][j] is either 0 or 1.
is a rooted tree consisting of n nodes numbered 0 to n - 1. each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). the genetic difference between two genetic values is defined as the bitwise-xor of their values. you are given the integer array parents, where parents[i] is the parent for node i. if node x is the root of the tree, then parents[x] == -1. you are also given the array queries where queries[i] = [nodei, vali]. for each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). more formally, you want to maximize vali xor pi. return an array ans where ans[i] is the answer to the ith query. example 1: input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]] output: [2,3,7] explanation: the queries are processed as follows: - [0,2]: the node with the maximum genetic difference is 0, with a difference of 2 xor 0 = 2. - [3,2]: the node with the maximum genetic difference is 1, with a difference of 2 xor 1 = 3. - [2,5]: the node with the maximum genetic difference is 2, with a difference of 5 xor 2 = 7. example 2: input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]] output: [6,14,7] explanation: the queries are processed as follows: - [4,6]: the node with the maximum genetic difference is 0, with a difference of 6 xor 0 = 6. - [1,15]: the node with the maximum genetic difference is 1, with a difference of 15 xor 1 = 14. - [0,5]: the node with the maximum genetic difference is 2, with a difference of 5 xor 2 = 7. constraints: 2 <= parents.length <= 105 0 <= parents[i] <= parents.length - 1 for every node i that is not the root. parents[root] == -1 1 <= queries.length <= 3 * 104 0 <= nodei <= parents.length - 1 0 <= vali <= 2 * 105
an array nums of positive integers. your task is to select some subset of nums, multiply each element by an integer and add all these numbers. the array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand. return true if the array is good otherwise return false. example 1: input: nums = [12,5,7,23] output: true explanation: pick numbers 5 and 7. 5*3 + 7*(-2) = 1 example 2: input: nums = [29,6,10] output: true explanation: pick numbers 29, 6 and 10. 29*1 + 6*(-3) + 10*(-1) = 1 example 3: input: nums = [3,6] output: false constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^9
is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. the edges in the graph are represented by a given 2d integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself. return the length of the shortest cycle in the graph. if no cycle exists, return -1. a cycle is a path that starts and ends at the same node, and each edge in the path is used only once. example 1: input: n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]] output: 3 explanation: the cycle with the smallest length is : 0 -> 1 -> 2 -> 0 example 2: input: n = 4, edges = [[0,1],[0,2]] output: -1 explanation: there are no cycles in this graph. constraints: 2 <= n <= 1000 1 <= edges.length <= 1000 edges[i].length == 2 0 <= ui, vi < n ui != vi there are no repeated edges.
an array nums of distinct integers, return all the possible permutations. you can return the answer in any order. example 1: input: nums = [1,2,3] output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] example 2: input: nums = [0,1] output: [[0,1],[1,0]] example 3: input: nums = [1] output: [[1]] constraints: 1 <= nums.length <= 6 -10 <= nums[i] <= 10 all the integers of nums are unique.
are given two non-increasing 0-indexed integer arrays nums1 and nums2. a pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. the distance of the pair is j - i. return the maximum distance of any valid pair (i, j). if there are no valid pairs, return 0. an array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length. example 1: input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5] output: 2 explanation: the valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4). the maximum distance is 2 with pair (2,4). example 2: input: nums1 = [2,2,2], nums2 = [10,10,1] output: 1 explanation: the valid pairs are (0,0), (0,1), and (1,1). the maximum distance is 1 with pair (0,1). example 3: input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25] output: 2 explanation: the valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4). the maximum distance is 2 with pair (2,4). constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[j] <= 105 both nums1 and nums2 are non-increasing.
an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise. example 1: input: arr = [1,2,2,1,1,3] output: true explanation: the value 1 has 3 occurrences, 2 has 2 and 3 has 1. no two values have the same number of occurrences. example 2: input: arr = [1,2] output: false example 3: input: arr = [-3,0,1,-3,1,1,1,-3,10,0] output: true constraints: 1 <= arr.length <= 1000 -1000 <= arr[i] <= 1000
are given an integer array nums where the largest integer is unique. determine whether the largest element in the array is at least twice as much as every other number in the array. if it is, return the index of the largest element, or return -1 otherwise. example 1: input: nums = [3,6,1,0] output: 1 explanation: 6 is the largest integer. for every other number in the array x, 6 is at least twice as big as x. the index of value 6 is 1, so we return 1. example 2: input: nums = [1,2,3,4] output: -1 explanation: 4 is less than twice the value of 3, so we return -1. constraints: 2 <= nums.length <= 50 0 <= nums[i] <= 100 the largest element in nums is unique.
are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). last year, the ministry of transport decided to orient the roads in one direction because they are too narrow. roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi. this year, there will be a big event in the capital (city 0), and many people want to travel to this city. your task consists of reorienting some roads such that each city can visit the city 0. return the minimum number of edges changed. it's guaranteed that each city can reach city 0 after reorder. example 1: input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]] output: 3 explanation: change the direction of edges show in red such that each node can reach the node 0 (capital). example 2: input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]] output: 2 explanation: change the direction of edges show in red such that each node can reach the node 0 (capital). example 3: input: n = 3, connections = [[1,0],[2,0]] output: 0 constraints: 2 <= n <= 5 * 104 connections.length == n - 1 connections[i].length == 2 0 <= ai, bi <= n - 1 ai != bi
is a party where n friends numbered from 0 to n - 1 are attending. there is an infinite number of chairs in this party that are numbered from 0 to infinity. when a friend arrives at the party, they sit on the unoccupied chair with the smallest number. for example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2. when a friend leaves the party, their chair becomes unoccupied at the moment they leave. if another friend arrives at that same moment, they can sit in that chair. you are given a 0-indexed 2d integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetfriend. all arrival times are distinct. return the chair number that the friend numbered targetfriend will sit on. example 1: input: times = [[1,4],[2,3],[4,6]], targetfriend = 1 output: 1 explanation: - friend 0 arrives at time 1 and sits on chair 0. - friend 1 arrives at time 2 and sits on chair 1. - friend 1 leaves at time 3 and chair 1 becomes empty. - friend 0 leaves at time 4 and chair 0 becomes empty. - friend 2 arrives at time 4 and sits on chair 0. since friend 1 sat on chair 1, we return 1. example 2: input: times = [[3,10],[1,5],[2,6]], targetfriend = 0 output: 2 explanation: - friend 1 arrives at time 1 and sits on chair 0. - friend 2 arrives at time 2 and sits on chair 1. - friend 0 arrives at time 3 and sits on chair 2. - friend 1 leaves at time 5 and chair 0 becomes empty. - friend 2 leaves at time 6 and chair 1 becomes empty. - friend 0 leaves at time 10 and chair 2 becomes empty. since friend 0 sat on chair 2, we return 2. constraints: n == times.length 2 <= n <= 104 times[i].length == 2 1 <= arrivali < leavingi <= 105 0 <= targetfriend <= n - 1 each arrivali time is distinct.
the head of a linked list, remove the nth node from the end of the list and return its head. example 1: input: head = [1,2,3,4,5], n = 2 output: [1,2,3,5] example 2: input: head = [1], n = 1 output: [] example 3: input: head = [1,2], n = 1 output: [1] constraints: the number of nodes in the list is sz. 1 <= sz <= 30 0 <= node.val <= 100 1 <= n <= sz follow up: could you do this in one pass?
schema table: salesperson +-----------------+---------+ | column name | type | +-----------------+---------+ | sales_id | int | | name | varchar | | salary | int | | commission_rate | int | | hire_date | date | +-----------------+---------+ sales_id is the primary key column for this table. each row of this table indicates the name and the id of a salesperson alongside their salary, commission rate, and hire date. table: company +-------------+---------+ | column name | type | +-------------+---------+ | com_id | int | | name | varchar | | city | varchar | +-------------+---------+ com_id is the primary key column for this table. each row of this table indicates the name and the id of a company and the city in which the company is located. table: orders +-------------+------+ | column name | type | +-------------+------+ | order_id | int | | order_date | date | | com_id | int | | sales_id | int | | amount | int | +-------------+------+ order_id is the primary key column for this table. com_id is a foreign key to com_id from the company table. sales_id is a foreign key to sales_id from the salesperson table. each row of this table contains information about one order. this includes the id of the company, the id of the salesperson, the date of the order, and the amount paid. write an sql query to report the names of all the salespersons who did not have any orders related to the company with the name "red". return the result table in any order. the query result format is in the following example. example 1: input: salesperson table: +----------+------+--------+-----------------+------------+ | sales_id | name | salary | commission_rate | hire_date | +----------+------+--------+-----------------+------------+ | 1 | john | 100000 | 6 | 4/1/2006 | | 2 | amy | 12000 | 5 | 5/1/2010 | | 3 | mark | 65000 | 12 | 12/25/2008 | | 4 | pam | 25000 | 25 | 1/1/2005 | | 5 | alex | 5000 | 10 | 2/3/2007 | +----------+------+--------+-----------------+------------+ company table: +--------+--------+----------+ | com_id | name | city | +--------+--------+----------+ | 1 | red | boston | | 2 | orange | new york | | 3 | yellow | boston | | 4 | green | austin | +--------+--------+----------+ orders table: +----------+------------+--------+----------+--------+ | order_id | order_date | com_id | sales_id | amount | +----------+------------+--------+----------+--------+ | 1 | 1/1/2014 | 3 | 4 | 10000 | | 2 | 2/1/2014 | 4 | 5 | 5000 | | 3 | 3/1/2014 | 1 | 1 | 50000 | | 4 | 4/1/2014 | 1 | 4 | 25000 | +----------+------------+--------+----------+--------+ output: +------+ | name | +------+ | amy | | mark | | alex | +------+ explanation: according to orders 3 and 4 in the orders table, it is easy to tell that only salesperson john and pam have sales to company red, so we report all the other names in the table salesperson.
an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). the grid has empty cells represented by zeros and blocked cells represented by ones. the snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1). in one move the snake can: move one cell to the right if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is. move down one cell if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is. rotate clockwise if it's in a horizontal position and the two cells under it are both empty. in that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c). rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. in that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1). return the minimum number of moves to reach the target. if there is no way to reach the target, return -1. example 1: input: grid = [[0,0,0,0,0,1], [1,1,0,0,1,0], [0,0,0,0,1,1], [0,0,1,0,1,0], [0,1,1,0,0,0], [0,1,1,0,0,0]] output: 11 explanation: one possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down]. example 2: input: grid = [[0,0,1,1,1,1], [0,0,0,0,1,1], [1,1,0,0,0,1], [1,1,1,0,0,1], [1,1,1,0,0,1], [1,1,1,0,0,0]] output: 9 constraints: 2 <= n <= 100 0 <= grid[i][j] <= 1 it is guaranteed that the snake starts at empty cells.
are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. a brick is stable if: it is directly connected to the top of the grid, or at least one other brick in its four adjacent cells is stable. you are also given an array hits, which is a sequence of erasures we want to apply. each time we want to erase the brick at the location hits[i] = (rowi, coli). the brick on that location (if it exists) will disappear. some other bricks may no longer be stable because of that erasure and will fall. once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks). return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied. note that an erasure may refer to a location with no brick, and if it does, no bricks drop. example 1: input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]] output: [2] explanation: starting with the grid: [[1,0,0,0], [1,1,1,0]] we erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0], [0,1,1,0]] the two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. the resulting grid is: [[1,0,0,0], [0,0,0,0]] hence the result is [2]. example 2: input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]] output: [0,0] explanation: starting with the grid: [[1,0,0,0], [1,1,0,0]] we erase the underlined brick at (1,1), resulting in the grid: [[1,0,0,0], [1,0,0,0]] all remaining bricks are still stable, so no bricks fall. the grid remains the same: [[1,0,0,0], [1,0,0,0]] next, we erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0], [0,0,0,0]] once again, all remaining bricks are still stable, so no bricks fall. hence the result is [0,0]. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 grid[i][j] is 0 or 1. 1 <= hits.length <= 4 * 104 hits[i].length == 2 0 <= xi <= m - 1 0 <= yi <= n - 1 all (xi, yi) are unique.
are given an array target that consists of distinct integers and another integer array arr that can have duplicates. in one operation, you can insert any integer at any position in arr. for example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. note that you can insert the integer at the very beginning or end of the array. return the minimum number of operations needed to make target a subsequence of arr. a subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not. example 1: input: target = [5,1,3], arr = [9,4,2,3,4] output: 2 explanation: you can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr. example 2: input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1] output: 3 constraints: 1 <= target.length, arr.length <= 105 1 <= target[i], arr[i] <= 109 target contains no duplicates.
are given an integer array nums with no duplicates. a maximum binary tree can be built recursively from nums using the following algorithm: create a root node whose value is the maximum value in nums. recursively build the left subtree on the subarray prefix to the left of the maximum value. recursively build the right subtree on the subarray suffix to the right of the maximum value. return the maximum binary tree built from nums. example 1: input: nums = [3,2,1,6,0,5] output: [6,3,5,null,2,0,null,null,1] explanation: the recursive calls are as follow: - the largest value in [3,2,1,6,0,5] is 6. left prefix is [3,2,1] and right suffix is [0,5]. - the largest value in [3,2,1] is 3. left prefix is [] and right suffix is [2,1]. - empty array, so no child. - the largest value in [2,1] is 2. left prefix is [] and right suffix is [1]. - empty array, so no child. - only one element, so child is a node with value 1. - the largest value in [0,5] is 5. left prefix is [0] and right suffix is []. - only one element, so child is a node with value 0. - empty array, so no child. example 2: input: nums = [3,2,1] output: [3,null,2,null,1] constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000 all integers in nums are unique.
boolean expression is an expression that evaluates to either true or false. it can be in one of the following shapes: 't' that evaluates to true. 'f' that evaluates to false. '!(subexpr)' that evaluates to the logical not of the inner expression subexpr. '&(subexpr1, subexpr2, ..., subexprn)' that evaluates to the logical and of the inner expressions subexpr1, subexpr2, ..., subexprn where n >= 1. '|(subexpr1, subexpr2, ..., subexprn)' that evaluates to the logical or of the inner expressions subexpr1, subexpr2, ..., subexprn where n >= 1. given a string expression that represents a boolean expression, return the evaluation of that expression. it is guaranteed that the given expression is valid and follows the given rules. example 1: input: expression = "&(|(f))" output: false explanation: first, evaluate |(f) --> f. the expression is now "&(f)". then, evaluate &(f) --> f. the expression is now "f". finally, return false. example 2: input: expression = "|(f,f,f,t)" output: true explanation: the evaluation of (false or false or false or true) is true. example 3: input: expression = "!(&(f,t))" output: true explanation: first, evaluate &(f,t) --> (false and true) --> false --> f. the expression is now "!(f)". then, evaluate !(f) --> not false --> true. we return true. constraints: 1 <= expression.length <= 2 * 104 expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.
are given a list of songs where the ith song has a duration of time[i] seconds. return the number of pairs of songs for which their total duration in seconds is divisible by 60. formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0. example 1: input: time = [30,20,150,100,40] output: 3 explanation: three pairs have a total duration divisible by 60: (time[0] = 30, time[2] = 150): total duration 180 (time[1] = 20, time[3] = 100): total duration 120 (time[1] = 20, time[4] = 40): total duration 60 example 2: input: time = [60,60,60] output: 3 explanation: all three pairs have a total duration of 120, which is divisible by 60. constraints: 1 <= time.length <= 6 * 104 1 <= time[i] <= 500
ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. the width of such a ramp is j - i. given an integer array nums, return the maximum width of a ramp in nums. if there is no ramp in nums, return 0. example 1: input: nums = [6,0,8,2,1,5] output: 4 explanation: the maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5. example 2: input: nums = [9,8,1,0,1,9,4,0,4,1] output: 7 explanation: the maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1. constraints: 2 <= nums.length <= 5 * 104 0 <= nums[i] <= 5 * 104
a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values. example 1: input: n = 5 output: true explanation: the binary representation of 5 is: 101 example 2: input: n = 7 output: false explanation: the binary representation of 7 is: 111. example 3: input: n = 11 output: false explanation: the binary representation of 11 is: 1011. constraints: 1 <= n <= 231 - 1
are given a 0-indexed binary string s and two integers minjump and maxjump. in the beginning, you are standing at index 0, which is equal to '0'. you can move from index i to index j if the following conditions are fulfilled: i + minjump <= j <= min(i + maxjump, s.length - 1), and s[j] == '0'. return true if you can reach index s.length - 1 in s, or false otherwise. example 1: input: s = "011010", minjump = 2, maxjump = 3 output: true explanation: in the first step, move from index 0 to index 3. in the second step, move from index 3 to index 5. example 2: input: s = "01101110", minjump = 2, maxjump = 3 output: false constraints: 2 <= s.length <= 105 s[i] is either '0' or '1'. s[0] == '0' 1 <= minjump <= maxjump < s.length
a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. an input string is valid if: open brackets must be closed by the same type of brackets. open brackets must be closed in the correct order. every close bracket has a corresponding open bracket of the same type. example 1: input: s = "()" output: true example 2: input: s = "()[]{}" output: true example 3: input: s = "(]" output: false constraints: 1 <= s.length <= 104 s consists of parentheses only '()[]{}'.
are given an integer array nums. the value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1. you are allowed to select any subarray of the given array and reverse it. you can perform this operation only once. find maximum possible value of the final array. example 1: input: nums = [2,3,1,5,4] output: 10 explanation: by reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10. example 2: input: nums = [2,4,9,24,2,1,10] output: 68 constraints: 1 <= nums.length <= 3 * 104 -105 <= nums[i] <= 105
are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. any computer can reach any other computer directly or indirectly through the network. you are given an initial computer network connections. you can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. return the minimum number of times you need to do this in order to make all the computers connected. if it is not possible, return -1. example 1: input: n = 4, connections = [[0,1],[0,2],[1,2]] output: 1 explanation: remove cable between computer 1 and 2 and place between computers 1 and 3. example 2: input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]] output: 2 example 3: input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]] output: -1 explanation: there are not enough cables. constraints: 1 <= n <= 105 1 <= connections.length <= min(n * (n - 1) / 2, 105) connections[i].length == 2 0 <= ai, bi < n ai != bi there are no repeated connections. no two computers are connected by more than one cable.
a skiplist without using any built-in libraries. a skiplist is a data structure that takes o(log(n)) time to add, erase and search. comparing with treap and red-black tree which has the same function and performance, the code length of skiplist can be comparatively short and the idea behind skiplists is just simple linked lists. for example, we have a skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. the skiplist works this way: artyom kalinin [cc by-sa 3.0], via wikimedia commons you can see there are many layers in the skiplist. each layer is a sorted linked list. with the help of the top layers, add, erase and search can be faster than o(n). it can be proven that the average time complexity for each operation is o(log(n)) and space complexity is o(n). see more about skiplist: https://en.wikipedia.org/wiki/skip_list implement the skiplist class: skiplist() initializes the object of the skiplist. bool search(int target) returns true if the integer target exists in the skiplist or false otherwise. void add(int num) inserts the value num into the skiplist. bool erase(int num) removes the value num from the skiplist and returns true. if num does not exist in the skiplist, do nothing and return false. if there exist multiple num values, removing any one of them is fine. note that duplicates may exist in the skiplist, your code needs to handle this situation. example 1: input ["skiplist", "add", "add", "add", "search", "add", "search", "erase", "erase", "search"] [[], [1], [2], [3], [0], [4], [1], [0], [1], [1]] output [null, null, null, null, false, null, true, false, true, false] explanation skiplist skiplist = new skiplist(); skiplist.add(1); skiplist.add(2); skiplist.add(3); skiplist.search(0); // return false skiplist.add(4); skiplist.search(1); // return true skiplist.erase(0); // return false, 0 is not in skiplist. skiplist.erase(1); // return true skiplist.search(1); // return false, 1 has already been erased. constraints: 0 <= num, target <= 2 * 104 at most 5 * 104 calls will be made to search, add, and erase.
are given a 0-indexed 2d integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). you are also given a 0-indexed integer array people of size n, where poeple[i] is the time that the ith person will arrive to see the flowers. return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives. example 1: input: flowers = [[1,6],[3,7],[9,12],[4,13]], poeple = [2,3,7,11] output: [1,2,2,2] explanation: the figure above shows the times when the flowers are in full bloom and when the people arrive. for each person, we return the number of flowers in full bloom during their arrival. example 2: input: flowers = [[1,10],[3,3]], poeple = [3,3,2] output: [2,2,1] explanation: the figure above shows the times when the flowers are in full bloom and when the people arrive. for each person, we return the number of flowers in full bloom during their arrival. constraints: 1 <= flowers.length <= 5 * 104 flowers[i].length == 2 1 <= starti <= endi <= 109 1 <= people.length <= 5 * 104 1 <= people[i] <= 109
are given an integer array bloomday, an integer m and an integer k. you want to make m bouquets. to make a bouquet, you need to use k adjacent flowers from the garden. the garden consists of n flowers, the ith flower will bloom in the bloomday[i] and then can be used in exactly one bouquet. return the minimum number of days you need to wait to be able to make m bouquets from the garden. if it is impossible to make m bouquets return -1. example 1: input: bloomday = [1,10,3,10,2], m = 3, k = 1 output: 3 explanation: let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden. we need 3 bouquets each should contain 1 flower. after day 1: [x, _, _, _, _] // we can only make one bouquet. after day 2: [x, _, _, _, x] // we can only make two bouquets. after day 3: [x, _, x, _, x] // we can make 3 bouquets. the answer is 3. example 2: input: bloomday = [1,10,3,10,2], m = 3, k = 2 output: -1 explanation: we need 3 bouquets each has 2 flowers, that means we need 6 flowers. we only have 5 flowers so it is impossible to get the needed bouquets and we return -1. example 3: input: bloomday = [7,7,7,7,12,7,7], m = 2, k = 3 output: 12 explanation: we need 2 bouquets each should have 3 flowers. here is the garden after the 7 and 12 days: after day 7: [x, x, x, x, _, x, x] we can make one bouquet of the first three flowers that bloomed. we cannot make another bouquet from the last three flowers that bloomed because they are not adjacent. after day 12: [x, x, x, x, x, x, x] it is obvious that we can make two bouquets in different ways. constraints: bloomday.length == n 1 <= n <= 105 1 <= bloomday[i] <= 109 1 <= m <= 106 1 <= k <= n
a single-threaded cpu, we execute a program containing n functions. each function has a unique id between 0 and n-1. function calls are stored in a call stack: when a function call starts, its id is pushed onto the stack, and when a function call ends, its id is popped off the stack. the function whose id is at the top of the stack is the current function being executed. each time a function starts or ends, we write a log with the id, whether it started or ended, and the timestamp. you are given a list logs, where logs[i] represents the ith log message formatted as a string "{function_id}:{"start" | "end"}:{timestamp}". for example, "0:start:3" means a function call with function id 0 started at the beginning of timestamp 3, and "1:end:2" means a function call with function id 1 ended at the end of timestamp 2. note that a function can be called multiple times, possibly recursively. a function's exclusive time is the sum of execution times for all function calls in the program. for example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3. return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with id i. example 1: input: n = 2, logs = ["0:start:0","1:start:2","1:end:5","0:end:6"] output: [3,4] explanation: function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. so function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. example 2: input: n = 1, logs = ["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"] output: [8] explanation: function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. function 0 (initial call) resumes execution then immediately calls itself again. function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. so function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. example 3: input: n = 2, logs = ["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"] output: [7,1] explanation: function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. function 0 (initial call) resumes execution then immediately calls function 1. function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6. function 0 resumes execution at the beginning of time 6 and executes for 2 units of time. so function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing. constraints: 1 <= n <= 100 1 <= logs.length <= 500 0 <= function_id < n 0 <= timestamp <= 109 no two start events will happen at the same timestamp. no two end events will happen at the same timestamp. each function has an "end" log for each "start" log.
conveyor belt has packages that must be shipped from one port to another within days days. the ith package on the conveyor belt has a weight of weights[i]. each day, we load the ship with packages on the conveyor belt (in the order given by weights). we may not load more weight than the maximum weight capacity of the ship. return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days. example 1: input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5 output: 15 explanation: a ship capacity of 15 is the minimum to ship all the packages in 5 days like this: 1st day: 1, 2, 3, 4, 5 2nd day: 6, 7 3rd day: 8 4th day: 9 5th day: 10 note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. example 2: input: weights = [3,2,2,4,1,4], days = 3 output: 6 explanation: a ship capacity of 6 is the minimum to ship all the packages in 3 days like this: 1st day: 3, 2 2nd day: 2, 4 3rd day: 1, 4 example 3: input: weights = [1,2,3,1,1], days = 4 output: 3 explanation: 1st day: 1 2nd day: 2 3rd day: 3 4th day: 1, 1 constraints: 1 <= days <= weights.length <= 5 * 104 1 <= weights[i] <= 500
the array of integers nums, you will choose two different indices i and j of that array. return the maximum value of (nums[i]-1)*(nums[j]-1). example 1: input: nums = [3,4,5,2] output: 12 explanation: if you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. example 2: input: nums = [1,5,4,5] output: 16 explanation: choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16. example 3: input: nums = [3,7] output: 12 constraints: 2 <= nums.length <= 500 1 <= nums[i] <= 10^3
have n bags numbered from 0 to n - 1. you are given two 0-indexed integer arrays capacity and rocks. the ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. you are also given an integer additionalrocks, the number of additional rocks you can place in any of the bags. return the maximum number of bags that could have full capacity after placing the additional rocks in some bags. example 1: input: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalrocks = 2 output: 3 explanation: place 1 rock in bag 0 and 1 rock in bag 1. the number of rocks in each bag are now [2,3,4,4]. bags 0, 1, and 2 have full capacity. there are 3 bags at full capacity, so we return 3. it can be shown that it is not possible to have more than 3 bags at full capacity. note that there may be other ways of placing the rocks that result in an answer of 3. example 2: input: capacity = [10,2,2], rocks = [2,2,0], additionalrocks = 100 output: 3 explanation: place 8 rocks in bag 0 and 2 rocks in bag 2. the number of rocks in each bag are now [10,2,2]. bags 0, 1, and 2 have full capacity. there are 3 bags at full capacity, so we return 3. it can be shown that it is not possible to have more than 3 bags at full capacity. note that we did not use all of the additional rocks. constraints: n == capacity.length == rocks.length 1 <= n <= 5 * 104 1 <= capacity[i] <= 109 0 <= rocks[i] <= capacity[i] 1 <= additionalrocks <= 109
are given a circle represented as (radius, xcenter, ycenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle. return true if the circle and rectangle are overlapped otherwise return false. in other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time. example 1: input: radius = 1, xcenter = 0, ycenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1 output: true explanation: circle and rectangle share the point (1,0). example 2: input: radius = 1, xcenter = 1, ycenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1 output: false example 3: input: radius = 1, xcenter = 0, ycenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1 output: true constraints: 1 <= radius <= 2000 -104 <= xcenter, ycenter <= 104 -104 <= x1 < x2 <= 104 -104 <= y1 < y2 <= 104
are given a string s of even length consisting of digits from 0 to 9, and two integers a and b. you can apply either of the following two operations any number of times and in any order on s: add a to all odd indices of s (0-indexed). digits post 9 are cycled back to 0. for example, if s = "3456" and a = 5, s becomes "3951". rotate s to the right by b positions. for example, if s = "3456" and b = 1, s becomes "6345". return the lexicographically smallest string you can obtain by applying the above operations any number of times on s. a string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "0158" is lexicographically smaller than "0190" because the first position they differ is at the third letter, and '5' comes before '9'. example 1: input: s = "5525", a = 9, b = 2 output: "2050" explanation: we can apply the following operations: start: "5525" rotate: "2555" add: "2454" add: "2353" rotate: "5323" add: "5222" add: "5121" rotate: "2151" add: "2050" there is no way to obtain a string that is lexicographically smaller then "2050". example 2: input: s = "74", a = 5, b = 1 output: "24" explanation: we can apply the following operations: start: "74" rotate: "47" add: "42" rotate: "24" there is no way to obtain a string that is lexicographically smaller then "24". example 3: input: s = "0011", a = 4, b = 2 output: "0011" explanation: there are no sequence of operations that will give us a lexicographically smaller string than "0011". constraints: 2 <= s.length <= 100 s.length is even. s consists of digits from 0 to 9 only. 1 <= a <= 9 1 <= b <= s.length - 1
the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string). example 1: input: text = "abcabcabc" output: 3 explanation: the 3 substrings are "abcabc", "bcabca" and "cabcab". example 2: input: text = "leetcodeleetcode" output: 2 explanation: the 2 substrings are "ee" and "leetcodeleetcode". constraints: 1 <= text.length <= 2000 text has only lowercase english letters.
additive number is a string whose digits can form an additive sequence. a valid additive sequence should contain at least three numbers. except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. given a string containing only digits, return true if it is an additive number or false otherwise. note: numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid. example 1: input: "112358" output: true explanation: the digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8 example 2: input: "199100199" output: true explanation: the additive sequence is: 1, 99, 100, 199. 1 + 99 = 100, 99 + 100 = 199 constraints: 1 <= num.length <= 35 num consists only of digits. follow up: how would you handle overflow for very large input integers?
two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise. example 1: input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]] output: true explanation: we can rotate mat 90 degrees clockwise to make mat equal target. example 2: input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]] output: false explanation: it is impossible to make mat equal to target by rotating mat. example 3: input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]] output: true explanation: we can rotate mat 90 degrees clockwise two times to make mat equal target. constraints: n == mat.length == target.length n == mat[i].length == target[i].length 1 <= n <= 10 mat[i][j] and target[i][j] are either 0 or 1.
a string s, return the string after replacing every uppercase letter with the same lowercase letter. example 1: input: s = "hello" output: "hello" example 2: input: s = "here" output: "here" example 3: input: s = "lovely" output: "lovely" constraints: 1 <= s.length <= 100 s consists of printable ascii characters.
a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. it is guaranteed there is at least one word that is not banned, and that the answer is unique. the words in paragraph are case-insensitive and the answer should be returned in lowercase. example 1: input: paragraph = "bob hit a ball, the hit ball flew far after it was hit.", banned = ["hit"] output: "ball" explanation: "hit" occurs 3 times, but it is a banned word. "ball" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. note that words in the paragraph are not case sensitive, that punctuation is ignored (even if adjacent to words, such as "ball,"), and that "hit" isn't the answer even though it occurs more because it is banned. example 2: input: paragraph = "a.", banned = [] output: "a" constraints: 1 <= paragraph.length <= 1000 paragraph consists of english letters, space ' ', or one of the symbols: "!?',;.". 0 <= banned.length <= 100 1 <= banned[i].length <= 10 banned[i] consists of only lowercase english letters.
an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive. a subarray of an array is a consecutive sequence of zero or more values taken out of that array. return the maximum length of a subarray with positive product. example 1: input: nums = [1,-2,-3,4] output: 4 explanation: the array nums already has a positive product of 24. example 2: input: nums = [0,1,-2,-3,-4] output: 3 explanation: the longest subarray with positive product is [1,-2,-3] which has a product of 6. notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive. example 3: input: nums = [-1,-2,-3,0,1] output: 2 explanation: the longest subarray with positive product is [-1,-2] or [-2,-3]. constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109
the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed). example 1: input: root = [1,3,2,5,3,null,9] output: [1,3,9] example 2: input: root = [1,2,3] output: [1,3] constraints: the number of nodes in the tree will be in the range [0, 104]. -231 <= node.val <= 231 - 1
are given an array arr of positive integers. you are also given the array queries where queries[i] = [lefti, righti]. for each query i compute the xor of elements from lefti to righti (that is, arr[lefti] xor arr[lefti + 1] xor ... xor arr[righti] ). return an array answer where answer[i] is the answer to the ith query. example 1: input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]] output: [2,7,14,8] explanation: the binary representation of the elements in the array are: 1 = 0001 3 = 0011 4 = 0100 8 = 1000 the xor values for queries are: [0,1] = 1 xor 3 = 2 [1,2] = 3 xor 4 = 7 [0,3] = 1 xor 3 xor 4 xor 8 = 14 [3,3] = 8 example 2: input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]] output: [8,0,4,4] constraints: 1 <= arr.length, queries.length <= 3 * 104 1 <= arr[i] <= 109 queries[i].length == 2 0 <= lefti <= righti < arr.length
are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where: -1 represents there is no fort at the ith position. 0 indicates there is an enemy fort at the ith position. 1 indicates the fort at the ith the position is under your command. now you have decided to move your army from one of your forts at position i to an empty position j such that: 0 <= i, j <= n - 1 the army travels over enemy forts only. formally, for all k where min(i,j) < k < max(i,j), forts[k] == 0. while moving the army, all the enemy forts that come in the way are captured. return the maximum number of enemy forts that can be captured. in case it is impossible to move your army, or you do not have any fort under your command, return 0. example 1: input: forts = [1,0,0,-1,0,0,0,0,1] output: 4 explanation: - moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2. - moving the army from position 8 to position 3 captures 4 enemy forts. since 4 is the maximum number of enemy forts that can be captured, we return 4. example 2: input: forts = [0,0,1,-1] output: 0 explanation: since no enemy fort can be captured, 0 is returned. constraints: 1 <= forts.length <= 1000 -1 <= forts[i] <= 1
are given a positive integer n. let even denote the number of even indices in the binary representation of n (0-indexed) with value 1. let odd denote the number of odd indices in the binary representation of n (0-indexed) with value 1. return an integer array answer where answer = [even, odd]. example 1: input: n = 17 output: [2,0] explanation: the binary representation of 17 is 10001. it contains 1 on the 0th and 4th indices. there are 2 even and 0 odd indices. example 2: input: n = 2 output: [0,1] explanation: the binary representation of 2 is 10. it contains 1 on the 1st index. there are 0 even and 1 odd indices. constraints: 1 <= n <= 1000
are given n balloons, indexed from 0 to n - 1. each balloon is painted with a number on it represented by an array nums. you are asked to burst all the balloons. if you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. if i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it. return the maximum coins you can collect by bursting the balloons wisely. example 1: input: nums = [3,1,5,8] output: 167 explanation: nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167 example 2: input: nums = [1,5] output: 10 constraints: n == nums.length 1 <= n <= 300 0 <= nums[i] <= 100
an array of strings names of size n. you will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i]. since two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique. return an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it. example 1: input: names = ["pes","fifa","gta","pes(2019)"] output: ["pes","fifa","gta","pes(2019)"] explanation: let's see how the file system creates folder names: "pes" --> not assigned before, remains "pes" "fifa" --> not assigned before, remains "fifa" "gta" --> not assigned before, remains "gta" "pes(2019)" --> not assigned before, remains "pes(2019)" example 2: input: names = ["gta","gta(1)","gta","avalon"] output: ["gta","gta(1)","gta(2)","avalon"] explanation: let's see how the file system creates folder names: "gta" --> not assigned before, remains "gta" "gta(1)" --> not assigned before, remains "gta(1)" "gta" --> the name is reserved, system adds (k), since "gta(1)" is also reserved, systems put k = 2. it becomes "gta(2)" "avalon" --> not assigned before, remains "avalon" example 3: input: names = ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"] output: ["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"] explanation: when the last folder is created, the smallest positive valid k is 4, and it becomes "onepiece(4)". constraints: 1 <= names.length <= 5 * 104 1 <= names[i].length <= 20 names[i] consists of lowercase english letters, digits, and/or round brackets.
are given an array nums consisting of positive integers. starting with score = 0, apply the following algorithm: choose the smallest integer of the array that is not marked. if there is a tie, choose the one with the smallest index. add the value of the chosen integer to score. mark the chosen element and its two adjacent elements if they exist. repeat until all the array elements are marked. return the score you get after applying the above algorithm. example 1: input: nums = [2,1,3,4,5,2] output: 7 explanation: we mark the elements as follows: - 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2]. - 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2]. - 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2]. our score is 1 + 2 + 4 = 7. example 2: input: nums = [2,3,5,1,3,2] output: 5 explanation: we mark the elements as follows: - 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2]. - 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2]. - 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2]. our score is 1 + 2 + 2 = 5. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106
schema table: activity +---------------+---------+ | column name | type | +---------------+---------+ | user_id | int | | session_id | int | | activity_date | date | | activity_type | enum | +---------------+---------+ there is no primary key for this table, it may have duplicate rows. the activity_type column is an enum of type ('open_session', 'end_session', 'scroll_down', 'send_message'). the table shows the user activities for a social media website. note that each session belongs to exactly one user. write an sql query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. a user was active on someday if they made at least one activity on that day. return the result table in any order. the query result format is in the following example. example 1: input: activity table: +---------+------------+---------------+---------------+ | user_id | session_id | activity_date | activity_type | +---------+------------+---------------+---------------+ | 1 | 1 | 2019-07-20 | open_session | | 1 | 1 | 2019-07-20 | scroll_down | | 1 | 1 | 2019-07-20 | end_session | | 2 | 4 | 2019-07-20 | open_session | | 2 | 4 | 2019-07-21 | send_message | | 2 | 4 | 2019-07-21 | end_session | | 3 | 2 | 2019-07-21 | open_session | | 3 | 2 | 2019-07-21 | send_message | | 3 | 2 | 2019-07-21 | end_session | | 4 | 3 | 2019-06-25 | open_session | | 4 | 3 | 2019-06-25 | end_session | +---------+------------+---------------+---------------+ output: +------------+--------------+ | day | active_users | +------------+--------------+ | 2019-07-20 | 2 | | 2019-07-21 | 2 | +------------+--------------+ explanation: note that we do not care about days with zero active users.
a string s, determine if it is valid. a string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following operation any number of times: insert string "abc" into any position in t. more formally, t becomes tleft + "abc" + tright, where t == tleft + tright. note that tleft and tright may be empty. return true if s is a valid string, otherwise, return false. example 1: input: s = "aabcbc" output: true explanation: "" -> "abc" -> "aabcbc" thus, "aabcbc" is valid. example 2: input: s = "abcabcababcc" output: true explanation: "" -> "abc" -> "abcabc" -> "abcabcabc" -> "abcabcababcc" thus, "abcabcababcc" is valid. example 3: input: s = "abccba" output: false explanation: it is impossible to get "abccba" using the operation. constraints: 1 <= s.length <= 2 * 104 s consists of letters 'a', 'b', and 'c'
fibonacci numbers, commonly denoted f(n) form a sequence, called the fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. that is, f(0) = 0, f(1) = 1 f(n) = f(n - 1) + f(n - 2), for n > 1. given n, calculate f(n). example 1: input: n = 2 output: 1 explanation: f(2) = f(1) + f(0) = 1 + 0 = 1. example 2: input: n = 3 output: 2 explanation: f(3) = f(2) + f(1) = 1 + 1 = 2. example 3: input: n = 4 output: 3 explanation: f(4) = f(3) + f(2) = 2 + 1 = 3. constraints: 0 <= n <= 30
are given a 2d integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person. the population of some year x is the number of people alive during that year. the ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. note that the person is not counted in the year that they die. return the earliest year with the maximum population. example 1: input: logs = [[1993,1999],[2000,2010]] output: 1993 explanation: the maximum population is 1, and 1993 is the earliest year with this population. example 2: input: logs = [[1950,1961],[1960,1971],[1970,1981]] output: 1960 explanation: the maximum population is 2, and it had happened in years 1960 and 1970. the earlier year between them is 1960. constraints: 1 <= logs.length <= 100 1950 <= birthi < deathi <= 2050
are given the heads of two sorted linked lists list1 and list2. merge the two lists in a one sorted list. the list should be made by splicing together the nodes of the first two lists. return the head of the merged linked list. example 1: input: list1 = [1,2,4], list2 = [1,3,4] output: [1,1,2,3,4,4] example 2: input: list1 = [], list2 = [] output: [] example 3: input: list1 = [], list2 = [0] output: [0] constraints: the number of nodes in both lists is in the range [0, 50]. -100 <= node.val <= 100 both list1 and list2 are sorted in non-decreasing order.

an integer num, return the number of digits in num that divide num. an integer val divides nums if nums % val == 0. example 1: input: num = 7 output: 1 explanation: 7 divides itself, hence the answer is 1. example 2: input: num = 121 output: 2 explanation: 121 is divisible by 1, but not 2. since 1 occurs twice as a digit, we return 2. example 3: input: num = 1248 output: 4 explanation: 1248 is divisible by all of its digits, hence the answer is 4. constraints: 1 <= num <= 109 num does not contain 0 as one of its digits.
pow(x, n), which calculates x raised to the power n (i.e., xn). example 1: input: x = 2.00000, n = 10 output: 1024.00000 example 2: input: x = 2.10000, n = 3 output: 9.26100 example 3: input: x = 2.00000, n = -2 output: 0.25000 explanation: 2-2 = 1/22 = 1/4 = 0.25 constraints: -100.0 < x < 100.0 -231 <= n <= 231-1 n is an integer. either x is not zero or n > 0. -104 <= xn <= 104
attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters: 'a': absent. 'l': late. 'p': present. any student is eligible for an attendance award if they meet both of the following criteria: the student was absent ('a') for strictly fewer than 2 days total. the student was never late ('l') for 3 or more consecutive days. given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. the answer may be very large, so return it modulo 109 + 7. example 1: input: n = 2 output: 8 explanation: there are 8 records with length 2 that are eligible for an award: "pp", "ap", "pa", "lp", "pl", "al", "la", "ll" only "aa" is not eligible because there are 2 absences (there need to be fewer than 2). example 2: input: n = 1 output: 3 example 3: input: n = 10101 output: 183236316 constraints: 1 <= n <= 105
security devices are activated inside a bank. you are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2d matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device. there is one laser beam between any two security devices if both conditions are met: the two devices are located on two different rows: r1 and r2, where r1 < r2. for each row i where r1 < i < r2, there are no security devices in the ith row. laser beams are independent, i.e., one beam does not interfere nor join with another. return the total number of laser beams in the bank. example 1: input: bank = ["011001","000000","010100","001000"] output: 8 explanation: between each of the following device pairs, there is one beam. in total, there are 8 beams: * bank[0][1] -- bank[2][1] * bank[0][1] -- bank[2][3] * bank[0][2] -- bank[2][1] * bank[0][2] -- bank[2][3] * bank[0][5] -- bank[2][1] * bank[0][5] -- bank[2][3] * bank[2][1] -- bank[3][2] * bank[2][3] -- bank[3][2] note that there is no beam between any device on the 0th row with any on the 3rd row. this is because the 2nd row contains security devices, which breaks the second condition. example 2: input: bank = ["000","111","000"] output: 0 explanation: there does not exist two devices located on two different rows. constraints: m == bank.length n == bank[i].length 1 <= m, n <= 500 bank[i][j] is either '0' or '1'.
have a water dispenser that can dispense cold, warm, and hot water. every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water. you are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. return the minimum number of seconds needed to fill up all the cups. example 1: input: amount = [1,4,2] output: 4 explanation: one way to fill up the cups is: second 1: fill up a cold cup and a warm cup. second 2: fill up a warm cup and a hot cup. second 3: fill up a warm cup and a hot cup. second 4: fill up a warm cup. it can be proven that 4 is the minimum number of seconds needed. example 2: input: amount = [5,4,4] output: 7 explanation: one way to fill up the cups is: second 1: fill up a cold cup, and a hot cup. second 2: fill up a cold cup, and a warm cup. second 3: fill up a cold cup, and a warm cup. second 4: fill up a warm cup, and a hot cup. second 5: fill up a cold cup, and a hot cup. second 6: fill up a cold cup, and a warm cup. second 7: fill up a hot cup. example 3: input: amount = [5,0,0] output: 5 explanation: every second, we fill up a cold cup. constraints: amount.length == 3 0 <= amount[i] <= 100
are given hours, a list of the number of hours worked per day for a given employee. a day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8. a well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days. return the length of the longest well-performing interval. example 1: input: hours = [9,9,6,0,6,6,9] output: 3 explanation: the longest well-performing interval is [9,9,6]. example 2: input: hours = [6,6,6] output: 0 constraints: 1 <= hours.length <= 104 0 <= hours[i] <= 16
are given an integer hoursbefore, the number of hours you have to travel to your meeting. to arrive at your meeting, you have to travel through n roads. the road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. in addition, you are given an integer speed, which is the speed (in km/h) you will travel at. after you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. note that you do not have to rest after traveling the last road because you are already at the meeting. for example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. if traveling a road takes exactly 2 hours, you do not need to wait. however, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. note that this means you may finish traveling future roads at different hour marks. for example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately. return the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible. example 1: input: dist = [1,3,2], speed = 4, hoursbefore = 2 output: 1 explanation: without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours. you can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours. note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest. example 2: input: dist = [7,3,5,5], speed = 2, hoursbefore = 10 output: 2 explanation: without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours. you can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours. example 3: input: dist = [7,3,5,5], speed = 1, hoursbefore = 10 output: -1 explanation: it is impossible to arrive at the meeting on time even if you skip all the rests. constraints: n == dist.length 1 <= n <= 1000 1 <= dist[i] <= 105 1 <= speed <= 106 1 <= hoursbefore <= 107
a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i]. rearrange the barcodes so that no two adjacent barcodes are equal. you may return any answer, and it is guaranteed an answer exists. example 1: input: barcodes = [1,1,1,2,2,2] output: [2,1,2,1,2,1] example 2: input: barcodes = [1,1,1,1,2,2,3,3] output: [1,3,1,3,1,2,1,2] constraints: 1 <= barcodes.length <= 10000 1 <= barcodes[i] <= 10000
wants to save money for his first car. he puts money in the leetcode bank every day. he starts by putting in $1 on monday, the first day. every day from tuesday to sunday, he will put in $1 more than the day before. on every subsequent monday, he will put in $1 more than the previous monday. given n, return the total amount of money he will have in the leetcode bank at the end of the nth day. example 1: input: n = 4 output: 10 explanation: after the 4th day, the total is 1 + 2 + 3 + 4 = 10. example 2: input: n = 10 output: 37 explanation: after the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. notice that on the 2nd monday, hercy only puts in $2. example 3: input: n = 20 output: 96 explanation: after the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96. constraints: 1 <= n <= 1000
a string s of lowercase letters, these letters form consecutive groups of the same character. for example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy". a group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. in the above example, "xxxx" has the interval [3,6]. a group is considered large if it has 3 or more characters. return the intervals of every large group sorted in increasing order by start index. example 1: input: s = "abbxxxxzzy" output: [[3,6]] explanation: "xxxx" is the only large group with start index 3 and end index 6. example 2: input: s = "abc" output: [] explanation: we have groups "a", "b", and "c", none of which are large groups. example 3: input: s = "abcdddeeeeaabbbcd" output: [[3,5],[6,9],[12,14]] explanation: the large groups are "ddd", "eeee", and "bbb". constraints: 1 <= s.length <= 1000 s contains lowercase english letters only.
are given an array nums of n positive integers. you can perform two types of operations on any element of the array any number of times: if the element is even, divide it by 2. for example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2]. if the element is odd, multiply it by 2. for example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4]. the deviation of the array is the maximum difference between any two elements in the array. return the minimum deviation the array can have after performing some number of operations. example 1: input: nums = [1,2,3,4] output: 1 explanation: you can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1. example 2: input: nums = [4,1,5,20,3] output: 3 explanation: you can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3. example 3: input: nums = [2,10,8] output: 3 constraints: n == nums.length 2 <= n <= 5 * 104 1 <= nums[i] <= 109
underground railway system is keeping track of customer travel times between different stations. they are using this data to calculate the average time it takes to travel from one station to another. implement the undergroundsystem class: void checkin(int id, string stationname, int t) a customer with a card id equal to id, checks in at the station stationname at time t. a customer can only be checked into one place at a time. void checkout(int id, string stationname, int t) a customer with a card id equal to id, checks out from the station stationname at time t. double getaveragetime(string startstation, string endstation) returns the average time it takes to travel from startstation to endstation. the average time is computed from all the previous traveling times from startstation to endstation that happened directly, meaning a check in at startstation followed by a check out from endstation. the time it takes to travel from startstation to endstation may be different from the time it takes to travel from endstation to startstation. there will be at least one customer that has traveled from startstation to endstation before getaveragetime is called. you may assume all calls to the checkin and checkout methods are consistent. if a customer checks in at time t1 then checks out at time t2, then t1 < t2. all events happen in chronological order. example 1: input ["undergroundsystem","checkin","checkin","checkin","checkout","checkout","checkout","getaveragetime","getaveragetime","checkin","getaveragetime","checkout","getaveragetime"] [[],[45,"leyton",3],[32,"paradise",8],[27,"leyton",10],[45,"waterloo",15],[27,"waterloo",20],[32,"cambridge",22],["paradise","cambridge"],["leyton","waterloo"],[10,"leyton",24],["leyton","waterloo"],[10,"waterloo",38],["leyton","waterloo"]] output [null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000] explanation undergroundsystem undergroundsystem = new undergroundsystem(); undergroundsystem.checkin(45, "leyton", 3); undergroundsystem.checkin(32, "paradise", 8); undergroundsystem.checkin(27, "leyton", 10); undergroundsystem.checkout(45, "waterloo", 15); // customer 45 "leyton" -> "waterloo" in 15-3 = 12 undergroundsystem.checkout(27, "waterloo", 20); // customer 27 "leyton" -> "waterloo" in 20-10 = 10 undergroundsystem.checkout(32, "cambridge", 22); // customer 32 "paradise" -> "cambridge" in 22-8 = 14 undergroundsystem.getaveragetime("paradise", "cambridge"); // return 14.00000. one trip "paradise" -> "cambridge", (14) / 1 = 14 undergroundsystem.getaveragetime("leyton", "waterloo"); // return 11.00000. two trips "leyton" -> "waterloo", (10 + 12) / 2 = 11 undergroundsystem.checkin(10, "leyton", 24); undergroundsystem.getaveragetime("leyton", "waterloo"); // return 11.00000 undergroundsystem.checkout(10, "waterloo", 38); // customer 10 "leyton" -> "waterloo" in 38-24 = 14 undergroundsystem.getaveragetime("leyton", "waterloo"); // return 12.00000. three trips "leyton" -> "waterloo", (10 + 12 + 14) / 3 = 12 example 2: input ["undergroundsystem","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime"] [[],[10,"leyton",3],[10,"paradise",8],["leyton","paradise"],[5,"leyton",10],[5,"paradise",16],["leyton","paradise"],[2,"leyton",21],[2,"paradise",30],["leyton","paradise"]] output [null,null,null,5.00000,null,null,5.50000,null,null,6.66667] explanation undergroundsystem undergroundsystem = new undergroundsystem(); undergroundsystem.checkin(10, "leyton", 3); undergroundsystem.checkout(10, "paradise", 8); // customer 10 "leyton" -> "paradise" in 8-3 = 5 undergroundsystem.getaveragetime("leyton", "paradise"); // return 5.00000, (5) / 1 = 5 undergroundsystem.checkin(5, "leyton", 10); undergroundsystem.checkout(5, "paradise", 16); // customer 5 "leyton" -> "paradise" in 16-10 = 6 undergroundsystem.getaveragetime("leyton", "paradise"); // return 5.50000, (5 + 6) / 2 = 5.5 undergroundsystem.checkin(2, "leyton", 21); undergroundsystem.checkout(2, "paradise", 30); // customer 2 "leyton" -> "paradise" in 30-21 = 9 undergroundsystem.getaveragetime("leyton", "paradise"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667 constraints: 1 <= id, t <= 106 1 <= stationname.length, startstation.length, endstation.length <= 10 all strings consist of uppercase and lowercase english letters and digits. there will be at most 2 * 104 calls in total to checkin, checkout, and getaveragetime. answers within 10-5 of the actual value will be accepted.
are given a string title consisting of one or more words separated by a single space, where each word consists of english letters. capitalize the string by changing the capitalization of each word such that: if the length of the word is 1 or 2 letters, change all letters to lowercase. otherwise, change the first letter to uppercase and the remaining letters to lowercase. return the capitalized title. example 1: input: title = "capitalize the title" output: "capitalize the title" explanation: since all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase. example 2: input: title = "first letter of each word" output: "first letter of each word" explanation: the word "of" has length 2, so it is all lowercase. the remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase. example 3: input: title = "i love leetcode" output: "i love leetcode" explanation: the word "i" has length 1, so it is lowercase. the remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase. constraints: 1 <= title.length <= 100 title consists of words separated by a single space without any leading or trailing spaces. each word consists of uppercase and lowercase english letters and is non-empty.
a tic-tac-toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. the board is a 3 x 3 array that consists of characters ' ', 'x', and 'o'. the ' ' character represents an empty square. here are the rules of tic-tac-toe: players take turns placing characters into empty squares ' '. the first player always places 'x' characters, while the second player always places 'o' characters. 'x' and 'o' characters are always placed into empty squares, never filled ones. the game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. the game also ends if all squares are non-empty. no more moves can be played if the game is over. example 1: input: board = ["o "," "," "] output: false explanation: the first player always plays "x". example 2: input: board = ["xox"," x "," "] output: false explanation: players take turns making moves. example 3: input: board = ["xox","o o","xox"] output: true constraints: board.length == 3 board[i].length == 3 board[i][j] is either 'x', 'o', or ' '.
are given a positive integer n, you can do the following operation any number of times: add or subtract a power of 2 from n. return the minimum number of operations to make n equal to 0. a number x is power of 2 if x == 2i where i >= 0. example 1: input: n = 39 output: 3 explanation: we can do the following operations: - add 20 = 1 to n, so now n = 40. - subtract 23 = 8 from n, so now n = 32. - subtract 25 = 32 from n, so now n = 0. it can be shown that 3 is the minimum number of operations we need to make n equal to 0. example 2: input: n = 54 output: 3 explanation: we can do the following operations: - add 21 = 2 to n, so now n = 56. - add 23 = 8 to n, so now n = 64. - subtract 26 = 64 from n, so now n = 0. so the minimum number of operations is 3. constraints: 1 <= n <= 105
want to build n new buildings in a city. the new buildings will be built in a line and are labeled from 1 to n. however, there are city restrictions on the heights of the new buildings: the height of each building must be a non-negative integer. the height of the first building must be 0. the height difference between any two adjacent buildings cannot exceed 1. additionally, there are city restrictions on the maximum height of specific buildings. these restrictions are given as a 2d integer array restrictions where restrictions[i] = [idi, maxheighti] indicates that building idi must have a height less than or equal to maxheighti. it is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions. return the maximum possible height of the tallest building. example 1: input: n = 5, restrictions = [[2,1],[4,1]] output: 2 explanation: the green area in the image indicates the maximum allowed height for each building. we can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2. example 2: input: n = 6, restrictions = [] output: 5 explanation: the green area in the image indicates the maximum allowed height for each building. we can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5. example 3: input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]] output: 5 explanation: the green area in the image indicates the maximum allowed height for each building. we can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5. constraints: 2 <= n <= 109 0 <= restrictions.length <= min(n - 1, 105) 2 <= idi <= n idi is unique. 0 <= maxheighti <= 109
message containing letters from a-z can be encoded into numbers using the following mapping: 'a' -> "1" 'b' -> "2" ... 'z' -> "26" to decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, "11106" can be mapped into: "aajf" with the grouping (1 1 10 6) "kjf" with the grouping (11 10 6) note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'f' since "6" is different from "06". given a string s containing only digits, return the number of ways to decode it. the test cases are generated so that the answer fits in a 32-bit integer. example 1: input: s = "12" output: 2 explanation: "12" could be decoded as "ab" (1 2) or "l" (12). example 2: input: s = "226" output: 3 explanation: "226" could be decoded as "bz" (2 26), "vf" (22 6), or "bbf" (2 2 6). example 3: input: s = "06" output: 0 explanation: "06" cannot be mapped to "f" because of the leading zero ("6" is different from "06"). constraints: 1 <= s.length <= 100 s contains only digits and may contain leading zero(s).
the root of a binary tree, return the average value of the nodes on each level in the form of an array. answers within 10-5 of the actual answer will be accepted. example 1: input: root = [3,9,20,null,null,15,7] output: [3.00000,14.50000,11.00000] explanation: the average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. hence return [3, 14.5, 11]. example 2: input: root = [3,9,20,15,7] output: [3.00000,14.50000,11.00000] constraints: the number of nodes in the tree is in the range [1, 104]. -231 <= node.val <= 231 - 1
the video game fallout 4, the quest "road to freedom" requires players to reach a metal dial called the "freedom trail ring" and use the dial to spell a specific keyword to open the door. given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword. initially, the first character of the ring is aligned at the "12:00" direction. you should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the "12:00" direction and then by pressing the center button. at the stage of rotating the ring to spell the key character key[i]: you can rotate the ring clockwise or anticlockwise by one place, which counts as one step. the final purpose of the rotation is to align one of ring's characters at the "12:00" direction, where this character must equal key[i]. if the character key[i] has been aligned at the "12:00" direction, press the center button to spell, which also counts as one step. after the pressing, you could begin to spell the next character in the key (next stage). otherwise, you have finished all the spelling. example 1: input: ring = "godding", key = "gd" output: 4 explanation: for the first key character 'g', since it is already in place, we just need 1 step to spell this character. for the second key character 'd', we need to rotate the ring "godding" anticlockwise by two steps to make it become "ddinggo". also, we need 1 more step for spelling. so the final output is 4. example 2: input: ring = "godding", key = "godding" output: 13 constraints: 1 <= ring.length, key.length <= 100 ring and key consist of only lower case english letters. it is guaranteed that key could always be spelled by rotating ring.
an integer n and an integer array rounds. we have a circular track which consists of n sectors labeled from 1 to n. a marathon will be held on this track, the marathon consists of m rounds. the ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. for example, round 1 starts at sector rounds[0] and ends at sector rounds[1] return an array of the most visited sectors sorted in ascending order. notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (see the first example). example 1: input: n = 4, rounds = [1,3,1,2] output: [1,2] explanation: the marathon starts at sector 1. the order of the visited sectors is as follows: 1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon) we can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. sectors 3 and 4 are visited only once. example 2: input: n = 2, rounds = [2,1,2,1,2,1,2,1,2] output: [2] example 3: input: n = 7, rounds = [1,3,5,7] output: [1,2,3,4,5,6,7] constraints: 2 <= n <= 100 1 <= m <= 100 rounds.length == m + 1 1 <= rounds[i] <= n rounds[i] != rounds[i + 1] for 0 <= i < m
an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them. return the result as a list of indices representing the starting position of each interval (0-indexed). if there are multiple answers, return the lexicographically smallest one. example 1: input: nums = [1,2,1,2,6,7,5,1], k = 2 output: [0,3,5] explanation: subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5]. we could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger. example 2: input: nums = [1,2,1,2,1,2,1,2,1], k = 2 output: [0,2,4] constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i] < 216 1 <= k <= floor(nums.length / 3)
are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. return the fewest number of coins that you need to make up that amount. if that amount of money cannot be made up by any combination of the coins, return -1. you may assume that you have an infinite number of each kind of coin. example 1: input: coins = [1,2,5], amount = 11 output: 3 explanation: 11 = 5 + 5 + 1 example 2: input: coins = [2], amount = 3 output: -1 example 3: input: coins = [1], amount = 0 output: 0 constraints: 1 <= coins.length <= 12 1 <= coins[i] <= 231 - 1 0 <= amount <= 104
an n x n binary matrix grid, return the length of the shortest clear path in the matrix. if there is no clear path, return -1. a clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that: all the visited cells of the path are 0. all the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner). the length of a clear path is the number of visited cells of this path. example 1: input: grid = [[0,1],[1,0]] output: 2 example 2: input: grid = [[0,0,0],[1,1,0],[1,1,0]] output: 4 example 3: input: grid = [[1,0,0],[1,1,0],[1,1,0]] output: -1 constraints: n == grid.length n == grid[i].length 1 <= n <= 100 grid[i][j] is 0 or 1
schema table: person +-------------+---------+ | column name | type | +-------------+---------+ | personid | int | | lastname | varchar | | firstname | varchar | +-------------+---------+ personid is the primary key column for this table. this table contains information about the id of some persons and their first and last names. table: address +-------------+---------+ | column name | type | +-------------+---------+ | addressid | int | | personid | int | | city | varchar | | state | varchar | +-------------+---------+ addressid is the primary key column for this table. each row of this table contains information about the city and state of one person with id = personid. write an sql query to report the first name, last name, city, and state of each person in the person table. if the address of a personid is not present in the address table, report null instead. return the result table in any order. the query result format is in the following example. example 1: input: person table: +----------+----------+-----------+ | personid | lastname | firstname | +----------+----------+-----------+ | 1 | wang | allen | | 2 | alice | bob | +----------+----------+-----------+ address table: +-----------+----------+---------------+------------+ | addressid | personid | city | state | +-----------+----------+---------------+------------+ | 1 | 2 | new york city | new york | | 2 | 3 | leetcode | california | +-----------+----------+---------------+------------+ output: +-----------+----------+---------------+----------+ | firstname | lastname | city | state | +-----------+----------+---------------+----------+ | allen | wang | null | null | | bob | alice | new york city | new york | +-----------+----------+---------------+----------+ explanation: there is no address in the address table for the personid = 1 so we return null in their city and state. addressid = 1 contains information about the address of personid = 2.
an integer array instructions, you are asked to create a sorted array from the elements in instructions. you start with an empty container nums. for each element from left to right in instructions, insert it into nums. the cost of each insertion is the minimum of the following: the number of elements currently in nums that are strictly less than instructions[i]. the number of elements currently in nums that are strictly greater than instructions[i]. for example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5]. return the total cost to insert all elements from instructions into nums. since the answer may be large, return it modulo 109 + 7 example 1: input: instructions = [1,5,6,2] output: 1 explanation: begin with nums = []. insert 1 with cost min(0, 0) = 0, now nums = [1]. insert 5 with cost min(1, 0) = 0, now nums = [1,5]. insert 6 with cost min(2, 0) = 0, now nums = [1,5,6]. insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6]. the total cost is 0 + 0 + 0 + 1 = 1. example 2: input: instructions = [1,2,3,6,5,4] output: 3 explanation: begin with nums = []. insert 1 with cost min(0, 0) = 0, now nums = [1]. insert 2 with cost min(1, 0) = 0, now nums = [1,2]. insert 3 with cost min(2, 0) = 0, now nums = [1,2,3]. insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6]. insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6]. insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6]. the total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3. example 3: input: instructions = [1,3,3,3,2,4,2,1,2] output: 4 explanation: begin with nums = []. insert 1 with cost min(0, 0) = 0, now nums = [1]. insert 3 with cost min(1, 0) = 0, now nums = [1,3]. insert 3 with cost min(1, 0) = 0, now nums = [1,3,3]. insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3]. insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3]. insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4]. insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4]. insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4]. insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4]. the total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4. constraints: 1 <= instructions.length <= 105 1 <= instructions[i] <= 105
are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). more formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i]. you are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain. for example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive). [3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences. [5, 6, 3, 7] is not possible since it contains an element greater than 6. [1, 2, 3, 4] is not possible since the differences are not correct. return the number of possible hidden sequences there are. if there are no possible sequences, return 0. example 1: input: differences = [1,-3,4], lower = 1, upper = 6 output: 2 explanation: the possible hidden sequences are: - [3, 4, 1, 5] - [4, 5, 2, 6] thus, we return 2. example 2: input: differences = [3,-4,5,1,-2], lower = -4, upper = 5 output: 4 explanation: the possible hidden sequences are: - [-3, 0, -4, 1, 2, 0] - [-2, 1, -3, 2, 3, 1] - [-1, 2, -2, 3, 4, 2] - [0, 3, -1, 4, 5, 3] thus, we return 4. example 3: input: differences = [4,-7,2], lower = 3, upper = 6 output: 0 explanation: there are no possible hidden sequences. thus, we return 0. constraints: n == differences.length 1 <= n <= 105 -105 <= differences[i] <= 105 -105 <= lower <= upper <= 105
are given a 0-indexed integer array nums. the low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length. the high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length. the score of nums is the sum of the high and low scores of nums. to minimize the score of nums, we can change the value of at most two elements of nums. return the minimum possible score after changing the value of at most two elements of nums. note that |x| denotes the absolute value of x. example 1: input: nums = [1,4,3] output: 0 explanation: change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. now, the value of |nums[i] - nums[j]| is always equal to 0, so we return 0 + 0 = 0. example 2: input: nums = [1,4,7,8,5] output: 3 explanation: change nums[0] and nums[1] to be 6. now nums becomes [6,6,7,8,5]. our low score is achieved when i = 0 and j = 1, in which case |nums[i] - nums[j]| = |6 - 6| = 0. our high score is achieved when i = 3 and j = 4, in which case |nums[i] - nums[j]| = |8 - 5| = 3. the sum of our high and low score is 3, which we can prove to be minimal. constraints: 3 <= nums.length <= 105 1 <= nums[i] <= 109
are given two 0-indexed arrays nums and cost consisting each of n positive integers. you can do the following operation any number of times: increase or decrease any element of the array nums by 1. the cost of doing one operation on the ith element is cost[i]. return the minimum total cost such that all the elements of the array nums become equal. example 1: input: nums = [1,3,5,2], cost = [2,3,1,14] output: 8 explanation: we can make all the elements equal to 2 in the following way: - increase the 0th element one time. the cost is 2. - decrease the 1st element one time. the cost is 3. - decrease the 2nd element three times. the cost is 1 + 1 + 1 = 3. the total cost is 2 + 3 + 3 = 8. it can be shown that we cannot make the array equal with a smaller cost. example 2: input: nums = [2,2,2,2,2], cost = [4,2,8,1,3] output: 0 explanation: all the elements are already equal, so no operations are needed. constraints: n == nums.length == cost.length 1 <= n <= 105 1 <= nums[i], cost[i] <= 106
are given an encoded string s. to decode the string to a tape, the encoded string is read one character at a time and the following steps are taken: if the character read is a letter, that letter is written onto the tape. if the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total. given an integer k, return the kth letter (1-indexed) in the decoded string. example 1: input: s = "leet2code3", k = 10 output: "o" explanation: the decoded string is "leetleetcodeleetleetcodeleetleetcode". the 10th letter in the string is "o". example 2: input: s = "ha22", k = 5 output: "h" explanation: the decoded string is "hahahaha". the 5th letter is "h". example 3: input: s = "a2345678999999999999999", k = 1 output: "a" explanation: the decoded string is "a" repeated 8301530446056247680 times. the 1st letter is "a". constraints: 2 <= s.length <= 100 s consists of lowercase english letters and digits 2 through 9. s starts with a letter. 1 <= k <= 109 it is guaranteed that k is less than or equal to the length of the decoded string. the decoded string is guaranteed to have less than 263 letters.
are given two 0-indexed arrays nums1 and nums2 and a 2d array queries of queries. there are three types of queries: for a query of type 1, queries[i] = [1, l, r]. flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. both l and r are 0-indexed. for a query of type 2, queries[i] = [2, p, 0]. for every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p. for a query of type 3, queries[i] = [3, 0, 0]. find the sum of the elements in nums2. return an array containing all the answers to the third type queries. example 1: input: nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]] output: [3] explanation: after the first query nums1 becomes [1,1,1]. after the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. thus, [3] is returned. example 2: input: nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]] output: [5] explanation: after the first query, nums2 remains [5], so the answer to the second query is 5. thus, [5] is returned. constraints: 1 <= nums1.length,nums2.length <= 105 nums1.length = nums2.length 1 <= queries.length <= 105 queries[i].length = 3 0 <= l <= r <= nums1.length - 1 0 <= p <= 106 0 <= nums1[i] <= 1 0 <= nums2[i] <= 109
2 integers n and start. your task is return any permutation p of (0,1,2.....,2^n -1) such that : p[0] = start p[i] and p[i+1] differ by only one bit in their binary representation. p[0] and p[2^n -1] must also differ by only one bit in their binary representation. example 1: input: n = 2, start = 3 output: [3,2,0,1] explanation: the binary representation of the permutation is (11,10,00,01). all the adjacent element differ by one bit. another valid permutation is [3,1,0,2] example 2: input: n = 3, start = 2 output: [2,6,7,5,4,0,1,3] explanation: the binary representation of the permutation is (010,110,111,101,100,000,001,011). constraints: 1 <= n <= 16 0 <= start < 2 ^ n
schema table: users +----------------+---------+ | column name | type | +----------------+---------+ | user_id | int | | name | varchar | +----------------+---------+ user_id is the primary key for this table. this table contains the id and the name of the user. the name consists of only lowercase and uppercase characters. write an sql query to fix the names so that only the first character is uppercase and the rest are lowercase. return the result table ordered by user_id. the query result format is in the following example. example 1: input: users table: +---------+-------+ | user_id | name | +---------+-------+ | 1 | alice | | 2 | bob | +---------+-------+ output: +---------+-------+ | user_id | name | +---------+-------+ | 1 | alice | | 2 | bob | +---------+-------+
an array of length n sorted in ascending order is rotated between 1 and n times. for example, the array nums = [0,1,2,4,5,6,7] might become: [4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. given the sorted rotated array nums of unique elements, return the minimum element of this array. you must write an algorithm that runs in o(log n) time. example 1: input: nums = [3,4,5,1,2] output: 1 explanation: the original array was [1,2,3,4,5] rotated 3 times. example 2: input: nums = [4,5,6,7,0,1,2] output: 0 explanation: the original array was [0,1,2,4,5,6,7] and it was rotated 4 times. example 3: input: nums = [11,13,15,17] output: 11 explanation: the original array was [11,13,15,17] and it was rotated 4 times. constraints: n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 all the integers of nums are unique. nums is sorted and rotated between 1 and n times.
are given an n x n grid where you have placed some 1 x 1 x 1 cubes. each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j). after placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3d shapes. return the total surface area of the resulting shapes. note: the bottom face of each shape counts toward its surface area. example 1: input: grid = [[1,2],[3,4]] output: 34 example 2: input: grid = [[1,1,1],[1,0,1],[1,1,1]] output: 32 example 3: input: grid = [[2,2,2],[2,1,2],[2,2,2]] output: 46 constraints: n == grid.length == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <= 50
are given a string s and array queries where queries[i] = [lefti, righti, ki]. we may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase english letter. if the substring is possible to be a palindrome string after the operations above, the result of the query is true. otherwise, the result is false. return a boolean array answer where answer[i] is the result of the ith query queries[i]. note that each letter is counted individually for replacement, so if, for example s[lefti...righti] = "aaa", and ki = 2, we can only replace two of the letters. also, note that no query modifies the initial string s. example : input: s = "abcda", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]] output: [true,false,false,true,true] explanation: queries[0]: substring = "d", is palidrome. queries[1]: substring = "bc", is not palidrome. queries[2]: substring = "abcd", is not palidrome after replacing only 1 character. queries[3]: substring = "abcd", could be changed to "abba" which is palidrome. also this can be changed to "baab" first rearrange it "bacd" then replace "cd" with "ab". queries[4]: substring = "abcda", could be changed to "abcba" which is palidrome. example 2: input: s = "lyb", queries = [[0,1,0],[2,2,1]] output: [false,true] constraints: 1 <= s.length, queries.length <= 105 0 <= lefti <= righti < s.length 0 <= ki <= s.length s consists of lowercase english letters.
are given an array nums consisting of positive integers. we call a subarray of nums nice if the bitwise and of every pair of elements that are in different positions in the subarray is equal to 0. return the length of the longest nice subarray. a subarray is a contiguous part of an array. note that subarrays of length 1 are always considered nice. example 1: input: nums = [1,3,8,48,10] output: 3 explanation: the longest nice subarray is [3,8,48]. this subarray satisfies the conditions: - 3 and 8 = 0. - 3 and 48 = 0. - 8 and 48 = 0. it can be proven that no longer nice subarray can be obtained, so we return 3. example 2: input: nums = [3,1,5,11,13] output: 1 explanation: the length of the longest nice subarray is 1. any subarray of length 1 can be chosen. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
code that enhances all arrays such that you can call the snail(rowscount, colscount) method that transforms the 1d array into a 2d array organised in the pattern known as snail traversal order. invalid input values should output an empty array. if rowscount * colscount !== nums.length, the input is considered invalid. snail traversal order starts at the top left cell with the first value of the current array. it then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. this pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. for example, when given the input array [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] with rowscount = 5 and colscount = 4, the desired output matrix is shown below. note that iterating the matrix following the arrows corresponds to the order of numbers in the original array. example 1: input: nums = [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] rowscount = 5 colscount = 4 output: [ [19,17,16,15], [10,1,14,4], [3,2,12,20], [7,5,18,11], [9,8,6,13] ] example 2: input: nums = [1,2,3,4] rowscount = 1 colscount = 4 output: [[1, 2, 3, 4]] example 3: input: nums = [1,3] rowscount = 2 colscount = 2 output: [] explanation: 2 multiplied by 2 is 4, and the original array [1,3] has a length of 2; therefore, the input is invalid. constraints: 0 <= nums.length <= 250 1 <= nums[i] <= 1000 1 <= rowscount <= 250 1 <= colscount <= 250
are given two strings s and t of the same length and an integer maxcost. you want to change s to t. changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ascii values of the characters). return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxcost. if there is no substring from s that can be changed to its corresponding substring from t, return 0. example 1: input: s = "abcd", t = "bcdf", maxcost = 3 output: 3 explanation: "abc" of s can change to "bcd". that costs 3, so the maximum length is 3. example 2: input: s = "abcd", t = "cdef", maxcost = 3 output: 1 explanation: each character in s costs 2 to change to character in t, so the maximum length is 1. example 3: input: s = "abcd", t = "acde", maxcost = 0 output: 1 explanation: you cannot make any change, so the maximum length is 1. constraints: 1 <= s.length <= 105 t.length == s.length 0 <= maxcost <= 106 s and t consist of only lowercase english letters.
are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. initially, each card is placed on a table such that the front number is facing up and the other is facing down. you may flip over any number of cards (possibly zero). after flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card. return the minimum possible good integer after flipping the cards. if there are no good integers, return 0. example 1: input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3] output: 2 explanation: if we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3]. 2 is the minimum good integer as it appears facing down but not facing up. it can be shown that 2 is the minimum possible good integer obtainable after flipping some cards. example 2: input: fronts = [1], backs = [1] output: 0 explanation: there are no good integers no matter how we flip the cards, so we return 0. constraints: n == fronts.length == backs.length 1 <= n <= 1000 1 <= fronts[i], backs[i] <= 2000
are given two integer arrays nums1 and nums2. we write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines. we may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that: nums1[i] == nums2[j], and the line we draw does not intersect any other connecting (non-horizontal) line. note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line). return the maximum number of connecting lines we can draw in this way. example 1: input: nums1 = [1,4,2], nums2 = [1,2,4] output: 2 explanation: we can draw 2 uncrossed lines as in the diagram. we cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2. example 2: input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] output: 3 example 3: input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] output: 2 constraints: 1 <= nums1.length, nums2.length <= 500 1 <= nums1[i], nums2[j] <= 2000
two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing. in one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j]. if there is no way to make arr1 strictly increasing, return -1. example 1: input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4] output: 1 explanation: replace 5 with 2, then arr1 = [1, 2, 3, 6, 7]. example 2: input: arr1 = [1,5,3,6,7], arr2 = [4,3,1] output: 2 explanation: replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7]. example 3: input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3] output: -1 explanation: you can't make arr1 strictly increasing. constraints: 1 <= arr1.length, arr2.length <= 2000 0 <= arr1[i], arr2[i] <= 10^9
are given a very large integer n, represented as a string, and an integer digit x. the digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number. you want to maximize n's numerical value by inserting x anywhere in the decimal representation of n. you cannot insert x to the left of the negative sign. for example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763. if n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255. return a string representing the maximum value of n after the insertion. example 1: input: n = "99", x = 9 output: "999" explanation: the result is the same regardless of where you insert 9. example 2: input: n = "-13", x = 2 output: "-123" explanation: you can make n one of {-213, -123, -132}, and the largest of those three is -123. constraints: 1 <= n.length <= 105 1 <= x <= 9 the digits in n are in the range [1, 9]. n is a valid representation of an integer. in the case of a negative n, it will begin with '-'.
entity parser is the parser that takes html code as input and replace all the entities of the special characters by the characters itself. the special characters and their entities for html are: quotation mark: the entity is &quot; and symbol character is ". single quote mark: the entity is &apos; and symbol character is '. ampersand: the entity is &amp; and symbol character is &. greater than sign: the entity is &gt; and symbol character is >. less than sign: the entity is &lt; and symbol character is <. slash: the entity is &frasl; and symbol character is /. given the input text string to the html parser, you have to implement the entity parser. return the text after replacing the entities by the special characters. example 1: input: text = "&amp; is an html entity but &ambassador; is not." output: "& is an html entity but &ambassador; is not." explanation: the parser will replace the &amp; entity by & example 2: input: text = "and i quote: &quot;...&quot;" output: "and i quote: \"...\"" constraints: 1 <= text.length <= 105 the string may contain any possible characters out of all the 256 ascii characters.
an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. since the answer may be too large, return it modulo 109 + 7. the floor() function returns the integer part of the division. example 1: input: nums = [2,5,9] output: 10 explanation: floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0 floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1 floor(5 / 2) = 2 floor(9 / 2) = 4 floor(9 / 5) = 1 we calculate the floor of the division for every pair of indices in the array then sum them up. example 2: input: nums = [7,7,7,7,7,7,7] output: 49 constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 105
bitwise and of an array nums is the bitwise and of all integers in nums. for example, for nums = [1, 5, 3], the bitwise and is equal to 1 & 5 & 3 = 1. also, for nums = [7], the bitwise and is 7. you are given an array of positive integers candidates. evaluate the bitwise and of every combination of numbers of candidates. each number in candidates may only be used once in each combination. return the size of the largest combination of candidates with a bitwise and greater than 0. example 1: input: candidates = [16,17,71,62,12,24,14] output: 4 explanation: the combination [16,17,62,24] has a bitwise and of 16 & 17 & 62 & 24 = 16 > 0. the size of the combination is 4. it can be shown that no combination with a size greater than 4 has a bitwise and greater than 0. note that more than one combination may have the largest size. for example, the combination [62,12,24,14] has a bitwise and of 62 & 12 & 24 & 14 = 8 > 0. example 2: input: candidates = [8,8] output: 2 explanation: the largest combination [8,8] has a bitwise and of 8 & 8 = 8 > 0. the size of the combination is 2, so we return 2. constraints: 1 <= candidates.length <= 105 1 <= candidates[i] <= 107
are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2d plane. multiple points can have the same coordinates. you are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj. for each query queries[j], compute the number of points inside the jth circle. points on the border of the circle are considered inside. return an array answer, where answer[j] is the answer to the jth query. example 1: input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]] output: [3,2,2] explanation: the points and circles are shown above. queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle. example 2: input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]] output: [2,3,2,4] explanation: the points and circles are shown above. queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple. constraints: 1 <= points.length <= 500 points[i].length == 2 0 <= xi, yi <= 500 1 <= queries.length <= 500 queries[j].length == 3 0 <= xj, yj <= 500 1 <= rj <= 500 all coordinates are integers. follow up: could you find the answer for each query in better complexity than o(n)?
the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules: in the beginning, you have the permutation p=[1,2,3,...,m]. for the current i, find the position of queries[i] in the permutation p (indexing from 0) and then move this at the beginning of the permutation p. notice that the position of queries[i] in p is the result for queries[i]. return an array containing the result for the given queries. example 1: input: queries = [3,1,2,1], m = 5 output: [2,1,2,1] explanation: the queries are processed as follow: for i=0: queries[i]=3, p=[1,2,3,4,5], position of 3 in p is 2, then we move 3 to the beginning of p resulting in p=[3,1,2,4,5]. for i=1: queries[i]=1, p=[3,1,2,4,5], position of 1 in p is 1, then we move 1 to the beginning of p resulting in p=[1,3,2,4,5]. for i=2: queries[i]=2, p=[1,3,2,4,5], position of 2 in p is 2, then we move 2 to the beginning of p resulting in p=[2,1,3,4,5]. for i=3: queries[i]=1, p=[2,1,3,4,5], position of 1 in p is 1, then we move 1 to the beginning of p resulting in p=[1,2,3,4,5]. therefore, the array containing the result is [2,1,2,1]. example 2: input: queries = [4,1,2,2], m = 4 output: [3,1,2,0] example 3: input: queries = [7,5,5,8,3], m = 8 output: [6,5,0,7,5] constraints: 1 <= m <= 10^3 1 <= queries.length <= m 1 <= queries[i] <= m
are given a 0-indexed integer array nums. you are allowed to permute nums into a new array perm of your choosing. we define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i]. return the maximum possible greatness you can achieve after permuting nums. example 1: input: nums = [1,3,5,2,1,3,1] output: 4 explanation: one of the optimal rearrangements is perm = [2,5,1,3,3,1,1]. at indices = 0, 1, 3, and 4, perm[i] > nums[i]. hence, we return 4. example 2: input: nums = [1,2,3,4] output: 3 explanation: we can prove the optimal perm is [2,3,4,1]. at indices = 0, 1, and 2, perm[i] > nums[i]. hence, we return 3. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109
are given an integer array nums. you should move each element of nums into one of the two arrays a and b such that a and b are non-empty, and average(a) == average(b). return true if it is possible to achieve that and false otherwise. note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr. example 1: input: nums = [1,2,3,4,5,6,7,8] output: true explanation: we can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5. example 2: input: nums = [3,1] output: false constraints: 1 <= nums.length <= 30 0 <= nums[i] <= 104
are given a 0-indexed string s. you are also given a 0-indexed string querycharacters of length k and a 0-indexed array of integer indices queryindices of length k, both of which are used to describe k queries. the ith query updates the character in s at index queryindices[i] to the character querycharacters[i]. return an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed. example 1: input: s = "babacc", querycharacters = "bcb", queryindices = [1,3,3] output: [3,3,4] explanation: - 1st query updates s = "bbbacc". the longest substring consisting of one repeating character is "bbb" with length 3. - 2nd query updates s = "bbbccc". the longest substring consisting of one repeating character can be "bbb" or "ccc" with length 3. - 3rd query updates s = "bbbbcc". the longest substring consisting of one repeating character is "bbbb" with length 4. thus, we return [3,3,4]. example 2: input: s = "abyzz", querycharacters = "aa", queryindices = [2,1] output: [2,3] explanation: - 1st query updates s = "abazz". the longest substring consisting of one repeating character is "zz" with length 2. - 2nd query updates s = "aaazz". the longest substring consisting of one repeating character is "aaa" with length 3. thus, we return [2,3]. constraints: 1 <= s.length <= 105 s consists of lowercase english letters. k == querycharacters.length == queryindices.length 1 <= k <= 105 querycharacters consists of lowercase english letters. 0 <= queryindices[i] < s.length
are given an integer array nums and an integer k. you are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset. a subset's incompatibility is the difference between the maximum and minimum elements in that array. return the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible. a subset is a group integers that appear in the array with no particular order. example 1: input: nums = [1,2,1,4], k = 2 output: 4 explanation: the optimal distribution of subsets is [1,2] and [1,4]. the incompatibility is (2-1) + (4-1) = 4. note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements. example 2: input: nums = [6,3,8,1,3,1,2,2], k = 4 output: 6 explanation: the optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3]. the incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6. example 3: input: nums = [5,3,3,6,3,3], k = 3 output: -1 explanation: it is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset. constraints: 1 <= k <= nums.length <= 16 nums.length is divisible by k 1 <= nums[i] <= nums.length
are given an integer array rolls of length n and an integer k. you roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i]. return the length of the shortest sequence of rolls that cannot be taken from rolls. a sequence of rolls of length len is the result of rolling a k sided dice len times. note that the sequence taken does not have to be consecutive as long as it is in order. example 1: input: rolls = [4,2,1,2,3,3,2,4,1], k = 4 output: 3 explanation: every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls. every sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls. the sequence [1, 4, 2] cannot be taken from rolls, so we return 3. note that there are other sequences that cannot be taken from rolls. example 2: input: rolls = [1,1,2,2], k = 2 output: 2 explanation: every sequence of rolls of length 1, [1], [2], can be taken from rolls. the sequence [2, 1] cannot be taken from rolls, so we return 2. note that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest. example 3: input: rolls = [1,1,3,2,2,2,3,3], k = 4 output: 1 explanation: the sequence [4] cannot be taken from rolls, so we return 1. note that there are other sequences that cannot be taken from rolls but [4] is the shortest. constraints: n == rolls.length 1 <= n <= 105 1 <= rolls[i] <= k <= 105
two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where: answer[0] is a list of all distinct integers in nums1 which are not present in nums2. answer[1] is a list of all distinct integers in nums2 which are not present in nums1. note that the integers in the lists may be returned in any order. example 1: input: nums1 = [1,2,3], nums2 = [2,4,6] output: [[1,3],[4,6]] explanation: for nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. therefore, answer[0] = [1,3]. for nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. therefore, answer[1] = [4,6]. example 2: input: nums1 = [1,2,3,3], nums2 = [1,1,2,2] output: [[3],[]] explanation: for nums1, nums1[2] and nums1[3] are not present in nums2. since nums1[2] == nums1[3], their value is only included once and answer[0] = [3]. every integer in nums2 is present in nums1. therefore, answer[1] = []. constraints: 1 <= nums1.length, nums2.length <= 1000 -1000 <= nums1[i], nums2[i] <= 1000
sentence is a list of words that are separated by a single space with no leading or trailing spaces. each of the words consists of only uppercase and lowercase english letters (no punctuation). for example, "hello world", "hello", and "hello world hello world" are all sentences. you are given a sentence s and an integer k. you want to truncate s such that it contains only the first k words. return s after truncating it. example 1: input: s = "hello how are you contestant", k = 4 output: "hello how are you" explanation: the words in s are ["hello", "how" "are", "you", "contestant"]. the first 4 words are ["hello", "how", "are", "you"]. hence, you should return "hello how are you". example 2: input: s = "what is the solution to this problem", k = 4 output: "what is the solution" explanation: the words in s are ["what", "is" "the", "solution", "to", "this", "problem"]. the first 4 words are ["what", "is", "the", "solution"]. hence, you should return "what is the solution". example 3: input: s = "chopper is not a tanuki", k = 5 output: "chopper is not a tanuki" constraints: 1 <= s.length <= 500 k is in the range [1, the number of words in s]. s consist of only lowercase and uppercase english letters and spaces. the words in s are separated by a single space. there are no leading or trailing spaces.
are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied). you are then given stamps of size stampheight x stampwidth. we want to fit the stamps such that they follow the given restrictions and requirements: cover all the empty cells. do not cover any of the occupied cells. we can put as many stamps as we want. stamps can overlap with each other. stamps are not allowed to be rotated. stamps must stay completely inside the grid. return true if it is possible to fit the stamps while following the given restrictions and requirements. otherwise, return false. example 1: input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampheight = 4, stampwidth = 3 output: true explanation: we have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells. example 2: input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampheight = 2, stampwidth = 2 output: false explanation: there is no way to fit the stamps onto all the empty cells without the stamps going outside the grid. constraints: m == grid.length n == grid[r].length 1 <= m, n <= 105 1 <= m * n <= 2 * 105 grid[r][c] is either 0 or 1. 1 <= stampheight, stampwidth <= 105
the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. return the linked list sorted as well. example 1: input: head = [1,2,3,3,4,4,5] output: [1,2,5] example 2: input: head = [1,1,1,2,3] output: [2,3] constraints: the number of nodes in the list is in the range [0, 300]. -100 <= node.val <= 100 the list is guaranteed to be sorted in ascending order.
are available at some positions on an infinite x-axis. you are given a 2d integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique. you are also given an integer startpos and an integer k. initially, you are at the position startpos. from any position, you can either walk to the left or right. it takes one step to move one unit on the x-axis, and you can walk at most k steps in total. for every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position. return the maximum total number of fruits you can harvest. example 1: input: fruits = [[2,8],[6,3],[8,6]], startpos = 5, k = 4 output: 9 explanation: the optimal way is to: - move right to position 6 and harvest 3 fruits - move right to position 8 and harvest 6 fruits you moved 3 steps and harvested 3 + 6 = 9 fruits in total. example 2: input: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startpos = 5, k = 4 output: 14 explanation: you can move at most k = 4 steps, so you cannot reach position 0 nor 10. the optimal way is to: - harvest the 7 fruits at the starting position 5 - move left to position 4 and harvest 1 fruit - move right to position 6 and harvest 2 fruits - move right to position 7 and harvest 4 fruits you moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total. example 3: input: fruits = [[0,3],[6,4],[8,5]], startpos = 3, k = 2 output: 0 explanation: you can move at most k = 2 steps and cannot reach any position with fruits. constraints: 1 <= fruits.length <= 105 fruits[i].length == 2 0 <= startpos, positioni <= 2 * 105 positioni-1 < positioni for any i > 0 (0-indexed) 1 <= amounti <= 104 0 <= k <= 2 * 105
a 2d grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid. example 1: input: grid = [[1,1,1],[1,0,1],[1,1,1]] output: 9 example 2: input: grid = [[1,1,0,0]] output: 1 constraints: 1 <= grid.length <= 100 1 <= grid[0].length <= 100 grid[i][j] is 0 or 1
a text file file.txt, transpose its content. you may assume that each row has the same number of columns, and each field is separated by the ' ' character. example: if file.txt has the following content: name age alice 21 ryan 30 output the following: name alice ryan age 21 30
is an atm machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. initially the atm is empty. the user can use the machine to deposit or withdraw any amount of money. when withdrawing, the machine prioritizes using banknotes of larger values. for example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes. however, if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote. implement the atm class: atm() initializes the atm object. void deposit(int[] banknotescount) deposits new banknotes in the order $20, $50, $100, $200, and $500. int[] withdraw(int amount) returns an array of length 5 of the number of banknotes that will be handed to the user in the order $20, $50, $100, $200, and $500, and update the number of banknotes in the atm after withdrawing. returns [-1] if it is not possible (do not withdraw any banknotes in this case). example 1: input ["atm", "deposit", "withdraw", "deposit", "withdraw", "withdraw"] [[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]] output [null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]] explanation atm atm = new atm(); atm.deposit([0,0,1,2,1]); // deposits 1 $100 banknote, 2 $200 banknotes, // and 1 $500 banknote. atm.withdraw(600); // returns [0,0,1,0,1]. the machine uses 1 $100 banknote // and 1 $500 banknote. the banknotes left over in the // machine are [0,0,0,2,0]. atm.deposit([0,1,0,1,1]); // deposits 1 $50, $200, and $500 banknote. // the banknotes in the machine are now [0,1,0,3,1]. atm.withdraw(600); // returns [-1]. the machine will try to use a $500 banknote // and then be unable to complete the remaining $100, // so the withdraw request will be rejected. // since the request is rejected, the number of banknotes // in the machine is not modified. atm.withdraw(550); // returns [0,1,0,0,1]. the machine uses 1 $50 banknote // and 1 $500 banknote. constraints: banknotescount.length == 5 0 <= banknotescount[i] <= 109 1 <= amount <= 109 at most 5000 calls in total will be made to withdraw and deposit. at least one call will be made to each function withdraw and deposit.
given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. each character in stones is a type of stone you have. you want to know how many of the stones you have are also jewels. letters are case sensitive, so "a" is considered a different type of stone from "a". example 1: input: jewels = "aa", stones = "aaabbbb" output: 3 example 2: input: jewels = "z", stones = "zz" output: 0 constraints: 1 <= jewels.length, stones.length <= 50 jewels and stones consist of only english letters. all the characters of jewels are unique.
two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order. example 1: input: root1 = [2,1,4], root2 = [1,0,3] output: [0,1,1,2,3,4] example 2: input: root1 = [1,null,8], root2 = [8,1] output: [1,1,8,8] constraints: the number of nodes in each tree is in the range [0, 5000]. -105 <= node.val <= 105
are given a list of strings of the same length words and a string target. your task is to form target using the given words under the following rules: target should be formed from left to right. to form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k]. once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. in other words, all characters to the left of or at index k become unusuable for every string. repeat the process until you form the string target. notice that you can use multiple characters from the same string in words provided the conditions above are met. return the number of ways to form target from words. since the answer may be too large, return it modulo 109 + 7. example 1: input: words = ["acca","bbbb","caca"], target = "aba" output: 6 explanation: there are 6 ways to form target. "aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("caca") "aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("caca") "aba" -> index 0 ("acca"), index 1 ("bbbb"), index 3 ("acca") "aba" -> index 0 ("acca"), index 2 ("bbbb"), index 3 ("acca") "aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("acca") "aba" -> index 1 ("caca"), index 2 ("bbbb"), index 3 ("caca") example 2: input: words = ["abba","baab"], target = "bab" output: 4 explanation: there are 4 ways to form target. "bab" -> index 0 ("baab"), index 1 ("baab"), index 2 ("abba") "bab" -> index 0 ("baab"), index 1 ("baab"), index 3 ("baab") "bab" -> index 0 ("baab"), index 2 ("baab"), index 3 ("baab") "bab" -> index 1 ("abba"), index 2 ("baab"), index 3 ("baab") constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 1000 all strings in words have the same length. 1 <= target.length <= 1000 words[i] and target contain only lowercase english letters.
schema table: products +------------------+---------+ | column name | type | +------------------+---------+ | product_id | int | | product_name | varchar | | product_category | varchar | +------------------+---------+ product_id is the primary key for this table. this table contains data about the company's products. table: orders +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | order_date | date | | unit | int | +---------------+---------+ there is no primary key for this table. it may have duplicate rows. product_id is a foreign key to the products table. unit is the number of products ordered in order_date. write an sql query to get the names of products that have at least 100 units ordered in february 2020 and their amount. return result table in any order. the query result format is in the following example. example 1: input: products table: +-------------+-----------------------+------------------+ | product_id | product_name | product_category | +-------------+-----------------------+------------------+ | 1 | leetcode solutions | book | | 2 | jewels of stringology | book | | 3 | hp | laptop | | 4 | lenovo | laptop | | 5 | leetcode kit | t-shirt | +-------------+-----------------------+------------------+ orders table: +--------------+--------------+----------+ | product_id | order_date | unit | +--------------+--------------+----------+ | 1 | 2020-02-05 | 60 | | 1 | 2020-02-10 | 70 | | 2 | 2020-01-18 | 30 | | 2 | 2020-02-11 | 80 | | 3 | 2020-02-17 | 2 | | 3 | 2020-02-24 | 3 | | 4 | 2020-03-01 | 20 | | 4 | 2020-03-04 | 30 | | 4 | 2020-03-04 | 60 | | 5 | 2020-02-25 | 50 | | 5 | 2020-02-27 | 50 | | 5 | 2020-03-01 | 50 | +--------------+--------------+----------+ output: +--------------------+---------+ | product_name | unit | +--------------------+---------+ | leetcode solutions | 130 | | leetcode kit | 100 | +--------------------+---------+ explanation: products with product_id = 1 is ordered in february a total of (60 + 70) = 130. products with product_id = 2 is ordered in february a total of 80. products with product_id = 3 is ordered in february a total of (2 + 3) = 5. products with product_id = 4 was not ordered in february 2020. products with product_id = 5 is ordered in february a total of (50 + 50) = 100.
are given two linked lists: list1 and list2 of sizes n and m respectively. remove list1's nodes from the ath node to the bth node, and put list2 in their place. the blue edges and nodes in the following figure indicate the result: build the result list and return its head. example 1: input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002] output: [0,1,2,1000000,1000001,1000002,5] explanation: we remove the nodes 3 and 4 and put the entire list2 in their place. the blue edges and nodes in the above figure indicate the result. example 2: input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004] output: [0,1,1000000,1000001,1000002,1000003,1000004,6] explanation: the blue edges and nodes in the above figure indicate the result. constraints: 3 <= list1.length <= 104 1 <= a <= b < list1.length - 1 1 <= list2.length <= 104
a project, you have a list of required skills req_skills, and a list of people. the ith person people[i] contains a list of skills that the person has. consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. we can represent these teams by the index of each person. for example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3]. return any sufficient team of the smallest possible size, represented by the index of each person. you may return the answer in any order. it is guaranteed an answer exists. example 1: input: req_skills = ["java","nodejs","reactjs"], people = [["java"],["nodejs"],["nodejs","reactjs"]] output: [0,2] example 2: input: req_skills = ["algorithms","math","java","reactjs","csharp","aws"], people = [["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]] output: [1,2] constraints: 1 <= req_skills.length <= 16 1 <= req_skills[i].length <= 16 req_skills[i] consists of lowercase english letters. all the strings of req_skills are unique. 1 <= people.length <= 60 0 <= people[i].length <= 16 1 <= people[i][j].length <= 16 people[i][j] consists of lowercase english letters. all the strings of people[i] are unique. every skill in people[i] is a skill in req_skills. it is guaranteed a sufficient team exists.
have an inventory of different colored balls, and there is a customer that wants orders balls of any color. the customer weirdly values the colored balls. each colored ball's value is the number of balls of that color you currently have in your inventory. for example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. after the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer). you are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. you are also given an integer orders, which represents the total number of balls that the customer wants. you can sell the balls in any order. return the maximum total value that you can attain after selling orders colored balls. as the answer may be too large, return it modulo 109 + 7. example 1: input: inventory = [2,5], orders = 4 output: 14 explanation: sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3). the maximum total value is 2 + 5 + 4 + 3 = 14. example 2: input: inventory = [3,5], orders = 6 output: 19 explanation: sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2). the maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19. constraints: 1 <= inventory.length <= 105 1 <= inventory[i] <= 109 1 <= orders <= min(sum(inventory[i]), 109)
are given an m x n grid. each cell of grid represents a street. the street of grid[i][j] can be: 1 which means a street connecting the left cell and the right cell. 2 which means a street connecting the upper cell and the lower cell. 3 which means a street connecting the left cell and the lower cell. 4 which means a street connecting the right cell and the lower cell. 5 which means a street connecting the left cell and the upper cell. 6 which means a street connecting the right cell and the upper cell. you will initially start at the street of the upper-left cell (0, 0). a valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). the path should only follow the streets. notice that you are not allowed to change any street. return true if there is a valid path in the grid or false otherwise. example 1: input: grid = [[2,4,3],[6,5,2]] output: true explanation: as shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1). example 2: input: grid = [[1,2,1],[1,2,1]] output: false explanation: as shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0) example 3: input: grid = [[1,1,2]] output: false explanation: you will get stuck at cell (0, 1) and you cannot reach cell (0, 2). constraints: m == grid.length n == grid[i].length 1 <= m, n <= 300 1 <= grid[i][j] <= 6
a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length. return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2. the tests are generated such that there is exactly one solution. you may not use the same element twice. your solution must use only constant extra space. example 1: input: numbers = [2,7,11,15], target = 9 output: [1,2] explanation: the sum of 2 and 7 is 9. therefore, index1 = 1, index2 = 2. we return [1, 2]. example 2: input: numbers = [2,3,4], target = 6 output: [1,3] explanation: the sum of 2 and 4 is 6. therefore index1 = 1, index2 = 3. we return [1, 3]. example 3: input: numbers = [-1,0], target = -1 output: [1,2] explanation: the sum of -1 and 0 is -1. therefore index1 = 1, index2 = 2. we return [1, 2]. constraints: 2 <= numbers.length <= 3 * 104 -1000 <= numbers[i] <= 1000 numbers is sorted in non-decreasing order. -1000 <= target <= 1000 the tests are generated such that there is exactly one solution.
are given two 0-indexed integer arrays nums1 and nums2, both of length n. you can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right]. for example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15]. you may choose to apply the mentioned operation once or not do anything. the score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr. return the maximum possible score. a subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive). example 1: input: nums1 = [60,60,60], nums2 = [10,90,10] output: 210 explanation: choosing left = 1 and right = 1, we have nums1 = [60,90,60] and nums2 = [10,60,10]. the score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210. example 2: input: nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20] output: 220 explanation: choosing left = 3, right = 4, we have nums1 = [20,40,20,40,20] and nums2 = [50,20,50,70,30]. the score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220. example 3: input: nums1 = [7,11,13], nums2 = [1,1,1] output: 31 explanation: we choose not to swap any subarray. the score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31. constraints: n == nums1.length == nums2.length 1 <= n <= 105 1 <= nums1[i], nums2[i] <= 104
a system that manages the reservation state of n seats that are numbered from 1 to n. implement the seatmanager class: seatmanager(int n) initializes a seatmanager object that will manage n seats numbered from 1 to n. all seats are initially available. int reserve() fetches the smallest-numbered unreserved seat, reserves it, and returns its number. void unreserve(int seatnumber) unreserves the seat with the given seatnumber. example 1: input ["seatmanager", "reserve", "reserve", "unreserve", "reserve", "reserve", "reserve", "reserve", "unreserve"] [[5], [], [], [2], [], [], [], [], [5]] output [null, 1, 2, null, 2, 3, 4, 5, null] explanation seatmanager seatmanager = new seatmanager(5); // initializes a seatmanager with 5 seats. seatmanager.reserve(); // all seats are available, so return the lowest numbered seat, which is 1. seatmanager.reserve(); // the available seats are [2,3,4,5], so return the lowest of them, which is 2. seatmanager.unreserve(2); // unreserve seat 2, so now the available seats are [2,3,4,5]. seatmanager.reserve(); // the available seats are [2,3,4,5], so return the lowest of them, which is 2. seatmanager.reserve(); // the available seats are [3,4,5], so return the lowest of them, which is 3. seatmanager.reserve(); // the available seats are [4,5], so return the lowest of them, which is 4. seatmanager.reserve(); // the only available seat is seat 5, so return 5. seatmanager.unreserve(5); // unreserve seat 5, so now the available seats are [5]. constraints: 1 <= n <= 105 1 <= seatnumber <= n for each call to reserve, it is guaranteed that there will be at least one unreserved seat. for each call to unreserve, it is guaranteed that seatnumber will be reserved. at most 105 calls in total will be made to reserve and unreserve.
a function that checks if a given value is an instance of a given class or superclass. for this problem, an object is considered an instance of a given class if that object has access to that class's methods. there are no constraints on the data types that can be passed to the function. for example, the value or the class could be undefined. example 1: input: func = () => checkifinstanceof(new date(), date) output: true explanation: the object returned by the date constructor is, by definition, an instance of date. example 2: input: func = () => { class animal {}; class dog extends animal {}; return checkifinstanceof(new dog(), animal); } output: true explanation: class animal {}; class dog extends animal {}; checkifinstance(new dog(), animal); // true dog is a subclass of animal. therefore, a dog object is an instance of both dog and animal. example 3: input: func = () => checkifinstanceof(date, date) output: false explanation: a date constructor cannot logically be an instance of itself. example 4: input: func = () => checkifinstanceof(5, number) output: true explanation: 5 is a number. note that the "instanceof" keyword would return false. however, it is still considered an instance of number because it accesses the number methods. for example "tofixed()".
have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n). in one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). the goal is to make all the elements of the array equal. it is guaranteed that all the elements of the array can be made equal using some operations. given an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal. example 1: input: n = 3 output: 2 explanation: arr = [1, 3, 5] first operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4] in the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3]. example 2: input: n = 6 output: 9 constraints: 1 <= n <= 104
are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. you are also given an integer k. for every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j]. return the kth smallest fraction considered. return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j]. example 1: input: arr = [1,2,3,5], k = 3 output: [2,5] explanation: the fractions to be considered in sorted order are: 1/5, 1/3, 2/5, 1/2, 3/5, and 2/3. the third fraction is 2/5. example 2: input: arr = [1,7], k = 1 output: [1,7] constraints: 2 <= arr.length <= 1000 1 <= arr[i] <= 3 * 104 arr[0] == 1 arr[i] is a prime number for i > 0. all the numbers of arr are unique and sorted in strictly increasing order. 1 <= k <= arr.length * (arr.length - 1) / 2 follow up: can you solve the problem with better than o(n2) complexity?
are given an m x n binary matrix grid. a move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's). every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers. return the highest possible score after making any number of moves (including zero moves). example 1: input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]] output: 39 explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39 example 2: input: grid = [[0]] output: 1 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 grid[i][j] is either 0 or 1.
are given a binary string binary consisting of only 0's or 1's. you can apply each of the following operations any number of times: operation 1: if the number contains the substring "00", you can replace it with "10". for example, "00010" -> "10010" operation 2: if the number contains the substring "10", you can replace it with "01". for example, "00010" -> "00001" return the maximum binary string you can obtain after any number of operations. binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation. example 1: input: binary = "000110" output: "111011" explanation: a valid transformation sequence can be: "000110" -> "000101" "000101" -> "100101" "100101" -> "110101" "110101" -> "110011" "110011" -> "111011" example 2: input: binary = "01" output: "01" explanation: "01" cannot be transformed any further. constraints: 1 <= binary.length <= 105 binary consist of '0' and '1'.
a string s, return the number of palindromic substrings in it. a string is a palindrome when it reads the same backward as forward. a substring is a contiguous sequence of characters within the string. example 1: input: s = "abc" output: 3 explanation: three palindromic strings: "a", "b", "c". example 2: input: s = "aaa" output: 6 explanation: six palindromic strings: "a", "a", "a", "aa", "aa", "aaa". constraints: 1 <= s.length <= 1000 s consists of lowercase english letters.
are given an array asteroids of integers representing asteroids in a row. for each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). each asteroid moves at the same speed. find out the state of the asteroids after all collisions. if two asteroids meet, the smaller one will explode. if both are the same size, both will explode. two asteroids moving in the same direction will never meet. example 1: input: asteroids = [5,10,-5] output: [5,10] explanation: the 10 and -5 collide resulting in 10. the 5 and 10 never collide. example 2: input: asteroids = [8,-8] output: [] explanation: the 8 and -8 collide exploding each other. example 3: input: asteroids = [10,2,-5] output: [10] explanation: the 2 and -5 collide resulting in -5. the 10 and -5 collide resulting in 10. constraints: 2 <= asteroids.length <= 104 -1000 <= asteroids[i] <= 1000 asteroids[i] != 0
a string s, remove duplicate letters so that every letter appears once and only once. you must make sure your result is the smallest in lexicographical order among all possible results. example 1: input: s = "bcabc" output: "abc" example 2: input: s = "cbacdcbc" output: "acdb" constraints: 1 <= s.length <= 104 s consists of lowercase english letters. note: this question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/
are given a string s of length n containing only four kinds of characters: 'q', 'w', 'e', and 'r'. a string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string. return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. if s is already balanced, return 0. example 1: input: s = "qwer" output: 0 explanation: s is already balanced. example 2: input: s = "qqwe" output: 1 explanation: we need to replace a 'q' to 'r', so that "rqwe" (or "qrwe") is balanced. example 3: input: s = "qqqw" output: 2 explanation: we can replace the first "qq" to "er". constraints: n == s.length 4 <= n <= 105 n is a multiple of 4. s contains only 'q', 'w', 'e', and 'r'.
an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order. example 1: input: nums = [-4,-1,0,3,10] output: [0,1,9,16,100] explanation: after squaring, the array becomes [16,1,0,9,100]. after sorting, it becomes [0,1,9,16,100]. example 2: input: nums = [-7,-3,2,3,11] output: [4,9,9,49,121] constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 nums is sorted in non-decreasing order. follow up: squaring each element and sorting the new array is very trivial, could you find an o(n) solution using a different approach?
are given a positive integer num. you may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits). return the largest possible value of num after any number of swaps. example 1: input: num = 1234 output: 3412 explanation: swap the digit 3 with the digit 1, this results in the number 3214. swap the digit 2 with the digit 4, this results in the number 3412. note that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number. also note that we may not swap the digit 4 with the digit 1 since they are of different parities. example 2: input: num = 65875 output: 87655 explanation: swap the digit 8 with the digit 6, this results in the number 85675. swap the first digit 5 with the digit 7, this results in the number 87655. note that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number. constraints: 1 <= num <= 109
an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. return the sum of the three integers. you may assume that each input would have exactly one solution. example 1: input: nums = [-1,2,1,-4], target = 1 output: 2 explanation: the sum that is closest to the target is 2. (-1 + 2 + 1 = 2). example 2: input: nums = [0,0,0], target = 1 output: 0 explanation: the sum that is closest to the target is 0. (0 + 0 + 0 = 0). constraints: 3 <= nums.length <= 500 -1000 <= nums[i] <= 1000 -104 <= target <= 104
a positive integer millis, write an asyncronous function that sleeps for millis milliseconds. it can resolve any value. example 1: input: millis = 100 output: 100 explanation: it should return a promise that resolves after 100ms. let t = date.now(); sleep(100).then(() => { console.log(date.now() - t); // 100 }); example 2: input: millis = 200 output: 200 explanation: it should return a promise that resolves after 200ms. constraints: 1 <= millis <= 1000
are given an integer n denoting the number of cities in a country. the cities are numbered from 0 to n - 1. you are also given a 2d integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi. you need to assign each city with an integer value from 1 to n, where each value can only be used once. the importance of a road is then defined as the sum of the values of the two cities it connects. return the maximum total importance of all roads possible after assigning the values optimally. example 1: input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]] output: 43 explanation: the figure above shows the country and the assigned values of [2,4,5,3,1]. - the road (0,1) has an importance of 2 + 4 = 6. - the road (1,2) has an importance of 4 + 5 = 9. - the road (2,3) has an importance of 5 + 3 = 8. - the road (0,2) has an importance of 2 + 5 = 7. - the road (1,3) has an importance of 4 + 3 = 7. - the road (2,4) has an importance of 5 + 1 = 6. the total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43. it can be shown that we cannot obtain a greater total importance than 43. example 2: input: n = 5, roads = [[0,3],[2,4],[1,3]] output: 20 explanation: the figure above shows the country and the assigned values of [4,3,2,5,1]. - the road (0,3) has an importance of 4 + 5 = 9. - the road (2,4) has an importance of 2 + 1 = 3. - the road (1,3) has an importance of 3 + 5 = 8. the total importance of all roads is 9 + 3 + 8 = 20. it can be shown that we cannot obtain a greater total importance than 20. constraints: 2 <= n <= 5 * 104 1 <= roads.length <= 5 * 104 roads[i].length == 2 0 <= ai, bi <= n - 1 ai != bi there are no duplicate roads.
are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. each space should be inserted before the character at the given index. for example, given s = "enjoyyourcoffee" and spaces = [5, 9], we place spaces before 'y' and 'c', which are at indices 5 and 9 respectively. thus, we obtain "enjoy your coffee". return the modified string after the spaces have been added. example 1: input: s = "leetcodehelpsmelearn", spaces = [8,13,15] output: "leetcode helps me learn" explanation: the indices 8, 13, and 15 correspond to the underlined characters in "leetcodehelpsmelearn". we then place spaces before those characters. example 2: input: s = "icodeinpython", spaces = [1,5,7,9] output: "i code in py thon" explanation: the indices 1, 5, 7, and 9 correspond to the underlined characters in "icodeinpython". we then place spaces before those characters. example 3: input: s = "spacing", spaces = [0,1,2,3,4,5,6] output: " s p a c i n g" explanation: we are also able to place spaces before the first character of the string. constraints: 1 <= s.length <= 3 * 105 s consists only of lowercase and uppercase english letters. 1 <= spaces.length <= 3 * 105 0 <= spaces[i] <= s.length - 1 all the values of spaces are strictly increasing.
are given an integer array nums. in one move, you can choose one element of nums and change it to any value. return the minimum difference between the largest and smallest value of nums after performing at most three moves. example 1: input: nums = [5,3,2,4] output: 0 explanation: we can make at most 3 moves. in the first move, change 2 to 3. nums becomes [5,3,3,4]. in the second move, change 4 to 3. nums becomes [5,3,3,3]. in the third move, change 5 to 3. nums becomes [3,3,3,3]. after performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0. example 2: input: nums = [1,5,0,10,14] output: 1 explanation: we can make at most 3 moves. in the first move, change 5 to 0. nums becomes [1,0,0,10,14]. in the second move, change 10 to 0. nums becomes [1,0,0,0,14]. in the third move, change 14 to 1. nums becomes [1,0,0,0,1]. after performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 1. it can be shown that there is no way to make the difference 0 in 3 moves. example 3: input: nums = [3,100,20] output: 0 explanation: we can make at most 3 moves. in the first move, change 100 to 7. nums becomes [4,7,20]. in the second move, change 20 to 7. nums becomes [4,7,7]. in the third move, change 4 to 3. nums becomes [7,7,7]. after performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0. constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109
are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). you are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at. in one step, you can move one cell up, down, left, or right. you cannot step into a cell with a wall, and you cannot step outside the maze. your goal is to find the nearest exit from the entrance. an exit is defined as an empty cell that is at the border of the maze. the entrance does not count as an exit. return the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists. example 1: input: maze = [["+","+",".","+"],[".",".",".","+"],["+","+","+","."]], entrance = [1,2] output: 1 explanation: there are 3 exits in this maze at [1,0], [0,2], and [2,3]. initially, you are at the entrance cell [1,2]. - you can reach [1,0] by moving 2 steps left. - you can reach [0,2] by moving 1 step up. it is impossible to reach [2,3] from the entrance. thus, the nearest exit is [0,2], which is 1 step away. example 2: input: maze = [["+","+","+"],[".",".","."],["+","+","+"]], entrance = [1,0] output: 2 explanation: there is 1 exit in this maze at [1,2]. [1,0] does not count as an exit since it is the entrance cell. initially, you are at the entrance cell [1,0]. - you can reach [1,2] by moving 2 steps right. thus, the nearest exit is [1,2], which is 2 steps away. example 3: input: maze = [[".","+"]], entrance = [0,0] output: -1 explanation: there are no exits in this maze. constraints: maze.length == m maze[i].length == n 1 <= m, n <= 100 maze[i][j] is either '.' or '+'. entrance.length == 2 0 <= entrancerow < m 0 <= entrancecol < n entrance will always be an empty cell.
are given a string s consisting only of letters 'a' and 'b'. in a single step you can remove one palindromic subsequence from s. return the minimum number of steps to make the given string empty. a string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. note that a subsequence does not necessarily need to be contiguous. a string is called palindrome if is one that reads the same backward as well as forward. example 1: input: s = "ababa" output: 1 explanation: s is already a palindrome, so its entirety can be removed in a single step. example 2: input: s = "abb" output: 2 explanation: "abb" -> "bb" -> "". remove palindromic subsequence "a" then "bb". example 3: input: s = "baabb" output: 2 explanation: "baabb" -> "b" -> "". remove palindromic subsequence "baab" then "b". constraints: 1 <= s.length <= 1000 s[i] is either 'a' or 'b'.
are given two integer arrays of the same length nums1 and nums2. in one operation, you are allowed to swap nums1[i] with nums2[i]. for example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8]. return the minimum number of needed operations to make nums1 and nums2 strictly increasing. the test cases are generated so that the given input always makes it possible. an array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]. example 1: input: nums1 = [1,3,5,4], nums2 = [1,2,3,7] output: 1 explanation: swap nums1[3] and nums2[3]. then the sequences are: nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4] which are both strictly increasing. example 2: input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9] output: 1 constraints: 2 <= nums1.length <= 105 nums2.length == nums1.length 0 <= nums1[i], nums2[i] <= 2 * 105
two integers num1 and num2, return the sum of the two integers. example 1: input: num1 = 12, num2 = 5 output: 17 explanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned. example 2: input: num1 = -10, num2 = 4 output: -6 explanation: num1 + num2 = -6, so -6 is returned. constraints: -100 <= num1, num2 <= 100
an array of strings words and an integer k, return the k most frequent strings. return the answer sorted by the frequency from highest to lowest. sort the words with the same frequency by their lexicographical order. example 1: input: words = ["i","love","leetcode","i","love","coding"], k = 2 output: ["i","love"] explanation: "i" and "love" are the two most frequent words. note that "i" comes before "love" due to a lower alphabetical order. example 2: input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4 output: ["the","is","sunny","day"] explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively. constraints: 1 <= words.length <= 500 1 <= words[i].length <= 10 words[i] consists of lowercase english letters. k is in the range [1, the number of unique words[i]] follow-up: could you solve it in o(n log(k)) time and o(n) extra space?
an m x n matrix, return all elements of the matrix in spiral order. example 1: input: matrix = [[1,2,3],[4,5,6],[7,8,9]] output: [1,2,3,6,9,8,7,4,5] example 2: input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] output: [1,2,3,4,8,12,11,10,9,5,6,7] constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 10 -100 <= matrix[i][j] <= 100
string is a valid parentheses string (denoted vps) if it meets one of the following: it is an empty string "", or a single character not equal to "(" or ")", it can be written as ab (a concatenated with b), where a and b are vps's, or it can be written as (a), where a is a vps. we can similarly define the nesting depth depth(s) of any vps s as follows: depth("") = 0 depth(c) = 0, where c is a string with a single character not equal to "(" or ")". depth(a + b) = max(depth(a), depth(b)), where a and b are vps's. depth("(" + a + ")") = 1 + depth(a), where a is a vps. for example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's. given a vps represented as string s, return the nesting depth of s. example 1: input: s = "(1+(2*3)+((8)/4))+1" output: 3 explanation: digit 8 is inside of 3 nested parentheses in the string. example 2: input: s = "(1)+((2))+(((3)))" output: 3 constraints: 1 <= s.length <= 100 s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'. it is guaranteed that parentheses expression s is a vps.
are given the array paths, where paths[i] = [cityai, citybi] means there exists a direct path going from cityai to citybi. return the destination city, that is, the city without any path outgoing to another city. it is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city. example 1: input: paths = [["london","new york"],["new york","lima"],["lima","sao paulo"]] output: "sao paulo" explanation: starting at "london" city you will reach "sao paulo" city which is the destination city. your trip consist of: "london" -> "new york" -> "lima" -> "sao paulo". example 2: input: paths = [["b","c"],["d","b"],["c","a"]] output: "a" explanation: all possible trips are: "d" -> "b" -> "c" -> "a". "b" -> "c" -> "a". "c" -> "a". "a". clearly the destination city is "a". example 3: input: paths = [["a","z"]] output: "z" constraints: 1 <= paths.length <= 100 paths[i].length == 2 1 <= cityai.length, citybi.length <= 10 cityai != citybi all strings consist of lowercase and uppercase english letters and the space character.
a string s, return the longest palindromic substring in s. example 1: input: s = "babad" output: "bab" explanation: "aba" is also a valid answer. example 2: input: s = "cbbd" output: "bb" constraints: 1 <= s.length <= 1000 s consist of only digits and english letters.
a list of 24-hour clock time points in "hh:mm" format, return the minimum minutes difference between any two time-points in the list. example 1: input: timepoints = ["23:59","00:00"] output: 1 example 2: input: timepoints = ["00:00","23:59","00:00"] output: 0 constraints: 2 <= timepoints.length <= 2 * 104 timepoints[i] is in the format "hh:mm".
two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree. if there exist multiple answers, you can return any of them. example 1: input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1] output: [1,2,3,4,5,6,7] example 2: input: preorder = [1], postorder = [1] output: [1] constraints: 1 <= preorder.length <= 30 1 <= preorder[i] <= preorder.length all the values of preorder are unique. postorder.length == preorder.length 1 <= postorder[i] <= postorder.length all the values of postorder are unique. it is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.
have two fruit baskets containing n fruits each. you are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. you want to make both baskets equal. to do so, you can use the following operation as many times as you want: chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2. the cost of the swap is min(basket1[i],basket2[j]). two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets. return the minimum cost to make both the baskets equal or -1 if impossible. example 1: input: basket1 = [4,2,2,2], basket2 = [1,4,1,2] output: 1 explanation: swap index 1 of basket1 with index 0 of basket2, which has cost 1. now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. rearranging both the arrays makes them equal. example 2: input: basket1 = [2,3,4,1], basket2 = [3,2,5,1] output: -1 explanation: it can be shown that it is impossible to make both the baskets equal. constraints: basket1.length == bakste2.length 1 <= basket1.length <= 105 1 <= basket1[i],basket2[i] <= 109
morse code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: 'a' maps to ".-", 'b' maps to "-...", 'c' maps to "-.-.", and so on. for convenience, the full table for the 26 letters of the english alphabet is given below: [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."] given an array of strings words where each word can be written as a concatenation of the morse code of each letter. for example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". we will call such a concatenation the transformation of a word. return the number of different transformations among all words we have. example 1: input: words = ["gin","zen","gig","msg"] output: 2 explanation: the transformation of each word is: "gin" -> "--...-." "zen" -> "--...-." "gig" -> "--...--." "msg" -> "--...--." there are 2 different transformations: "--...-." and "--...--.". example 2: input: words = ["a"] output: 1 constraints: 1 <= words.length <= 100 1 <= words[i].length <= 12 words[i] consists of lowercase english letters.
and bob are traveling to rome for separate business meetings. you are given 4 strings arrivealice, leavealice, arrivebob, and leavebob. alice will be in the city from the dates arrivealice to leavealice (inclusive), while bob will be in the city from the dates arrivebob to leavebob (inclusive). each will be a 5-character string in the format "mm-dd", corresponding to the month and day of the date. return the total number of days that alice and bob are in rome together. you can assume that all dates occur in the same calendar year, which is not a leap year. note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]. example 1: input: arrivealice = "08-15", leavealice = "08-18", arrivebob = "08-16", leavebob = "08-19" output: 3 explanation: alice will be in rome from august 15 to august 18. bob will be in rome from august 16 to august 19. they are both in rome together on august 16th, 17th, and 18th, so the answer is 3. example 2: input: arrivealice = "10-01", leavealice = "10-31", arrivebob = "11-01", leavebob = "12-31" output: 0 explanation: there is no day when alice and bob are in rome together, so we return 0. constraints: all dates are provided in the format "mm-dd". alice and bob's arrival dates are earlier than or equal to their leaving dates. the given dates are valid dates of a non-leap year.
a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. you may return the pairs in any order. while the exact formula is hidden, the function is monotonically increasing, i.e.: f(x, y) < f(x + 1, y) f(x, y) < f(x, y + 1) the function interface is defined like this: interface customfunction { public: // returns some positive integer f(x, y) for two positive integers x and y based on a formula. int f(int x, int y); }; we will judge your solution as follows: the judge has a list of 9 hidden implementations of customfunction, along with a way to generate an answer key of all valid pairs for a specific z. the judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z. the judge will call your findsolution and compare your results with the answer key. if your results match the answer key, your solution will be accepted. example 1: input: function_id = 1, z = 5 output: [[1,4],[2,3],[3,2],[4,1]] explanation: the hidden formula for function_id = 1 is f(x, y) = x + y. the following positive integer values of x and y make f(x, y) equal to 5: x=1, y=4 -> f(1, 4) = 1 + 4 = 5. x=2, y=3 -> f(2, 3) = 2 + 3 = 5. x=3, y=2 -> f(3, 2) = 3 + 2 = 5. x=4, y=1 -> f(4, 1) = 4 + 1 = 5. example 2: input: function_id = 2, z = 5 output: [[1,5],[5,1]] explanation: the hidden formula for function_id = 2 is f(x, y) = x * y. the following positive integer values of x and y make f(x, y) equal to 5: x=1, y=5 -> f(1, 5) = 1 * 5 = 5. x=5, y=1 -> f(5, 1) = 5 * 1 = 5. constraints: 1 <= function_id <= 9 1 <= z <= 100 it is guaranteed that the solutions of f(x, y) == z will be in the range 1 <= x, y <= 1000. it is also guaranteed that f(x, y) will fit in 32 bit signed integer if 1 <= x, y <= 1000.
are given an integer num. you can swap two digits at most once to get the maximum valued number. return the maximum valued number you can get. example 1: input: num = 2736 output: 7236 explanation: swap the number 2 and the number 7. example 2: input: num = 9973 output: 9973 explanation: no swap. constraints: 0 <= num <= 108
a binary tree root, return the maximum sum of all keys of any sub-tree which is also a binary search tree (bst). assume a bst is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees. example 1: input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6] output: 20 explanation: maximum sum in a valid binary search tree is obtained in root node with key equal to 3. example 2: input: root = [4,3,null,1,2] output: 2 explanation: maximum sum in a valid binary search tree is obtained in a single root node with key equal to 2. example 3: input: root = [-4,-2,-5] output: 0 explanation: all values are negatives. return an empty bst. constraints: the number of nodes in the tree is in the range [1, 4 * 104]. -4 * 104 <= node.val <= 4 * 104
are the manager of a basketball team. for the upcoming tournament, you want to choose the team with the highest overall score. the score of the team is the sum of scores of all the players in the team. however, the basketball team is not allowed to have conflicts. a conflict exists if a younger player has a strictly higher score than an older player. a conflict does not occur between players of the same age. given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams. example 1: input: scores = [1,3,5,10,15], ages = [1,2,3,4,5] output: 34 explanation: you can choose all the players. example 2: input: scores = [4,5,6,5], ages = [2,1,2,1] output: 16 explanation: it is best to choose the last 3 players. notice that you are allowed to choose multiple people of the same age. example 3: input: scores = [1,2,3,5], ages = [8,9,10,1] output: 6 explanation: it is best to choose the first 3 players. constraints: 1 <= scores.length, ages.length <= 1000 scores.length == ages.length 1 <= scores[i] <= 106 1 <= ages[i] <= 1000
a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid. a code snippet is valid if all the following rules hold: the code must be wrapped in a valid closed tag. otherwise, the code is invalid. a closed tag (not necessarily valid) has exactly the following format : <tag_name>tag_content</tag_name>. among them, <tag_name> is the start tag, and </tag_name> is the end tag. the tag_name in start and end tags should be the same. a closed tag is valid if and only if the tag_name and tag_content are valid. a valid tag_name only contain upper-case letters, and has length in range [1,9]. otherwise, the tag_name is invalid. a valid tag_content may contain other valid closed tags, cdata and any characters (see note1) except unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid tag_name. otherwise, the tag_content is invalid. a start tag is unmatched if no end tag exists with the same tag_name, and vice versa. however, you also need to consider the issue of unbalanced when tags are nested. a < is unmatched if you cannot find a subsequent >. and when you find a < or </, all the subsequent characters until the next > should be parsed as tag_name (not necessarily valid). the cdata has the following format : <![cdata[cdata_content]]>. the range of cdata_content is defined as the characters between <![cdata[ and the first subsequent ]]>. cdata_content may contain any characters. the function of cdata is to forbid the validator to parse cdata_content, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. example 1: input: code = "<div>this is the first line <![cdata[<div>]]></div>" output: true explanation: the code is wrapped in a closed tag : <div> and </div>. the tag_name is valid, the tag_content consists of some characters and cdata. although cdata_content has an unmatched start tag with invalid tag_name, it should be considered as plain text, not parsed as a tag. so tag_content is valid, and then the code is valid. thus return true. example 2: input: code = "<div>>> ![cdata[]] <![cdata[<div>]>]]>]]>>]</div>" output: true explanation: we first separate the code into : start_tag|tag_content|end_tag. start_tag -> "<div>" end_tag -> "</div>" tag_content could also be separated into : text1|cdata|text2. text1 -> ">> ![cdata[]] " cdata -> "<![cdata[<div>]>]]>", where the cdata_content is "<div>]>" text2 -> "]]>>]" the reason why start_tag is not "<div>>>" is because of the rule 6. the reason why cdata is not "<![cdata[<div>]>]]>]]>" is because of the rule 7. example 3: input: code = "<a> <b> </a> </b>" output: false explanation: unbalanced. if "<a>" is closed, then "<b>" must be unmatched, and vice versa. constraints: 1 <= code.length <= 500 code consists of english letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.
three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound. an integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0. you may return the answer in any order. in your answer, each value should occur at most once. example 1: input: x = 2, y = 3, bound = 10 output: [2,3,4,5,7,9,10] explanation: 2 = 20 + 30 3 = 21 + 30 4 = 20 + 31 5 = 21 + 31 7 = 22 + 31 9 = 23 + 30 10 = 20 + 32 example 2: input: x = 3, y = 5, bound = 15 output: [2,4,6,8,10,14] constraints: 1 <= x, y <= 100 0 <= bound <= 106
are given an integer array nums and two integers mink and maxk. a fixed-bound subarray of nums is a subarray that satisfies the following conditions: the minimum value in the subarray is equal to mink. the maximum value in the subarray is equal to maxk. return the number of fixed-bound subarrays. a subarray is a contiguous part of an array. example 1: input: nums = [1,3,5,2,7,5], mink = 1, maxk = 5 output: 2 explanation: the fixed-bound subarrays are [1,3,5] and [1,3,5,2]. example 2: input: nums = [1,1,1,1], mink = 1, maxk = 1 output: 10 explanation: every subarray of nums is a fixed-bound subarray. there are 10 possible subarrays. constraints: 2 <= nums.length <= 105 1 <= nums[i], mink, maxk <= 106
a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements. your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums. example 1: input: nums = [1,2,2,3,1] output: 2 explanation: the input array has a degree of 2 because both elements 1 and 2 appear twice. of the subarrays that have the same degree: [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2] the shortest length is 2. so return 2. example 2: input: nums = [1,2,2,3,1,4,2] output: 6 explanation: the degree is 3 because the element 2 is repeated 3 times. so [2,2,3,1,4,2] is the shortest subarray, therefore returning 6. constraints: nums.length will be between 1 and 50,000. nums[i] will be an integer between 0 and 49,999.
an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right]. the test cases are generated so that the answer will fit in a 32-bit integer. example 1: input: nums = [2,1,4,3], left = 2, right = 3 output: 3 explanation: there are three subarrays that meet the requirements: [2], [2, 1], [3]. example 2: input: nums = [2,9,2,5,6], left = 2, right = 8 output: 7 constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109 0 <= left <= right <= 109
a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's. example 1: input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2 output: 6 explanation: [1,1,1,0,0,1,1,1,1,1,1] bolded numbers were flipped from 0 to 1. the longest subarray is underlined. example 2: input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3 output: 10 explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] bolded numbers were flipped from 0 to 1. the longest subarray is underlined. constraints: 1 <= nums.length <= 105 nums[i] is either 0 or 1. 0 <= k <= nums.length
schema table: employees +-------------+---------+ | column name | type | +-------------+---------+ | employee_id | int | | name | varchar | | salary | int | +-------------+---------+ employee_id is the primary key for this table. each row of this table indicates the employee id, employee name, and salary. write an sql query to calculate the bonus of each employee. the bonus of an employee is 100% of their salary if the id of the employee is an odd number and the employee name does not start with the character 'm'. the bonus of an employee is 0 otherwise. return the result table ordered by employee_id. the query result format is in the following example. example 1: input: employees table: +-------------+---------+--------+ | employee_id | name | salary | +-------------+---------+--------+ | 2 | meir | 3000 | | 3 | michael | 3800 | | 7 | addilyn | 7400 | | 8 | juan | 6100 | | 9 | kannon | 7700 | +-------------+---------+--------+ output: +-------------+-------+ | employee_id | bonus | +-------------+-------+ | 2 | 0 | | 3 | 0 | | 7 | 7400 | | 8 | 0 | | 9 | 7700 | +-------------+-------+ explanation: the employees with ids 2 and 8 get 0 bonus because they have an even employee_id. the employee with id 3 gets 0 bonus because their name starts with 'm'. the rest of the employees get a 100% bonus.
is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. you are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi. a good path is a simple path that satisfies the following conditions: the starting node and the ending node have the same value. all nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path). return the number of distinct good paths. note that a path and its reverse are counted as the same path. for example, 0 -> 1 is considered to be the same as 1 -> 0. a single node is also considered as a valid path. example 1: input: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]] output: 6 explanation: there are 5 good paths consisting of a single node. there is 1 additional good path: 1 -> 0 -> 2 -> 4. (the reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.) note that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0]. example 2: input: vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]] output: 7 explanation: there are 5 good paths consisting of a single node. there are 2 additional good paths: 0 -> 1 and 2 -> 3. example 3: input: vals = [1], edges = [] output: 1 explanation: the tree consists of only one node, so there is one good path. constraints: n == vals.length 1 <= n <= 3 * 104 0 <= vals[i] <= 105 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.
an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j]. given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. since the answer can be huge, return it modulo 109 + 7. example 1: input: n = 3, k = 0 output: 1 explanation: only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs. example 2: input: n = 3, k = 1 output: 2 explanation: the array [1,3,2] and [2,1,3] have exactly 1 inverse pair. constraints: 1 <= n <= 1000 0 <= k <= 1000
schema table: courses +-------------+---------+ | column name | type | +-------------+---------+ | student | varchar | | class | varchar | +-------------+---------+ (student, class) is the primary key column for this table. each row of this table indicates the name of a student and the class in which they are enrolled. write an sql query to report all the classes that have at least five students. return the result table in any order. the query result format is in the following example. example 1: input: courses table: +---------+----------+ | student | class | +---------+----------+ | a | math | | b | english | | c | math | | d | biology | | e | math | | f | computer | | g | math | | h | math | | i | math | +---------+----------+ output: +---------+ | class | +---------+ | math | +---------+ explanation: - math has 6 students, so we include it. - english has 1 student, so we do not include it. - biology has 1 student, so we do not include it. - computer has 1 student, so we do not include it.
the coordinates of four points in 2d space p1, p2, p3 and p4, return true if the four points construct a square. the coordinate of a point pi is represented as [xi, yi]. the input is not given in any order. a valid square has four equal sides with positive length and four equal angles (90-degree angles). example 1: input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1] output: true example 2: input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12] output: false example 3: input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1] output: true constraints: p1.length == p2.length == p3.length == p4.length == 2 -104 <= xi, yi <= 104
a sorted array of distinct integers and a target value, return the index if the target is found. if not, return the index where it would be if it were inserted in order. you must write an algorithm with o(log n) runtime complexity. example 1: input: nums = [1,3,5,6], target = 5 output: 2 example 2: input: nums = [1,3,5,6], target = 2 output: 1 example 3: input: nums = [1,3,5,6], target = 7 output: 4 constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 nums contains distinct values sorted in ascending order. -104 <= target <= 104
axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. its top and bottom edges are parallel to the x-axis, and its left and right edges are parallel to the y-axis. two rectangles overlap if the area of their intersection is positive. to be clear, two rectangles that only touch at the corner or edges do not overlap. given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false. example 1: input: rec1 = [0,0,2,2], rec2 = [1,1,3,3] output: true example 2: input: rec1 = [0,0,1,1], rec2 = [1,0,2,1] output: false example 3: input: rec1 = [0,0,1,1], rec2 = [2,2,3,3] output: false constraints: rec1.length == 4 rec2.length == 4 -109 <= rec1[i], rec2[i] <= 109 rec1 and rec2 represent a valid rectangle with a non-zero area.
two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. in other words, find the number of substrings in s that differ from some substring in t by exactly one character. for example, the underlined substrings in "computer" and "computation" only differ by the 'e'/'a', so this is a valid way. return the number of substrings that satisfy the condition above. a substring is a contiguous sequence of characters within a string. example 1: input: s = "aba", t = "baba" output: 6 explanation: the following are the pairs of substrings from s and t that differ by exactly 1 character: ("aba", "baba") ("aba", "baba") ("aba", "baba") ("aba", "baba") ("aba", "baba") ("aba", "baba") the underlined portions are the substrings that are chosen from s and t. example 2: input: s = "ab", t = "bb" output: 3 explanation: the following are the pairs of substrings from s and t that differ by 1 character: ("ab", "bb") ("ab", "bb") ("ab", "bb") the underlined portions are the substrings that are chosen from s and t. constraints: 1 <= s.length, t.length <= 100 s and t consist of lowercase english letters only.
sentence is a list of words that are separated by a single space with no leading or trailing spaces. for example, "hello world", "hello", "hello world hello world" are all sentences. words consist of only uppercase and lowercase english letters. two sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. for example, sentence1 = "hello my name is jane" and sentence2 = "hello jane" can be made equal by inserting "my name is" between "hello" and "jane" in sentence2. given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. otherwise, return false. example 1: input: sentence1 = "my name is haley", sentence2 = "my haley" output: true explanation: sentence2 can be turned to sentence1 by inserting "name is" between "my" and "haley". example 2: input: sentence1 = "of", sentence2 = "a lot of words" output: false explanation: no single sentence can be inserted inside one of the sentences to make it equal to the other. example 3: input: sentence1 = "eating right now", sentence2 = "eating" output: true explanation: sentence2 can be turned to sentence1 by inserting "right now" at the end of the sentence. constraints: 1 <= sentence1.length, sentence2.length <= 100 sentence1 and sentence2 consist of lowercase and uppercase english letters and spaces. the words in sentence1 and sentence2 are separated by a single space.
a string s, rearrange the characters of s so that any two adjacent characters are not the same. return any possible rearrangement of s or return "" if not possible. example 1: input: s = "aab" output: "aba" example 2: input: s = "aaab" output: "" constraints: 1 <= s.length <= 500 s consists of lowercase english letters.
an array of positive integers arr, return the sum of all possible odd-length subarrays of arr. a subarray is a contiguous subsequence of the array. example 1: input: arr = [1,4,2,5,3] output: 58 explanation: the odd-length subarrays of arr and their sums are: [1] = 1 [4] = 4 [2] = 2 [5] = 5 [3] = 3 [1,4,2] = 7 [4,2,5] = 11 [2,5,3] = 10 [1,4,2,5,3] = 15 if we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58 example 2: input: arr = [1,2] output: 3 explanation: there are only 2 subarrays of odd length, [1] and [2]. their sum is 3. example 3: input: arr = [10,11,12] output: 66 constraints: 1 <= arr.length <= 100 1 <= arr[i] <= 1000 follow up: could you solve this problem in o(n) time complexity?
are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars. the cost of the substring is the sum of the values of each character in the substring. the cost of an empty string is considered 0. the value of the character is defined in the following way: if the character is not in the string chars, then its value is its corresponding position (1-indexed) in the alphabet. for example, the value of 'a' is 1, the value of 'b' is 2, and so on. the value of 'z' is 26. otherwise, assuming i is the index where the character occurs in the string chars, then its value is vals[i]. return the maximum cost among all substrings of the string s. example 1: input: s = "adaa", chars = "d", vals = [-1000] output: 2 explanation: the value of the characters "a" and "d" is 1 and -1000 respectively. the substring with the maximum cost is "aa" and its cost is 1 + 1 = 2. it can be proven that 2 is the maximum cost. example 2: input: s = "abc", chars = "abc", vals = [-1,-1,-1] output: 0 explanation: the value of the characters "a", "b" and "c" is -1, -1, and -1 respectively. the substring with the maximum cost is the empty substring "" and its cost is 0. it can be proven that 0 is the maximum cost. constraints: 1 <= s.length <= 105 s consist of lowercase english letters. 1 <= chars.length <= 26 chars consist of distinct lowercase english letters. vals.length == chars.length -1000 <= vals[i] <= 1000
are given the logs for users' actions on leetcode, and an integer k. the logs are represented by a 2d integer array logs where each logs[i] = [idi, timei] indicates that the user with idi performed an action at the minute timei. multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute. the user active minutes (uam) for a given user is defined as the number of unique minutes in which the user performed an action on leetcode. a minute can only be counted once, even if multiple actions occur during it. you are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose uam equals j. return the array answer as described above. example 1: input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5 output: [0,2,0,0,0] explanation: the user with id=0 performed actions at minutes 5, 2, and 5 again. hence, they have a uam of 2 (minute 5 is only counted once). the user with id=1 performed actions at minutes 2 and 3. hence, they have a uam of 2. since both users have a uam of 2, answer[2] is 2, and the remaining answer[j] values are 0. example 2: input: logs = [[1,1],[2,2],[2,3]], k = 4 output: [1,1,0,0] explanation: the user with id=1 performed a single action at minute 1. hence, they have a uam of 1. the user with id=2 performed actions at minutes 2 and 3. hence, they have a uam of 2. there is one user with a uam of 1 and one with a uam of 2. hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0. constraints: 1 <= logs.length <= 104 0 <= idi <= 109 1 <= timei <= 105 k is in the range [the maximum uam for a user, 105].
schema table: logs +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | num | varchar | +-------------+---------+ id is the primary key for this table. id is an autoincrement column. write an sql query to find all numbers that appear at least three times consecutively. return the result table in any order. the query result format is in the following example. example 1: input: logs table: +----+-----+ | id | num | +----+-----+ | 1 | 1 | | 2 | 1 | | 3 | 1 | | 4 | 2 | | 5 | 1 | | 6 | 2 | | 7 | 2 | +----+-----+ output: +-----------------+ | consecutivenums | +-----------------+ | 1 | +-----------------+ explanation: 1 is the only number that appears consecutively for at least three times.
a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. if there is more than one possible result, return the longest word with the smallest lexicographical order. if there is no possible result, return the empty string. example 1: input: s = "abpcplea", dictionary = ["ale","apple","monkey","plea"] output: "apple" example 2: input: s = "abpcplea", dictionary = ["a","b","c"] output: "a" constraints: 1 <= s.length <= 1000 1 <= dictionary.length <= 1000 1 <= dictionary[i].length <= 1000 s and dictionary[i] consist of lowercase english letters.
are given a 2d integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. you are also given a 2d integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj). the ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi). return an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point. the ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle. example 1: input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]] output: [2,1] explanation: the first rectangle contains no points. the second rectangle contains only the point (2, 1). the third rectangle contains the points (2, 1) and (1, 4). the number of rectangles that contain the point (2, 1) is 2. the number of rectangles that contain the point (1, 4) is 1. therefore, we return [2, 1]. example 2: input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]] output: [1,3] explanation: the first rectangle contains only the point (1, 1). the second rectangle contains only the point (1, 1). the third rectangle contains the points (1, 3) and (1, 1). the number of rectangles that contain the point (1, 3) is 1. the number of rectangles that contain the point (1, 1) is 3. therefore, we return [1, 3]. constraints: 1 <= rectangles.length, points.length <= 5 * 104 rectangles[i].length == points[j].length == 2 1 <= li, xj <= 109 1 <= hi, yj <= 100 all the rectangles are unique. all the points are unique.
are given a positive integer 0-indexed array nums. a subset of the array nums is square-free if the product of its elements is a square-free integer. a square-free integer is an integer that is divisible by no square number other than 1. return the number of square-free non-empty subsets of the array nums. since the answer may be too large, return it modulo 109 + 7. a non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. two subsets are different if and only if the chosen indices to delete are different. example 1: input: nums = [3,4,4,5] output: 3 explanation: there are 3 square-free subsets in this example: - the subset consisting of the 0th element [3]. the product of its elements is 3, which is a square-free integer. - the subset consisting of the 3rd element [5]. the product of its elements is 5, which is a square-free integer. - the subset consisting of 0th and 3rd elements [3,5]. the product of its elements is 15, which is a square-free integer. it can be proven that there are no more than 3 square-free subsets in the given array. example 2: input: nums = [1] output: 1 explanation: there is 1 square-free subset in this example: - the subset consisting of the 0th element [1]. the product of its elements is 1, which is a square-free integer. it can be proven that there is no more than 1 square-free subset in the given array. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 30
two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. you may return the answer in any order. note that the integers should not have leading zeros. integers as 02 and 043 are not allowed. example 1: input: n = 3, k = 7 output: [181,292,707,818,929] explanation: note that 070 is not a valid number, because it has leading zeroes. example 2: input: n = 2, k = 1 output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98] constraints: 2 <= n <= 9 0 <= k <= 9
are given an m x n binary grid grid where 1 represents land and 0 represents water. an island is a maximal 4-directionally (horizontal or vertical) connected group of 1's. the grid is said to be connected if we have exactly one island, otherwise is said disconnected. in one day, we are allowed to change any single land cell (1) into a water cell (0). return the minimum number of days to disconnect the grid. example 1: input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]] output: 2 explanation: we need at least 2 days to get a disconnected grid. change land grid[1][1] and grid[0][2] to water and get 2 disconnected island. example 2: input: grid = [[1,1]] output: 2 explanation: grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 30 grid[i][j] is either 0 or 1.
wonderful string is a string where at most one letter appears an odd number of times. for example, "ccjjc" and "abab" are wonderful, but "ab" is not. given a string word that consists of the first ten lowercase english letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. if the same substring appears multiple times in word, then count each occurrence separately. a substring is a contiguous sequence of characters in a string. example 1: input: word = "aba" output: 4 explanation: the four wonderful substrings are underlined below: - "aba" -> "a" - "aba" -> "b" - "aba" -> "a" - "aba" -> "aba" example 2: input: word = "aabb" output: 9 explanation: the nine wonderful substrings are underlined below: - "aabb" -> "a" - "aabb" -> "aa" - "aabb" -> "aab" - "aabb" -> "aabb" - "aabb" -> "a" - "aabb" -> "abb" - "aabb" -> "b" - "aabb" -> "bb" - "aabb" -> "b" example 3: input: word = "he" output: 2 explanation: the two wonderful substrings are underlined below: - "he" -> "h" - "he" -> "e" constraints: 1 <= word.length <= 105 word consists of lowercase english letters from 'a' to 'j'.
are given two strings s1 and s2 of equal length consisting of letters "x" and "y" only. your task is to make these two strings equal to each other. you can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j]. return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so. example 1: input: s1 = "xx", s2 = "yy" output: 1 explanation: swap s1[0] and s2[1], s1 = "yx", s2 = "yx". example 2: input: s1 = "xy", s2 = "yx" output: 2 explanation: swap s1[0] and s2[0], s1 = "yy", s2 = "xx". swap s1[0] and s2[1], s1 = "xy", s2 = "xy". note that you cannot swap s1[0] and s1[1] to make s1 equal to "yx", cause we can only swap chars in different strings. example 3: input: s1 = "xx", s2 = "xy" output: -1 constraints: 1 <= s1.length, s2.length <= 1000 s1.length == s2.length s1, s2 only contain 'x' or 'y'.
leetcode file system keeps a log each time some user performs a change folder operation. the operations are described below: "../" : move to the parent folder of the current folder. (if you are already in the main folder, remain in the same folder). "./" : remain in the same folder. "x/" : move to the child folder named x (this folder is guaranteed to always exist). you are given a list of strings logs where logs[i] is the operation performed by the user at the ith step. the file system starts in the main folder, then the operations in logs are performed. return the minimum number of operations needed to go back to the main folder after the change folder operations. example 1: input: logs = ["d1/","d2/","../","d21/","./"] output: 2 explanation: use this change folder operation "../" 2 times and go back to the main folder. example 2: input: logs = ["d1/","d2/","./","d3/","../","d31/"] output: 3 example 3: input: logs = ["d1/","../","../","../"] output: 0 constraints: 1 <= logs.length <= 103 2 <= logs[i].length <= 10 logs[i] contains lowercase english letters, digits, '.', and '/'. logs[i] follows the format described in the statement. folder names consist of lowercase english letters and digits.
are given a string s. reorder the string using the following algorithm: pick the smallest character from s and append it to the result. pick the smallest character from s which is greater than the last appended character to the result and append it. repeat step 2 until you cannot pick more characters. pick the largest character from s and append it to the result. pick the largest character from s which is smaller than the last appended character to the result and append it. repeat step 5 until you cannot pick more characters. repeat the steps from 1 to 6 until you pick all characters from s. in each step, if the smallest or the largest character appears more than once you can choose any occurrence and append it to the result. return the result string after sorting s with this algorithm. example 1: input: s = "aaaabbbbcccc" output: "abccbaabccba" explanation: after steps 1, 2 and 3 of the first iteration, result = "abc" after steps 4, 5 and 6 of the first iteration, result = "abccba" first iteration is done. now s = "aabbcc" and we go back to step 1 after steps 1, 2 and 3 of the second iteration, result = "abccbaabc" after steps 4, 5 and 6 of the second iteration, result = "abccbaabccba" example 2: input: s = "rat" output: "art" explanation: the word "rat" becomes "art" after re-ordering it with the mentioned algorithm. constraints: 1 <= s.length <= 500 s consists of only lowercase english letters.
an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order. return the shortest such subarray and output its length. example 1: input: nums = [2,6,4,8,10,9,15] output: 5 explanation: you need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order. example 2: input: nums = [1,2,3,4] output: 0 example 3: input: nums = [1] output: 0 constraints: 1 <= nums.length <= 104 -105 <= nums[i] <= 105 follow up: can you solve it in o(n) time complexity?
an array of integers arr, you are initially positioned at the first index of the array. in one step you can jump from index i to index: i + 1 where: i + 1 < arr.length. i - 1 where: i - 1 >= 0. j where: arr[i] == arr[j] and i != j. return the minimum number of steps to reach the last index of the array. notice that you can not jump outside of the array at any time. example 1: input: arr = [100,-23,-23,404,100,23,23,23,3,404] output: 3 explanation: you need three jumps from index 0 --> 4 --> 3 --> 9. note that index 9 is the last index of the array. example 2: input: arr = [7] output: 0 explanation: start index is the last index. you do not need to jump. example 3: input: arr = [7,6,9,6,9,6,9,7] output: 1 explanation: you can jump directly from index 0 to index 7 which is last index of the array. constraints: 1 <= arr.length <= 5 * 104 -108 <= arr[i] <= 108
are given a 0-indexed string array words. two strings are similar if they consist of the same characters. for example, "abca" and "cba" are similar since both consist of characters 'a', 'b', and 'c'. however, "abacba" and "bcfd" are not similar since they do not consist of the same characters. return the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar. example 1: input: words = ["aba","aabb","abcd","bac","aabc"] output: 2 explanation: there are 2 pairs that satisfy the conditions: - i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. - i = 3 and j = 4 : both words[3] and words[4] only consist of characters 'a', 'b', and 'c'. example 2: input: words = ["aabb","ab","ba"] output: 3 explanation: there are 3 pairs that satisfy the conditions: - i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. - i = 0 and j = 2 : both words[0] and words[2] only consist of characters 'a' and 'b'. - i = 1 and j = 2 : both words[1] and words[2] only consist of characters 'a' and 'b'. example 3: input: words = ["nba","cba","dba"] output: 0 explanation: since there does not exist any pair that satisfies the conditions, we return 0. constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consist of only lowercase english letters.
an integer n, your task is to count how many strings of length n can be formed under the following rules: each character is a lower case vowel ('a', 'e', 'i', 'o', 'u') each vowel 'a' may only be followed by an 'e'. each vowel 'e' may only be followed by an 'a' or an 'i'. each vowel 'i' may not be followed by another 'i'. each vowel 'o' may only be followed by an 'i' or a 'u'. each vowel 'u' may only be followed by an 'a'. since the answer may be too large, return it modulo 10^9 + 7. example 1: input: n = 1 output: 5 explanation: all possible strings are: "a", "e", "i" , "o" and "u". example 2: input: n = 2 output: 10 explanation: all possible strings are: "ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" and "ua". example 3: input: n = 5 output: 68 constraints: 1 <= n <= 2 * 10^4
english, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. for example, when the root "an" is followed by the successor word "other", we can form a new word "another". given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. if a successor can be replaced by more than one root, replace it with the root that has the shortest length. return the sentence after the replacement. example 1: input: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery" output: "the cat was rat by the bat" example 2: input: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs" output: "a a b c" constraints: 1 <= dictionary.length <= 1000 1 <= dictionary[i].length <= 100 dictionary[i] consists of only lower-case letters. 1 <= sentence.length <= 106 sentence consists of only lower-case letters and spaces. the number of words in sentence is in the range [1, 1000] the length of each word in sentence is in the range [1, 1000] every two consecutive words in sentence will be separated by exactly one space. sentence does not have leading or trailing spaces.
a bash script to calculate the frequency of each word in a text file words.txt. for simplicity sake, you may assume: words.txt contains only lowercase characters and space ' ' characters. each word must consist of lowercase characters only. words are separated by one or more whitespace characters. example: assume that words.txt has the following content: the day is sunny the the the sunny is is your script should output the following, sorted by descending frequency: the 4 is 3 sunny 2 day 1 note: don't worry about handling ties, it is guaranteed that each word's frequency count is unique. could you write it in one-line using unix pipes?
an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. if target exists, then return its index. otherwise, return -1. you must write an algorithm with o(log n) runtime complexity. example 1: input: nums = [-1,0,3,5,9,12], target = 9 output: 4 explanation: 9 exists in nums and its index is 4 example 2: input: nums = [-1,0,3,5,9,12], target = 2 output: -1 explanation: 2 does not exist in nums so return -1 constraints: 1 <= nums.length <= 104 -104 < nums[i], target < 104 all the integers in nums are unique. nums is sorted in ascending order.
an integer k, return the minimum number of fibonacci numbers whose sum is equal to k. the same fibonacci number can be used multiple times. the fibonacci numbers are defined as: f1 = 1 f2 = 1 fn = fn-1 + fn-2 for n > 2. it is guaranteed that for the given constraints we can always find such fibonacci numbers that sum up to k. example 1: input: k = 7 output: 2 explanation: the fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... for k = 7 we can use 2 + 5 = 7. example 2: input: k = 10 output: 2 explanation: for k = 10 we can use 2 + 8 = 10. example 3: input: k = 19 output: 3 explanation: for k = 19 we can use 1 + 5 + 13 = 19. constraints: 1 <= k <= 109
an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. notice that the solution set must not contain duplicate triplets. example 1: input: nums = [-1,0,1,2,-1,-4] output: [[-1,-1,2],[-1,0,1]] explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. the distinct triplets are [-1,0,1] and [-1,-1,2]. notice that the order of the output and the order of the triplets does not matter. example 2: input: nums = [0,1,1] output: [] explanation: the only possible triplet does not sum up to 0. example 3: input: nums = [0,0,0] output: [[0,0,0]] explanation: the only possible triplet sums up to 0. constraints: 3 <= nums.length <= 3000 -105 <= nums[i] <= 105
are given an array nums consisting of positive integers and an integer k. partition the array into two ordered groups such that each element is in exactly one group. a partition is called great if the sum of elements of each group is greater than or equal to k. return the number of distinct great partitions. since the answer may be too large, return it modulo 109 + 7. two partitions are considered distinct if some element nums[i] is in different groups in the two partitions. example 1: input: nums = [1,2,3,4], k = 4 output: 6 explanation: the great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3]). example 2: input: nums = [3,3,3], k = 4 output: 0 explanation: there are no great partitions for this array. example 3: input: nums = [6,6], k = 2 output: 2 explanation: we can either put nums[0] in the first partition or in the second partition. the great partitions will be ([6], [6]) and ([6], [6]). constraints: 1 <= nums.length, k <= 1000 1 <= nums[i] <= 109
define the usage of capitals in a word to be right when one of the following cases holds: all letters in this word are capitals, like "usa". all letters in this word are not capitals, like "leetcode". only the first letter in this word is capital, like "google". given a string word, return true if the usage of capitals in it is right. example 1: input: word = "usa" output: true example 2: input: word = "flag" output: false constraints: 1 <= word.length <= 100 word consists of lowercase and uppercase english letters.
an integer array nums, return the number of subarrays filled with 0. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,3,0,0,2,0,0,4] output: 6 explanation: there are 4 occurrences of [0] as a subarray. there are 2 occurrences of [0,0] as a subarray. there is no occurrence of a subarray with a size more than 2 filled with 0. therefore, we return 6. example 2: input: nums = [0,0,0,2,0,0] output: 9 explanation: there are 5 occurrences of [0] as a subarray. there are 3 occurrences of [0,0] as a subarray. there is 1 occurrence of [0,0,0] as a subarray. there is no occurrence of a subarray with a size more than 3 filled with 0. therefore, we return 9. example 3: input: nums = [2,10,2019] output: 0 explanation: there is no subarray filled with 0. therefore, we return 0. constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109
was given the above mysterious function func. he has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible. return the minimum possible value of |func(arr, l, r) - target|. notice that func should be called with the values l and r where 0 <= l, r < arr.length. example 1: input: arr = [9,12,3,7,15], target = 5 output: 2 explanation: calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. the value closest to 5 is 7 and 3, thus the minimum difference is 2. example 2: input: arr = [1000000,1000000,1000000], target = 1 output: 999999 explanation: winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999. example 3: input: arr = [1,2,4,8,16], target = 0 output: 0 constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 106 0 <= target <= 107
a string s, partition the string into one or more substrings such that the characters in each substring are unique. that is, no letter appears in a single substring more than once. return the minimum number of substrings in such a partition. note that each character should belong to exactly one substring in a partition. example 1: input: s = "abacaba" output: 4 explanation: two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba"). it can be shown that 4 is the minimum number of substrings needed. example 2: input: s = "ssssss" output: 6 explanation: the only valid partition is ("s","s","s","s","s","s"). constraints: 1 <= s.length <= 105 s consists of only english lowercase letters.
a string word to which you can insert letters "a", "b" or "c" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid. a string is called valid if it can be formed by concatenating the string "abc" several times. example 1: input: word = "b" output: 2 explanation: insert the letter "a" right before "b", and the letter "c" right next to "a" to obtain the valid string "abc". example 2: input: word = "aaa" output: 6 explanation: insert letters "b" and "c" next to each "a" to obtain the valid string "abcabcabc". example 3: input: word = "abc" output: 0 explanation: word is already valid. no modifications are needed. constraints: 1 <= word.length <= 50 word consists of letters "a", "b" and "c" only.
an integer array nums, find a subarray that has the largest product, and return the product. the test cases are generated so that the answer will fit in a 32-bit integer. example 1: input: nums = [2,3,-2,4] output: 6 explanation: [2,3] has the largest product 6. example 2: input: nums = [-2,0,-1] output: 0 explanation: the result cannot be 2, because [-2,-1] is not a subarray. constraints: 1 <= nums.length <= 2 * 104 -10 <= nums[i] <= 10 the product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
company workers use key-cards to unlock office doors. each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. the system emits an alert if any worker uses the key-card three or more times in a one-hour period. you are given a list of strings keyname and keytime where [keyname[i], keytime[i]] corresponds to a person's name and the time when their key-card was used in a single day. access times are given in the 24-hour time format "hh:mm", such as "23:51" and "09:49". return a list of unique worker names who received an alert for frequent keycard use. sort the names in ascending order alphabetically. notice that "10:00" - "11:00" is considered to be within a one-hour period, while "22:51" - "23:52" is not considered to be within a one-hour period. example 1: input: keyname = ["daniel","daniel","daniel","luis","luis","luis","luis"], keytime = ["10:00","10:40","11:00","09:00","11:00","13:00","15:00"] output: ["daniel"] explanation: "daniel" used the keycard 3 times in a one-hour period ("10:00","10:40", "11:00"). example 2: input: keyname = ["alice","alice","alice","bob","bob","bob","bob"], keytime = ["12:01","12:00","18:00","21:00","21:20","21:30","23:00"] output: ["bob"] explanation: "bob" used the keycard 3 times in a one-hour period ("21:00","21:20", "21:30"). constraints: 1 <= keyname.length, keytime.length <= 105 keyname.length == keytime.length keytime[i] is in the format "hh:mm". [keyname[i], keytime[i]] is unique. 1 <= keyname[i].length <= 10 keyname[i] contains only lowercase english letters.
image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image. you are also given three integers sr, sc, and color. you should perform a flood fill on the image starting from the pixel image[sr][sc]. to perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. replace the color of all of the aforementioned pixels with color. return the modified image after performing the flood fill. example 1: input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2 output: [[2,2,2],[2,2,0],[2,0,1]] explanation: from the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color. note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel. example 2: input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0 output: [[0,0,0],[0,0,0]] explanation: the starting pixel is already colored 0, so no changes are made to the image. constraints: m == image.length n == image[i].length 1 <= m, n <= 50 0 <= image[i][j], color < 216 0 <= sr < m 0 <= sc < n
an array of integers preorder, which represents the preorder traversal of a bst (i.e., binary search tree), construct the tree and return its root. it is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases. a binary search tree is a binary tree where for every node, any descendant of node.left has a value strictly less than node.val, and any descendant of node.right has a value strictly greater than node.val. a preorder traversal of a binary tree displays the value of the node first, then traverses node.left, then traverses node.right. example 1: input: preorder = [8,5,1,7,10,12] output: [8,5,10,1,7,null,12] example 2: input: preorder = [1,3] output: [1,null,3] constraints: 1 <= preorder.length <= 100 1 <= preorder[i] <= 1000 all the values of preorder are unique.
is a broken calculator that has the integer startvalue on its display initially. in one operation, you can: multiply the number on display by 2, or subtract 1 from the number on display. given two integers startvalue and target, return the minimum number of operations needed to display target on the calculator. example 1: input: startvalue = 2, target = 3 output: 2 explanation: use double operation and then decrement operation {2 -> 4 -> 3}. example 2: input: startvalue = 5, target = 8 output: 2 explanation: use decrement and then double {5 -> 4 -> 8}. example 3: input: startvalue = 3, target = 10 output: 3 explanation: use double, decrement and double {3 -> 6 -> 5 -> 10}. constraints: 1 <= startvalue, target <= 109
a string date representing a gregorian calendar date formatted as yyyy-mm-dd, return the day number of the year. example 1: input: date = "2019-01-09" output: 9 explanation: given date is the 9th day of the year in 2019. example 2: input: date = "2019-02-10" output: 41 constraints: date.length == 10 date[4] == date[7] == '-', and all other date[i]'s are digits date represents a calendar date between jan 1st, 1900 and dec 31th, 2019.
are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. a move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves. example 1: input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]] output: 3 explanation: there are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary. example 2: input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]] output: 0 explanation: all 1s are either on the boundary or can reach the boundary. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 500 grid[i][j] is either 0 or 1.
are n persons on a social media website. you are given an integer array ages where ages[i] is the age of the ith person. a person x will not send a friend request to a person y (x != y) if any of the following conditions is true: age[y] <= 0.5 * age[x] + 7 age[y] > age[x] age[y] > 100 && age[x] < 100 otherwise, x will send a friend request to y. note that if x sends a request to y, y will not necessarily send a request to x. also, a person will not send a friend request to themself. return the total number of friend requests made. example 1: input: ages = [16,16] output: 2 explanation: 2 people friend request each other. example 2: input: ages = [16,17,18] output: 2 explanation: friend requests are made 17 -> 16, 18 -> 17. example 3: input: ages = [20,30,100,110,120] output: 3 explanation: friend requests are made 110 -> 100, 120 -> 110, 120 -> 100. constraints: n == ages.length 1 <= n <= 2 * 104 1 <= ages[i] <= 120
a string licenseplate and an array of strings words, find the shortest completing word in words. a completing word is a word that contains all the letters in licenseplate. ignore numbers and spaces in licenseplate, and treat letters as case insensitive. if a letter appears more than once in licenseplate, then it must appear in the word the same number of times or more. for example, if licenseplate = "abc 12c", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. possible completing words are "abccdef", "caaacab", and "cbca". return the shortest completing word in words. it is guaranteed an answer exists. if there are multiple shortest completing words, return the first one that occurs in words. example 1: input: licenseplate = "1s3 pst", words = ["step","steps","stripe","stepple"] output: "steps" explanation: licenseplate contains letters 's', 'p', 's' (ignoring case), and 't'. "step" contains 't' and 'p', but only contains 1 's'. "steps" contains 't', 'p', and both 's' characters. "stripe" is missing an 's'. "stepple" is missing an 's'. since "steps" is the only word containing all the letters, that is the answer. example 2: input: licenseplate = "1s3 456", words = ["looks","pest","stew","show"] output: "pest" explanation: licenseplate only contains the letter 's'. all the words contain 's', but among these "pest", "stew", and "show" are shortest. the answer is "pest" because it is the word that appears earliest of the 3. constraints: 1 <= licenseplate.length <= 7 licenseplate contains digits, letters (uppercase or lowercase), or space ' '. 1 <= words.length <= 1000 1 <= words[i].length <= 15 words[i] consists of lower case english letters.
the array orders, which represents the orders that customers have done in a restaurant. more specifically orders[i]=[customernamei,tablenumberi,fooditemi] where customernamei is the name of the customer, tablenumberi is the table customer sit at, and fooditemi is the item customer orders. return the restaurant's “display table”. the “display table” is a table whose row entries denote how many of each food item each table ordered. the first column is the table number and the remaining columns correspond to each food item in alphabetical order. the first row should be a header whose first column is “table”, followed by the names of the food items. note that the customer names are not part of the table. additionally, the rows should be sorted in numerically increasing order. example 1: input: orders = [["david","3","ceviche"],["corina","10","beef burrito"],["david","3","fried chicken"],["carla","5","water"],["carla","5","ceviche"],["rous","3","ceviche"]] output: [["table","beef burrito","ceviche","fried chicken","water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]] explanation: the displaying table looks like: table,beef burrito,ceviche,fried chicken,water 3 ,0 ,2 ,1 ,0 5 ,0 ,1 ,0 ,1 10 ,1 ,0 ,0 ,0 for the table 3: david orders "ceviche" and "fried chicken", and rous orders "ceviche". for the table 5: carla orders "water" and "ceviche". for the table 10: corina orders "beef burrito". example 2: input: orders = [["james","12","fried chicken"],["ratesh","12","fried chicken"],["amadeus","12","fried chicken"],["adam","1","canadian waffles"],["brianna","1","canadian waffles"]] output: [["table","canadian waffles","fried chicken"],["1","2","0"],["12","0","3"]] explanation: for the table 1: adam and brianna order "canadian waffles". for the table 12: james, ratesh and amadeus order "fried chicken". example 3: input: orders = [["laura","2","bean burrito"],["jhon","2","beef burrito"],["melissa","2","soda"]] output: [["table","bean burrito","beef burrito","soda"],["2","1","1","1"]] constraints: 1 <= orders.length <= 5 * 10^4 orders[i].length == 3 1 <= customernamei.length, fooditemi.length <= 20 customernamei and fooditemi consist of lowercase and uppercase english letters and the space character. tablenumberi is a valid integer between 1 and 500.
are given a string word that consists of digits and lowercase english letters. you will replace every non-digit character with a space. for example, "a123bc34d8ef34" will become " 123 34 8 34". notice that you are left with some integers that are separated by at least one space: "123", "34", "8", and "34". return the number of different integers after performing the replacement operations on word. two integers are considered different if their decimal representations without any leading zeros are different. example 1: input: word = "a123bc34d8ef34" output: 3 explanation: the three different integers are "123", "34", and "8". notice that "34" is only counted once. example 2: input: word = "leet1234code234" output: 2 example 3: input: word = "a1b01c001" output: 1 explanation: the three integers "1", "01", and "001" all represent the same integer because the leading zeros are ignored when comparing their decimal values. constraints: 1 <= word.length <= 1000 word consists of digits and lowercase english letters.
are several consecutive houses along a street, each of which has some money inside. there is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes. the capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed. you are given an integer array nums representing how much money is stashed in each house. more formally, the ith house from the left has nums[i] dollars. you are also given an integer k, representing the minimum number of houses the robber will steal from. it is always possible to steal at least k houses. return the minimum capability of the robber out of all the possible ways to steal at least k houses. example 1: input: nums = [2,3,5,9], k = 2 output: 5 explanation: there are three ways to rob at least 2 houses: - rob the houses at indices 0 and 2. capability is max(nums[0], nums[2]) = 5. - rob the houses at indices 0 and 3. capability is max(nums[0], nums[3]) = 9. - rob the houses at indices 1 and 3. capability is max(nums[1], nums[3]) = 9. therefore, we return min(5, 9, 9) = 5. example 2: input: nums = [2,7,9,3,1], k = 2 output: 2 explanation: there are 7 ways to rob the houses. the way which leads to minimum capability is to rob the house at index 0 and 4. return max(nums[0], nums[4]) = 2. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109 1 <= k <= (nums.length + 1)/2
two arrays nums1 and nums2. return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length. a subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not). example 1: input: nums1 = [2,1,-2,5], nums2 = [3,0,-6] output: 18 explanation: take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2. their dot product is (2*3 + (-2)*(-6)) = 18. example 2: input: nums1 = [3,-2], nums2 = [2,-6,7] output: 21 explanation: take subsequence [3] from nums1 and subsequence [7] from nums2. their dot product is (3*7) = 21. example 3: input: nums1 = [-1,-1], nums2 = [1,1] output: -1 explanation: take subsequence [-1] from nums1 and subsequence [1] from nums2. their dot product is -1. constraints: 1 <= nums1.length, nums2.length <= 500 -1000 <= nums1[i], nums2[i] <= 1000
company has n employees with a unique id for each employee from 0 to n - 1. the head of the company is the one with headid. each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headid] = -1. also, it is guaranteed that the subordination relationships have a tree structure. the head of the company wants to inform all the company employees of an urgent piece of news. he will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. the i-th employee needs informtime[i] minutes to inform all of his direct subordinates (i.e., after informtime[i] minutes, all his direct subordinates can start spreading the news). return the number of minutes needed to inform all the employees about the urgent news. example 1: input: n = 1, headid = 0, manager = [-1], informtime = [0] output: 0 explanation: the head of the company is the only employee in the company. example 2: input: n = 6, headid = 2, manager = [2,2,-1,2,2,2], informtime = [0,0,1,0,0,0] output: 1 explanation: the head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all. the tree structure of the employees in the company is shown. constraints: 1 <= n <= 105 0 <= headid < n manager.length == n 0 <= manager[i] < n manager[headid] == -1 informtime.length == n 0 <= informtime[i] <= 1000 informtime[i] == 0 if employee i has no subordinates. it is guaranteed that all the employees can be informed.
are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. you are also given an integer k that denotes the number of children to distribute all the bags of cookies to. all the cookies in the same bag must go to the same child and cannot be split up. the unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution. return the minimum unfairness of all distributions. example 1: input: cookies = [8,15,10,20,8], k = 2 output: 31 explanation: one optimal distribution is [8,15,8] and [10,20] - the 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies. - the 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies. the unfairness of the distribution is max(31,30) = 31. it can be shown that there is no distribution with an unfairness less than 31. example 2: input: cookies = [6,1,3,2,2,4,1,2], k = 3 output: 7 explanation: one optimal distribution is [6,1], [3,2,2], and [4,1,2] - the 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies. - the 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies. - the 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies. the unfairness of the distribution is max(7,7,7) = 7. it can be shown that there is no distribution with an unfairness less than 7. constraints: 2 <= cookies.length <= 8 1 <= cookies[i] <= 105 2 <= k <= cookies.length
are assigned to put some amount of boxes onto one truck. you are given a 2d array boxtypes, where boxtypes[i] = [numberofboxesi, numberofunitsperboxi]: numberofboxesi is the number of boxes of type i. numberofunitsperboxi is the number of units in each box of the type i. you are also given an integer trucksize, which is the maximum number of boxes that can be put on the truck. you can choose any boxes to put on the truck as long as the number of boxes does not exceed trucksize. return the maximum total number of units that can be put on the truck. example 1: input: boxtypes = [[1,3],[2,2],[3,1]], trucksize = 4 output: 8 explanation: there are: - 1 box of the first type that contains 3 units. - 2 boxes of the second type that contain 2 units each. - 3 boxes of the third type that contain 1 unit each. you can take all the boxes of the first and second types, and one box of the third type. the total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8. example 2: input: boxtypes = [[5,10],[2,5],[4,7],[3,9]], trucksize = 10 output: 91 constraints: 1 <= boxtypes.length <= 1000 1 <= numberofboxesi, numberofunitsperboxi <= 1000 1 <= trucksize <= 106
schema table activities: +-------------+---------+ | column name | type | +-------------+---------+ | sell_date | date | | product | varchar | +-------------+---------+ there is no primary key for this table, it may contain duplicates. each row of this table contains the product name and the date it was sold in a market. write an sql query to find for each date the number of different products sold and their names. the sold products names for each date should be sorted lexicographically. return the result table ordered by sell_date. the query result format is in the following example. example 1: input: activities table: +------------+------------+ | sell_date | product | +------------+------------+ | 2020-05-30 | headphone | | 2020-06-01 | pencil | | 2020-06-02 | mask | | 2020-05-30 | basketball | | 2020-06-01 | bible | | 2020-06-02 | mask | | 2020-05-30 | t-shirt | +------------+------------+ output: +------------+----------+------------------------------+ | sell_date | num_sold | products | +------------+----------+------------------------------+ | 2020-05-30 | 3 | basketball,headphone,t-shirt | | 2020-06-01 | 2 | bible,pencil | | 2020-06-02 | 1 | mask | +------------+----------+------------------------------+ explanation: for 2020-05-30, sold items were (headphone, basketball, t-shirt), we sort them lexicographically and separate them by a comma. for 2020-06-01, sold items were (pencil, bible), we sort them lexicographically and separate them by a comma. for 2020-06-02, the sold item is (mask), we just return it.
a long library corridor, there is a line of seats and decorative plants. you are given a 0-indexed string corridor of length n consisting of letters 's' and 'p' where each 's' represents a seat and each 'p' represents a plant. one room divider has already been installed to the left of index 0, and another to the right of index n - 1. additional room dividers can be installed. for each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed. divide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. there may be multiple ways to perform the division. two ways are different if there is a position with a room divider installed in the first way but not in the second way. return the number of ways to divide the corridor. since the answer may be very large, return it modulo 109 + 7. if there is no way, return 0. example 1: input: corridor = "ssppsps" output: 3 explanation: there are 3 different ways to divide the corridor. the black bars in the above image indicate the two room dividers already installed. note that in each of the ways, each section has exactly two seats. example 2: input: corridor = "ppspsp" output: 1 explanation: there is only 1 way to divide the corridor, by not installing any additional dividers. installing any would create some section that does not have exactly two seats. example 3: input: corridor = "s" output: 0 explanation: there is no way to divide the corridor because there will always be a section that does not have exactly two seats. constraints: n == corridor.length 1 <= n <= 105 corridor[i] is either 's' or 'p'.
are given a string text of words that are placed among some number of spaces. each word consists of one or more lowercase english letters and are separated by at least one space. it's guaranteed that text contains at least one word. rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. if you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text. return the string after rearranging the spaces. example 1: input: text = " this is a sentence " output: "this is a sentence" explanation: there are a total of 9 spaces and 4 words. we can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces. example 2: input: text = " practice makes perfect" output: "practice makes perfect " explanation: there are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. we place this extra space at the end of the string. constraints: 1 <= text.length <= 100 text consists of lowercase english letters and ' '. text contains at least one word.
are given an integer array gifts denoting the number of gifts in various piles. every second, you do the following: choose the pile with the maximum number of gifts. if there is more than one pile with the maximum number of gifts, choose any. leave behind the floor of the square root of the number of gifts in the pile. take the rest of the gifts. return the number of gifts remaining after k seconds. example 1: input: gifts = [25,64,9,4,100], k = 4 output: 29 explanation: the gifts are taken in the following way: - in the first second, the last pile is chosen and 10 gifts are left behind. - then the second pile is chosen and 8 gifts are left behind. - after that the first pile is chosen and 5 gifts are left behind. - finally, the last pile is chosen again and 3 gifts are left behind. the final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29. example 2: input: gifts = [1,1,1,1], k = 4 output: 4 explanation: in this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. that is, you can't take any pile with you. so, the total gifts remaining are 4. constraints: 1 <= gifts.length <= 103 1 <= gifts[i] <= 109 1 <= k <= 103
valid encoding of an array of words is any reference string s and array of indices indices such that: words.length == indices.length the reference string s ends with the '#' character. for each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i]. given an array of words, return the length of the shortest reference string s possible of any valid encoding of words. example 1: input: words = ["time", "me", "bell"] output: 10 explanation: a valid encoding would be s = "time#bell#" and indices = [0, 2, 5]. words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#" words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#" words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#" example 2: input: words = ["t"] output: 2 explanation: a valid encoding would be s = "t#" and indices = [0]. constraints: 1 <= words.length <= 2000 1 <= words[i].length <= 7 words[i] consists of only lowercase letters.
an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums. formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1]) example 1: input: arr = [0,2,1,-6,6,-7,9,1,2,0,1] output: true explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1 example 2: input: arr = [0,2,1,-6,6,7,9,-1,2,0,1] output: false example 3: input: arr = [3,3,6,5,-2,2,5,1,-9,4] output: true explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4 constraints: 3 <= arr.length <= 5 * 104 -104 <= arr[i] <= 104
are given an integer n. each number from 1 to n is grouped according to the sum of its digits. return the number of groups that have the largest size. example 1: input: n = 13 output: 4 explanation: there are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13: [1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. there are 4 groups with largest size. example 2: input: n = 2 output: 2 explanation: there are 2 groups [1], [2] of size 1. constraints: 1 <= n <= 104
a function fn and a time in milliseconds t, return a debounced version of that function. a debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time. the debounced function should also recieve the passed parameters. for example, let's say t = 50ms, and the function was called at 30ms, 60ms, and 100ms. the first 2 function calls would be cancelled, and the 3rd function call would be executed at 150ms. if instead t = 35ms, the 1st call would be cancelled, the 2nd would be executed at 95ms, and the 3rd would be executed at 135ms. the above diagram shows how debounce will transform events. each rectangle represents 100ms and the debounce time is 400ms. each color represents a different set of inputs. please solve it without using lodash's _.debounce() function. example 1: input: t = 50 calls = [ {"t": 50, inputs: [1]}, {"t": 75, inputs: [2]} ] output: [{"t": 125, inputs: [2]}] explanation: let start = date.now(); function log(...inputs) { console.log([date.now() - start, inputs ]) } const dlog = debounce(log, 50); settimeout(() => dlog(1), 50); settimeout(() => dlog(2), 75); the 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms the 2nd call is delayed by 50ms and executed at 125ms. the inputs were (2). example 2: input: t = 20 calls = [ {"t": 50, inputs: [1]}, {"t": 100, inputs: [2]} ] output: [{"t": 70, inputs: [1]}, {"t": 120, inputs: [2]}] explanation: the 1st call is delayed until 70ms. the inputs were (1). the 2nd call is delayed until 120ms. the inputs were (2). example 3: input: t = 150 calls = [ {"t": 50, inputs: [1, 2]}, {"t": 300, inputs: [3, 4]}, {"t": 300, inputs: [5, 6]} ] output: [{"t": 200, inputs: [1,2]}, {"t": 450, inputs: [5, 6]}] explanation: the 1st call is delayed by 150ms and ran at 200ms. the inputs were (1, 2). the 2nd call is cancelled by the 3rd call the 3rd call is delayed by 150ms and ran at 450ms. the inputs were (5, 6). constraints: 0 <= t <= 1000 1 <= calls.length <= 10 0 <= calls[i].t <= 1000 0 <= calls[i].inputs.length <= 10
a string s, return true if the s can be palindrome after deleting at most one character from it. example 1: input: s = "aba" output: true example 2: input: s = "abca" output: true explanation: you could delete the character 'c'. example 3: input: s = "abc" output: false constraints: 1 <= s.length <= 105 s consists of lowercase english letters.
an array of positive integers arr, find a pattern of length m that is repeated k or more times. a pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. a pattern is defined by its length and the number of repetitions. return true if there exists a pattern of length m that is repeated k or more times, otherwise return false. example 1: input: arr = [1,2,4,4,4,4], m = 1, k = 3 output: true explanation: the pattern (4) of length 1 is repeated 4 consecutive times. notice that pattern can be repeated k or more times but not less. example 2: input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2 output: true explanation: the pattern (1,2) of length 2 is repeated 2 consecutive times. another valid pattern (2,1) is also repeated 2 times. example 3: input: arr = [1,2,1,2,1,3], m = 2, k = 3 output: false explanation: the pattern (1,2) is of length 2 but is repeated only 2 times. there is no pattern of length 2 that is repeated 3 or more times. constraints: 2 <= arr.length <= 100 1 <= arr[i] <= 100 1 <= m <= 100 2 <= k <= 100
are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes. you are also given a 2d integer array query. for each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation: add 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). that is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i. return the matrix mat after performing every query. example 1: input: n = 3, queries = [[1,1,2,2],[0,0,1,1]] output: [[1,1,0],[1,2,1],[0,1,1]] explanation: the diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query. - in the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2). - in the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1). example 2: input: n = 2, queries = [[0,0,1,1]] output: [[1,1],[1,1]] explanation: the diagram above shows the initial matrix and the matrix after the first query. - in the first query we add 1 to every element in the matrix. constraints: 1 <= n <= 500 1 <= queries.length <= 104 0 <= row1i <= row2i < n 0 <= col1i <= col2i < n
a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string. if there are fewer than k characters left, reverse all of them. if there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original. example 1: input: s = "abcdefg", k = 2 output: "bacdfeg" example 2: input: s = "abcd", k = 2 output: "bacd" constraints: 1 <= s.length <= 104 s consists of only lowercase english letters. 1 <= k <= 104
are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. in other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth. return the number of '*' in s, excluding the '*' between each pair of '|'. note that each '|' will belong to exactly one pair. example 1: input: s = "l|*e*et|c**o|*de|" output: 2 explanation: the considered characters are underlined: "l|*e*et|c**o|*de|". the characters between the first and second '|' are excluded from the answer. also, the characters between the third and fourth '|' are excluded from the answer. there are 2 asterisks considered. therefore, we return 2. example 2: input: s = "iamprogrammer" output: 0 explanation: in this example, there are no asterisks in s. therefore, we return 0. example 3: input: s = "yo|uar|e**|b|e***au|tifu|l" output: 5 explanation: the considered characters are underlined: "yo|uar|e**|b|e***au|tifu|l". there are 5 asterisks considered. therefore, we return 5. constraints: 1 <= s.length <= 1000 s consists of lowercase english letters, vertical bars '|', and asterisks '*'. s contains an even number of vertical bars '|'.
a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. the array is sorted in non-decreasing order, and there is only one way to form the array. you are also given a 0-indexed 2d integer array queries, where queries[i] = [lefti, righti]. each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti. return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7. example 1: input: n = 15, queries = [[0,1],[2,2],[0,3]] output: [2,4,64] explanation: for n = 15, powers = [1,2,4,8]. it can be shown that powers cannot be a smaller size. answer to 1st query: powers[0] * powers[1] = 1 * 2 = 2. answer to 2nd query: powers[2] = 4. answer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64. each answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned. example 2: input: n = 2, queries = [[0,0]] output: [2] explanation: for n = 2, powers = [2]. the answer to the only query is powers[0] = 2. the answer modulo 109 + 7 is the same, so [2] is returned. constraints: 1 <= n <= 109 1 <= queries.length <= 105 0 <= starti <= endi < powers.length
a function fn, return a curried version of that function. a curried function is a function that accepts fewer or an equal number of parameters as the original function and returns either another curried function or the same value the original function would have returned. in practical terms, if you called the original function like sum(1,2,3), you would call the curried version like csum(1)(2)(3), csum(1)(2,3), csum(1,2)(3), or csum(1,2,3). all these methods of calling the curried function should return the same value as the original. example 1: input: fn = function sum(a, b, c) { return a + b + c; } inputs = [[1],[2],[3]] output: 6 explanation: the code being executed is: const curriedsum = curry(fn); curriedsum(1)(2)(3) === 6; curriedsum(1)(2)(3) should return the same value as sum(1, 2, 3). example 2: input: fn = function sum(a, b, c) { return a + b + c; } inputs = [[1,2],[3]] output: 6 explanation: curriedsum(1, 2)(3) should return the same value as sum(1, 2, 3). example 3: input: fn = function sum(a, b, c) { return a + b + c; } inputs = [[],[],[1,2,3]] output: 6 explanation: you should be able to pass the parameters in any way, including all at once or none at all. curriedsum()()(1, 2, 3) should return the same value as sum(1, 2, 3). example 4: input: fn = function life() { return 42; } inputs = [[]] output: 42 explanation: currying a function that accepts zero parameters should effectively do nothing. curriedlife() === 42 constraints: 1 <= inputs.length <= 1000 0 <= inputs[i][j] <= 105 0 <= fn.length <= 1000 inputs.flat().length == fn.length function parameters explicitly defined
two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement: suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers. return the list answer. if there multiple valid answers, return any of them. example 1: input: n = 3, k = 1 output: [1,2,3] explanation: the [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1 example 2: input: n = 3, k = 2 output: [1,3,2] explanation: the [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2. constraints: 1 <= k < n <= 104
happy string is a string that: consists only of letters of the set ['a', 'b', 'c']. s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed). for example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings. given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order. return the kth string of this list or return an empty string if there are less than k happy strings of length n. example 1: input: n = 1, k = 3 output: "c" explanation: the list ["a", "b", "c"] contains all happy strings of length 1. the third string is "c". example 2: input: n = 1, k = 4 output: "" explanation: there are only 3 happy strings of length 1. example 3: input: n = 3, k = 9 output: "cab" explanation: there are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. you will find the 9th string = "cab" constraints: 1 <= n <= 10 1 <= k <= 100
are k workers who want to move n boxes from an old warehouse to a new one. you are given the two integers n and k, and a 2d integer array time of size k x 4 where time[i] = [lefttorighti, pickoldi, righttolefti, putnewi]. the warehouses are separated by a river and connected by a bridge. the old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. initially, all k workers are waiting on the left side of the bridge. to move the boxes, the ith worker (0-indexed) can : cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in lefttorighti minutes. pick a box from the old warehouse and return to the bridge in pickoldi minutes. different workers can pick up their boxes simultaneously. cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in righttolefti minutes. put the box in the new warehouse and return to the bridge in putnewi minutes. different workers can put their boxes simultaneously. a worker i is less efficient than a worker j if either condition is met: lefttorighti + righttolefti > lefttorightj + righttoleftj lefttorighti + righttolefti == lefttorightj + righttoleftj and i > j the following rules regulate the movement of the workers through the bridge : if a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge. if the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. if more than one worker is waiting on the right side, the one with the lowest efficiency crosses first. if the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. if more than one worker is waiting on the left side, the one with the lowest efficiency crosses first. return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse. example 1: input: n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]] output: 6 explanation: from 0 to 1: worker 2 crosses the bridge from the left bank to the right bank. from 1 to 2: worker 2 picks up a box from the old warehouse. from 2 to 6: worker 2 crosses the bridge from the right bank to the left bank. from 6 to 7: worker 2 puts a box at the new warehouse. the whole process ends after 7 minutes. we return 6 because the problem asks for the instance of time at which the last worker reaches the left bank. example 2: input: n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]] output: 50 explanation: from 0 to 10: worker 1 crosses the bridge from the left bank to the right bank. from 10 to 20: worker 1 picks up a box from the old warehouse. from 10 to 11: worker 0 crosses the bridge from the left bank to the right bank. from 11 to 20: worker 0 picks up a box from the old warehouse. from 20 to 30: worker 1 crosses the bridge from the right bank to the left bank. from 30 to 40: worker 1 puts a box at the new warehouse. from 30 to 31: worker 0 crosses the bridge from the right bank to the left bank. from 31 to 39: worker 0 puts a box at the new warehouse. from 39 to 40: worker 0 crosses the bridge from the left bank to the right bank. from 40 to 49: worker 0 picks up a box from the old warehouse. from 49 to 50: worker 0 crosses the bridge from the right bank to the left bank. from 50 to 58: worker 0 puts a box at the new warehouse. the whole process ends after 58 minutes. we return 50 because the problem asks for the instance of time at which the last worker reaches the left bank. constraints: 1 <= n, k <= 104 time.length == k time[i].length == 4 1 <= lefttorighti, pickoldi, righttolefti, putnewi <= 1000
string is good if there are no repeated characters. given a string s, return the number of good substrings of length three in s. note that if there are multiple occurrences of the same substring, every occurrence should be counted. a substring is a contiguous sequence of characters in a string. example 1: input: s = "xyzzaz" output: 1 explanation: there are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". the only good substring of length 3 is "xyz". example 2: input: s = "aababcabc" output: 4 explanation: there are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc". the good substrings are "abc", "bca", "cab", and "abc". constraints: 1 <= s.length <= 100 s consists of lowercase english letters.
an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. you may assume that each input would have exactly one solution, and you may not use the same element twice. you can return the answer in any order. example 1: input: nums = [2,7,11,15], target = 9 output: [0,1] explanation: because nums[0] + nums[1] == 9, we return [0, 1]. example 2: input: nums = [3,2,4], target = 6 output: [1,2] example 3: input: nums = [3,3], target = 6 output: [0,1] constraints: 2 <= nums.length <= 104 -109 <= nums[i] <= 109 -109 <= target <= 109 only one valid answer exists. follow-up: can you come up with an algorithm that is less than o(n2) time complexity?
variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. note the two characters may or may not be the same. given a string s consisting of lowercase english letters only, return the largest variance possible among all substrings of s. a substring is a contiguous sequence of characters within a string. example 1: input: s = "aababbb" output: 3 explanation: all possible variances along with their respective substrings are listed below: - variance 0 for substrings "a", "aa", "ab", "abab", "aababb", "ba", "b", "bb", and "bbb". - variance 1 for substrings "aab", "aba", "abb", "aabab", "ababb", "aababbb", and "bab". - variance 2 for substrings "aaba", "ababbb", "abbb", and "babb". - variance 3 for substring "babbb". since the largest possible variance is 3, we return it. example 2: input: s = "abcde" output: 0 explanation: no letter occurs more than once in s, so the variance of every substring is 0. constraints: 1 <= s.length <= 104 s consists of lowercase english letters.
schema table: delivery +-----------------------------+---------+ | column name | type | +-----------------------------+---------+ | delivery_id | int | | customer_id | int | | order_date | date | | customer_pref_delivery_date | date | +-----------------------------+---------+ delivery_id is the primary key of this table. the table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it). if the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled. the first order of a customer is the order with the earliest order date that the customer made. it is guaranteed that a customer has precisely one first order. write an sql query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places. the query result format is in the following example. example 1: input: delivery table: +-------------+-------------+------------+-----------------------------+ | delivery_id | customer_id | order_date | customer_pref_delivery_date | +-------------+-------------+------------+-----------------------------+ | 1 | 1 | 2019-08-01 | 2019-08-02 | | 2 | 2 | 2019-08-02 | 2019-08-02 | | 3 | 1 | 2019-08-11 | 2019-08-12 | | 4 | 3 | 2019-08-24 | 2019-08-24 | | 5 | 3 | 2019-08-21 | 2019-08-22 | | 6 | 2 | 2019-08-11 | 2019-08-13 | | 7 | 4 | 2019-08-09 | 2019-08-09 | +-------------+-------------+------------+-----------------------------+ output: +----------------------+ | immediate_percentage | +----------------------+ | 50.00 | +----------------------+ explanation: the customer id 1 has a first order with delivery id 1 and it is scheduled. the customer id 2 has a first order with delivery id 2 and it is immediate. the customer id 3 has a first order with delivery id 5 and it is scheduled. the customer id 4 has a first order with delivery id 7 and it is immediate. hence, half the customers have immediate first orders.
are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. all the scores are guaranteed to be unique. the athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. the placement of each athlete determines their rank: the 1st place athlete's rank is "gold medal". the 2nd place athlete's rank is "silver medal". the 3rd place athlete's rank is "bronze medal". for the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is "x"). return an array answer of size n where answer[i] is the rank of the ith athlete. example 1: input: score = [5,4,3,2,1] output: ["gold medal","silver medal","bronze medal","4","5"] explanation: the placements are [1st, 2nd, 3rd, 4th, 5th]. example 2: input: score = [10,3,8,9,4] output: ["gold medal","5","bronze medal","silver medal","4"] explanation: the placements are [1st, 5th, 3rd, 2nd, 4th]. constraints: n == score.length 1 <= n <= 104 0 <= score[i] <= 106 all the values in score are unique.
an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i. example 1: input: n = 2 output: [0,1,1] explanation: 0 --> 0 1 --> 1 2 --> 10 example 2: input: n = 5 output: [0,1,1,2,1,2] explanation: 0 --> 0 1 --> 1 2 --> 10 3 --> 11 4 --> 100 5 --> 101 constraints: 0 <= n <= 105 follow up: it is very easy to come up with a solution with a runtime of o(n log n). can you do it in linear time o(n) and possibly in a single pass? can you do it without using any built-in function (i.e., like __builtin_popcount in c++)?
are given an integer array cards of length 4. you have four cards, each containing a number in the range [1, 9]. you should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24. you are restricted with the following rules: the division operator '/' represents real division, not integer division. for example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12. every operation done is between two numbers. in particular, we cannot use '-' as a unary operator. for example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed. you cannot concatenate numbers together for example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid. return true if you can get such expression that evaluates to 24, and false otherwise. example 1: input: cards = [4,1,8,7] output: true explanation: (8-4) * (7-1) = 24 example 2: input: cards = [1,2,1,2] output: false constraints: cards.length == 4 1 <= cards[i] <= 9
a list of non-negative integers nums, arrange them such that they form the largest number and return it. since the result may be very large, so you need to return a string instead of an integer. example 1: input: nums = [10,2] output: "210" example 2: input: nums = [3,30,34,5,9] output: "9534330" constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 109
an array of integers nums, calculate the pivot index of this array. the pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. if the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. this also applies to the right edge of the array. return the leftmost pivot index. if no such index exists, return -1. example 1: input: nums = [1,7,3,6,5,6] output: 3 explanation: the pivot index is 3. left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 right sum = nums[4] + nums[5] = 5 + 6 = 11 example 2: input: nums = [1,2,3] output: -1 explanation: there is no index that satisfies the conditions in the problem statement. example 3: input: nums = [2,1,-1] output: 0 explanation: the pivot index is 0. left sum = 0 (no elements to the left of index 0) right sum = nums[1] + nums[2] = 1 + -1 = 0 constraints: 1 <= nums.length <= 104 -1000 <= nums[i] <= 1000 note: this question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/
an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array. return the positive integer k. if there is no such integer, return -1. example 1: input: nums = [-1,2,-3,3] output: 3 explanation: 3 is the only valid k we can find in the array. example 2: input: nums = [-1,10,6,7,-7,1] output: 7 explanation: both 1 and 7 have their corresponding negative values in the array. 7 has a larger value. example 3: input: nums = [-10,8,6,7,-2,-3] output: -1 explanation: there is no a single valid k, we return -1. constraints: 1 <= nums.length <= 1000 -1000 <= nums[i] <= 1000 nums[i] != 0
play the minesweeper game (wikipedia, online game)! you are given an m x n char matrix board representing the game board where: 'm' represents an unrevealed mine, 'e' represents an unrevealed empty square, 'b' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals), digit ('1' to '8') represents how many mines are adjacent to this revealed square, and 'x' represents a revealed mine. you are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('m' or 'e'). return the board after revealing this position according to the following rules: if a mine 'm' is revealed, then the game is over. you should change it to 'x'. if an empty square 'e' with no adjacent mines is revealed, then change it to a revealed blank 'b' and all of its adjacent unrevealed squares should be revealed recursively. if an empty square 'e' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines. return the board when no more squares will be revealed. example 1: input: board = [["e","e","e","e","e"],["e","e","m","e","e"],["e","e","e","e","e"],["e","e","e","e","e"]], click = [3,0] output: [["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]] example 2: input: board = [["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]], click = [1,2] output: [["b","1","e","1","b"],["b","1","x","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]] constraints: m == board.length n == board[i].length 1 <= m, n <= 50 board[i][j] is either 'm', 'e', 'b', or a digit from '1' to '8'. click.length == 2 0 <= clickr < m 0 <= clickc < n board[clickr][clickc] is either 'm' or 'e'.
a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi. find the smallest set of vertices from which all nodes in the graph are reachable. it's guaranteed that a unique solution exists. notice that you can return the vertices in any order. example 1: input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]] output: [0,3] explanation: it's not possible to reach all the nodes from a single vertex. from 0 we can reach [0,1,2,5]. from 3 we can reach [3,4,2,5]. so we output [0,3]. example 2: input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]] output: [0,2,3] explanation: notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. also any of these vertices can reach nodes 1 and 4. constraints: 2 <= n <= 10^5 1 <= edges.length <= min(10^5, n * (n - 1) / 2) edges[i].length == 2 0 <= fromi, toi < n all pairs (fromi, toi) are distinct.
is a stream of n (idkey, value) pairs arriving in an arbitrary order, where idkey is an integer between 1 and n and value is a string. no two pairs have the same id. design a stream that returns the values in increasing order of their ids by returning a chunk (list) of values after each insertion. the concatenation of all the chunks should result in a list of the sorted values. implement the orderedstream class: orderedstream(int n) constructs the stream to take n values. string[] insert(int idkey, string value) inserts the pair (idkey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order. example: input ["orderedstream", "insert", "insert", "insert", "insert", "insert"] [[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]] output [null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]] explanation // note that the values ordered by id is ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"]. orderedstream os = new orderedstream(5); os.insert(3, "ccccc"); // inserts (3, "ccccc"), returns []. os.insert(1, "aaaaa"); // inserts (1, "aaaaa"), returns ["aaaaa"]. os.insert(2, "bbbbb"); // inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"]. os.insert(5, "eeeee"); // inserts (5, "eeeee"), returns []. os.insert(4, "ddddd"); // inserts (4, "ddddd"), returns ["ddddd", "eeeee"]. // concatentating all the chunks returned: // [] + ["aaaaa"] + ["bbbbb", "ccccc"] + [] + ["ddddd", "eeeee"] = ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"] // the resulting order is the same as the order above. constraints: 1 <= n <= 1000 1 <= id <= n value.length == 5 value consists only of lowercase letters. each call to insert will have a unique id. exactly n calls will be made to insert.
a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle. example 1: input: n = 2, m = 3 output: 3 explanation: 3 squares are necessary to cover the rectangle. 2 (squares of 1x1) 1 (square of 2x2) example 2: input: n = 5, m = 8 output: 5 example 3: input: n = 11, m = 13 output: 6 constraints: 1 <= n, m <= 13
a string s of '(' , ')' and lowercase english characters. your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string. formally, a parentheses string is valid if and only if: it is the empty string, contains only lowercase characters, or it can be written as ab (a concatenated with b), where a and b are valid strings, or it can be written as (a), where a is a valid string. example 1: input: s = "lee(t(c)o)de)" output: "lee(t(c)o)de" explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted. example 2: input: s = "a)b(c)d" output: "ab(c)d" example 3: input: s = "))((" output: "" explanation: an empty string is also valid. constraints: 1 <= s.length <= 105 s[i] is either'(' , ')', or lowercase english letter.
two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. in other words, return true if one of s1's permutations is the substring of s2. example 1: input: s1 = "ab", s2 = "eidbaooo" output: true explanation: s2 contains one permutation of s1 ("ba"). example 2: input: s1 = "ab", s2 = "eidboaoo" output: false constraints: 1 <= s1.length, s2.length <= 104 s1 and s2 consist of lowercase english letters.
numerals are represented by seven different symbols: i, v, x, l, c, d and m. symbol value i 1 v 5 x 10 l 50 c 100 d 500 m 1000 for example, 2 is written as ii in roman numeral, just two ones added together. 12 is written as xii, which is simply x + ii. the number 27 is written as xxvii, which is xx + v + ii. roman numerals are usually written largest to smallest from left to right. however, the numeral for four is not iiii. instead, the number four is written as iv. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as ix. there are six instances where subtraction is used: i can be placed before v (5) and x (10) to make 4 and 9. x can be placed before l (50) and c (100) to make 40 and 90. c can be placed before d (500) and m (1000) to make 400 and 900. given a roman numeral, convert it to an integer. example 1: input: s = "iii" output: 3 explanation: iii = 3. example 2: input: s = "lviii" output: 58 explanation: l = 50, v= 5, iii = 3. example 3: input: s = "mcmxciv" output: 1994 explanation: m = 1000, cm = 900, xc = 90 and iv = 4. constraints: 1 <= s.length <= 15 s contains only the characters ('i', 'v', 'x', 'l', 'c', 'd', 'm'). it is guaranteed that s is a valid roman numeral in the range [1, 3999].
are several squares being dropped onto the x-axis of a 2d plane. you are given a 2d integer array positions where positions[i] = [lefti, sidelengthi] represents the ith square with a side length of sidelengthi that is dropped with its left edge aligned with x-coordinate lefti. each square is dropped one at a time from a height above any landed squares. it then falls downward (negative y direction) until it either lands on the top side of another square or on the x-axis. a square brushing the left/right side of another square does not count as landing on it. once it lands, it freezes in place and cannot be moved. after each square is dropped, you must record the height of the current tallest stack of squares. return an integer array ans where ans[i] represents the height described above after dropping the ith square. example 1: input: positions = [[1,2],[2,3],[6,1]] output: [2,5,5] explanation: after the first drop, the tallest stack is square 1 with a height of 2. after the second drop, the tallest stack is squares 1 and 2 with a height of 5. after the third drop, the tallest stack is still squares 1 and 2 with a height of 5. thus, we return an answer of [2, 5, 5]. example 2: input: positions = [[100,100],[200,100]] output: [100,100] explanation: after the first drop, the tallest stack is square 1 with a height of 100. after the second drop, the tallest stack is either square 1 or square 2, both with heights of 100. thus, we return an answer of [100, 100]. note that square 2 only brushes the right side of square 1, which does not count as landing on it. constraints: 1 <= positions.length <= 1000 1 <= lefti <= 108 1 <= sidelengthi <= 106
an integer columnnumber, return its corresponding column title as it appears in an excel sheet. for example: a -> 1 b -> 2 c -> 3 ... z -> 26 aa -> 27 ab -> 28 ... example 1: input: columnnumber = 1 output: "a" example 2: input: columnnumber = 28 output: "ab" example 3: input: columnnumber = 701 output: "zy" constraints: 1 <= columnnumber <= 231 - 1
a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise. a substring is a contiguous sequence of characters within a string. example 1: input: s = "0110", n = 3 output: true example 2: input: s = "0110", n = 4 output: false constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'. 1 <= n <= 109
are given an integer array nums. the range of a subarray of nums is the difference between the largest and smallest element in the subarray. return the sum of all subarray ranges of nums. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,2,3] output: 4 explanation: the 6 subarrays of nums are the following: [1], range = largest - smallest = 1 - 1 = 0 [2], range = 2 - 2 = 0 [3], range = 3 - 3 = 0 [1,2], range = 2 - 1 = 1 [2,3], range = 3 - 2 = 1 [1,2,3], range = 3 - 1 = 2 so the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4. example 2: input: nums = [1,3,3] output: 4 explanation: the 6 subarrays of nums are the following: [1], range = largest - smallest = 1 - 1 = 0 [3], range = 3 - 3 = 0 [3], range = 3 - 3 = 0 [1,3], range = 3 - 1 = 2 [3,3], range = 3 - 3 = 0 [1,3,3], range = 3 - 1 = 2 so the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4. example 3: input: nums = [4,-2,-3,4,1] output: 59 explanation: the sum of all subarray ranges of nums is 59. constraints: 1 <= nums.length <= 1000 -109 <= nums[i] <= 109 follow-up: could you find a solution with o(n) time complexity?
a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. otherwise, return false. a string is said to be palindrome if it the same string when reversed. example 1: input: s = "abcbdd" output: true explanation: "abcbdd" = "a" + "bcb" + "dd", and all three substrings are palindromes. example 2: input: s = "bcbddxy" output: false explanation: s cannot be split into 3 palindromes. constraints: 3 <= s.length <= 2000 s consists only of lowercase english letters.
positive integer is magical if it is divisible by either a or b. given the three integers n, a, and b, return the nth magical number. since the answer may be very large, return it modulo 109 + 7. example 1: input: n = 1, a = 2, b = 3 output: 2 example 2: input: n = 4, a = 2, b = 3 output: 6 constraints: 1 <= n <= 109 2 <= a, b <= 4 * 104
are given a string s and an array of strings words. all the strings of words are of the same length. a concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated. for example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated substring because it is not the concatenation of any permutation of words. return the starting indices of all the concatenated substrings in s. you can return the answer in any order. example 1: input: s = "barfoothefoobarman", words = ["foo","bar"] output: [0,9] explanation: since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6. the substring starting at 0 is "barfoo". it is the concatenation of ["bar","foo"] which is a permutation of words. the substring starting at 9 is "foobar". it is the concatenation of ["foo","bar"] which is a permutation of words. the output order does not matter. returning [9,0] is fine too. example 2: input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"] output: [] explanation: since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16. there is no substring of length 16 is s that is equal to the concatenation of any permutation of words. we return an empty array. example 3: input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"] output: [6,9,12] explanation: since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9. the substring starting at 6 is "foobarthe". it is the concatenation of ["foo","bar","the"] which is a permutation of words. the substring starting at 9 is "barthefoo". it is the concatenation of ["bar","the","foo"] which is a permutation of words. the substring starting at 12 is "thefoobar". it is the concatenation of ["the","foo","bar"] which is a permutation of words. constraints: 1 <= s.length <= 104 1 <= words.length <= 5000 1 <= words[i].length <= 30 s and words[i] consist of lowercase english letters.
are given an undirected graph (the "original graph") with n nodes labeled from 0 to n - 1. you decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge. the graph is given as a 2d array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. note that cnti == 0 means you will not subdivide the edge. to subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. the new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi]. in this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxmoves or less. given the original graph and maxmoves, return the number of nodes that are reachable from node 0 in the new graph. example 1: input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxmoves = 6, n = 3 output: 13 explanation: the edge subdivisions are shown in the image above. the nodes that are reachable are highlighted in yellow. example 2: input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxmoves = 10, n = 4 output: 23 example 3: input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxmoves = 17, n = 5 output: 1 explanation: node 0 is disconnected from the rest of the graph, so only node 0 is reachable. constraints: 0 <= edges.length <= min(n * (n - 1) / 2, 104) edges[i].length == 3 0 <= ui < vi < n there are no multiple edges in the graph. 0 <= cnti <= 104 0 <= maxmoves <= 109 1 <= n <= 3000
a number container system that can do the following: insert or replace a number at the given index in the system. return the smallest index for the given number in the system. implement the numbercontainers class: numbercontainers() initializes the number container system. void change(int index, int number) fills the container at index with the number. if there is already a number at that index, replace it. int find(int number) returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system. example 1: input ["numbercontainers", "find", "change", "change", "change", "change", "find", "change", "find"] [[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]] output [null, -1, null, null, null, null, 1, null, 2] explanation numbercontainers nc = new numbercontainers(); nc.find(10); // there is no index that is filled with number 10. therefore, we return -1. nc.change(2, 10); // your container at index 2 will be filled with number 10. nc.change(1, 10); // your container at index 1 will be filled with number 10. nc.change(3, 10); // your container at index 3 will be filled with number 10. nc.change(5, 10); // your container at index 5 will be filled with number 10. nc.find(10); // number 10 is at the indices 1, 2, 3, and 5. since the smallest index that is filled with 10 is 1, we return 1. nc.change(1, 20); // your container at index 1 will be filled with number 20. note that index 1 was filled with 10 and then replaced with 20. nc.find(10); // number 10 is at the indices 2, 3, and 5. the smallest index that is filled with 10 is 2. therefore, we return 2. constraints: 1 <= index, number <= 109 at most 105 calls will be made in total to change and find.
leetcode store, there are n items to sell. each item has a price. however, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. you are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy. you are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer. return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. you are not allowed to buy more items than you want, even if that would lower the overall price. you could use any of the special offers as many times as you want. example 1: input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2] output: 14 explanation: there are two kinds of items, a and b. their prices are $2 and $5 respectively. in special offer 1, you can pay $5 for 3a and 0b in special offer 2, you can pay $10 for 1a and 2b. you need to buy 3a and 2b, so you may pay $10 for 1a and 2b (special offer #2), and $4 for 2a. example 2: input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1] output: 11 explanation: the price of a is $2, and $3 for b, $4 for c. you may pay $4 for 1a and 1b, and $9 for 2a ,2b and 1c. you need to buy 1a ,2b and 1c, so you may pay $4 for 1a and 1b (special offer #1), and $3 for 1b, $4 for 1c. you cannot add more items, though only $9 for 2a ,2b and 1c. constraints: n == price.length == needs.length 1 <= n <= 6 0 <= price[i], needs[i] <= 10 1 <= special.length <= 100 special[i].length == n + 1 0 <= special[i][j] <= 50
schema table: signups +----------------+----------+ | column name | type | +----------------+----------+ | user_id | int | | time_stamp | datetime | +----------------+----------+ user_id is the primary key for this table. each row contains information about the signup time for the user with id user_id. table: confirmations +----------------+----------+ | column name | type | +----------------+----------+ | user_id | int | | time_stamp | datetime | | action | enum | +----------------+----------+ (user_id, time_stamp) is the primary key for this table. user_id is a foreign key with a reference to the signups table. action is an enum of the type ('confirmed', 'timeout') each row of this table indicates that the user with id user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout'). the confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. the confirmation rate of a user that did not request any confirmation messages is 0. round the confirmation rate to two decimal places. write an sql query to find the confirmation rate of each user. return the result table in any order. the query result format is in the following example. example 1: input: signups table: +---------+---------------------+ | user_id | time_stamp | +---------+---------------------+ | 3 | 2020-03-21 10:16:13 | | 7 | 2020-01-04 13:57:59 | | 2 | 2020-07-29 23:09:44 | | 6 | 2020-12-09 10:39:37 | +---------+---------------------+ confirmations table: +---------+---------------------+-----------+ | user_id | time_stamp | action | +---------+---------------------+-----------+ | 3 | 2021-01-06 03:30:46 | timeout | | 3 | 2021-07-14 14:00:00 | timeout | | 7 | 2021-06-12 11:57:29 | confirmed | | 7 | 2021-06-13 12:58:28 | confirmed | | 7 | 2021-06-14 13:59:27 | confirmed | | 2 | 2021-01-22 00:00:00 | confirmed | | 2 | 2021-02-28 23:59:59 | timeout | +---------+---------------------+-----------+ output: +---------+-------------------+ | user_id | confirmation_rate | +---------+-------------------+ | 6 | 0.00 | | 3 | 0.00 | | 7 | 1.00 | | 2 | 0.50 | +---------+-------------------+ explanation: user 6 did not request any confirmation messages. the confirmation rate is 0. user 3 made 2 requests and both timed out. the confirmation rate is 0. user 7 made 3 requests and all were confirmed. the confirmation rate is 1. user 2 made 2 requests where one was confirmed and the other timed out. the confirmation rate is 1 / 2 = 0.5.
array is squareful if the sum of every pair of adjacent elements is a perfect square. given an integer array nums, return the number of permutations of nums that are squareful. two permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i]. example 1: input: nums = [1,17,8] output: 2 explanation: [1,8,17] and [17,8,1] are the valid permutations. example 2: input: nums = [2,2,2] output: 1 constraints: 1 <= nums.length <= 12 0 <= nums[i] <= 109
an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements. return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows a, b are from arr a < b b - a equals to the minimum absolute difference of any two elements in arr example 1: input: arr = [4,2,1,3] output: [[1,2],[2,3],[3,4]] explanation: the minimum absolute difference is 1. list all pairs with difference equal to 1 in ascending order. example 2: input: arr = [1,3,6,10,15] output: [[1,3]] example 3: input: arr = [3,8,-10,23,19,-4,-14,27] output: [[-14,-10],[19,23],[23,27]] constraints: 2 <= arr.length <= 105 -106 <= arr[i] <= 106
and bob continue their games with piles of stones. there are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stonevalue. alice and bob take turns, with alice starting first. on each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row. the score of each player is the sum of the values of the stones taken. the score of each player is 0 initially. the objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. the game continues until all the stones have been taken. assume alice and bob play optimally. return "alice" if alice will win, "bob" if bob will win, or "tie" if they will end the game with the same score. example 1: input: values = [1,2,3,7] output: "bob" explanation: alice will always lose. her best move will be to take three piles and the score become 6. now the score of bob is 7 and bob wins. example 2: input: values = [1,2,3,-9] output: "alice" explanation: alice must choose all the three piles at the first move to win and leave bob with negative score. if alice chooses one pile her score will be 1 and the next move bob's score becomes 5. in the next move, alice will take the pile with value = -9 and lose. if alice chooses two piles her score will be 3 and the next move bob's score becomes 3. in the next move, alice will take the pile with value = -9 and also lose. remember that both play optimally so here alice will choose the scenario that makes her win. example 3: input: values = [1,2,3,6] output: "tie" explanation: alice cannot win this game. she can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose. constraints: 1 <= stonevalue.length <= 5 * 104 -1000 <= stonevalue[i] <= 1000
are n cities connected by some number of flights. you are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei. you are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. if there is no such route, return -1. example 1: input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1 output: 700 explanation: the graph is shown above. the optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700. note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops. example 2: input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 output: 200 explanation: the graph is shown above. the optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200. example 3: input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 output: 500 explanation: the graph is shown above. the optimal path with no stops from city 0 to 2 is marked in red and has cost 500. constraints: 1 <= n <= 100 0 <= flights.length <= (n * (n - 1) / 2) flights[i].length == 3 0 <= fromi, toi < n fromi != toi 1 <= pricei <= 104 there will not be any multiple flights between two cities. 0 <= src, dst, k < n src != dst
are given a 0-indexed integer array nums. the effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]). the xor-beauty of the array is the xoring of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n. return the xor-beauty of nums. note that: val1 | val2 is bitwise or of val1 and val2. val1 & val2 is bitwise and of val1 and val2. example 1: input: nums = [1,4] output: 5 explanation: the triplets and their corresponding effective values are listed below: - (0,0,0) with effective value ((1 | 1) & 1) = 1 - (0,0,1) with effective value ((1 | 1) & 4) = 0 - (0,1,0) with effective value ((1 | 4) & 1) = 1 - (0,1,1) with effective value ((1 | 4) & 4) = 4 - (1,0,0) with effective value ((4 | 1) & 1) = 1 - (1,0,1) with effective value ((4 | 1) & 4) = 4 - (1,1,0) with effective value ((4 | 4) & 1) = 0 - (1,1,1) with effective value ((4 | 4) & 4) = 4 xor-beauty of array will be bitwise xor of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5. example 2: input: nums = [15,45,20,2,34,35,5,44,32,30] output: 34 explanation: the xor-beauty of the given array is 34. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
an integer array nums and an integer k, return the k most frequent elements. you may return the answer in any order. example 1: input: nums = [1,1,1,2,2,3], k = 2 output: [1,2] example 2: input: nums = [1], k = 1 output: [1] constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104 k is in the range [1, the number of unique elements in the array]. it is guaranteed that the answer is unique. follow up: your algorithm's time complexity must be better than o(n log n), where n is the array's size.
is a safe protected by a password. the password is a sequence of n digits where each digit can be in the range [0, k - 1]. the safe has a peculiar way of checking the password. when you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit. for example, the correct password is "345" and you enter in "012345": after typing 0, the most recent 3 digits is "0", which is incorrect. after typing 1, the most recent 3 digits is "01", which is incorrect. after typing 2, the most recent 3 digits is "012", which is incorrect. after typing 3, the most recent 3 digits is "123", which is incorrect. after typing 4, the most recent 3 digits is "234", which is incorrect. after typing 5, the most recent 3 digits is "345", which is correct and the safe unlocks. return any string of minimum length that will unlock the safe at some point of entering it. example 1: input: n = 1, k = 2 output: "10" explanation: the password is a single digit, so enter each digit. "01" would also unlock the safe. example 2: input: n = 2, k = 2 output: "01100" explanation: for each possible password: - "00" is typed in starting from the 4th digit. - "01" is typed in starting from the 1st digit. - "10" is typed in starting from the 3rd digit. - "11" is typed in starting from the 2nd digit. thus "01100" will unlock the safe. "10011", and "11001" would also unlock the safe. constraints: 1 <= n <= 4 1 <= k <= 10 1 <= kn <= 4096
an 8 x 8 chessboard, there is exactly one white rook 'r' and some number of white bishops 'b', black pawns 'p', and empty squares '.'. when the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. a rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. the number of available captures for the white rook is the number of pawns that the rook is attacking. return the number of available captures for the white rook. example 1: input: board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","r",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]] output: 3 explanation: in this example, the rook is attacking all the pawns. example 2: input: board = [[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","b","p","p",".","."],[".","p","b","r","b","p",".","."],[".","p","p","b","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]] output: 0 explanation: the bishops are blocking the rook from attacking any of the pawns. example 3: input: board = [[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","r",".","p","b","."],[".",".",".",".",".",".",".","."],[".",".",".","b",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]] output: 3 explanation: the rook is attacking the pawns at positions b5, d6, and f5. constraints: board.length == 8 board[i].length == 8 board[i][j] is either 'r', '.', 'b', or 'p' there is exactly one cell with board[i][j] == 'r'
an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where: '?' matches any single character. '*' matches any sequence of characters (including the empty sequence). the matching should cover the entire input string (not partial). example 1: input: s = "aa", p = "a" output: false explanation: "a" does not match the entire string "aa". example 2: input: s = "aa", p = "*" output: true explanation: '*' matches any sequence. example 3: input: s = "cb", p = "?a" output: false explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'. constraints: 0 <= s.length, p.length <= 2000 s contains only lowercase english letters. p contains only lowercase english letters, '?' or '*'.
is a bag that consists of items, each item has a number 1, 0, or -1 written on it. you are given four non-negative integers numones, numzeros, numnegones, and k. the bag initially contains: numones items with 1s written on them. numzeroes items with 0s written on them. numnegones items with -1s written on them. we want to pick exactly k items among the available items. return the maximum possible sum of numbers written on the items. example 1: input: numones = 3, numzeros = 2, numnegones = 0, k = 2 output: 2 explanation: we have a bag of items with numbers written on them {1, 1, 1, 0, 0}. we take 2 items with 1 written on them and get a sum in a total of 2. it can be proven that 2 is the maximum possible sum. example 2: input: numones = 3, numzeros = 2, numnegones = 0, k = 4 output: 3 explanation: we have a bag of items with numbers written on them {1, 1, 1, 0, 0}. we take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3. it can be proven that 3 is the maximum possible sum. constraints: 0 <= numones, numzeros, numnegones <= 50 0 <= k <= numones + numzeros + numnegones
are given an integer array cost where cost[i] is the cost of ith step on a staircase. once you pay the cost, you can either climb one or two steps. you can either start from the step with index 0, or the step with index 1. return the minimum cost to reach the top of the floor. example 1: input: cost = [10,15,20] output: 15 explanation: you will start at index 1. - pay 15 and climb two steps to reach the top. the total cost is 15. example 2: input: cost = [1,100,1,1,1,100,1,1,100,1] output: 6 explanation: you will start at index 0. - pay 1 and climb two steps to reach index 2. - pay 1 and climb two steps to reach index 4. - pay 1 and climb two steps to reach index 6. - pay 1 and climb one step to reach index 7. - pay 1 and climb two steps to reach index 9. - pay 1 and climb one step to reach the top. the total cost is 6. constraints: 2 <= cost.length <= 1000 0 <= cost[i] <= 999
are given a positive integer num consisting only of digits 6 and 9. return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6). example 1: input: num = 9669 output: 9969 explanation: changing the first digit results in 6669. changing the second digit results in 9969. changing the third digit results in 9699. changing the fourth digit results in 9666. the maximum number is 9969. example 2: input: num = 9996 output: 9999 explanation: changing the last digit 6 to 9 results in the maximum number. example 3: input: num = 9999 output: 9999 explanation: it is better not to apply any change. constraints: 1 <= num <= 104 num consists of only 6 and 9 digits.
are some stones in different positions on the x-axis. you are given an integer array stones, the positions of the stones. call a stone an endpoint stone if it has the smallest or largest position. in one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone. in particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone. the game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play. example 1: input: stones = [7,4,9] output: [1,2] explanation: we can move 4 -> 8 for one move to finish the game. or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game. example 2: input: stones = [6,5,4,3,10] output: [2,3] explanation: we can move 3 -> 8 then 10 -> 7 to finish the game. or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game. notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move. constraints: 3 <= stones.length <= 104 1 <= stones[i] <= 109 all the values of stones are unique.
numerals are represented by seven different symbols: i, v, x, l, c, d and m. symbol value i 1 v 5 x 10 l 50 c 100 d 500 m 1000 for example, 2 is written as ii in roman numeral, just two one's added together. 12 is written as xii, which is simply x + ii. the number 27 is written as xxvii, which is xx + v + ii. roman numerals are usually written largest to smallest from left to right. however, the numeral for four is not iiii. instead, the number four is written as iv. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as ix. there are six instances where subtraction is used: i can be placed before v (5) and x (10) to make 4 and 9. x can be placed before l (50) and c (100) to make 40 and 90. c can be placed before d (500) and m (1000) to make 400 and 900. given an integer, convert it to a roman numeral. example 1: input: num = 3 output: "iii" explanation: 3 is represented as 3 ones. example 2: input: num = 58 output: "lviii" explanation: l = 50, v = 5, iii = 3. example 3: input: num = 1994 output: "mcmxciv" explanation: m = 1000, cm = 900, xc = 90 and iv = 4. constraints: 1 <= num <= 3999
are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. there exists another array, nums3, which contains the bitwise xor of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once). return the bitwise xor of all integers in nums3. example 1: input: nums1 = [2,1,3], nums2 = [10,2,5,0] output: 13 explanation: a possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3]. the bitwise xor of all these numbers is 13, so we return 13. example 2: input: nums1 = [1,2], nums2 = [3,4] output: 0 explanation: all possible pairs of bitwise xors are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0], and nums1[1] ^ nums2[1]. thus, one possible nums3 array is [2,5,1,6]. 2 ^ 5 ^ 1 ^ 6 = 0, so we return 0. constraints: 1 <= nums1.length, nums2.length <= 105 0 <= nums1[i], nums2[j] <= 109
an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k. a subarray is a contiguous part of an array. example 1: input: nums = [4,5,0,-2,-3,1], k = 5 output: 7 explanation: there are 7 subarrays with a sum divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] example 2: input: nums = [5], k = 9 output: 0 constraints: 1 <= nums.length <= 3 * 104 -104 <= nums[i] <= 104 2 <= k <= 104
can use run-length encoding (i.e., rle) to encode a sequence of integers. in a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence. for example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid rle of arr. given a run-length encoded array, design an iterator that iterates through it. implement the rleiterator class: rleiterator(int[] encoded) initializes the object with the encoded array encoded. int next(int n) exhausts the next n elements and returns the last element exhausted in this way. if there is no element left to exhaust, return -1 instead. example 1: input ["rleiterator", "next", "next", "next", "next"] [[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]] output [null, 8, 8, 5, -1] explanation rleiterator rleiterator = new rleiterator([3, 8, 0, 9, 2, 5]); // this maps to the sequence [8,8,8,5,5]. rleiterator.next(2); // exhausts 2 terms of the sequence, returning 8. the remaining sequence is now [8, 5, 5]. rleiterator.next(1); // exhausts 1 term of the sequence, returning 8. the remaining sequence is now [5, 5]. rleiterator.next(1); // exhausts 1 term of the sequence, returning 5. the remaining sequence is now [5]. rleiterator.next(2); // exhausts 2 terms, returning -1. this is because the first term exhausted was 5, but the second term did not exist. since the last term exhausted does not exist, we return -1. constraints: 2 <= encoding.length <= 1000 encoding.length is even. 0 <= encoding[i] <= 109 1 <= n <= 109 at most 1000 calls will be made to next.
are given an array of words where each word consists of lowercase english letters. worda is a predecessor of wordb if and only if we can insert exactly one letter anywhere in worda without changing the order of the other characters to make it equal to wordb. for example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad". a word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. a single word is trivially a word chain with k == 1. return the length of the longest possible word chain with words chosen from the given list of words. example 1: input: words = ["a","b","ba","bca","bda","bdca"] output: 4 explanation: one of the longest word chains is ["a","ba","bda","bdca"]. example 2: input: words = ["xbc","pcxbcf","xb","cxbc","pcxbc"] output: 5 explanation: all the words can be put in a word chain ["xb", "xbc", "cxbc", "pcxbc", "pcxbcf"]. example 3: input: words = ["abcd","dbqca"] output: 1 explanation: the trivial word chain ["abcd"] is one of the longest word chains. ["abcd","dbqca"] is not a valid word chain because the ordering of the letters is changed. constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 16 words[i] only consists of lowercase english letters.
are given a floating-point number hour, representing the amount of time you have to reach the office. to commute to the office, you must take n trains in sequential order. you are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride. each train can only depart at an integer hour, so you may need to wait in between each train ride. for example, if the 1st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2nd train ride at the 2 hour mark. return the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time. tests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point. example 1: input: dist = [1,3,2], hour = 6 output: 1 explanation: at speed 1: - the first train ride takes 1/1 = 1 hour. - since we are already at an integer hour, we depart immediately at the 1 hour mark. the second train takes 3/1 = 3 hours. - since we are already at an integer hour, we depart immediately at the 4 hour mark. the third train takes 2/1 = 2 hours. - you will arrive at exactly the 6 hour mark. example 2: input: dist = [1,3,2], hour = 2.7 output: 3 explanation: at speed 3: - the first train ride takes 1/3 = 0.33333 hours. - since we are not at an integer hour, we wait until the 1 hour mark to depart. the second train ride takes 3/3 = 1 hour. - since we are already at an integer hour, we depart immediately at the 2 hour mark. the third train takes 2/3 = 0.66667 hours. - you will arrive at the 2.66667 hour mark. example 3: input: dist = [1,3,2], hour = 1.9 output: -1 explanation: it is impossible because the earliest the third train can depart is at the 2 hour mark. constraints: n == dist.length 1 <= n <= 105 1 <= dist[i] <= 105 1 <= hour <= 109 there will be at most two digits after the decimal point in hour.
a binary string s, return the number of substrings with all characters 1's. since the answer may be too large, return it modulo 109 + 7. example 1: input: s = "0110111" output: 9 explanation: there are 9 substring in total with only 1's characters. "1" -> 5 times. "11" -> 3 times. "111" -> 1 time. example 2: input: s = "101" output: 2 explanation: substring "1" is shown 2 times in s. example 3: input: s = "111111" output: 21 explanation: each substring contains only 1's characters. constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.
the root of a binary search tree (bst), return the minimum difference between the values of any two different nodes in the tree. example 1: input: root = [4,2,6,1,3] output: 1 example 2: input: root = [1,0,48,null,null,12,49] output: 1 constraints: the number of nodes in the tree is in the range [2, 100]. 0 <= node.val <= 105 note: this question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/
are given a binary string s. you are allowed to perform two types of operations on the string in any sequence: type-1: remove the character at the start of the string s and append it to the end of the string. type-2: pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa. return the minimum number of type-2 operations you need to perform such that s becomes alternating. the string is called alternating if no two adjacent characters are equal. for example, the strings "010" and "1010" are alternating, while the string "0100" is not. example 1: input: s = "111000" output: 2 explanation: use the first operation two times to make s = "100011". then, use the second operation on the third and sixth elements to make s = "101010". example 2: input: s = "010" output: 0 explanation: the string is already alternating. example 3: input: s = "1110" output: 1 explanation: use the second operation on the second element to make s = "1010". constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.
car travels from a starting position to a destination which is target miles east of the starting position. there are gas stations along the way. the gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas. the car starts with an infinite tank of gas, which initially has startfuel liters of fuel in it. it uses one liter of gas per one mile that it drives. when the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car. return the minimum number of refueling stops the car must make in order to reach its destination. if it cannot reach the destination, return -1. note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. if the car reaches the destination with 0 fuel left, it is still considered to have arrived. example 1: input: target = 1, startfuel = 1, stations = [] output: 0 explanation: we can reach the target without refueling. example 2: input: target = 100, startfuel = 1, stations = [[10,100]] output: -1 explanation: we can not reach the target (or even the first gas station). example 3: input: target = 100, startfuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]] output: 2 explanation: we start with 10 liters of fuel. we drive to position 10, expending 10 liters of fuel. we refuel from 0 liters to 60 liters of gas. then, we drive from position 10 to position 60 (expending 50 liters of fuel), and refuel from 10 liters to 50 liters of gas. we then drive to and reach the target. we made 2 refueling stops along the way, so we return 2. constraints: 1 <= target, startfuel <= 109 0 <= stations.length <= 500 1 <= positioni < positioni+1 < target 1 <= fueli < 109
are given the root of a binary search tree (bst), where the values of exactly two nodes of the tree were swapped by mistake. recover the tree without changing its structure. example 1: input: root = [1,3,null,null,2] output: [3,1,null,null,2] explanation: 3 cannot be a left child of 1 because 3 > 1. swapping 1 and 3 makes the bst valid. example 2: input: root = [3,1,4,null,null,2] output: [2,1,4,null,null,3] explanation: 2 cannot be in the right subtree of 3 because 2 < 3. swapping 2 and 3 makes the bst valid. constraints: the number of nodes in the tree is in the range [2, 1000]. -231 <= node.val <= 231 - 1 follow up: a solution using o(n) space is pretty straight-forward. could you devise a constant o(1) space solution?
two strings a and b, return the length of the longest uncommon subsequence between a and b. if the longest uncommon subsequence does not exist, return -1. an uncommon subsequence between two strings is a string that is a subsequence of one but not the other. a subsequence of a string s is a string that can be obtained after deleting any number of characters from s. for example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string). example 1: input: a = "aba", b = "cdc" output: 3 explanation: one longest uncommon subsequence is "aba" because "aba" is a subsequence of "aba" but not "cdc". note that "cdc" is also a longest uncommon subsequence. example 2: input: a = "aaa", b = "bbb" output: 3 explanation: the longest uncommon subsequences are "aaa" and "bbb". example 3: input: a = "aaa", b = "aaa" output: -1 explanation: every subsequence of string a is also a subsequence of string b. similarly, every subsequence of string b is also a subsequence of string a. constraints: 1 <= a.length, b.length <= 100 a and b consist of lower-case english letters.
an integer means to reverse all its digits. for example, reversing 2021 gives 1202. reversing 12300 gives 321 as the leading zeros are not retained. given an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. return true if reversed2 equals num. otherwise return false. example 1: input: num = 526 output: true explanation: reverse num to get 625, then reverse 625 to get 526, which equals num. example 2: input: num = 1800 output: false explanation: reverse num to get 81, then reverse 81 to get 18, which does not equal num. example 3: input: num = 0 output: true explanation: reverse num to get 0, then reverse 0 to get 0, which equals num. constraints: 0 <= num <= 106
an integer array nums, find three numbers whose product is maximum and return the maximum product. example 1: input: nums = [1,2,3] output: 6 example 2: input: nums = [1,2,3,4] output: 24 example 3: input: nums = [-1,-2,-3] output: -6 constraints: 3 <= nums.length <= 104 -1000 <= nums[i] <= 1000
an integer x, return true if x is a palindrome , and false otherwise. example 1: input: x = 121 output: true explanation: 121 reads as 121 from left to right and from right to left. example 2: input: x = -121 output: false explanation: from left to right, it reads -121. from right to left, it becomes 121-. therefore it is not a palindrome. example 3: input: x = 10 output: false explanation: reads 01 from right to left. therefore it is not a palindrome. constraints: -231 <= x <= 231 - 1 follow up: could you solve it without converting the integer to a string?
an integer array nums, return the number of longest increasing subsequences. notice that the sequence has to be strictly increasing. example 1: input: nums = [1,3,5,4,7] output: 2 explanation: the two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. example 2: input: nums = [2,2,2,2,2] output: 5 explanation: the length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5. constraints: 1 <= nums.length <= 2000 -106 <= nums[i] <= 106
are given an integer array nums consisting of n elements, and an integer k. find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. any answer with a calculation error less than 10-5 will be accepted. example 1: input: nums = [1,12,-5,-6,50,3], k = 4 output: 12.75000 explanation: maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75 example 2: input: nums = [5], k = 1 output: 5.00000 constraints: n == nums.length 1 <= k <= n <= 105 -104 <= nums[i] <= 104
schema table: person +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | email | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table contains an email. the emails will not contain uppercase letters. write an sql query to report all the duplicate emails. note that it's guaranteed that the email field is not null. return the result table in any order. the query result format is in the following example. example 1: input: person table: +----+---------+ | id | email | +----+---------+ | 1 | a@b.com | | 2 | c@d.com | | 3 | a@b.com | +----+---------+ output: +---------+ | email | +---------+ | a@b.com | +---------+ explanation: a@b.com is repeated two times.
are given a string s (0-indexed). you are asked to perform the following operation on s until you get a sorted string: find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1]. find the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive. swap the two characters at indices i - 1 and j. reverse the suffix starting at index i. return the number of operations needed to make the string sorted. since the answer can be too large, return it modulo 109 + 7. example 1: input: s = "cba" output: 5 explanation: the simulation goes as follows: operation 1: i=2, j=2. swap s[1] and s[2] to get s="cab", then reverse the suffix starting at 2. now, s="cab". operation 2: i=1, j=2. swap s[0] and s[2] to get s="bac", then reverse the suffix starting at 1. now, s="bca". operation 3: i=2, j=2. swap s[1] and s[2] to get s="bac", then reverse the suffix starting at 2. now, s="bac". operation 4: i=1, j=1. swap s[0] and s[1] to get s="abc", then reverse the suffix starting at 1. now, s="acb". operation 5: i=2, j=2. swap s[1] and s[2] to get s="abc", then reverse the suffix starting at 2. now, s="abc". example 2: input: s = "aabaa" output: 2 explanation: the simulation goes as follows: operation 1: i=3, j=4. swap s[2] and s[4] to get s="aaaab", then reverse the substring starting at 3. now, s="aaaba". operation 2: i=4, j=4. swap s[3] and s[4] to get s="aaaab", then reverse the substring starting at 4. now, s="aaaab". constraints: 1 <= s.length <= 3000 s consists only of lowercase english letters.
are given two 0-indexed strings s and target. you can take some letters from s and rearrange them to form new strings. return the maximum number of copies of target that can be formed by taking letters from s and rearranging them. example 1: input: s = "ilovecodingonleetcode", target = "code" output: 2 explanation: for the first copy of "code", take the letters at indices 4, 5, 6, and 7. for the second copy of "code", take the letters at indices 17, 18, 19, and 20. the strings that are formed are "ecod" and "code" which can both be rearranged into "code". we can make at most two copies of "code", so we return 2. example 2: input: s = "abcba", target = "abc" output: 1 explanation: we can make one copy of "abc" by taking the letters at indices 0, 1, and 2. we can make at most one copy of "abc", so we return 1. note that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of "abc". example 3: input: s = "abbaccaddaeea", target = "aaaaa" output: 1 explanation: we can make one copy of "aaaaa" by taking the letters at indices 0, 3, 6, 9, and 12. we can make at most one copy of "aaaaa", so we return 1. constraints: 1 <= s.length <= 100 1 <= target.length <= 10 s and target consist of lowercase english letters.
are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. in each round, you can complete either 2 or 3 tasks of the same difficulty level. return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks. example 1: input: tasks = [2,2,3,3,2,4,4,4,4,4] output: 4 explanation: to complete all the tasks, a possible plan is: - in the first round, you complete 3 tasks of difficulty level 2. - in the second round, you complete 2 tasks of difficulty level 3. - in the third round, you complete 3 tasks of difficulty level 4. - in the fourth round, you complete 2 tasks of difficulty level 4. it can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4. example 2: input: tasks = [2,3,3] output: -1 explanation: there is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. hence, you cannot complete all the tasks, and the answer is -1. constraints: 1 <= tasks.length <= 105 1 <= tasks[i] <= 109
are n cars going to the same destination along a one-lane road. the destination is target miles away. you are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour). a car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. the faster car will slow down to match the slower car's speed. the distance between these two cars is ignored (i.e., they are assumed to have the same position). a car fleet is some non-empty set of cars driving at the same position and same speed. note that a single car is also a car fleet. if a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet. return the number of car fleets that will arrive at the destination. example 1: input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] output: 3 explanation: the cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. the car starting at 0 does not catch up to any other car, so it is a fleet by itself. the cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. the fleet moves at speed 1 until it reaches target. note that no other cars meet these fleets before the destination, so the answer is 3. example 2: input: target = 10, position = [3], speed = [3] output: 1 explanation: there is only one car, hence there is only one fleet. example 3: input: target = 100, position = [0,2,4], speed = [4,2,1] output: 1 explanation: the cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. the fleet moves at speed 2. then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. the fleet moves at speed 1 until it reaches target. constraints: n == position.length == speed.length 1 <= n <= 105 0 < target <= 106 0 <= position[i] < target all the values of position are unique. 0 < speed[i] <= 106
the following details of a matrix with n columns and 2 rows : the matrix is a binary matrix, which means each element in the matrix can be 0 or 1. the sum of elements of the 0-th(upper) row is given as upper. the sum of elements of the 1-st(lower) row is given as lower. the sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n. your task is to reconstruct the matrix with upper, lower and colsum. return it as a 2-d integer array. if there are more than one valid solution, any of them will be accepted. if no valid solution exists, return an empty 2-d array. example 1: input: upper = 2, lower = 1, colsum = [1,1,1] output: [[1,1,0],[0,0,1]] explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers. example 2: input: upper = 2, lower = 3, colsum = [2,2,1,1] output: [] example 3: input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1] output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]] constraints: 1 <= colsum.length <= 10^5 0 <= upper, lower <= colsum.length 0 <= colsum[i] <= 2
are given two 0-indexed strings word1 and word2. a move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j]. return true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. return false otherwise. example 1: input: word1 = "ac", word2 = "b" output: false explanation: any pair of swaps would yield two distinct characters in the first string, and one in the second string. example 2: input: word1 = "abcc", word2 = "aab" output: true explanation: we swap index 2 of the first string with index 0 of the second string. the resulting strings are word1 = "abac" and word2 = "cab", which both have 3 distinct characters. example 3: input: word1 = "abcde", word2 = "fghij" output: true explanation: both resulting strings will have 5 distinct characters, regardless of which indices we swap. constraints: 1 <= word1.length, word2.length <= 105 word1 and word2 consist of only lowercase english letters.
are given a 0-indexed integer array nums. initially, all of the indices are unmarked. you are allowed to make this operation any number of times: pick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j. return the maximum possible number of marked indices in nums using the above operation any number of times. example 1: input: nums = [3,5,2,4] output: 2 explanation: in the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. then mark index 2 and 1. it can be shown that there's no other valid operation so the answer is 2. example 2: input: nums = [9,2,5,4] output: 4 explanation: in the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. then mark index 3 and 0. in the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. then mark index 1 and 2. since there is no other operation, the answer is 4. example 3: input: nums = [7,6,8] output: 0 explanation: there is no valid operation to do, so the answer is 0. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 109
are given an m x n integer matrix grid, and three integers row, col, and color. each value in the grid represents the color of the grid square at that location. two squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions. the border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column). you should color the border of the connected component that contains the square grid[row][col] with color. return the final grid. example 1: input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3 output: [[3,3],[3,2]] example 2: input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3 output: [[1,3,3],[2,3,3]] example 3: input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2 output: [[2,2,2],[2,1,2],[2,2,2]] constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j], color <= 1000 0 <= row < m 0 <= col < n
two integer arrays starttime and endtime and given an integer querytime. the ith student started doing their homework at the time starttime[i] and finished it at time endtime[i]. return the number of students doing their homework at time querytime. more formally, return the number of students where querytime lays in the interval [starttime[i], endtime[i]] inclusive. example 1: input: starttime = [1,2,3], endtime = [3,2,7], querytime = 4 output: 1 explanation: we have 3 students where: the first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4. the second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4. the third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4. example 2: input: starttime = [4], endtime = [4], querytime = 4 output: 1 explanation: the only student was doing their homework at the querytime. constraints: starttime.length == endtime.length 1 <= starttime.length <= 100 1 <= starttime[i] <= endtime[i] <= 1000 1 <= querytime <= 1000
are given two integer arrays, source and target, both of length n. you are also given an array allowedswaps where each allowedswaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. note that you can swap elements at a specific pair of indices multiple times and in any order. the hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed). return the minimum hamming distance of source and target after performing any amount of swap operations on array source. example 1: input: source = [1,2,3,4], target = [2,1,4,5], allowedswaps = [[0,1],[2,3]] output: 1 explanation: source can be transformed the following way: - swap indices 0 and 1: source = [2,1,3,4] - swap indices 2 and 3: source = [2,1,4,3] the hamming distance of source and target is 1 as they differ in 1 position: index 3. example 2: input: source = [1,2,3,4], target = [1,3,2,4], allowedswaps = [] output: 2 explanation: there are no allowed swaps. the hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2. example 3: input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedswaps = [[0,4],[4,2],[1,3],[1,4]] output: 0 constraints: n == source.length == target.length 1 <= n <= 105 1 <= source[i], target[i] <= 105 0 <= allowedswaps.length <= 105 allowedswaps[i].length == 2 0 <= ai, bi <= n - 1 ai != bi
school is trying to take an annual photo of all the students. the students are asked to stand in a single file line in non-decreasing order by height. let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line. you are given an integer array heights representing the current order that the students are standing in. each heights[i] is the height of the ith student in line (0-indexed). return the number of indices where heights[i] != expected[i]. example 1: input: heights = [1,1,4,2,1,3] output: 3 explanation: heights: [1,1,4,2,1,3] expected: [1,1,1,2,3,4] indices 2, 4, and 5 do not match. example 2: input: heights = [5,1,2,3,4] output: 5 explanation: heights: [5,1,2,3,4] expected: [1,2,3,4,5] all indices do not match. example 3: input: heights = [1,2,3,4,5] output: 0 explanation: heights: [1,2,3,4,5] expected: [1,2,3,4,5] all indices match. constraints: 1 <= heights.length <= 100 1 <= heights[i] <= 100
is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. you are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c. a city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. the skyline from each cardinal direction north, east, south, and west may be different. we are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). the height of a 0-height building can also be increased. however, increasing the height of a building should not affect the city's skyline from any cardinal direction. return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction. example 1: input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]] output: 35 explanation: the building heights are shown in the center of the above image. the skylines when viewed from each cardinal direction are drawn in red. the grid after increasing the height of buildings without affecting skylines is: gridnew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] example 2: input: grid = [[0,0,0],[0,0,0],[0,0,0]] output: 0 explanation: increasing the height of any building will result in the skyline changing. constraints: n == grid.length n == grid[r].length 2 <= n <= 50 0 <= grid[r][c] <= 100
an integer array nums and an integer k, return the number of good subarrays of nums. a good array is an array where the number of different integers in that array is exactly k. for example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3. a subarray is a contiguous part of an array. example 1: input: nums = [1,2,1,2,3], k = 2 output: 7 explanation: subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2] example 2: input: nums = [1,2,1,3,4], k = 3 output: 3 explanation: subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]. constraints: 1 <= nums.length <= 2 * 104 1 <= nums[i], k <= nums.length
an array of integers arr and an integer d. in one step you can jump from index i to index: i + x where: i + x < arr.length and 0 < x <= d. i - x where: i - x >= 0 and 0 < x <= d. in addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (more formally min(i, j) < k < max(i, j)). you can choose any index of the array and start jumping. return the maximum number of indices you can visit. notice that you can not jump outside of the array at any time. example 1: input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2 output: 4 explanation: you can start at index 10. you can jump 10 --> 8 --> 6 --> 7 as shown. note that if you start at index 6 you can only jump to index 7. you cannot jump to index 5 because 13 > 9. you cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9. similarly you cannot jump from index 3 to index 2 or index 1. example 2: input: arr = [3,3,3,3,3], d = 3 output: 1 explanation: you can start at any index. you always cannot jump to any index. example 3: input: arr = [7,6,5,4,3,2,1], d = 1 output: 7 explanation: start at index 0. you can visit all the indicies. constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 105 1 <= d <= arr.length
an array of strings words and a width maxwidth, format the text such that each line has exactly maxwidth characters and is fully (left and right) justified. you should pack your words in a greedy approach; that is, pack as many words as you can in each line. pad extra spaces ' ' when necessary so that each line has exactly maxwidth characters. extra spaces between words should be distributed as evenly as possible. if the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. for the last line of text, it should be left-justified, and no extra space is inserted between words. note: a word is defined as a character sequence consisting of non-space characters only. each word's length is guaranteed to be greater than 0 and not exceed maxwidth. the input array words contains at least one word. example 1: input: words = ["this", "is", "an", "example", "of", "text", "justification."], maxwidth = 16 output: [ "this is an", "example of text", "justification. " ] example 2: input: words = ["what","must","be","acknowledgment","shall","be"], maxwidth = 16 output: [ "what must be", "acknowledgment ", "shall be " ] explanation: note that the last line is "shall be " instead of "shall be", because the last line must be left-justified instead of fully-justified. note that the second line is also left-justified because it contains only one word. example 3: input: words = ["science","is","what","we","understand","well","enough","to","explain","to","a","computer.","art","is","everything","else","we","do"], maxwidth = 20 output: [ "science is what we", "understand well", "enough to explain to", "a computer. art is", "everything else we", "do " ] constraints: 1 <= words.length <= 300 1 <= words[i].length <= 20 words[i] consists of only english letters and symbols. 1 <= maxwidth <= 100 words[i].length <= maxwidth
are asked to cut off all the trees in a forest for a golf event. the forest is represented as an m x n matrix. in this matrix: 0 means the cell cannot be walked through. 1 represents an empty cell that can be walked through. a number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height. in one step, you can walk in any of the four directions: north, east, south, and west. if you are standing in a cell with a tree, you can choose whether to cut it off. you must cut off the trees in order from shortest to tallest. when you cut off a tree, the value at its cell becomes 1 (an empty cell). starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. if you cannot cut off all the trees, return -1. note: the input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off. example 1: input: forest = [[1,2,3],[0,0,4],[7,6,5]] output: 6 explanation: following the path above allows you to cut off the trees from shortest to tallest in 6 steps. example 2: input: forest = [[1,2,3],[0,0,0],[7,6,5]] output: -1 explanation: the trees in the bottom row cannot be accessed as the middle row is blocked. example 3: input: forest = [[2,3,4],[0,0,5],[8,7,6]] output: 6 explanation: you can follow the same path as example 1 to cut off all the trees. note that you can cut off the first tree at (0, 0) before making any steps. constraints: m == forest.length n == forest[i].length 1 <= m, n <= 50 0 <= forest[i][j] <= 109 heights of all trees are distinct.
an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. find the smallest divisor such that the result mentioned above is less than or equal to threshold. each result of the division is rounded to the nearest integer greater than or equal to that element. (for example: 7/3 = 3 and 10/2 = 5). the test cases are generated so that there will be an answer. example 1: input: nums = [1,2,5,9], threshold = 6 output: 5 explanation: we can get a sum to 17 (1+2+5+9) if the divisor is 1. if the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). example 2: input: nums = [44,22,33,11,1], threshold = 5 output: 44 constraints: 1 <= nums.length <= 5 * 104 1 <= nums[i] <= 106 nums.length <= threshold <= 106
are given two integer arrays nums1 and nums2. you are tasked to implement a data structure that supports queries of two types: add a positive integer to an element of a given index in the array nums2. count the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length). implement the findsumpairs class: findsumpairs(int[] nums1, int[] nums2) initializes the findsumpairs object with two integer arrays nums1 and nums2. void add(int index, int val) adds val to nums2[index], i.e., apply nums2[index] += val. int count(int tot) returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot. example 1: input ["findsumpairs", "count", "add", "count", "count", "add", "add", "count"] [[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]] output [null, 8, null, 2, 1, null, null, 11] explanation findsumpairs findsumpairs = new findsumpairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]); findsumpairs.count(7); // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4 findsumpairs.add(3, 2); // now nums2 = [1,4,5,4,5,4] findsumpairs.count(8); // return 2; pairs (5,2), (5,4) make 3 + 5 findsumpairs.count(4); // return 1; pair (5,0) makes 3 + 1 findsumpairs.add(0, 1); // now nums2 = [2,4,5,4,5,4] findsumpairs.add(1, 1); // now nums2 = [2,5,5,4,5,4] findsumpairs.count(7); // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4 constraints: 1 <= nums1.length <= 1000 1 <= nums2.length <= 105 1 <= nums1[i] <= 109 1 <= nums2[i] <= 105 0 <= index < nums2.length 1 <= val <= 105 1 <= tot <= 109 at most 1000 calls are made to add and count each.
are given two strings order and s. all the characters of order are unique and were sorted in some custom order previously. permute the characters of s so that they match the order that order was sorted. more specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string. return any permutation of s that satisfies this property. example 1: input: order = "cba", s = "abcd" output: "cbad" explanation: "a", "b", "c" appear in order, so the order of "a", "b", "c" should be "c", "b", and "a". since "d" does not appear in order, it can be at any position in the returned string. "dcba", "cdba", "cbda" are also valid outputs. example 2: input: order = "cbafg", s = "abcd" output: "cbad" constraints: 1 <= order.length <= 26 1 <= s.length <= 200 order and s consist of lowercase english letters. all the characters of order are unique.
are given an integer total indicating the amount of money you have. you are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. you can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil. return the number of distinct ways you can buy some number of pens and pencils. example 1: input: total = 20, cost1 = 10, cost2 = 5 output: 9 explanation: the price of a pen is 10 and the price of a pencil is 5. - if you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils. - if you buy 1 pen, you can buy 0, 1, or 2 pencils. - if you buy 2 pens, you cannot buy any pencils. the total number of ways to buy pens and pencils is 5 + 3 + 1 = 9. example 2: input: total = 5, cost1 = 10, cost2 = 10 output: 1 explanation: the price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. therefore, there is only 1 way: buy 0 pens and 0 pencils. constraints: 1 <= total, cost1, cost2 <= 106
n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). choose a subset of cuboids and place them on each other. you can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. you can rearrange any cuboid's dimensions by rotating it to put it on another cuboid. return the maximum height of the stacked cuboids. example 1: input: cuboids = [[50,45,20],[95,37,53],[45,23,12]] output: 190 explanation: cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95. cuboid 0 is placed next with the 45x20 side facing down with height 50. cuboid 2 is placed next with the 23x12 side facing down with height 45. the total height is 95 + 50 + 45 = 190. example 2: input: cuboids = [[38,25,45],[76,35,3]] output: 76 explanation: you can't place any of the cuboids on the other. we choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76. example 3: input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]] output: 102 explanation: after rearranging the cuboids, you can see that all cuboids have the same dimension. you can place the 11x7 side down on all cuboids so their heights are 17. the maximum height of stacked cuboids is 6 * 17 = 102. constraints: n == cuboids.length 1 <= n <= 100 1 <= widthi, lengthi, heighti <= 100
a town, there are n people labeled from 1 to n. there is a rumor that one of these people is secretly the town judge. if the town judge exists, then: the town judge trusts nobody. everybody (except for the town judge) trusts the town judge. there is exactly one person that satisfies properties 1 and 2. you are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. if a trust relationship does not exist in trust array, then such a trust relationship does not exist. return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise. example 1: input: n = 2, trust = [[1,2]] output: 2 example 2: input: n = 3, trust = [[1,3],[2,3]] output: 3 example 3: input: n = 3, trust = [[1,3],[2,3],[3,1]] output: -1 constraints: 1 <= n <= 1000 0 <= trust.length <= 104 trust[i].length == 2 all the pairs of trust are unique. ai != bi 1 <= ai, bi <= n
are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. you are also given an integer shelfwidth. we want to place these books in order onto bookcase shelves that have a total width shelfwidth. we choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfwidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. we repeat this process until there are no more books to place. note that at each step of the above process, the order of the books we place is the same order as the given sequence of books. for example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. return the minimum possible height that the total bookshelf can be after placing shelves in this manner. example 1: input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfwidth = 4 output: 6 explanation: the sum of the heights of the 3 shelves is 1 + 3 + 2 = 6. notice that book number 2 does not have to be on the first shelf. example 2: input: books = [[1,3],[2,4],[3,2]], shelfwidth = 6 output: 4 constraints: 1 <= books.length <= 1000 1 <= thicknessi <= shelfwidth <= 1000 1 <= heighti <= 1000
are a hiker preparing for an upcoming hike. you are given heights, a 2d array of size rows x columns, where heights[row][col] represents the height of cell (row, col). you are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). you can move up, down, left, or right, and you wish to find a route that requires the minimum effort. a route's effort is the maximum absolute difference in heights between two consecutive cells of the route. return the minimum effort required to travel from the top-left cell to the bottom-right cell. example 1: input: heights = [[1,2,2],[3,8,2],[5,3,5]] output: 2 explanation: the route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells. this is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3. example 2: input: heights = [[1,2,3],[3,8,4],[5,3,5]] output: 1 explanation: the route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]. example 3: input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] output: 0 explanation: this route does not require any effort. constraints: rows == heights.length columns == heights[i].length 1 <= rows, columns <= 100 1 <= heights[i][j] <= 106
are n people that are split into some unknown number of groups. each person is labeled with a unique id from 0 to n - 1. you are given an integer array groupsizes, where groupsizes[i] is the size of the group that person i is in. for example, if groupsizes[1] = 3, then person 1 must be in a group of size 3. return a list of groups such that each person i is in a group of size groupsizes[i]. each person should appear in exactly one group, and every person must be in a group. if there are multiple answers, return any of them. it is guaranteed that there will be at least one valid solution for the given input. example 1: input: groupsizes = [3,3,3,3,3,1,3] output: [[5],[0,1,2],[3,4,6]] explanation: the first group is [5]. the size is 1, and groupsizes[5] = 1. the second group is [0,1,2]. the size is 3, and groupsizes[0] = groupsizes[1] = groupsizes[2] = 3. the third group is [3,4,6]. the size is 3, and groupsizes[3] = groupsizes[4] = groupsizes[6] = 3. other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]]. example 2: input: groupsizes = [2,1,3,3,3,2] output: [[1],[0,5],[2,3,4]] constraints: groupsizes.length == n 1 <= n <= 500 1 <= groupsizes[i] <= n
the head of a singly linked list, return the middle node of the linked list. if there are two middle nodes, return the second middle node. example 1: input: head = [1,2,3,4,5] output: [3,4,5] explanation: the middle node of the list is node 3. example 2: input: head = [1,2,3,4,5,6] output: [4,5,6] explanation: since the list has two middle nodes with values 3 and 4, we return the second one. constraints: the number of nodes in the list is in the range [1, 100]. 1 <= node.val <= 100
valid parentheses string is either empty "", "(" + a + ")", or a + b, where a and b are valid parentheses strings, and + represents string concatenation. for example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings. a valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = a + b, with a and b nonempty valid parentheses strings. given a valid parentheses string s, consider its primitive decomposition: s = p1 + p2 + ... + pk, where pi are primitive valid parentheses strings. return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s. example 1: input: s = "(()())(())" output: "()()()" explanation: the input string is "(()())(())", with primitive decomposition "(()())" + "(())". after removing outer parentheses of each part, this is "()()" + "()" = "()()()". example 2: input: s = "(()())(())(()(()))" output: "()()()()(())" explanation: the input string is "(()())(())(()(()))", with primitive decomposition "(()())" + "(())" + "(()(()))". after removing outer parentheses of each part, this is "()()" + "()" + "()(())" = "()()()()(())". example 3: input: s = "()()" output: "" explanation: the input string is "()()", with primitive decomposition "()" + "()". after removing outer parentheses of each part, this is "" + "" = "". constraints: 1 <= s.length <= 105 s[i] is either '(' or ')'. s is a valid parentheses string.
schema table: tweets +----------------+---------+ | column name | type | +----------------+---------+ | tweet_id | int | | content | varchar | +----------------+---------+ tweet_id is the primary key for this table. this table contains all the tweets in a social media app. write an sql query to find the ids of the invalid tweets. the tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15. return the result table in any order. the query result format is in the following example. example 1: input: tweets table: +----------+----------------------------------+ | tweet_id | content | +----------+----------------------------------+ | 1 | vote for biden | | 2 | let us make america great again! | +----------+----------------------------------+ output: +----------+ | tweet_id | +----------+ | 2 | +----------+ explanation: tweet 1 has length = 14. it is a valid tweet. tweet 2 has length = 32. it is an invalid tweet.
is an m x n matrix that is initialized to all 0's. there is also a 2d array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix. for each location indices[i], do both of the following: increment all the cells on row ri. increment all the cells on column ci. given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices. example 1: input: m = 2, n = 3, indices = [[0,1],[1,1]] output: 6 explanation: initial matrix = [[0,0,0],[0,0,0]]. after applying first increment it becomes [[1,2,1],[0,1,0]]. the final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers. example 2: input: m = 2, n = 2, indices = [[1,1],[0,0]] output: 0 explanation: final matrix = [[2,2],[2,2]]. there are no odd numbers in the final matrix. constraints: 1 <= m, n <= 50 1 <= indices.length <= 100 0 <= ri < m 0 <= ci < n follow up: could you solve this in o(n + m + indices.length) time with only o(n + m) extra space?
bits of a given 32 bits unsigned integer. note: note that in some languages, such as java, there is no unsigned integer type. in this case, both input and output will be given as a signed integer type. they should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. in java, the compiler represents the signed integers using 2's complement notation. therefore, in example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825. example 1: input: n = 00000010100101000001111010011100 output: 964176192 (00111001011110000010100101000000) explanation: the input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. example 2: input: n = 11111111111111111111111111111101 output: 3221225471 (10111111111111111111111111111111) explanation: the input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. constraints: the input must be a binary string of length 32 follow up: if this function is called many times, how would you optimize it?
are given two positive integer arrays nums and target, of the same length. in one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and: set nums[i] = nums[i] + 2 and set nums[j] = nums[j] - 2. two arrays are considered to be similar if the frequency of each element is the same. return the minimum number of operations required to make nums similar to target. the test cases are generated such that nums can always be similar to target. example 1: input: nums = [8,12,6], target = [2,14,10] output: 2 explanation: it is possible to make nums similar to target in two operations: - choose i = 0 and j = 2, nums = [10,12,4]. - choose i = 1 and j = 2, nums = [10,14,2]. it can be shown that 2 is the minimum number of operations needed. example 2: input: nums = [1,2,5], target = [4,1,3] output: 1 explanation: we can make nums similar to target in one operation: - choose i = 1 and j = 2, nums = [1,4,3]. example 3: input: nums = [1,1,1,1,1], target = [1,1,1,1,1] output: 0 explanation: the array nums is already similiar to target. constraints: n == nums.length == target.length 1 <= n <= 105 1 <= nums[i], target[i] <= 106 it is possible to make nums similar to target.
are given the root of a binary tree with n nodes where each node in the tree has node.val coins. there are n coins in total throughout the whole tree. in one move, we may choose two adjacent nodes and move one coin from one node to another. a move may be from parent to child, or from child to parent. return the minimum number of moves required to make every node have exactly one coin. example 1: input: root = [3,0,0] output: 2 explanation: from the root of the tree, we move one coin to its left child, and one coin to its right child. example 2: input: root = [0,3,0] output: 3 explanation: from the left child of the root, we move two coins to the root [taking two moves]. then, we move one coin from the root of the tree to the right child. constraints: the number of nodes in the tree is n. 1 <= n <= 100 0 <= node.val <= n the sum of all node.val is n.
are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names. return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise. example 1: input: equations = ["a==b","b!=a"] output: false explanation: if we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second. there is no way to assign the variables to satisfy both equations. example 2: input: equations = ["b==a","a==b"] output: true explanation: we could assign a = 1 and b = 1 to satisfy both equations. constraints: 1 <= equations.length <= 500 equations[i].length == 4 equations[i][0] is a lowercase letter. equations[i][1] is either '=' or '!'. equations[i][2] is '='. equations[i][3] is a lowercase letter.
are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. your goal is to visit all the rooms. however, you cannot enter a locked room without having its key. when you visit a room, you may find a set of distinct keys in it. each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms. given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise. example 1: input: rooms = [[1],[2],[3],[]] output: true explanation: we visit room 0 and pick up key 1. we then visit room 1 and pick up key 2. we then visit room 2 and pick up key 3. we then visit room 3. since we were able to visit every room, we return true. example 2: input: rooms = [[1,3],[3,0,1],[2],[0]] output: false explanation: we can not enter room number 2 since the only key that unlocks it is in that room. constraints: n == rooms.length 2 <= n <= 1000 0 <= rooms[i].length <= 1000 1 <= sum(rooms[i].length) <= 3000 0 <= rooms[i][j] < n all the values of rooms[i] are unique.
an array of integers arr, replace each element with its rank. the rank represents how large the element is. the rank has the following rules: rank is an integer starting from 1. the larger the element, the larger the rank. if two elements are equal, their rank must be the same. rank should be as small as possible. example 1: input: arr = [40,10,20,30] output: [4,1,2,3] explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest. example 2: input: arr = [100,100,100] output: [1,1,1] explanation: same elements share the same rank. example 3: input: arr = [37,12,28,9,100,56,80,5,12] output: [5,3,4,2,8,6,7,1,3] constraints: 0 <= arr.length <= 105 -109 <= arr[i] <= 109
are given the root of a binary search tree (bst) and an integer val. find the node in the bst that the node's value equals val and return the subtree rooted with that node. if such a node does not exist, return null. example 1: input: root = [4,2,7,1,3], val = 2 output: [2,1,3] example 2: input: root = [4,2,7,1,3], val = 5 output: [] constraints: the number of nodes in the tree is in the range [1, 5000]. 1 <= node.val <= 107 root is a binary search tree. 1 <= val <= 107
are given a string allowed consisting of distinct characters and an array of strings words. a string is consistent if all characters in the string appear in the string allowed. return the number of consistent strings in the array words. example 1: input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"] output: 2 explanation: strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'. example 2: input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"] output: 7 explanation: all strings are consistent. example 3: input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"] output: 4 explanation: strings "cc", "acd", "ac", and "d" are consistent. constraints: 1 <= words.length <= 104 1 <= allowed.length <= 26 1 <= words[i].length <= 10 the characters in allowed are distinct. words[i] and allowed contain only lowercase english letters.
an integer array nums, handle multiple queries of the following types: update the value of an element in nums. calculate the sum of the elements of nums between indices left and right inclusive where left <= right. implement the numarray class: numarray(int[] nums) initializes the object with the integer array nums. void update(int index, int val) updates the value of nums[index] to be val. int sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]). example 1: input ["numarray", "sumrange", "update", "sumrange"] [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] output [null, 9, null, 8] explanation numarray numarray = new numarray([1, 3, 5]); numarray.sumrange(0, 2); // return 1 + 3 + 5 = 9 numarray.update(1, 2); // nums = [1, 2, 5] numarray.sumrange(0, 2); // return 1 + 2 + 5 = 8 constraints: 1 <= nums.length <= 3 * 104 -100 <= nums[i] <= 100 0 <= index < nums.length -100 <= val <= 100 0 <= left <= right < nums.length at most 3 * 104 calls will be made to update and sumrange.
are given n different types of stickers. each sticker has a lowercase english word on it. you would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. you can use each sticker more than once if you want, and you have infinite quantities of each sticker. return the minimum number of stickers that you need to spell out target. if the task is impossible, return -1. note: in all test cases, all words were chosen randomly from the 1000 most common us english words, and target was chosen as a concatenation of two random words. example 1: input: stickers = ["with","example","science"], target = "thehat" output: 3 explanation: we can use 2 "with" stickers, and 1 "example" sticker. after cutting and rearrange the letters of those stickers, we can form the target "thehat". also, this is the minimum number of stickers necessary to form the target string. example 2: input: stickers = ["notice","possible"], target = "basicbasic" output: -1 explanation: we cannot form the target "basicbasic" from cutting letters from the given stickers. constraints: n == stickers.length 1 <= n <= 50 1 <= stickers[i].length <= 10 1 <= target.length <= 15 stickers[i] and target consist of lowercase english letters.
a m * n matrix seats that represent seats distributions in a classroom. if a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character. students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. return the maximum number of students that can take the exam together without any cheating being possible.. students must be placed in seats in good condition. example 1: input: seats = [["#",".","#","#",".","#"], [".","#","#","#","#","."], ["#",".","#","#",".","#"]] output: 4 explanation: teacher can place 4 students in available seats so they don't cheat on the exam. example 2: input: seats = [[".","#"], ["#","#"], ["#","."], ["#","#"], [".","#"]] output: 3 explanation: place all students in available seats. example 3: input: seats = [["#",".",".",".","#"], [".","#",".","#","."], [".",".","#",".","."], [".","#",".","#","."], ["#",".",".",".","#"]] output: 10 explanation: place students in available seats in column 1, 3 and 5. constraints: seats contains only characters '.' and'#'. m == seats.length n == seats[i].length 1 <= m <= 8 1 <= n <= 8
password is said to be strong if it satisfies all the following criteria: it has at least 8 characters. it contains at least one lowercase letter. it contains at least one uppercase letter. it contains at least one digit. it contains at least one special character. the special characters are the characters in the following string: "!@#$%^&*()-+". it does not contain 2 of the same character in adjacent positions (i.e., "aab" violates this condition, but "aba" does not). given a string password, return true if it is a strong password. otherwise, return false. example 1: input: password = "ilovele3tcode!" output: true explanation: the password meets all the requirements. therefore, we return true. example 2: input: password = "me+you--ismydream" output: false explanation: the password does not contain a digit and also contains 2 of the same character in adjacent positions. therefore, we return false. example 3: input: password = "1ab!" output: false explanation: the password does not meet the length requirement. therefore, we return false. constraints: 1 <= password.length <= 100 password consists of letters, digits, and special characters: "!@#$%^&*()-+".
are n bulbs that are initially off. you first turn on all the bulbs, then you turn off every second bulb. on the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). for the ith round, you toggle every i bulb. for the nth round, you only toggle the last bulb. return the number of bulbs that are on after n rounds. example 1: input: n = 3 output: 1 explanation: at first, the three bulbs are [off, off, off]. after the first round, the three bulbs are [on, on, on]. after the second round, the three bulbs are [on, off, on]. after the third round, the three bulbs are [on, off, off]. so you should return 1 because there is only one bulb is on. example 2: input: n = 0 output: 0 example 3: input: n = 1 output: 1 constraints: 0 <= n <= 109
a string s containing only lowercase english letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. you cannot modify the non '?' characters. it is guaranteed that there are no consecutive repeating characters in the given string except for '?'. return the final string after all the conversions (possibly zero) have been made. if there is more than one solution, return any of them. it can be shown that an answer is always possible with the given constraints. example 1: input: s = "?zs" output: "azs" explanation: there are 25 solutions for this problem. from "azs" to "yzs", all are valid. only "z" is an invalid modification as the string will consist of consecutive repeating characters in "zzs". example 2: input: s = "ubv?w" output: "ubvaw" explanation: there are 24 solutions for this problem. only "v" and "w" are invalid modifications as the strings will consist of consecutive repeating characters in "ubvvw" and "ubvww". constraints: 1 <= s.length <= 100 s consist of lowercase english letters and '?'.
are given an integer array arr. you can choose a set of integers and remove all the occurrences of these integers in the array. return the minimum size of the set so that at least half of the integers of the array are removed. example 1: input: arr = [3,3,3,3,5,5,5,2,2,7] output: 2 explanation: choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array). possible sets of size 2 are {3,5},{3,2},{5,2}. choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array. example 2: input: arr = [7,7,7,7,7,7] output: 1 explanation: the only possible set you can choose is {7}. this will make the new array empty. constraints: 2 <= arr.length <= 105 arr.length is even. 1 <= arr[i] <= 105
are three stones in different positions on the x-axis. you are given three integers a, b, and c, the positions of the stones. in one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. formally, let's say the stones are currently at positions x, y, and z with x < y < z. you pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y. the game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). return an integer array answer of length 2 where: answer[0] is the minimum number of moves you can play, and answer[1] is the maximum number of moves you can play. example 1: input: a = 1, b = 2, c = 5 output: [1,2] explanation: move the stone from 5 to 3, or move the stone from 5 to 4 to 3. example 2: input: a = 4, b = 3, c = 2 output: [0,0] explanation: we cannot make any moves. example 3: input: a = 3, b = 5, c = 1 output: [1,2] explanation: move the stone from 1 to 4; or move the stone from 1 to 2 to 4. constraints: 1 <= a, b, c <= 100 a, b, and c have different values.
an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive. range sum s(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j. example 1: input: nums = [-2,5,-1], lower = -2, upper = 2 output: 3 explanation: the three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2. example 2: input: nums = [0], lower = 0, upper = 0 output: 1 constraints: 1 <= nums.length <= 105 -231 <= nums[i] <= 231 - 1 -105 <= lower <= upper <= 105 the answer is guaranteed to fit in a 32-bit integer.
an integer array nums and two integers k and p, return the number of distinct subarrays which have at most k elements divisible by p. two arrays nums1 and nums2 are said to be distinct if: they are of different lengths, or there exists at least one index i where nums1[i] != nums2[i]. a subarray is defined as a non-empty contiguous sequence of elements in an array. example 1: input: nums = [2,3,3,2,2], k = 2, p = 2 output: 11 explanation: the elements at indices 0, 3, and 4 are divisible by p = 2. the 11 distinct subarrays which have at most k = 2 elements divisible by 2 are: [2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2]. note that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once. the subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2. example 2: input: nums = [1,2,3,4], k = 4, p = 1 output: 10 explanation: all element of nums are divisible by p = 1. also, every subarray of nums will have at most 4 elements that are divisible by 1. since all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10. constraints: 1 <= nums.length <= 200 1 <= nums[i], p <= 200 1 <= k <= nums.length follow up: can you solve this problem in o(n2) time complexity?
a stack-like data structure to push elements to the stack and pop the most frequent element from the stack. implement the freqstack class: freqstack() constructs an empty frequency stack. void push(int val) pushes an integer val onto the top of the stack. int pop() removes and returns the most frequent element in the stack. if there is a tie for the most frequent element, the element closest to the stack's top is removed and returned. example 1: input ["freqstack", "push", "push", "push", "push", "push", "push", "pop", "pop", "pop", "pop"] [[], [5], [7], [5], [7], [4], [5], [], [], [], []] output [null, null, null, null, null, null, null, 5, 7, 5, 4] explanation freqstack freqstack = new freqstack(); freqstack.push(5); // the stack is [5] freqstack.push(7); // the stack is [5,7] freqstack.push(5); // the stack is [5,7,5] freqstack.push(7); // the stack is [5,7,5,7] freqstack.push(4); // the stack is [5,7,5,7,4] freqstack.push(5); // the stack is [5,7,5,7,4,5] freqstack.pop(); // return 5, as 5 is the most frequent. the stack becomes [5,7,5,7,4]. freqstack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. the stack becomes [5,7,5,4]. freqstack.pop(); // return 5, as 5 is the most frequent. the stack becomes [5,7,4]. freqstack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. the stack becomes [5,7]. constraints: 0 <= val <= 109 at most 2 * 104 calls will be made to push and pop. it is guaranteed that there will be at least one element in the stack before calling pop.
an infinite binary tree where every node has two children, the nodes are labelled in row order. in the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left. given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label. example 1: input: label = 14 output: [1,3,4,14] example 2: input: label = 26 output: [1,2,6,10,26] constraints: 1 <= label <= 10^6
is an integer array nums that consists of n unique elements, but you have forgotten it. however, you do remember every pair of adjacent elements in nums. you are given a 2d integer array adjacentpairs of size n - 1 where each adjacentpairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums. it is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentpairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. the pairs can appear in any order. return the original array nums. if there are multiple solutions, return any of them. example 1: input: adjacentpairs = [[2,1],[3,4],[3,2]] output: [1,2,3,4] explanation: this array has all its adjacent pairs in adjacentpairs. notice that adjacentpairs[i] may not be in left-to-right order. example 2: input: adjacentpairs = [[4,-2],[1,4],[-3,1]] output: [-2,4,1,-3] explanation: there can be negative numbers. another solution is [-3,1,4,-2], which would also be accepted. example 3: input: adjacentpairs = [[100000,-100000]] output: [100000,-100000] constraints: nums.length == n adjacentpairs.length == n - 1 adjacentpairs[i].length == 2 2 <= n <= 105 -105 <= nums[i], ui, vi <= 105 there exists some nums that has adjacentpairs as its pairs.
sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same. given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. otherwise, return false. example 1: input: arr = [3,5,1] output: true explanation: we can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements. example 2: input: arr = [1,2,4] output: false explanation: there is no way to reorder the elements to obtain an arithmetic progression. constraints: 2 <= arr.length <= 1000 -106 <= arr[i] <= 106
an array of integers nums and an integer k, return the number of unique k-diff pairs in the array. a k-diff pair is an integer pair (nums[i], nums[j]), where the following are true: 0 <= i, j < nums.length i != j |nums[i] - nums[j]| == k notice that |val| denotes the absolute value of val. example 1: input: nums = [3,1,4,1,5], k = 2 output: 2 explanation: there are two 2-diff pairs in the array, (1, 3) and (3, 5). although we have two 1s in the input, we should only return the number of unique pairs. example 2: input: nums = [1,2,3,4,5], k = 1 output: 4 explanation: there are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5). example 3: input: nums = [1,3,1,5,4], k = 0 output: 1 explanation: there is one 0-diff pair in the array, (1, 1). constraints: 1 <= nums.length <= 104 -107 <= nums[i] <= 107 0 <= k <= 107
an empty set of intervals, implement a data structure that can: add an interval to the set of intervals. count the number of integers that are present in at least one interval. implement the countintervals class: countintervals() initializes the object with an empty set of intervals. void add(int left, int right) adds the interval [left, right] to the set of intervals. int count() returns the number of integers that are present in at least one interval. note that an interval [left, right] denotes all the integers x where left <= x <= right. example 1: input ["countintervals", "add", "add", "count", "add", "count"] [[], [2, 3], [7, 10], [], [5, 8], []] output [null, null, null, 6, null, 8] explanation countintervals countintervals = new countintervals(); // initialize the object with an empty set of intervals. countintervals.add(2, 3); // add [2, 3] to the set of intervals. countintervals.add(7, 10); // add [7, 10] to the set of intervals. countintervals.count(); // return 6 // the integers 2 and 3 are present in the interval [2, 3]. // the integers 7, 8, 9, and 10 are present in the interval [7, 10]. countintervals.add(5, 8); // add [5, 8] to the set of intervals. countintervals.count(); // return 8 // the integers 2 and 3 are present in the interval [2, 3]. // the integers 5 and 6 are present in the interval [5, 8]. // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10]. // the integers 9 and 10 are present in the interval [7, 10]. constraints: 1 <= left <= right <= 109 at most 105 calls in total will be made to add and count. at least one call will be made to count.
an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied. a subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order. example 1: input: nums = [10,2,-10,5,20], k = 2 output: 37 explanation: the subsequence is [10, 2, 5, 20]. example 2: input: nums = [-1,-2,-3], k = 1 output: -1 explanation: the subsequence must be non-empty, so we choose the largest number. example 3: input: nums = [10,-2,-10,-5,20], k = 2 output: 23 explanation: the subsequence is [10, -2, -5, 20]. constraints: 1 <= k <= nums.length <= 105 -104 <= nums[i] <= 104
matlab, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data. you are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix. the reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were. if the reshape operation with given parameters is possible and legal, output the new reshaped matrix; otherwise, output the original matrix. example 1: input: mat = [[1,2],[3,4]], r = 1, c = 4 output: [[1,2,3,4]] example 2: input: mat = [[1,2],[3,4]], r = 2, c = 4 output: [[1,2],[3,4]] constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 -1000 <= mat[i][j] <= 1000 1 <= r, c <= 300
integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. each digit must be rotated - we cannot choose to leave it alone. a number is valid if each digit remains a digit after rotation. for example: 0, 1, and 8 rotate to themselves, 2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored), 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid. given an integer n, return the number of good integers in the range [1, n]. example 1: input: n = 10 output: 4 explanation: there are four good numbers in the range [1, 10] : 2, 5, 6, 9. note that 1 and 10 are not good numbers, since they remain unchanged after rotating. example 2: input: n = 1 output: 0 example 3: input: n = 2 output: 1 constraints: 1 <= n <= 104
are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell. you have two robots that can collect cherries for you: robot #1 is located at the top-left corner (0, 0), and robot #2 is located at the top-right corner (0, cols - 1). return the maximum number of cherries collection using both robots by following the rules below: from a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1). when any robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell. when both robots stay in the same cell, only one takes the cherries. both robots cannot move outside of the grid at any moment. both robots should reach the bottom row in grid. example 1: input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]] output: 24 explanation: path of robot #1 and #2 are described in color green and blue respectively. cherries taken by robot #1, (3 + 2 + 5 + 2) = 12. cherries taken by robot #2, (1 + 5 + 5 + 1) = 12. total of cherries: 12 + 12 = 24. example 2: input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]] output: 28 explanation: path of robot #1 and #2 are described in color green and blue respectively. cherries taken by robot #1, (1 + 9 + 5 + 2) = 17. cherries taken by robot #2, (1 + 3 + 4 + 3) = 11. total of cherries: 17 + 11 = 28. constraints: rows == grid.length cols == grid[i].length 2 <= rows, cols <= 70 0 <= grid[i][j] <= 100
a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. substrings that occur multiple times are counted the number of times they occur. example 1: input: s = "00110011" output: 6 explanation: there are 6 substrings that have equal number of consecutive 1's and 0's: "0011", "01", "1100", "10", "0011", and "01". notice that some of these substrings repeat and are counted the number of times they occur. also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together. example 2: input: s = "10101" output: 4 explanation: there are 4 substrings: "10", "01", "10", "01" that have equal number of consecutive 1's and 0's. constraints: 1 <= s.length <= 105 s[i] is either '0' or '1'.
a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1. return the length of n. if there is no such n, return -1. note: n may not fit in a 64-bit signed integer. example 1: input: k = 1 output: 1 explanation: the smallest answer is n = 1, which has length 1. example 2: input: k = 2 output: -1 explanation: there is no such positive integer n divisible by 2. example 3: input: k = 3 output: 3 explanation: the smallest answer is n = 111, which has length 3. constraints: 1 <= k <= 105
are given a list nums of integers representing a list compressed with run-length encoding. consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0). for each such pair, there are freq elements with value val concatenated in a sublist. concatenate all the sublists from left to right to generate the decompressed list. return the decompressed list. example 1: input: nums = [1,2,3,4] output: [2,4,4,4] explanation: the first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2]. the second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4]. at the end the concatenation [2] + [4,4,4] is [2,4,4,4]. example 2: input: nums = [1,1,2,3] output: [1,3,3] constraints: 2 <= nums.length <= 100 nums.length % 2 == 0 1 <= nums[i] <= 100
are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1]. you should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule: the first element in s[k] starts with the selection of the element nums[k] of index = k. the next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on. we stop adding right before a duplicate element occurs in s[k]. return the longest length of a set s[k]. example 1: input: nums = [5,4,0,3,1,6,2] output: 4 explanation: nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2. one of the longest sets s[k]: s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0} example 2: input: nums = [0,1,2] output: 1 constraints: 1 <= nums.length <= 105 0 <= nums[i] < nums.length all the values of nums are unique.
are given a binary string s consisting only of zeroes and ones. a substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. notice that the empty substring is considered a balanced substring. return the length of the longest balanced substring of s. a substring is a contiguous sequence of characters within a string. example 1: input: s = "01000111" output: 6 explanation: the longest balanced substring is "000111", which has length 6. example 2: input: s = "00111" output: 4 explanation: the longest balanced substring is "0011", which has length 4. example 3: input: s = "111" output: 0 explanation: there is no balanced substring except the empty substring, so the answer is 0. constraints: 1 <= s.length <= 50 '0' <= s[i] <= '1'
are given a string number representing a positive integer and a character digit. return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. the test cases are generated such that digit occurs at least once in number. example 1: input: number = "123", digit = "3" output: "12" explanation: there is only one '3' in "123". after removing '3', the result is "12". example 2: input: number = "1231", digit = "1" output: "231" explanation: we can remove the first '1' to get "231" or remove the second '1' to get "123". since 231 > 123, we return "231". example 3: input: number = "551", digit = "5" output: "51" explanation: we can remove either the first or second '5' from "551". both result in the string "51". constraints: 2 <= number.length <= 100 number consists of digits from '1' to '9'. digit is a digit from '1' to '9'. digit occurs at least once in number.
the universe earth c-137, rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. rick has n empty baskets, the ith basket is at position[i], morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum. rick stated that magnetic force between two different balls at positions x and y is |x - y|. given the integer array position and the integer m. return the required force. example 1: input: position = [1,2,3,4,7], m = 3 output: 3 explanation: distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. the minimum magnetic force is 3. we cannot achieve a larger minimum magnetic force than 3. example 2: input: position = [5,4,3,2,1,1000000000], m = 2 output: 999999999 explanation: we can use baskets 1 and 1000000000. constraints: n == position.length 2 <= n <= 105 1 <= position[i] <= 109 all integers in position are distinct. 2 <= m <= position.length
are given a (0-indexed) array of positive integers candiescount where candiescount[i] represents the number of candies of the ith type you have. you are also given a 2d array queries where queries[i] = [favoritetypei, favoritedayi, dailycapi]. you play a game with the following rules: you start eating candies on day 0. you cannot eat any candy of type i unless you have eaten all candies of type i - 1. you must eat at least one candy per day until you have eaten all the candies. construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoritetypei on day favoritedayi without eating more than dailycapi candies on any day, and false otherwise. note that you can eat different types of candy on the same day, provided that you follow rule 2. return the constructed array answer. example 1: input: candiescount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]] output: [true,false,true] explanation: 1- if you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2. 2- you can eat at most 4 candies each day. if you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1. on day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2. 3- if you eat 1 candy each day, you will eat a candy of type 2 on day 13. example 2: input: candiescount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]] output: [false,true,true,false,false] constraints: 1 <= candiescount.length <= 105 1 <= candiescount[i] <= 105 1 <= queries.length <= 105 queries[i].length == 3 0 <= favoritetypei < candiescount.length 0 <= favoritedayi <= 109 1 <= dailycapi <= 109
has an undirected tree with n nodes labeled from 0 to n - 1. the tree is represented as a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. alice wants bob to find the root of the tree. she allows bob to make several guesses about her tree. in one guess, he does the following: chooses two distinct integers u and v such that there exists an edge [u, v] in the tree. he tells alice that u is the parent of v in the tree. bob's guesses are represented by a 2d integer array guesses where guesses[j] = [uj, vj] indicates bob guessed uj to be the parent of vj. alice being lazy, does not reply to each of bob's guesses, but just says that at least k of his guesses are true. given the 2d integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of alice's tree. if there is no such tree, return 0. example 1: input: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3 output: 3 explanation: root = 0, correct guesses = [1,3], [0,1], [2,4] root = 1, correct guesses = [1,3], [1,0], [2,4] root = 2, correct guesses = [1,3], [1,0], [2,4] root = 3, correct guesses = [1,0], [2,4] root = 4, correct guesses = [1,3], [1,0] considering 0, 1, or 2 as root node leads to 3 correct guesses. example 2: input: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1 output: 5 explanation: root = 0, correct guesses = [3,4] root = 1, correct guesses = [1,0], [3,4] root = 2, correct guesses = [1,0], [2,1], [3,4] root = 3, correct guesses = [1,0], [2,1], [3,2], [3,4] root = 4, correct guesses = [1,0], [2,1], [3,2] considering any node as root will give at least 1 correct guess. constraints: edges.length == n - 1 2 <= n <= 105 1 <= guesses.length <= 105 0 <= ai, bi, uj, vj <= n - 1 ai != bi uj != vj edges represents a valid tree. guesses[j] is an edge of the tree. guesses is unique. 0 <= k <= guesses.length
is an undirected tree with n nodes labeled from 0 to n - 1. you are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. you are also given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are allowed to delete some edges, splitting the tree into multiple connected components. let the value of a component be the sum of all nums[i] for which node i is in the component. return the maximum number of edges you can delete, such that every connected component in the tree has the same value. example 1: input: nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] output: 2 explanation: the above figure shows how we can delete the edges [0,1] and [3,4]. the created components are nodes [0], [1,2,3] and [4]. the sum of the values in each component equals 6. it can be proven that no better deletion exists, so the answer is 2. example 2: input: nums = [2], edges = [] output: 0 explanation: there are no edges to be deleted. constraints: 1 <= n <= 2 * 104 nums.length == n 1 <= nums[i] <= 50 edges.length == n - 1 edges[i].length == 2 0 <= edges[i][0], edges[i][1] <= n - 1 edges represents a valid tree.
are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j). the rain starts to fall. at time t, the depth of the water everywhere is t. you can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. you can swim infinite distances in zero time. of course, you must stay within the boundaries of the grid during your swim. return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0). example 1: input: grid = [[0,2],[1,3]] output: 3 explanation: at time 0, you are in grid location (0, 0). you cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0. you cannot reach point (1, 1) until time 3. when the depth of water is 3, we can swim anywhere inside the grid. example 2: input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]] output: 16 explanation: the final route is shown. we need to wait until time 16 so that (0, 0) and (4, 4) are connected. constraints: n == grid.length n == grid[i].length 1 <= n <= 50 0 <= grid[i][j] < n2 each value grid[i][j] is unique.
k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. the integers in the magic square do not have to be distinct. every 1 x 1 grid is trivially a magic square. given an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid. example 1: input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]] output: 3 explanation: the largest magic square has a size of 3. every row sum, column sum, and diagonal sum of this magic square is equal to 12. - row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12 - column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12 - diagonal sums: 5+4+3 = 6+4+2 = 12 example 2: input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]] output: 2 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j] <= 106
the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). it can be proven that there is a unique answer. return the root of the trimmed binary search tree. note that the root may change depending on the given bounds. example 1: input: root = [1,0,2], low = 1, high = 2 output: [1,null,2] example 2: input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3 output: [3,2,null,1] constraints: the number of nodes in the tree is in the range [1, 104]. 0 <= node.val <= 104 the value of each node in the tree is unique. root is guaranteed to be a valid binary search tree. 0 <= low <= high <= 104
are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). the soldiers are positioned in front of the civilians. that is, all the 1's will appear to the left of all the 0's in each row. a row i is weaker than a row j if one of the following is true: the number of soldiers in row i is less than the number of soldiers in row j. both rows have the same number of soldiers and i < j. return the indices of the k weakest rows in the matrix ordered from weakest to strongest. example 1: input: mat = [[1,1,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]], k = 3 output: [2,0,3] explanation: the number of soldiers in each row is: - row 0: 2 - row 1: 4 - row 2: 1 - row 3: 2 - row 4: 5 the rows ordered from weakest to strongest are [2,0,3,1,4]. example 2: input: mat = [[1,0,0,0], [1,1,1,1], [1,0,0,0], [1,0,0,0]], k = 2 output: [0,2] explanation: the number of soldiers in each row is: - row 0: 1 - row 1: 4 - row 2: 1 - row 3: 1 the rows ordered from weakest to strongest are [0,2,3,1]. constraints: m == mat.length n == mat[i].length 2 <= n, m <= 100 1 <= k <= m matrix[i][j] is either 0 or 1.
have the four functions: printfizz that prints the word "fizz" to the console, printbuzz that prints the word "buzz" to the console, printfizzbuzz that prints the word "fizzbuzz" to the console, and printnumber that prints a given integer to the console. you are given an instance of the class fizzbuzz that has four functions: fizz, buzz, fizzbuzz and number. the same instance of fizzbuzz will be passed to four different threads: thread a: calls fizz() that should output the word "fizz". thread b: calls buzz() that should output the word "buzz". thread c: calls fizzbuzz() that should output the word "fizzbuzz". thread d: calls number() that should only output the integers. modify the given class to output the series [1, 2, "fizz", 4, "buzz", ...] where the ith token (1-indexed) of the series is: "fizzbuzz" if i is divisible by 3 and 5, "fizz" if i is divisible by 3 and not 5, "buzz" if i is divisible by 5 and not 3, or i if i is not divisible by 3 or 5. implement the fizzbuzz class: fizzbuzz(int n) initializes the object with the number n that represents the length of the sequence that should be printed. void fizz(printfizz) calls printfizz to output "fizz". void buzz(printbuzz) calls printbuzz to output "buzz". void fizzbuzz(printfizzbuzz) calls printfizzbuzz to output "fizzbuzz". void number(printnumber) calls printnumber to output the numbers. example 1: input: n = 15 output: [1,2,"fizz",4,"buzz","fizz",7,8,"fizz","buzz",11,"fizz",13,14,"fizzbuzz"] example 2: input: n = 5 output: [1,2,"fizz",4,"buzz"] constraints: 1 <= n <= 50
are given a series of video clips from a sporting event that lasted time seconds. these video clips can be overlapping with each other and have varying lengths. each video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi. we can cut these clips into segments freely. for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7]. return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. if the task is impossible, return -1. example 1: input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10 output: 3 explanation: we take the clips [0,2], [8,10], [1,9]; a total of 3 clips. then, we can reconstruct the sporting event as follows: we cut [1,9] into segments [1,2] + [2,8] + [8,9]. now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]. example 2: input: clips = [[0,1],[1,2]], time = 5 output: -1 explanation: we cannot cover [0,5] with only [0,1] and [1,2]. example 3: input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9 output: 3 explanation: we can take clips [0,4], [4,7], and [6,9]. constraints: 1 <= clips.length <= 100 0 <= starti <= endi <= 100 1 <= time <= 100
schema table: weather +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | recorddate | date | | temperature | int | +---------------+---------+ id is the primary key for this table. this table contains information about the temperature on a certain day. write an sql query to find all dates' id with higher temperatures compared to its previous dates (yesterday). return the result table in any order. the query result format is in the following example. example 1: input: weather table: +----+------------+-------------+ | id | recorddate | temperature | +----+------------+-------------+ | 1 | 2015-01-01 | 10 | | 2 | 2015-01-02 | 25 | | 3 | 2015-01-03 | 20 | | 4 | 2015-01-04 | 30 | +----+------------+-------------+ output: +----+ | id | +----+ | 2 | | 4 | +----+ explanation: in 2015-01-02, the temperature was higher than the previous day (10 -> 25). in 2015-01-04, the temperature was higher than the previous day (20 -> 30).
an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value. if target is not found in the array, return [-1, -1]. you must write an algorithm with o(log n) runtime complexity. example 1: input: nums = [5,7,7,8,8,10], target = 8 output: [3,4] example 2: input: nums = [5,7,7,8,8,10], target = 6 output: [-1,-1] example 3: input: nums = [], target = 0 output: [-1,-1] constraints: 0 <= nums.length <= 105 -109 <= nums[i] <= 109 nums is a non-decreasing array. -109 <= target <= 109
a map that allows you to do the following: maps a string key to a given value. returns the sum of the values that have a key with a prefix equal to a given string. implement the mapsum class: mapsum() initializes the mapsum object. void insert(string key, int val) inserts the key-val pair into the map. if the key already existed, the original key-value pair will be overridden to the new one. int sum(string prefix) returns the sum of all the pairs' value whose key starts with the prefix. example 1: input ["mapsum", "insert", "sum", "insert", "sum"] [[], ["apple", 3], ["ap"], ["app", 2], ["ap"]] output [null, null, 3, null, 5] explanation mapsum mapsum = new mapsum(); mapsum.insert("apple", 3); mapsum.sum("ap"); // return 3 (apple = 3) mapsum.insert("app", 2); mapsum.sum("ap"); // return 5 (apple + app = 3 + 2 = 5) constraints: 1 <= key.length, prefix.length <= 50 key and prefix consist of only lowercase english letters. 1 <= val <= 1000 at most 50 calls will be made to insert and sum.
are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions. return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. since the answer may be very large, return it modulo 109 + 7. two paths are considered different if they do not have exactly the same sequence of visited cells. example 1: input: grid = [[1,1],[3,4]] output: 8 explanation: the strictly increasing paths are: - paths with length 1: [1], [1], [3], [4]. - paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4]. - paths with length 3: [1 -> 3 -> 4]. the total number of paths is 4 + 3 + 1 = 8. example 2: input: grid = [[1],[2]] output: 3 explanation: the strictly increasing paths are: - paths with length 1: [1], [2]. - paths with length 2: [1 -> 2]. the total number of paths is 2 + 1 = 3. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 1 <= grid[i][j] <= 105
xor total of an array is defined as the bitwise xor of all its elements, or 0 if the array is empty. for example, the xor total of the array [2,5,6] is 2 xor 5 xor 6 = 1. given an array nums, return the sum of all xor totals for every subset of nums. note: subsets with the same elements should be counted multiple times. an array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. example 1: input: nums = [1,3] output: 6 explanation: the 4 subsets of [1,3] are: - the empty subset has an xor total of 0. - [1] has an xor total of 1. - [3] has an xor total of 3. - [1,3] has an xor total of 1 xor 3 = 2. 0 + 1 + 3 + 2 = 6 example 2: input: nums = [5,1,6] output: 28 explanation: the 8 subsets of [5,1,6] are: - the empty subset has an xor total of 0. - [5] has an xor total of 5. - [1] has an xor total of 1. - [6] has an xor total of 6. - [5,1] has an xor total of 5 xor 1 = 4. - [5,6] has an xor total of 5 xor 6 = 3. - [1,6] has an xor total of 1 xor 6 = 7. - [5,1,6] has an xor total of 5 xor 1 xor 6 = 2. 0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28 example 3: input: nums = [3,4,5,6,7,8] output: 480 explanation: the sum of all xor totals for every subset is 480. constraints: 1 <= nums.length <= 12 1 <= nums[i] <= 20
an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer. example 1: input: arr = [1,2,2,6,6,6,6,7,10] output: 6 example 2: input: arr = [1,1] output: 1 constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 105
are given a 0-indexed 2d integer array questions where questions[i] = [pointsi, brainpoweri]. the array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. if you skip question i, you get to make the decision on the next question. for example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]: if question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2. if instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3. return the maximum points you can earn for the exam. example 1: input: questions = [[3,2],[4,3],[4,4],[2,5]] output: 5 explanation: the maximum points can be earned by solving questions 0 and 3. - solve question 0: earn 3 points, will be unable to solve the next 2 questions - unable to solve questions 1 and 2 - solve question 3: earn 2 points total points earned: 3 + 2 = 5. there is no other way to earn 5 or more points. example 2: input: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]] output: 7 explanation: the maximum points can be earned by solving questions 1 and 4. - skip question 0 - solve question 1: earn 2 points, will be unable to solve the next 2 questions - unable to solve questions 2 and 3 - solve question 4: earn 5 points total points earned: 2 + 5 = 7. there is no other way to earn 7 or more points. constraints: 1 <= questions.length <= 105 questions[i].length == 2 1 <= pointsi, brainpoweri <= 105
is throwing n darts on a very large wall. you are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that alice threw on the wall. bob knows the positions of the n darts on the wall. he wants to place a dartboard of radius r on the wall so that the maximum number of darts that alice throws lies on the dartboard. given the integer r, return the maximum number of darts that can lie on the dartboard. example 1: input: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2 output: 4 explanation: circle dartboard with center in (0,0) and radius = 2 contain all points. example 2: input: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5 output: 5 explanation: circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8). constraints: 1 <= darts.length <= 100 darts[i].length == 2 -104 <= xi, yi <= 104 all the darts are unique 1 <= r <= 5000
two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays. example 1: input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] output: 3 explanation: the repeated subarray with maximum length is [3,2,1]. example 2: input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0] output: 5 explanation: the repeated subarray with maximum length is [0,0,0,0,0]. constraints: 1 <= nums1.length, nums2.length <= 1000 0 <= nums1[i], nums2[i] <= 100
an array nums that represents a permutation of integers from 1 to n. we are going to construct a binary search tree (bst) by inserting the elements of nums in order into an initially empty bst. find the number of different ways to reorder nums so that the constructed bst is identical to that formed from the original array nums. for example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. the array [2,3,1] also yields the same bst but [3,2,1] yields a different bst. return the number of ways to reorder nums such that the bst formed is identical to the original bst formed from nums. since the answer may be very large, return it modulo 109 + 7. example 1: input: nums = [2,1,3] output: 1 explanation: we can reorder nums to be [2,3,1] which will yield the same bst. there are no other ways to reorder nums which will yield the same bst. example 2: input: nums = [3,4,5,1,2] output: 5 explanation: the following 5 arrays will yield the same bst: [3,1,2,4,5] [3,1,4,2,5] [3,1,4,5,2] [3,4,1,2,5] [3,4,1,5,2] example 3: input: nums = [1,2,3] output: 0 explanation: there are no other orderings of nums that will yield the same bst. constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= nums.length all integers in nums are distinct.
an integer array arr and an integer k, modify the array by repeating it k times. for example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2]. return the maximum sub-array sum in the modified array. note that the length of the sub-array can be 0 and its sum in that case is 0. as the answer can be very large, return the answer modulo 109 + 7. example 1: input: arr = [1,2], k = 3 output: 9 example 2: input: arr = [1,-2,1], k = 5 output: 2 example 3: input: arr = [-1,-2], k = 7 output: 0 constraints: 1 <= arr.length <= 105 1 <= k <= 105 -104 <= arr[i] <= 104
a list of words, list of single letters (might be repeating) and score of every character. return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times). it is not necessary to use all characters in letters and each letter can only be used once. score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively. example 1: input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0] output: 23 explanation: score a=1, c=9, d=5, g=3, o=2 given letters, we can form the words "dad" (5+1+5) and "good" (3+2+2+5) with a score of 23. words "dad" and "dog" only get a score of 21. example 2: input: words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10] output: 27 explanation: score a=4, b=4, c=4, x=5, z=10 given letters, we can form the words "ax" (4+5), "bx" (4+5) and "cx" (4+5) with a score of 27. word "xxxz" only get a score of 25. example 3: input: words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0] output: 0 explanation: letter "e" can only be used once. constraints: 1 <= words.length <= 14 1 <= words[i].length <= 15 1 <= letters.length <= 100 letters[i].length == 1 score.length == 26 0 <= score[i] <= 10 words[i], letters[i] contains only lower case english letters.
an integer array arr, return true if there are three consecutive odd numbers in the array. otherwise, return false. example 1: input: arr = [2,6,4,1] output: false explanation: there are no three consecutive odds. example 2: input: arr = [1,2,34,3,4,5,7,23,12] output: true explanation: [5,7,23] are three consecutive odds. constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 1000
have planned some train traveling one year in advance. the days of the year in which you will travel are given as an integer array days. each day is an integer from 1 to 365. train tickets are sold in three different ways: a 1-day pass is sold for costs[0] dollars, a 7-day pass is sold for costs[1] dollars, and a 30-day pass is sold for costs[2] dollars. the passes allow that many days of consecutive travel. for example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8. return the minimum number of dollars you need to travel every day in the given list of days. example 1: input: days = [1,4,6,7,8,20], costs = [2,7,15] output: 11 explanation: for example, here is one way to buy passes that lets you travel your travel plan: on day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1. on day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9. on day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20. in total, you spent $11 and covered all the days of your travel. example 2: input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15] output: 17 explanation: for example, here is one way to buy passes that lets you travel your travel plan: on day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30. on day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31. in total, you spent $17 and covered all the days of your travel. constraints: 1 <= days.length <= 365 1 <= days[i] <= 365 days is in strictly increasing order. costs.length == 3 1 <= costs[i] <= 1000
are n people and 40 types of hats labeled from 1 to 40. given a 2d integer array hats, where hats[i] is a list of all hats preferred by the ith person. return the number of ways that the n people wear different hats to each other. since the answer may be too large, return it modulo 109 + 7. example 1: input: hats = [[3,4],[4,5],[5]] output: 1 explanation: there is only one way to choose hats given the conditions. first person choose hat 3, second person choose hat 4 and last one hat 5. example 2: input: hats = [[3,5,1],[3,5]] output: 4 explanation: there are 4 ways to choose hats: (3,5), (5,3), (1,3) and (1,5) example 3: input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]] output: 24 explanation: each person can choose hats labeled from 1 to 4. number of permutations of (1,2,3,4) = 24. constraints: n == hats.length 1 <= n <= 10 1 <= hats[i].length <= 40 1 <= hats[i][j] <= 40 hats[i] contains a list of unique integers.
an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order. a lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column. example 1: input: matrix = [[3,7,8],[9,11,13],[15,16,17]] output: [15] explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column. example 2: input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]] output: [12] explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column. example 3: input: matrix = [[7,8],[1,2]] output: [7] explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column. constraints: m == mat.length n == mat[i].length 1 <= n, m <= 50 1 <= matrix[i][j] <= 105. all elements in the matrix are distinct.
two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation. recall that the number of set bits an integer has is the number of 1's present when written in binary. for example, 21 written in binary is 10101, which has 3 set bits. example 1: input: left = 6, right = 10 output: 4 explanation: 6 -> 110 (2 set bits, 2 is prime) 7 -> 111 (3 set bits, 3 is prime) 8 -> 1000 (1 set bit, 1 is not prime) 9 -> 1001 (2 set bits, 2 is prime) 10 -> 1010 (2 set bits, 2 is prime) 4 numbers have a prime number of set bits. example 2: input: left = 10, right = 15 output: 5 explanation: 10 -> 1010 (2 set bits, 2 is prime) 11 -> 1011 (3 set bits, 3 is prime) 12 -> 1100 (2 set bits, 2 is prime) 13 -> 1101 (3 set bits, 3 is prime) 14 -> 1110 (3 set bits, 3 is prime) 15 -> 1111 (4 set bits, 4 is not prime) 5 numbers have a prime number of set bits. constraints: 1 <= left <= right <= 106 0 <= right - left <= 104
a function fn, return a memoized version of that function. a memoized function is a function that will never be called twice with the same inputs. instead it will return a cached value. fn can be any function and there are no constraints on what type of values it accepts. inputs are considered identical if they are === to each other. example 1: input: getinputs = () => [[2,2],[2,2],[1,2]] fn = function (a, b) { return a + b; } output: [{"val":4,"calls":1},{"val":4,"calls":1},{"val":3,"calls":2}] explanation: const inputs = getinputs(); const memoized = memoize(fn); for (const arr of inputs) { memoized(...arr); } for the inputs of (2, 2): 2 + 2 = 4, and it required a call to fn(). for the inputs of (2, 2): 2 + 2 = 4, but those inputs were seen before so no call to fn() was required. for the inputs of (1, 2): 1 + 2 = 3, and it required another call to fn() for a total of 2. example 2: input: getinputs = () => [[{},{}],[{},{}],[{},{}]] fn = function (a, b) { return ({...a, ...b}); } output: [{"val":{},"calls":1},{"val":{},"calls":2},{"val":{},"calls":3}] explanation: merging two empty objects will always result in an empty object. it may seem like there should only be 1 call to fn() because of cache-hits, however none of those objects are === to each other. example 3: input: getinputs = () => { const o = {}; return [[o,o],[o,o],[o,o]]; } fn = function (a, b) { return ({...a, ...b}); } output: [{"val":{},"calls":1},{"val":{},"calls":1},{"val":{},"calls":1}] explanation: merging two empty objects will always result in an empty object. the 2nd and 3rd third function calls result in a cache-hit. this is because every object passed in is identical. constraints: 1 <= inputs.length <= 105 0 <= inputs.flat().length <= 105 inputs[i][j] != nan
are given the root of a binary tree. a zigzag path for a binary tree is defined as follow: choose any node in the binary tree and a direction (right or left). if the current direction is right, move to the right child of the current node; otherwise, move to the left child. change the direction from right to left or from left to right. repeat the second and third steps until you can't move in the tree. zigzag length is defined as the number of nodes visited - 1. (a single node has a length of 0). return the longest zigzag path contained in that tree. example 1: input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1] output: 3 explanation: longest zigzag path in blue nodes (right -> left -> right). example 2: input: root = [1,1,1,null,1,null,null,1,1,null,1] output: 4 explanation: longest zigzag path in blue nodes (left -> right -> left -> right). example 3: input: root = [1] output: 0 constraints: the number of nodes in the tree is in the range [1, 5 * 104]. 1 <= node.val <= 100
the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it. omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree. example 1: input: root = [1,2,3,4] output: "1(2(4))(3)" explanation: originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. and it will be "1(2(4))(3)" example 2: input: root = [1,2,3,null,4] output: "1(2()(4))(3)" explanation: almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output. constraints: the number of nodes in the tree is in the range [1, 104]. -1000 <= node.val <= 1000
have a data structure of employee information, including the employee's unique id, importance value, and direct subordinates' ids. you are given an array of employees employees where: employees[i].id is the id of the ith employee. employees[i].importance is the importance value of the ith employee. employees[i].subordinates is a list of the ids of the direct subordinates of the ith employee. given an integer id that represents an employee's id, return the total importance value of this employee and all their direct and indirect subordinates. example 1: input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1 output: 11 explanation: employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3. they both have an importance value of 3. thus, the total importance value of employee 1 is 5 + 3 + 3 = 11. example 2: input: employees = [[1,2,[5]],[5,-3,[]]], id = 5 output: -3 explanation: employee 5 has an importance value of -3 and has no direct subordinates. thus, the total importance value of employee 5 is -3. constraints: 1 <= employees.length <= 2000 1 <= employees[i].id <= 2000 all employees[i].id are unique. -100 <= employees[i].importance <= 100 one employee has at most one direct leader and may have several subordinates. the ids in employees[i].subordinates are valid ids.
are given the root of a binary tree where each node has a value 0 or 1. each root-to-leaf path represents a binary number starting with the most significant bit. for example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13. for all leaves in the tree, consider the numbers represented by the path from the root to that leaf. return the sum of these numbers. the test cases are generated so that the answer fits in a 32-bits integer. example 1: input: root = [1,0,1,0,1,0,1] output: 22 explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22 example 2: input: root = [0] output: 0 constraints: the number of nodes in the tree is in the range [1, 1000]. node.val is 0 or 1.
an integer n, return a counter function. this counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc). example 1: input: n = 10 ["call","call","call"] output: [10,11,12] explanation: counter() = 10 // the first time counter() is called, it returns n. counter() = 11 // returns 1 more than the previous time. counter() = 12 // returns 1 more than the previous time. example 2: input: n = -2 ["call","call","call","call","call"] output: [-2,-1,0,1,2] explanation: counter() initially returns -2. then increases after each sebsequent call. constraints: -1000 <= n <= 1000 at most 1000 calls to counter() will be made
are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col]. you are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. each move you make takes 1 second. return the minimum time required in which you can visit the bottom-right cell of the matrix. if you cannot visit the bottom-right cell, then return -1. example 1: input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]] output: 7 explanation: one of the paths that we can take is the following: - at t = 0, we are on the cell (0,0). - at t = 1, we move to the cell (0,1). it is possible because grid[0][1] <= 1. - at t = 2, we move to the cell (1,1). it is possible because grid[1][1] <= 2. - at t = 3, we move to the cell (1,2). it is possible because grid[1][2] <= 3. - at t = 4, we move to the cell (1,1). it is possible because grid[1][1] <= 4. - at t = 5, we move to the cell (1,2). it is possible because grid[1][2] <= 5. - at t = 6, we move to the cell (1,3). it is possible because grid[1][3] <= 6. - at t = 7, we move to the cell (2,3). it is possible because grid[2][3] <= 7. the final time is 7. it can be shown that it is the minimum time possible. example 2: input: grid = [[0,2,4],[3,2,1],[1,0,4]] output: -1 explanation: there is no path from the top left to the bottom-right cell. constraints: m == grid.length n == grid[i].length 2 <= m, n <= 1000 4 <= m * n <= 105 0 <= grid[i][j] <= 105 grid[0][0] == 0
the root of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus the sum of all keys greater than the original key in bst. as a reminder, a binary search tree is a tree that satisfies these constraints: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees. example 1: input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] example 2: input: root = [0,null,1] output: [1,null,1] constraints: the number of nodes in the tree is in the range [1, 100]. 0 <= node.val <= 100 all the values in the tree are unique. note: this question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/
have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. in each garden, you want to plant one of 4 types of flowers. all gardens have at most 3 paths coming into or leaving it. your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers. return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. the flower types are denoted 1, 2, 3, or 4. it is guaranteed an answer exists. example 1: input: n = 3, paths = [[1,2],[2,3],[3,1]] output: [1,2,3] explanation: gardens 1 and 2 have different types. gardens 2 and 3 have different types. gardens 3 and 1 have different types. hence, [1,2,3] is a valid answer. other valid answers include [1,2,4], [1,4,2], and [3,2,1]. example 2: input: n = 4, paths = [[1,2],[3,4]] output: [1,2,1,2] example 3: input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]] output: [1,2,3,4] constraints: 1 <= n <= 104 0 <= paths.length <= 2 * 104 paths[i].length == 2 1 <= xi, yi <= n xi != yi every garden has at most 3 paths coming into or leaving it.
social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. these periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day). for example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies: every minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000] every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000] every day (86400-second chunks): [10,10000] notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example). design and implement an api to help the company with their analysis. implement the tweetcounts class: tweetcounts() initializes the tweetcounts object. void recordtweet(string tweetname, int time) stores the tweetname at the recorded time (in seconds). list<integer> gettweetcountsperfrequency(string freq, string tweetname, int starttime, int endtime) returns a list of integers representing the number of tweets with tweetname in each time chunk for the given period of time [starttime, endtime] (in seconds) and frequency freq. freq is one of "minute", "hour", or "day" representing a frequency of every minute, hour, or day respectively. example: input ["tweetcounts","recordtweet","recordtweet","recordtweet","gettweetcountsperfrequency","gettweetcountsperfrequency","recordtweet","gettweetcountsperfrequency"] [[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]] output [null,null,null,null,[2],[2,1],null,[4]] explanation tweetcounts tweetcounts = new tweetcounts(); tweetcounts.recordtweet("tweet3", 0); // new tweet "tweet3" at time 0 tweetcounts.recordtweet("tweet3", 60); // new tweet "tweet3" at time 60 tweetcounts.recordtweet("tweet3", 10); // new tweet "tweet3" at time 10 tweetcounts.gettweetcountsperfrequency("minute", "tweet3", 0, 59); // return [2]; chunk [0,59] had 2 tweets tweetcounts.gettweetcountsperfrequency("minute", "tweet3", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet tweetcounts.recordtweet("tweet3", 120); // new tweet "tweet3" at time 120 tweetcounts.gettweetcountsperfrequency("hour", "tweet3", 0, 210); // return [4]; chunk [0,210] had 4 tweets constraints: 0 <= time, starttime, endtime <= 109 0 <= endtime - starttime <= 104 there will be at most 104 calls in total to recordtweet and gettweetcountsperfrequency.
and bob have an undirected graph of n nodes and three types of edges: type 1: can be traversed by alice only. type 2: can be traversed by bob only. type 3: can be traversed by both alice and bob. given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both alice and bob. the graph is fully traversed by alice and bob if starting from any node, they can reach all other nodes. return the maximum number of edges you can remove, or return -1 if alice and bob cannot fully traverse the graph. example 1: input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]] output: 2 explanation: if we remove the 2 edges [1,1,2] and [1,1,3]. the graph will still be fully traversable by alice and bob. removing any additional edge will not make it so. so the maximum number of edges we can remove is 2. example 2: input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]] output: 0 explanation: notice that removing any edge will not make the graph fully traversable by alice and bob. example 3: input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]] output: -1 explanation: in the current graph, alice cannot reach node 4 from the other nodes. likewise, bob cannot reach 1. therefore it's impossible to make the graph fully traversable. constraints: 1 <= n <= 105 1 <= edges.length <= min(105, 3 * n * (n - 1) / 2) edges[i].length == 3 1 <= typei <= 3 1 <= ui < vi <= n all tuples (typei, ui, vi) are distinct.
are given an array of non-negative integers nums and an integer k. in one operation, you may choose any element from nums and increment it by 1. return the maximum product of nums after at most k operations. since the answer may be very large, return it modulo 109 + 7. note that you should maximize the product before taking the modulo. example 1: input: nums = [0,4], k = 5 output: 20 explanation: increment the first number 5 times. now nums = [5, 4], with a product of 5 * 4 = 20. it can be shown that 20 is maximum product possible, so we return 20. note that there may be other ways to increment nums to have the maximum product. example 2: input: nums = [6,3,3,2], k = 2 output: 216 explanation: increment the second number 1 time and increment the fourth number 1 time. now nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216. it can be shown that 216 is maximum product possible, so we return 216. note that there may be other ways to increment nums to have the maximum product. constraints: 1 <= nums.length, k <= 105 0 <= nums[i] <= 106
schema table: sales +-------------+-------+ | column name | type | +-------------+-------+ | sale_id | int | | product_id | int | | year | int | | quantity | int | | price | int | +-------------+-------+ (sale_id, year) is the primary key of this table. product_id is a foreign key to product table. each row of this table shows a sale on the product product_id in a certain year. note that the price is per unit. table: product +--------------+---------+ | column name | type | +--------------+---------+ | product_id | int | | product_name | varchar | +--------------+---------+ product_id is the primary key of this table. each row of this table indicates the product name of each product. write an sql query that reports the product_name, year, and price for each sale_id in the sales table. return the resulting table in any order. the query result format is in the following example. example 1: input: sales table: +---------+------------+------+----------+-------+ | sale_id | product_id | year | quantity | price | +---------+------------+------+----------+-------+ | 1 | 100 | 2008 | 10 | 5000 | | 2 | 100 | 2009 | 12 | 5000 | | 7 | 200 | 2011 | 15 | 9000 | +---------+------------+------+----------+-------+ product table: +------------+--------------+ | product_id | product_name | +------------+--------------+ | 100 | nokia | | 200 | apple | | 300 | samsung | +------------+--------------+ output: +--------------+-------+-------+ | product_name | year | price | +--------------+-------+-------+ | nokia | 2008 | 5000 | | nokia | 2009 | 5000 | | apple | 2011 | 9000 | +--------------+-------+-------+ explanation: from sale_id = 1, we can conclude that nokia was sold for 5000 in the year 2008. from sale_id = 2, we can conclude that nokia was sold for 5000 in the year 2009. from sale_id = 7, we can conclude that apple was sold for 9000 in the year 2011.
are given an array of strings words (0-indexed). in one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j]. return true if you can make every string in words equal using any number of operations, and false otherwise. example 1: input: words = ["abc","aabc","bc"] output: true explanation: move the first 'a' in words[1] to the front of words[2], to make words[1] = "abc" and words[2] = "abc". all the strings are now equal to "abc", so return true. example 2: input: words = ["ab","a"] output: false explanation: it is impossible to make all the strings equal using the operation. constraints: 1 <= words.length <= 100 1 <= words[i].length <= 100 words[i] consists of lowercase english letters.
integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y. given an integer n, return the largest number that is less than or equal to n with monotone increasing digits. example 1: input: n = 10 output: 9 example 2: input: n = 1234 output: 1234 example 3: input: n = 332 output: 299 constraints: 0 <= n <= 109
ugly number is a positive integer that is divisible by a, b, or c. given four integers n, a, b, and c, return the nth ugly number. example 1: input: n = 3, a = 2, b = 3, c = 5 output: 4 explanation: the ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... the 3rd is 4. example 2: input: n = 4, a = 2, b = 3, c = 4 output: 6 explanation: the ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... the 4th is 6. example 3: input: n = 5, a = 2, b = 11, c = 13 output: 10 explanation: the ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... the 5th is 10. constraints: 1 <= n, a, b, c <= 109 1 <= a * b * c <= 1018 it is guaranteed that the result will be in range [1, 2 * 109].
two objects o1 and o2, check if they are deeply equal. for two objects to be deeply equal, they must contain the same keys, and the associated values must also be deeply equal. two objects are also considered deeply equal if they pass the === equality check. you may assume both objects are the output of json.parse. in other words, they are valid json. please solve it without using lodash's _.isequal() function. example 1: input: o1 = {"x":1,"y":2}, o2 = {"x":1,"y":2} output: true explanation: the keys and values match exactly. example 2: input: o1 = {"y":2,"x":1}, o2 = {"x":1,"y":2} output: true explanation: although the keys are in a different order, they still match exactly. example 3: input: o1 = {"x":null,"l":[1,2,3]}, o2 = {"x":null,"l":["1","2","3"]} output: false explanation: the array of numbers is different from the array of strings. example 4: input: o1 = true, o2 = false output: false explanation: true !== false constraints: 1 <= json.stringify(o1).length <= 105 1 <= json.stringify(o2).length <= 105 maxnestingdepth <= 1000
a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent. example 1: input: s = "foobar", letter = "o" output: 33 explanation: the percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33. example 2: input: s = "jjjj", letter = "k" output: 0 explanation: the percentage of characters in s that equal the letter 'k' is 0%, so we return 0. constraints: 1 <= s.length <= 100 s consists of lowercase english letters. letter is a lowercase english letter.
an array of integers arr and an integer k. find the least number of unique integers after removing exactly k elements. example 1: input: arr = [5,5,4], k = 1 output: 1 explanation: remove the single 4, only 5 is left. example 2: input: arr = [4,3,1,1,3,3,2], k = 3 output: 2 explanation: remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left. constraints: 1 <= arr.length <= 10^5 1 <= arr[i] <= 10^9 0 <= k <= arr.length
integer is a positive integer that does not contain any 0 in its decimal representation. given an integer n, return a list of two integers [a, b] where: a and b are no-zero integers. a + b = n the test cases are generated so that there is at least one valid solution. if there are many valid solutions, you can return any of them. example 1: input: n = 2 output: [1,1] explanation: let a = 1 and b = 1. both a and b are no-zero integers, and a + b = 2 = n. example 2: input: n = 11 output: [2,9] explanation: let a = 2 and b = 9. both a and b are no-zero integers, and a + b = 9 = n. note that there are other valid answers as [8, 3] that can be accepted. constraints: 2 <= n <= 104
an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted. a string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet. example 1: input: n = 1 output: 5 explanation: the 5 sorted strings that consist of vowels only are ["a","e","i","o","u"]. example 2: input: n = 2 output: 15 explanation: the 15 sorted strings that consist of vowels only are ["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"]. note that "ea" is not a valid string since 'e' comes after 'a' in the alphabet. example 3: input: n = 33 output: 66045 constraints: 1 <= n <= 50
may recall that an array arr is a mountain array if and only if: arr.length >= 3 there exists some index i (0-indexed) with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given an integer array arr, return the length of the longest subarray, which is a mountain. return 0 if there is no mountain subarray. example 1: input: arr = [2,1,4,7,3,2,5] output: 5 explanation: the largest mountain is [1,4,7,3,2] which has length 5. example 2: input: arr = [2,2,2] output: 0 explanation: there is no mountain. constraints: 1 <= arr.length <= 104 0 <= arr[i] <= 104 follow up: can you solve it using only one pass? can you solve it in o(1) space?
are given two positive integer arrays nums1 and nums2, both of length n. the absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed). you can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference. return the minimum absolute sum difference after replacing at most one element in the array nums1. since the answer may be large, return it modulo 109 + 7. |x| is defined as: x if x >= 0, or -x if x < 0. example 1: input: nums1 = [1,7,5], nums2 = [2,3,5] output: 3 explanation: there are two possible optimal solutions: - replace the second element with the first: [1,7,5] => [1,1,5], or - replace the second element with the third: [1,7,5] => [1,5,5]. both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3. example 2: input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10] output: 0 explanation: nums1 is equal to nums2 so no replacement is needed. this will result in an absolute sum difference of 0. example 3: input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4] output: 20 explanation: replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7]. this yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20 constraints: n == nums1.length n == nums2.length 1 <= n <= 105 1 <= nums1[i], nums2[i] <= 105
are given two integer arrays nums1 and nums2 both of the same length. the advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i]. return any permutation of nums1 that maximizes its advantage with respect to nums2. example 1: input: nums1 = [2,7,11,15], nums2 = [1,10,4,11] output: [2,11,7,15] example 2: input: nums1 = [12,24,8,32], nums2 = [13,25,32,11] output: [24,32,8,12] constraints: 1 <= nums1.length <= 105 nums2.length == nums1.length 0 <= nums1[i], nums2[i] <= 109
storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations. the game is represented by an m x n grid of characters grid where each element is a wall, floor, or box. your task is to move the box 'b' to the target position 't' under the following rules: the character 's' represents the player. the player can move up, down, left, right in grid if it is a floor (empty cell). the character '.' represents the floor which means a free cell to walk. the character '#' represents the wall which means an obstacle (impossible to walk there). there is only one box 'b' and one target cell 't' in the grid. the box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. this is a push. the player cannot walk through the box. return the minimum number of pushes to move the box to the target. if there is no way to reach the target, return -1. example 1: input: grid = [["#","#","#","#","#","#"], ["#","t","#","#","#","#"], ["#",".",".","b",".","#"], ["#",".","#","#",".","#"], ["#",".",".",".","s","#"], ["#","#","#","#","#","#"]] output: 3 explanation: we return only the number of times the box is pushed. example 2: input: grid = [["#","#","#","#","#","#"], ["#","t","#","#","#","#"], ["#",".",".","b",".","#"], ["#","#","#","#",".","#"], ["#",".",".",".","s","#"], ["#","#","#","#","#","#"]] output: -1 example 3: input: grid = [["#","#","#","#","#","#"], ["#","t",".",".","#","#"], ["#",".","#","b",".","#"], ["#",".",".",".",".","#"], ["#",".",".",".","s","#"], ["#","#","#","#","#","#"]] output: 5 explanation: push the box down, left, left, up and up. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 grid contains only characters '.', '#', 's', 't', or 'b'. there is only one character 's', 'b', and 't' in the grid.
manages a company and has rented some floors of a building as office space. alice has decided some of these floors should be special floors, used for relaxation only. you are given two integers bottom and top, which denote that alice has rented all the floors from bottom to top (inclusive). you are also given the integer array special, where special[i] denotes a special floor that alice has designated for relaxation. return the maximum number of consecutive floors without a special floor. example 1: input: bottom = 2, top = 9, special = [4,6] output: 3 explanation: the following are the ranges (inclusive) of consecutive floors without a special floor: - (2, 3) with a total amount of 2 floors. - (5, 5) with a total amount of 1 floor. - (7, 9) with a total amount of 3 floors. therefore, we return the maximum number which is 3 floors. example 2: input: bottom = 6, top = 8, special = [7,6,8] output: 0 explanation: every floor rented is a special floor, so we return 0. constraints: 1 <= special.length <= 105 1 <= bottom <= special[i] <= top <= 109 all the values of special are unique.
are playing a video game where you are defending your city from a group of n monsters. you are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city. the monsters walk toward the city at a constant speed. the speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute. you have a weapon that, once fully charged, can eliminate a single monster. however, the weapon takes one minute to charge.the weapon is fully charged at the very start. you lose when any monster reaches your city. if a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon. return the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city. example 1: input: dist = [1,3,4], speed = [1,1,1] output: 3 explanation: in the beginning, the distances of the monsters are [1,3,4]. you eliminate the first monster. after a minute, the distances of the monsters are [x,2,3]. you eliminate the second monster. after a minute, the distances of the monsters are [x,x,2]. you eliminate the thrid monster. all 3 monsters can be eliminated. example 2: input: dist = [1,1,2,3], speed = [1,1,1,1] output: 1 explanation: in the beginning, the distances of the monsters are [1,1,2,3]. you eliminate the first monster. after a minute, the distances of the monsters are [x,0,1,2], so you lose. you can only eliminate 1 monster. example 3: input: dist = [3,2,4], speed = [5,3,2] output: 1 explanation: in the beginning, the distances of the monsters are [3,2,4]. you eliminate the first monster. after a minute, the distances of the monsters are [x,0,2], so you lose. you can only eliminate 1 monster. constraints: n == dist.length == speed.length 1 <= n <= 105 1 <= dist[i], speed[i] <= 105
the grammar given below, strings can represent a set of lowercase words. let r(expr) denote the set of words the expression represents. the grammar can best be understood through simple examples: single letters represent a singleton set containing that word. r("a") = {"a"} r("w") = {"w"} when we take a comma-delimited list of two or more expressions, we take the union of possibilities. r("{a,b,c}") = {"a","b","c"} r("{{a,b},{b,c}}") = {"a","b","c"} (notice the final set only contains each word at most once) when we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. r("{a,b}{c,d}") = {"ac","ad","bc","bd"} r("a{b,c}{d,e}f{g,h}") = {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"} formally, the three rules for our grammar: for every lowercase letter x, we have r(x) = {x}. for expressions e1, e2, ... , ek with k >= 2, we have r({e1, e2, ...}) = r(e1) ∪ r(e2) ∪ ... for expressions e1 and e2, we have r(e1 + e2) = {a + b for (a, b) in r(e1) × r(e2)}, where + denotes concatenation, and × denotes the cartesian product. given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents. example 1: input: expression = "{a,b}{c,{d,e}}" output: ["ac","ad","ae","bc","bd","be"] example 2: input: expression = "{{a,z},a{b,c},{ab,z}}" output: ["a","ab","ac","z"] explanation: each distinct word is written only once in the final answer. constraints: 1 <= expression.length <= 60 expression[i] consists of '{', '}', ','or lowercase english letters. the given expression represents a set of words based on the grammar given in the description.
you are given the following code: class foobar { public void foo() { for (int i = 0; i < n; i++) { print("foo"); } } public void bar() { for (int i = 0; i < n; i++) { print("bar"); } } } the same instance of foobar will be passed to two different threads: thread a will call foo(), while thread b will call bar(). modify the given program to output "foobar" n times. example 1: input: n = 1 output: "foobar" explanation: there are two threads being fired asynchronously. one of them calls foo(), while the other calls bar(). "foobar" is being output 1 time. example 2: input: n = 2 output: "foobarfoobar" explanation: "foobar" is being output 2 times. constraints: 1 <= n <= 1000
are given four integers row, cols, rcenter, and ccenter. there is a rows x cols matrix and you are on the cell with the coordinates (rcenter, ccenter). return the coordinates of all cells in the matrix, sorted by their distance from (rcenter, ccenter) from the smallest distance to the largest distance. you may return the answer in any order that satisfies this condition. the distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|. example 1: input: rows = 1, cols = 2, rcenter = 0, ccenter = 0 output: [[0,0],[0,1]] explanation: the distances from (0, 0) to other cells are: [0,1] example 2: input: rows = 2, cols = 2, rcenter = 0, ccenter = 1 output: [[0,1],[0,0],[1,1],[1,0]] explanation: the distances from (0, 1) to other cells are: [0,1,1,2] the answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct. example 3: input: rows = 2, cols = 3, rcenter = 1, ccenter = 2 output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]] explanation: the distances from (1, 2) to other cells are: [0,1,1,2,2,3] there are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]. constraints: 1 <= rows, cols <= 100 0 <= rcenter < rows 0 <= ccenter < cols
is an m x n grid with a ball. the ball is initially at the position [startrow, startcolumn]. you are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). you can apply at most maxmove moves to the ball. given the five integers m, n, maxmove, startrow, startcolumn, return the number of paths to move the ball out of the grid boundary. since the answer can be very large, return it modulo 109 + 7. example 1: input: m = 2, n = 2, maxmove = 2, startrow = 0, startcolumn = 0 output: 6 example 2: input: m = 1, n = 3, maxmove = 3, startrow = 0, startcolumn = 1 output: 12 constraints: 1 <= m, n <= 50 0 <= maxmove <= 50 0 <= startrow < m 0 <= startcolumn < n
are given a string text. you can swap two of the characters in the text. return the length of the longest substring with repeated characters. example 1: input: text = "ababa" output: 3 explanation: we can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. then, the longest repeated character substring is "aaa" with length 3. example 2: input: text = "aaabaaa" output: 6 explanation: swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring "aaaaaa" with length 6. example 3: input: text = "aaaaa" output: 5 explanation: no need to swap, longest repeated character substring is "aaaaa" with length is 5. constraints: 1 <= text.length <= 2 * 104 text consist of lowercase english characters only.
is a directed graph of n nodes with each node labeled from 0 to n - 1. the graph is represented by a 0-indexed 2d integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i]. a node is a terminal node if there are no outgoing edges. a node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node). return an array containing all the safe nodes of the graph. the answer should be sorted in ascending order. example 1: input: graph = [[1,2],[2,3],[5],[0],[5],[],[]] output: [2,4,5,6] explanation: the given graph is shown above. nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them. every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6. example 2: input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]] output: [4] explanation: only node 4 is a terminal node, and every path starting at node 4 leads to node 4. constraints: n == graph.length 1 <= n <= 104 0 <= graph[i].length <= n 0 <= graph[i][j] <= n - 1 graph[i] is sorted in a strictly increasing order. the graph may contain self-loops. the number of edges in the graph will be in the range [1, 4 * 104].
schema table: tree +-------------+------+ | column name | type | +-------------+------+ | id | int | | p_id | int | +-------------+------+ id is the primary key column for this table. each row of this table contains information about the id of a node and the id of its parent node in a tree. the given structure is always a valid tree. each node in the tree can be one of three types: "leaf": if the node is a leaf node. "root": if the node is the root of the tree. "inner": if the node is neither a leaf node nor a root node. write an sql query to report the type of each node in the tree. return the result table in any order. the query result format is in the following example. example 1: input: tree table: +----+------+ | id | p_id | +----+------+ | 1 | null | | 2 | 1 | | 3 | 1 | | 4 | 2 | | 5 | 2 | +----+------+ output: +----+-------+ | id | type | +----+-------+ | 1 | root | | 2 | inner | | 3 | leaf | | 4 | leaf | | 5 | leaf | +----+-------+ explanation: node 1 is the root node because its parent node is null and it has child nodes 2 and 3. node 2 is an inner node because it has parent node 1 and child node 4 and 5. nodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes. example 2: input: tree table: +----+------+ | id | p_id | +----+------+ | 1 | null | +----+------+ output: +----+-------+ | id | type | +----+-------+ | 1 | root | +----+-------+ explanation: if there is only one node on the tree, you only need to output its root attributes.
distribute some number of candies, to a row of n = num_people people in the following way: we then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person. then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person. this process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. the last person will receive all of our remaining candies (not necessarily one more than the previous gift). return an array (of length num_people and sum candies) that represents the final distribution of candies. example 1: input: candies = 7, num_people = 4 output: [1,2,3,1] explanation: on the first turn, ans[0] += 1, and the array is [1,0,0,0]. on the second turn, ans[1] += 2, and the array is [1,2,0,0]. on the third turn, ans[2] += 3, and the array is [1,2,3,0]. on the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]. example 2: input: candies = 10, num_people = 3 output: [5,2,3] explanation: on the first turn, ans[0] += 1, and the array is [1,0,0]. on the second turn, ans[1] += 2, and the array is [1,2,0]. on the third turn, ans[2] += 3, and the array is [1,2,3]. on the fourth turn, ans[0] += 4, and the final array is [5,2,3]. constraints: 1 <= candies <= 10^9 1 <= num_people <= 1000
are given the string croakoffrogs, which represents a combination of the string "croak" from different frogs, that is, multiple frogs can croak at the same time, so multiple "croak" are mixed. return the minimum number of different frogs to finish all the croaks in the given string. a valid "croak" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. the frogs have to print all five letters to finish a croak. if the given string is not a combination of a valid "croak" return -1. example 1: input: croakoffrogs = "croakcroak" output: 1 explanation: one frog yelling "croak" twice. example 2: input: croakoffrogs = "crcoakroak" output: 2 explanation: the minimum number of frogs is two. the first frog could yell "crcoakroak". the second frog could yell later "crcoakroak". example 3: input: croakoffrogs = "croakcrook" output: -1 explanation: the given string is an invalid combination of "croak" from different frogs. constraints: 1 <= croakoffrogs.length <= 105 croakoffrogs is either 'c', 'r', 'o', 'a', or 'k'.
are given a 2d integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively. a containing set is an array nums where each interval from intervals has at least two integers in nums. for example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets. return the minimum possible size of a containing set. example 1: input: intervals = [[1,3],[3,7],[8,9]] output: 5 explanation: let nums = [2, 3, 4, 8, 9]. it can be shown that there cannot be any containing array of size 4. example 2: input: intervals = [[1,3],[1,4],[2,5],[3,5]] output: 3 explanation: let nums = [2, 3, 4]. it can be shown that there cannot be any containing array of size 2. example 3: input: intervals = [[1,2],[2,3],[2,4],[4,5]] output: 5 explanation: let nums = [1, 2, 3, 4, 5]. it can be shown that there cannot be any containing array of size 4. constraints: 1 <= intervals.length <= 3000 intervals[i].length == 2 0 <= starti < endi <= 108
two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise. a string is represented by an array if the array elements concatenated in order forms the string. example 1: input: word1 = ["ab", "c"], word2 = ["a", "bc"] output: true explanation: word1 represents string "ab" + "c" -> "abc" word2 represents string "a" + "bc" -> "abc" the strings are the same, so return true. example 2: input: word1 = ["a", "cb"], word2 = ["ab", "c"] output: false example 3: input: word1 = ["abc", "d", "defg"], word2 = ["abcddefg"] output: true constraints: 1 <= word1.length, word2.length <= 103 1 <= word1[i].length, word2[i].length <= 103 1 <= sum(word1[i].length), sum(word2[i].length) <= 103 word1[i] and word2[i] consist of lowercase letters.
chef has collected data on the satisfaction level of his n dishes. chef can cook any dish in 1 unit of time. like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i]. return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation. dishes can be prepared in any order and the chef can discard some dishes to get this maximum value. example 1: input: satisfaction = [-1,-8,0,5,-9] output: 14 explanation: after removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). each dish is prepared in one unit of time. example 2: input: satisfaction = [4,3,2] output: 20 explanation: dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20) example 3: input: satisfaction = [-1,-4,-5] output: 0 explanation: people do not like the dishes. no dish is prepared. constraints: n == satisfaction.length 1 <= n <= 500 -1000 <= satisfaction[i] <= 1000
are given a 0-indexed integer array nums. in one operation, you may do the following: choose two integers in nums that are equal. remove both integers from nums, forming a pair. the operation is done on nums as many times as possible. return a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible. example 1: input: nums = [1,3,2,1,3,2,2] output: [3,1] explanation: form a pair with nums[0] and nums[3] and remove them from nums. now, nums = [3,2,3,2,2]. form a pair with nums[0] and nums[2] and remove them from nums. now, nums = [2,2,2]. form a pair with nums[0] and nums[1] and remove them from nums. now, nums = [2]. no more pairs can be formed. a total of 3 pairs have been formed, and there is 1 number leftover in nums. example 2: input: nums = [1,1] output: [1,0] explanation: form a pair with nums[0] and nums[1] and remove them from nums. now, nums = []. no more pairs can be formed. a total of 1 pair has been formed, and there are 0 numbers leftover in nums. example 3: input: nums = [0] output: [0,1] explanation: no pairs can be formed, and there is 1 number leftover in nums. constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 100
a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring . example 1: input: s = "(()" output: 2 explanation: the longest valid parentheses substring is "()". example 2: input: s = ")()())" output: 4 explanation: the longest valid parentheses substring is "()()". example 3: input: s = "" output: 0 constraints: 0 <= s.length <= 3 * 104 s[i] is '(', or ')'.
are given a 0-indexed 2d integer array grid of size m x n that represents a map of the items in a shop. the integers in the grid represent the following: 0 represents a wall that you cannot pass through. 1 represents an empty cell that you can freely move to and from. all other positive integers represent the price of an item in that cell. you may also freely move to and from these item cells. it takes 1 step to travel between adjacent grid cells. you are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). you are further given an integer k. you are interested in the positions of the k highest-ranked items whose prices are within the given price range. the rank is determined by the first of these criteria that is different: distance, defined as the length of the shortest path from the start (shorter distance has a higher rank). price (lower price has a higher rank, but it must be in the price range). the row number (smaller row number has a higher rank). the column number (smaller column number has a higher rank). return the k highest-ranked items within the price range sorted by their rank (highest to lowest). if there are fewer than k reachable items within the price range, return all of them. example 1: input: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3 output: [[0,1],[1,1],[2,1]] explanation: you start at (0,0). with a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2). the ranks of these items are: - (0,1) with distance 1 - (1,1) with distance 2 - (2,1) with distance 3 - (2,2) with distance 4 thus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1). example 2: input: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2 output: [[2,1],[1,2]] explanation: you start at (2,3). with a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1). the ranks of these items are: - (2,1) with distance 2, price 2 - (1,2) with distance 2, price 3 - (1,1) with distance 3 - (0,1) with distance 4 thus, the 2 highest ranked items in the price range are (2,1) and (1,2). example 3: input: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3 output: [[2,1],[2,0]] explanation: you start at (0,0). with a price range of [2,3], we can take items from (2,0) and (2,1). the ranks of these items are: - (2,1) with distance 5 - (2,0) with distance 6 thus, the 2 highest ranked items in the price range are (2,1) and (2,0). note that k = 3 but there are only 2 reachable items within the price range. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= grid[i][j] <= 105 pricing.length == 2 2 <= low <= high <= 105 start.length == 2 0 <= row <= m - 1 0 <= col <= n - 1 grid[row][col] > 0 1 <= k <= m * n
are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order. return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally. example 1: input: matrix = [[0,0,1],[1,1,1],[1,0,1]] output: 4 explanation: you can rearrange the columns as shown above. the largest submatrix of 1s, in bold, has an area of 4. example 2: input: matrix = [[1,0,1,0,1]] output: 3 explanation: you can rearrange the columns as shown above. the largest submatrix of 1s, in bold, has an area of 3. example 3: input: matrix = [[1,1,0],[1,0,1]] output: 2 explanation: notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2. constraints: m == matrix.length n == matrix[i].length 1 <= m * n <= 105 matrix[i][j] is either 0 or 1.
a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino. return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j]. example 1: input: dominoes = [[1,2],[2,1],[3,4],[5,6]] output: 1 example 2: input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]] output: 3 constraints: 1 <= dominoes.length <= 4 * 104 dominoes[i].length == 2 1 <= dominoes[i][j] <= 9
are given three positive integers: n, index, and maxsum. you want to construct an array nums (0-indexed) that satisfies the following conditions: nums.length == n nums[i] is a positive integer where 0 <= i < n. abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1. the sum of all the elements of nums does not exceed maxsum. nums[index] is maximized. return nums[index] of the constructed array. note that abs(x) equals x if x >= 0, and -x otherwise. example 1: input: n = 4, index = 2, maxsum = 6 output: 2 explanation: nums = [1,2,2,1] is one array that satisfies all the conditions. there are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2]. example 2: input: n = 6, index = 1, maxsum = 10 output: 3 constraints: 1 <= n <= maxsum <= 109 0 <= index < n
are given an integer array nums consisting of 2 * n integers. you need to divide nums into n pairs such that: each element belongs to exactly one pair. the elements present in a pair are equal. return true if nums can be divided into n pairs, otherwise return false. example 1: input: nums = [3,2,3,2,2,2] output: true explanation: there are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs. if nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions. example 2: input: nums = [1,2,3,4] output: false explanation: there is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition. constraints: nums.length == 2 * n 1 <= n <= 500 1 <= nums[i] <= 500
are given a 0-indexed array of string words and two integers left and right. a string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'. return the number of vowel strings words[i] where i belongs to the inclusive range [left, right]. example 1: input: words = ["are","amy","u"], left = 0, right = 2 output: 2 explanation: - "are" is a vowel string because it starts with 'a' and ends with 'e'. - "amy" is not a vowel string because it does not end with a vowel. - "u" is a vowel string because it starts with 'u' and ends with 'u'. the number of vowel strings in the mentioned range is 2. example 2: input: words = ["hey","aeo","mu","ooo","artro"], left = 1, right = 4 output: 3 explanation: - "aeo" is a vowel string because it starts with 'a' and ends with 'o'. - "mu" is not a vowel string because it does not start with a vowel. - "ooo" is a vowel string because it starts with 'o' and ends with 'o'. - "artro" is a vowel string because it starts with 'a' and ends with 'o'. the number of vowel strings in the mentioned range is 3. constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 10 words[i] consists of only lowercase english letters. 0 <= left <= right < words.length
an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). the subsequence must be strictly increasing. a continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1]. example 1: input: nums = [1,3,5,4,7] output: 3 explanation: the longest continuous increasing subsequence is [1,3,5] with length 3. even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4. example 2: input: nums = [2,2,2,2,2] output: 1 explanation: the longest continuous increasing subsequence is [2] with length 1. note that it must be strictly increasing. constraints: 1 <= nums.length <= 104 -109 <= nums[i] <= 109
are given a 0-indexed string word, consisting of lowercase english letters. you need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal. return true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise. note: the frequency of a letter x is the number of times it occurs in the string. you must remove exactly one letter and cannot chose to do nothing. example 1: input: word = "abcc" output: true explanation: select index 3 and delete it: word becomes "abc" and each character has a frequency of 1. example 2: input: word = "aazz" output: false explanation: we must delete a character, so either the frequency of "a" is 1 and the frequency of "z" is 2, or vice versa. it is impossible to make all present letters have equal frequency. constraints: 2 <= word.length <= 100 word consists of lowercase english letters only.
robot on an infinite xy-plane starts at point (0, 0) facing north. the robot can receive a sequence of these three possible types of commands: -2: turn left 90 degrees. -1: turn right 90 degrees. 1 <= k <= 9: move forward k units, one unit at a time. some of the grid squares are obstacles. the ith obstacle is at grid point obstacles[i] = (xi, yi). if the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command. return the maximum euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25). note: north means +y direction. east means +x direction. south means -y direction. west means -x direction. example 1: input: commands = [4,-1,3], obstacles = [] output: 25 explanation: the robot starts at (0, 0): 1. move north 4 units to (0, 4). 2. turn right. 3. move east 3 units to (3, 4). the furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away. example 2: input: commands = [4,-1,4,-2,4], obstacles = [[2,4]] output: 65 explanation: the robot starts at (0, 0): 1. move north 4 units to (0, 4). 2. turn right. 3. move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4). 4. turn left. 5. move north 4 units to (1, 8). the furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away. example 3: input: commands = [6,-1,-1,6], obstacles = [] output: 36 explanation: the robot starts at (0, 0): 1. move north 6 units to (0, 6). 2. turn right. 3. turn right. 4. move south 6 units to (0, 0). the furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away. constraints: 1 <= commands.length <= 104 commands[i] is either -2, -1, or an integer in the range [1, 9]. 0 <= obstacles.length <= 104 -3 * 104 <= xi, yi <= 3 * 104 the answer is guaranteed to be less than 231.
are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k. the store sells baskets of k distinct candies. the tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket. return the maximum tastiness of a candy basket. example 1: input: price = [13,5,1,8,21,2], k = 3 output: 8 explanation: choose the candies with the prices [13,5,21]. the tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8. it can be proven that 8 is the maximum tastiness that can be achieved. example 2: input: price = [1,3,1], k = 2 output: 2 explanation: choose the candies with the prices [1,3]. the tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2. it can be proven that 2 is the maximum tastiness that can be achieved. example 3: input: price = [7,7,7,7], k = 2 output: 0 explanation: choosing any two distinct candies from the candies we have will result in a tastiness of 0. constraints: 2 <= k <= price.length <= 105 1 <= price[i] <= 109
are building a string s of length n one character at a time, prepending each new character to the front of the string. the strings are labeled from 1 to n, where the string with length i is labeled si. for example, for s = "abaca", s1 == "a", s2 == "ca", s3 == "aca", etc. the score of si is the length of the longest common prefix between si and sn (note that s == sn). given the final string s, return the sum of the score of every si. example 1: input: s = "babab" output: 9 explanation: for s1 == "b", the longest common prefix is "b" which has a score of 1. for s2 == "ab", there is no common prefix so the score is 0. for s3 == "bab", the longest common prefix is "bab" which has a score of 3. for s4 == "abab", there is no common prefix so the score is 0. for s5 == "babab", the longest common prefix is "babab" which has a score of 5. the sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9. example 2: input: s = "azbazbzaz" output: 14 explanation: for s2 == "az", the longest common prefix is "az" which has a score of 2. for s6 == "azbzaz", the longest common prefix is "azb" which has a score of 3. for s9 == "azbazbzaz", the longest common prefix is "azbazbzaz" which has a score of 9. for all other si, the score is 0. the sum of the scores is 2 + 3 + 9 = 14, so we return 14. constraints: 1 <= s.length <= 105 s consists of lowercase english letters.
an integer n, find a sequence that satisfies all of the following: the integer 1 occurs once in the sequence. each integer between 2 and n occurs twice in the sequence. for every integer i between 2 and n, the distance between the two occurrences of i is exactly i. the distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|. return the lexicographically largest sequence. it is guaranteed that under the given constraints, there is always a solution. a sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. for example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5. example 1: input: n = 3 output: [3,1,2,3,2] explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence. example 2: input: n = 5 output: [5,3,1,4,3,5,2,4,2] constraints: 1 <= n <= 20
a data structure that is initialized with a list of different words. provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure. implement the magicdictionary class: magicdictionary() initializes the object. void builddict(string[] dictionary) sets the data structure with an array of distinct strings dictionary. bool search(string searchword) returns true if you can change exactly one character in searchword to match any string in the data structure, otherwise returns false. example 1: input ["magicdictionary", "builddict", "search", "search", "search", "search"] [[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]] output [null, null, false, true, false, false] explanation magicdictionary magicdictionary = new magicdictionary(); magicdictionary.builddict(["hello", "leetcode"]); magicdictionary.search("hello"); // return false magicdictionary.search("hhllo"); // we can change the second 'h' to 'e' to match "hello" so we return true magicdictionary.search("hell"); // return false magicdictionary.search("leetcoded"); // return false constraints: 1 <= dictionary.length <= 100 1 <= dictionary[i].length <= 100 dictionary[i] consists of only lower-case english letters. all the strings in dictionary are distinct. 1 <= searchword.length <= 100 searchword consists of only lower-case english letters. builddict will be called only once before search. at most 100 calls will be made to search.
an array of integers arr, and three integers a, b and c. you need to find the number of good triplets. a triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true: 0 <= i < j < k < arr.length |arr[i] - arr[j]| <= a |arr[j] - arr[k]| <= b |arr[i] - arr[k]| <= c where |x| denotes the absolute value of x. return the number of good triplets. example 1: input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3 output: 4 explanation: there are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]. example 2: input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1 output: 0 explanation: no triplet satisfies all conditions. constraints: 3 <= arr.length <= 100 0 <= arr[i] <= 1000 0 <= a, b, c <= 1000
a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s. the distance between two indices i and j is abs(i - j), where abs is the absolute value function. example 1: input: s = "loveleetcode", c = "e" output: [3,2,1,0,1,0,0,1,2,2,1,0] explanation: the character 'e' appears at indices 3, 5, 6, and 11 (0-indexed). the closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3. the closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2. for index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1. the closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2. example 2: input: s = "aaab", c = "b" output: [3,2,1,0] constraints: 1 <= s.length <= 104 s[i] and c are lowercase english letters. it is guaranteed that c occurs at least once in s.
are given an integer n. you have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. the ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0. return the order of the largest axis-aligned plus sign of 1's contained in grid. if there is none, return 0. an axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's. example 1: input: n = 5, mines = [[4,2]] output: 2 explanation: in the above grid, the largest plus sign can only be of order 2. one of them is shown. example 2: input: n = 1, mines = [[0,0]] output: 0 explanation: there is no plus sign, so return 0. constraints: 1 <= n <= 500 1 <= mines.length <= 5000 0 <= xi, yi < n all the pairs (xi, yi) are unique.
an integer n, return a binary string representing its representation in base -2. note that the returned string should not have leading zeros unless the string is "0". example 1: input: n = 2 output: "110" explantion: (-2)2 + (-2)1 = 2 example 2: input: n = 3 output: "111" explantion: (-2)2 + (-2)1 + (-2)0 = 3 example 3: input: n = 4 output: "100" explantion: (-2)2 = 4 constraints: 0 <= n <= 109
are given an array of unique strings words where words[i] is six letters long. one word of words was chosen as a secret word. you are also given the helper object master. you may call master.guess(word) where word is a six-letter-long string, and it must be from words. master.guess(word) returns: -1 if word is not from words, or an integer representing the number of exact matches (value and position) of your guess to the secret word. there is a parameter allowedguesses for each test case where allowedguesses is the maximum number of times you can call master.guess(word). for each test case, you should call master.guess with the secret word without exceeding the maximum number of allowed guesses. you will get: "either you took too many guesses, or you did not find the secret word." if you called master.guess more than allowedguesses times or if you did not call master.guess with the secret word, or "you guessed the secret word correctly." if you called master.guess with the secret word with the number of calls to master.guess less than or equal to allowedguesses. the test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method). example 1: input: secret = "acckzz", words = ["acckzz","ccbazz","eiowzz","abcczz"], allowedguesses = 10 output: you guessed the secret word correctly. explanation: master.guess("aaaaaa") returns -1, because "aaaaaa" is not in wordlist. master.guess("acckzz") returns 6, because "acckzz" is secret and has all 6 matches. master.guess("ccbazz") returns 3, because "ccbazz" has 3 matches. master.guess("eiowzz") returns 2, because "eiowzz" has 2 matches. master.guess("abcczz") returns 4, because "abcczz" has 4 matches. we made 5 calls to master.guess, and one of them was the secret, so we pass the test case. example 2: input: secret = "hamada", words = ["hamada","khaled"], allowedguesses = 10 output: you guessed the secret word correctly. explanation: since there are two words, you can guess both. constraints: 1 <= words.length <= 100 words[i].length == 6 words[i] consist of lowercase english letters. all the strings of wordlist are unique. secret exists in words. 10 <= allowedguesses <= 30
are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. you are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree. any node in the binary tree can be flipped by swapping its left and right subtrees. for example, flipping node 1 will have the following effect: flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage. return a list of the values of all flipped nodes. you may return the answer in any order. if it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1]. example 1: input: root = [1,2], voyage = [2,1] output: [-1] explanation: it is impossible to flip the nodes such that the pre-order traversal matches voyage. example 2: input: root = [1,2,3], voyage = [1,3,2] output: [1] explanation: flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage. example 3: input: root = [1,2,3], voyage = [1,2,3] output: [] explanation: the tree's pre-order traversal already matches voyage, so no nodes need to be flipped. constraints: the number of nodes in the tree is n. n == voyage.length 1 <= n <= 100 1 <= node.val, voyage[i] <= n all the values in the tree are unique. all the values in voyage are unique.
two arrays of integers with equal lengths, return the maximum value of: |arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j| where the maximum is taken over all 0 <= i, j < arr1.length. example 1: input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] output: 13 example 2: input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] output: 20 constraints: 2 <= arr1.length == arr2.length <= 40000 -10^6 <= arr1[i], arr2[i] <= 10^6
are installing a billboard and want it to have the largest height. the billboard will have two steel supports, one on each side. each steel support must be an equal height. you are given a collection of rods that can be welded together. for example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6. return the largest possible height of your billboard installation. if you cannot support the billboard, return 0. example 1: input: rods = [1,2,3,6] output: 6 explanation: we have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6. example 2: input: rods = [1,2,3,4,5,6] output: 10 explanation: we have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10. example 3: input: rods = [1,2] output: 0 explanation: the billboard cannot be supported, so we return 0. constraints: 1 <= rods.length <= 20 1 <= rods[i] <= 1000 sum(rods[i]) <= 5000
the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized. return the maximum product of the sums of the two subtrees. since the answer may be too large, return it modulo 109 + 7. note that you need to maximize the answer before taking the mod and not after taking it. example 1: input: root = [1,2,3,4,5,6] output: 110 explanation: remove the red edge and get 2 binary trees with sum 11 and 10. their product is 110 (11*10) example 2: input: root = [1,null,2,3,4,null,null,5,6] output: 90 explanation: remove the red edge and get 2 binary trees with sum 15 and 6.their product is 90 (15*6) constraints: the number of nodes in the tree is in the range [2, 5 * 104]. 1 <= node.val <= 104
are given a positive integer array nums. the element sum is the sum of all the elements in nums. the digit sum is the sum of all the digits (not necessarily distinct) that appear in nums. return the absolute difference between the element sum and digit sum of nums. note that the absolute difference between two integers x and y is defined as |x - y|. example 1: input: nums = [1,15,6,3] output: 9 explanation: the element sum of nums is 1 + 15 + 6 + 3 = 25. the digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16. the absolute difference between the element sum and digit sum is |25 - 16| = 9. example 2: input: nums = [1,2,3,4] output: 0 explanation: the element sum of nums is 1 + 2 + 3 + 4 = 10. the digit sum of nums is 1 + 2 + 3 + 4 = 10. the absolute difference between the element sum and digit sum is |10 - 10| = 0. constraints: 1 <= nums.length <= 2000 1 <= nums[i] <= 2000
peak element in a 2d grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom. given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j]. you may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell. you must write an algorithm that runs in o(m log(n)) or o(n log(m)) time. example 1: input: mat = [[1,4],[3,2]] output: [0,1] explanation: both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers. example 2: input: mat = [[10,20,15],[21,30,14],[7,16,32]] output: [1,1] explanation: both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers. constraints: m == mat.length n == mat[i].length 1 <= m, n <= 500 1 <= mat[i][j] <= 105 no two adjacent cells are equal.
are given an array of positive integers nums and want to erase a subarray containing unique elements. the score you get by erasing the subarray is equal to the sum of its elements. return the maximum score you can get by erasing exactly one subarray. an array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r). example 1: input: nums = [4,2,4,5,6] output: 17 explanation: the optimal subarray here is [2,4,5,6]. example 2: input: nums = [5,2,1,2,5,2,1,2,5] output: 8 explanation: the optimal subarray here is [5,2,1] or [1,2,5]. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 104
are given an integer array nums. you can choose exactly one index (0-indexed) and remove the element. notice that the index of the elements may change after the removal. for example, if nums = [6,1,7,4,1]: choosing to remove index 1 results in nums = [6,7,4,1]. choosing to remove index 2 results in nums = [6,1,4,1]. choosing to remove index 4 results in nums = [6,1,7,4]. an array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values. return the number of indices that you could choose such that after the removal, nums is fair. example 1: input: nums = [2,1,6,4] output: 1 explanation: remove index 0: [1,6,4] -> even sum: 1 + 4 = 5. odd sum: 6. not fair. remove index 1: [2,6,4] -> even sum: 2 + 4 = 6. odd sum: 6. fair. remove index 2: [2,1,4] -> even sum: 2 + 4 = 6. odd sum: 1. not fair. remove index 3: [2,1,6] -> even sum: 2 + 6 = 8. odd sum: 1. not fair. there is 1 index that you can remove to make nums fair. example 2: input: nums = [1,1,1] output: 3 explanation: you can remove any index and the remaining array is fair. example 3: input: nums = [1,2,3] output: 0 explanation: you cannot make a fair array after removing any index. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 104
are given an array points containing the coordinates of points on a 2d plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. you are also given an integer k. return the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length. it is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k. example 1: input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1 output: 4 explanation: the first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1. no other pairs satisfy the condition, so we return the max of 4 and 1. example 2: input: points = [[0,0],[3,0],[9,2]], k = 3 output: 3 explanation: only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3. constraints: 2 <= points.length <= 105 points[i].length == 2 -108 <= xi, yi <= 108 0 <= k <= 2 * 108 xi < xj for all 1 <= i < j <= points.length xi form a strictly increasing sequence.
the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. for example, if s = "dcce" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2. you are given an array of strings words and another array of query strings queries. for each query queries[i], count the number of words in words such that f(queries[i]) < f(w) for each w in words. return an integer array answer, where each answer[i] is the answer to the ith query. example 1: input: queries = ["cbd"], words = ["zaaaz"] output: [1] explanation: on the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz"). example 2: input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"] output: [1,2] explanation: on the first query only f("bbb") < f("aaaa"). on the second query both f("aaa") and f("aaaa") are both > f("cc"). constraints: 1 <= queries.length <= 2000 1 <= words.length <= 2000 1 <= queries[i].length, words[i].length <= 10 queries[i][j], words[i][j] consist of lowercase english letters.
two arrays of strings list1 and list2, find the common strings with the least index sum. a common string is a string that appeared in both list1 and list2. a common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings. return all the common strings with the least index sum. return the answer in any order. example 1: input: list1 = ["shogun","tapioca express","burger king","kfc"], list2 = ["piatti","the grill at torrey pines","hungry hunter steakhouse","shogun"] output: ["shogun"] explanation: the only common string is "shogun". example 2: input: list1 = ["shogun","tapioca express","burger king","kfc"], list2 = ["kfc","shogun","burger king"] output: ["shogun"] explanation: the common string with the least index sum is "shogun" with index sum = (0 + 1) = 1. example 3: input: list1 = ["happy","sad","good"], list2 = ["sad","happy","good"] output: ["sad","happy"] explanation: there are three common strings: "happy" with index sum = (0 + 1) = 1. "sad" with index sum = (1 + 0) = 1. "good" with index sum = (2 + 2) = 4. the strings with the least index sum are "sad" and "happy". constraints: 1 <= list1.length, list2.length <= 1000 1 <= list1[i].length, list2[i].length <= 30 list1[i] and list2[i] consist of spaces ' ' and english letters. all the strings of list1 are unique. all the strings of list2 are unique. there is at least a common string between list1 and list2.
everyone has used the multiplication table. the multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed). given three integers m, n, and k, return the kth smallest element in the m x n multiplication table. example 1: input: m = 3, n = 3, k = 5 output: 3 explanation: the 5th smallest number is 3. example 2: input: m = 2, n = 3, k = 6 output: 6 explanation: the 6th smallest number is 6. constraints: 1 <= m, n <= 3 * 104 1 <= k <= m * n
an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three. example 1: input: nums = [3,6,5,1,8] output: 18 explanation: pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3). example 2: input: nums = [4] output: 0 explanation: since 4 is not divisible by 3, do not pick any number. example 3: input: nums = [1,2,3,4,4] output: 12 explanation: pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3). constraints: 1 <= nums.length <= 4 * 104 1 <= nums[i] <= 104
schema table: activity +----------------+---------+ | column name | type | +----------------+---------+ | machine_id | int | | process_id | int | | activity_type | enum | | timestamp | float | +----------------+---------+ the table shows the user activities for a factory website. (machine_id, process_id, activity_type) is the primary key of this table. machine_id is the id of a machine. process_id is the id of a process running on the machine with id machine_id. activity_type is an enum of type ('start', 'end'). timestamp is a float representing the current time in seconds. 'start' means the machine starts the process at the given timestamp and 'end' means the machine ends the process at the given timestamp. the 'start' timestamp will always be before the 'end' timestamp for every (machine_id, process_id) pair. there is a factory website that has several machines each running the same number of processes. write an sql query to find the average time each machine takes to complete a process. the time to complete a process is the 'end' timestamp minus the 'start' timestamp. the average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run. the resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places. return the result table in any order. the query result format is in the following example. example 1: input: activity table: +------------+------------+---------------+-----------+ | machine_id | process_id | activity_type | timestamp | +------------+------------+---------------+-----------+ | 0 | 0 | start | 0.712 | | 0 | 0 | end | 1.520 | | 0 | 1 | start | 3.140 | | 0 | 1 | end | 4.120 | | 1 | 0 | start | 0.550 | | 1 | 0 | end | 1.550 | | 1 | 1 | start | 0.430 | | 1 | 1 | end | 1.420 | | 2 | 0 | start | 4.100 | | 2 | 0 | end | 4.512 | | 2 | 1 | start | 2.500 | | 2 | 1 | end | 5.000 | +------------+------------+---------------+-----------+ output: +------------+-----------------+ | machine_id | processing_time | +------------+-----------------+ | 0 | 0.894 | | 1 | 0.995 | | 2 | 1.456 | +------------+-----------------+ explanation: there are 3 machines running 2 processes each. machine 0's average time is ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894 machine 1's average time is ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995 machine 2's average time is ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456
are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. you must choose a subsequence of indices from nums1 of length k. for chosen indices i0, i1, ..., ik - 1, your score is defined as: the sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2. it can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]). return the maximum possible score. a subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements. example 1: input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3 output: 12 explanation: the four possible subsequence scores are: - we choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7. - we choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. - we choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. - we choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8. therefore, we return the max score, which is 12. example 2: input: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1 output: 30 explanation: choosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score. constraints: n == nums1.length == nums2.length 1 <= n <= 105 0 <= nums1[i], nums2[j] <= 105 1 <= k <= n
two positive integers left and right, find the two integers num1 and num2 such that: left <= nums1 < nums2 <= right . nums1 and nums2 are both prime numbers. nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions. return the positive integer array ans = [nums1, nums2]. if there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist. a number greater than 1 is called prime if it is only divisible by 1 and itself. example 1: input: left = 10, right = 19 output: [11,13] explanation: the prime numbers between 10 and 19 are 11, 13, 17, and 19. the closest gap between any pair is 2, which can be achieved by [11,13] or [17,19]. since 11 is smaller than 17, we return the first pair. example 2: input: left = 4, right = 6 output: [-1,-1] explanation: there exists only one prime number in the given range, so the conditions cannot be satisfied. constraints: 1 <= left <= right <= 106
are given the head of a linked list with n nodes. for each node in the list, find the value of the next greater node. that is, for each node, find the value of the first node that is next to it and has a strictly larger value than it. return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). if the ith node does not have a next greater node, set answer[i] = 0. example 1: input: head = [2,1,5] output: [5,5,0] example 2: input: head = [2,7,4,3,5] output: [7,0,5,5,0] constraints: the number of nodes in the list is n. 1 <= n <= 104 1 <= node.val <= 109
are given four integers, m, n, introvertscount, and extrovertscount. you have an m x n grid, and there are two types of people: introverts and extroverts. there are introvertscount introverts and extrovertscount extroverts. you should decide how many people you want to live in the grid and assign each of them one grid cell. note that you do not have to have all the people living in the grid. the happiness of each person is calculated as follows: introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert). extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert). neighbors live in the directly adjacent cells north, east, south, and west of a person's cell. the grid happiness is the sum of each person's happiness. return the maximum possible grid happiness. example 1: input: m = 2, n = 3, introvertscount = 1, extrovertscount = 2 output: 240 explanation: assume the grid is 1-indexed with coordinates (row, column). we can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3). - introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120 - extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60 - extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60 the grid happiness is 120 + 60 + 60 = 240. the above figure shows the grid in this example with each person's happiness. the introvert stays in the light green cell while the extroverts live on the light purple cells. example 2: input: m = 3, n = 1, introvertscount = 2, extrovertscount = 1 output: 260 explanation: place the two introverts in (1,1) and (3,1) and the extrovert at (2,1). - introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90 - extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80 - introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90 the grid happiness is 90 + 80 + 90 = 260. example 3: input: m = 2, n = 2, introvertscount = 4, extrovertscount = 0 output: 240 constraints: 1 <= m, n <= 5 0 <= introvertscount, extrovertscount <= min(m * n, 6)
schema table: transactions +---------------+---------+ | column name | type | +---------------+---------+ | id | int | | country | varchar | | state | enum | | amount | int | | trans_date | date | +---------------+---------+ id is the primary key of this table. the table has information about incoming transactions. the state column is an enum of type ["approved", "declined"]. write an sql query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount. return the result table in any order. the query result format is in the following example. example 1: input: transactions table: +------+---------+----------+--------+------------+ | id | country | state | amount | trans_date | +------+---------+----------+--------+------------+ | 121 | us | approved | 1000 | 2018-12-18 | | 122 | us | declined | 2000 | 2018-12-19 | | 123 | us | approved | 2000 | 2019-01-01 | | 124 | de | approved | 2000 | 2019-01-07 | +------+---------+----------+--------+------------+ output: +----------+---------+-------------+----------------+--------------------+-----------------------+ | month | country | trans_count | approved_count | trans_total_amount | approved_total_amount | +----------+---------+-------------+----------------+--------------------+-----------------------+ | 2018-12 | us | 2 | 1 | 3000 | 1000 | | 2019-01 | us | 1 | 1 | 2000 | 2000 | | 2019-01 | de | 1 | 1 | 2000 | 2000 | +----------+---------+-------------+----------------+--------------------+-----------------------+
and bob take turns playing a game, with alice starting first. there are n stones in a pile. on each player's turn, they can remove a stone from the pile and receive points based on the stone's value. alice and bob may value the stones differently. you are given two integer arrays of length n, alicevalues and bobvalues. each alicevalues[i] and bobvalues[i] represents how alice and bob, respectively, value the ith stone. the winner is the person with the most points after all the stones are chosen. if both players have the same amount of points, the game results in a draw. both players will play optimally. both players know the other's values. determine the result of the game, and: if alice wins, return 1. if bob wins, return -1. if the game results in a draw, return 0. example 1: input: alicevalues = [1,3], bobvalues = [2,1] output: 1 explanation: if alice takes stone 1 (0-indexed) first, alice will receive 3 points. bob can only choose stone 0, and will only receive 2 points. alice wins. example 2: input: alicevalues = [1,2], bobvalues = [3,1] output: 0 explanation: if alice takes stone 0, and bob takes stone 1, they will both have 1 point. draw. example 3: input: alicevalues = [2,4,3], bobvalues = [1,6,7] output: -1 explanation: regardless of how alice plays, bob will be able to have more points than alice. for example, if alice takes stone 1, bob can take stone 2, and alice takes stone 0, alice will have 6 points to bob's 7. bob wins. constraints: n == alicevalues.length == bobvalues.length 1 <= n <= 105 1 <= alicevalues[i], bobvalues[i] <= 100
the root of a binary tree, the depth of each node is the shortest distance to the root. return the smallest subtree such that it contains all the deepest nodes in the original tree. a node is called the deepest if it has the largest depth possible among any node in the entire tree. the subtree of a node is a tree consisting of that node, plus the set of all descendants of that node. example 1: input: root = [3,5,1,6,2,0,8,null,null,7,4] output: [2,7,4] explanation: we return the node with value 2, colored in yellow in the diagram. the nodes coloured in blue are the deepest nodes of the tree. notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it. example 2: input: root = [1] output: [1] explanation: the root is the deepest node in the tree. example 3: input: root = [0,1,3,null,2] output: [2] explanation: the deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest. constraints: the number of nodes in the tree will be in the range [1, 500]. 0 <= node.val <= 500 the values of the nodes in the tree are unique. note: this question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/
are given a string s containing lowercase letters and an integer k. you need to : first, change some characters of s to other lowercase english letters. then divide s into k non-empty disjoint substrings such that each substring is a palindrome. return the minimal number of characters that you need to change to divide the string. example 1: input: s = "abc", k = 2 output: 1 explanation: you can split the string into "ab" and "c", and change 1 character in "ab" to make it palindrome. example 2: input: s = "aabbc", k = 3 output: 0 explanation: you can split the string into "aa", "bb" and "c", all of them are palindrome. example 3: input: s = "leetcode", k = 8 output: 0 constraints: 1 <= k <= s.length <= 100. s only contains lowercase english letters.
an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k. after converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10. example 1: input: n = 34, k = 6 output: 9 explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9. example 2: input: n = 10, k = 10 output: 1 explanation: n is already in base 10. 1 + 0 = 1. constraints: 1 <= n <= 100 2 <= k <= 10
an array of integers arr, return the number of subarrays with an odd sum. since the answer can be very large, return it modulo 109 + 7. example 1: input: arr = [1,3,5] output: 4 explanation: all subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]] all sub-arrays sum are [1,4,9,3,8,5]. odd sums are [1,9,3,5] so the answer is 4. example 2: input: arr = [2,4,6] output: 0 explanation: all subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]] all sub-arrays sum are [2,6,12,4,10,6]. all sub-arrays have even sum and the answer is 0. example 3: input: arr = [1,2,3,4,5,6,7] output: 16 constraints: 1 <= arr.length <= 105 1 <= arr[i] <= 100
tree is an undirected graph in which any two vertices are connected by exactly one path. in other words, any connected graph without simple cycles is a tree. given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. when you select a node x as the root, the result tree has height h. among all possible rooted trees, those with minimum height (i.e. min(h)) are called minimum height trees (mhts). return a list of all mhts' root labels. you can return the answer in any order. the height of a rooted tree is the number of edges on the longest downward path between the root and a leaf. example 1: input: n = 4, edges = [[1,0],[1,2],[1,3]] output: [1] explanation: as shown, the height of the tree is 1 when the root is the node with label 1 which is the only mht. example 2: input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]] output: [3,4] constraints: 1 <= n <= 2 * 104 edges.length == n - 1 0 <= ai, bi < n ai != bi all the pairs (ai, bi) are distinct. the given input is guaranteed to be a tree and there will be no repeated edges.
are given an integer array nums and an array queries where queries[i] = [vali, indexi]. for each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums. return an integer array answer where answer[i] is the answer to the ith query. example 1: input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]] output: [8,6,2,4] explanation: at the beginning, the array is [1,2,3,4]. after adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8. after adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6. after adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2. after adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4. example 2: input: nums = [1], queries = [[4,0]] output: [0] constraints: 1 <= nums.length <= 104 -104 <= nums[i] <= 104 1 <= queries.length <= 104 -104 <= vali <= 104 0 <= indexi < nums.length
are given an array of integers stones where stones[i] is the weight of the ith stone. we are playing a game with the stones. on each turn, we choose any two stones and smash them together. suppose the stones have weights x and y with x <= y. the result of this smash is: if x == y, both stones are destroyed, and if x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x. at the end of the game, there is at most one stone left. return the smallest possible weight of the left stone. if there are no stones left, return 0. example 1: input: stones = [2,7,4,1,8,1] output: 1 explanation: we can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then, we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then, we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then, we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value. example 2: input: stones = [31,26,33,21,40] output: 5 constraints: 1 <= stones.length <= 30 1 <= stones[i] <= 100
sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. more formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i. for example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 the following sequence is not arithmetic: 1, 1, 2, 5, 7 you are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. all the arrays are 0-indexed. return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise. example 1: input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5] output: [true,false,true] explanation: in the 0th query, the subarray is [4,6,5]. this can be rearranged as [6,5,4], which is an arithmetic sequence. in the 1st query, the subarray is [4,6,5,9]. this cannot be rearranged as an arithmetic sequence. in the 2nd query, the subarray is [5,9,3,7]. this can be rearranged as [3,5,7,9], which is an arithmetic sequence. example 2: input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10] output: [false,true,false,false,true,true] constraints: n == nums.length m == l.length m == r.length 2 <= n <= 500 1 <= m <= 500 0 <= l[i] < r[i] < n -105 <= nums[i] <= 105
are given two integers m and n. consider an m x n grid where each cell is initially white. you can paint each cell red, green, or blue. all cells must be painted. return the number of ways to color the grid with no two adjacent cells having the same color. since the answer can be very large, return it modulo 109 + 7. example 1: input: m = 1, n = 1 output: 3 explanation: the three possible colorings are shown in the image above. example 2: input: m = 1, n = 2 output: 6 explanation: the six possible colorings are shown in the image above. example 3: input: m = 5, n = 5 output: 580986 constraints: 1 <= m <= 5 1 <= n <= 1000
are given two positive integer arrays nums and numsdivide. you can delete any number of elements from nums. return the minimum number of deletions such that the smallest element in nums divides all the elements of numsdivide. if this is not possible, return -1. note that an integer x divides y if y % x == 0. example 1: input: nums = [2,3,2,4,3], numsdivide = [9,6,9,3,15] output: 2 explanation: the smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsdivide. we use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3]. the smallest element in [3,4,3] is 3, which divides all the elements of numsdivide. it can be shown that 2 is the minimum number of deletions needed. example 2: input: nums = [4,3,6], numsdivide = [8,2,6,10] output: -1 explanation: we want the smallest element in nums to divide all the elements of numsdivide. there is no way to delete elements from nums to allow this. constraints: 1 <= nums.length, numsdivide.length <= 105 1 <= nums[i], numsdivide[i] <= 109
are given a string s consisting of lowercase english letters, and an integer k. first, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). then, transform the integer by replacing it with the sum of its digits. repeat the transform operation k times in total. for example, if s = "zbax" and k = 2, then the resulting integer would be 8 by the following operations: convert: "zbax" ➝ "(26)(2)(1)(24)" ➝ "262124" ➝ 262124 transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17 transform #2: 17 ➝ 1 + 7 ➝ 8 return the resulting integer after performing the operations described above. example 1: input: s = "iiii", k = 1 output: 36 explanation: the operations are as follows: - convert: "iiii" ➝ "(9)(9)(9)(9)" ➝ "9999" ➝ 9999 - transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36 thus the resulting integer is 36. example 2: input: s = "leetcode", k = 2 output: 6 explanation: the operations are as follows: - convert: "leetcode" ➝ "(12)(5)(5)(20)(3)(15)(4)(5)" ➝ "12552031545" ➝ 12552031545 - transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33 - transform #2: 33 ➝ 3 + 3 ➝ 6 thus the resulting integer is 6. example 3: input: s = "zbax", k = 2 output: 8 constraints: 1 <= s.length <= 100 1 <= k <= 10 s consists of lowercase english letters.
two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays. the distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d. example 1: input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2 output: 2 explanation: for arr1[0]=4 we have: |4-10|=6 > d=2 |4-9|=5 > d=2 |4-1|=3 > d=2 |4-8|=4 > d=2 for arr1[1]=5 we have: |5-10|=5 > d=2 |5-9|=4 > d=2 |5-1|=4 > d=2 |5-8|=3 > d=2 for arr1[2]=8 we have: |8-10|=2 <= d=2 |8-9|=1 <= d=2 |8-1|=7 > d=2 |8-8|=0 <= d=2 example 2: input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3 output: 2 example 3: input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6 output: 1 constraints: 1 <= arr1.length, arr2.length <= 500 -1000 <= arr1[i], arr2[j] <= 1000 0 <= d <= 100
are given an integer array nums and an integer k. you can partition the array into at most k non-empty adjacent subarrays. the score of a partition is the sum of the averages of each subarray. note that the partition must use every integer in nums, and that the score is not necessarily an integer. return the maximum score you can achieve of all the possible partitions. answers within 10-6 of the actual answer will be accepted. example 1: input: nums = [9,1,2,3,9], k = 3 output: 20.00000 explanation: the best choice is to partition nums into [9], [1, 2, 3], [9]. the answer is 9 + (1 + 2 + 3) / 3 + 9 = 20. we could have also partitioned nums into [9, 1], [2], [3, 9], for example. that partition would lead to a score of 5 + 2 + 6 = 13, which is worse. example 2: input: nums = [1,2,3,4,5,6,7], k = 4 output: 20.50000 constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 104 1 <= k <= nums.length
an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. we will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. you must solve this problem without using the library's sort function. example 1: input: nums = [2,0,2,1,1,0] output: [0,0,1,1,2,2] example 2: input: nums = [2,0,1] output: [0,1,2] constraints: n == nums.length 1 <= n <= 300 nums[i] is either 0, 1, or 2. follow up: could you come up with a one-pass algorithm using only constant extra space?
a text editor with a cursor that can do the following: add text to where the cursor is. delete text from where the cursor is (simulating the backspace key). move the cursor either left or right. when deleting text, only characters to the left of the cursor will be deleted. the cursor will also remain within the actual text and cannot be moved beyond it. more formally, we have that 0 <= cursor.position <= currenttext.length always holds. implement the texteditor class: texteditor() initializes the object with empty text. void addtext(string text) appends text to where the cursor is. the cursor ends to the right of text. int deletetext(int k) deletes k characters to the left of the cursor. returns the number of characters actually deleted. string cursorleft(int k) moves the cursor to the left k times. returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor. string cursorright(int k) moves the cursor to the right k times. returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor. example 1: input ["texteditor", "addtext", "deletetext", "addtext", "cursorright", "cursorleft", "deletetext", "cursorleft", "cursorright"] [[], ["leetcode"], [4], ["practice"], [3], [8], [10], [2], [6]] output [null, null, 4, null, "etpractice", "leet", 4, "", "practi"] explanation texteditor texteditor = new texteditor(); // the current text is "|". (the '|' character represents the cursor) texteditor.addtext("leetcode"); // the current text is "leetcode|". texteditor.deletetext(4); // return 4 // the current text is "leet|". // 4 characters were deleted. texteditor.addtext("practice"); // the current text is "leetpractice|". texteditor.cursorright(3); // return "etpractice" // the current text is "leetpractice|". // the cursor cannot be moved beyond the actual text and thus did not move. // "etpractice" is the last 10 characters to the left of the cursor. texteditor.cursorleft(8); // return "leet" // the current text is "leet|practice". // "leet" is the last min(10, 4) = 4 characters to the left of the cursor. texteditor.deletetext(10); // return 4 // the current text is "|practice". // only 4 characters were deleted. texteditor.cursorleft(2); // return "" // the current text is "|practice". // the cursor cannot be moved beyond the actual text and thus did not move. // "" is the last min(10, 0) = 0 characters to the left of the cursor. texteditor.cursorright(6); // return "practi" // the current text is "practi|ce". // "practi" is the last min(10, 6) = 6 characters to the left of the cursor. constraints: 1 <= text.length, k <= 40 text consists of lowercase english letters. at most 2 * 104 calls in total will be made to addtext, deletetext, cursorleft and cursorright. follow-up: could you find a solution with time complexity of o(k) per call?
are given an integer array nums. you are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position. return true if you can reach the last index, or false otherwise. example 1: input: nums = [2,3,1,1,4] output: true explanation: jump 1 step from index 0 to 1, then 3 steps to the last index. example 2: input: nums = [3,2,1,0,4] output: false explanation: you will always arrive at index 3 no matter what. its maximum jump length is 0, which makes it impossible to reach the last index. constraints: 1 <= nums.length <= 104 0 <= nums[i] <= 105
the root of a binary tree, determine if it is a valid binary search tree (bst). a valid bst is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees. example 1: input: root = [2,1,3] output: true example 2: input: root = [5,1,4,null,null,3,6] output: false explanation: the root node's value is 5 but its right child's value is 4. constraints: the number of nodes in the tree is in the range [1, 104]. -231 <= node.val <= 231 - 1
are given k identical eggs and you have access to a building with n floors labeled from 1 to n. you know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves. return the minimum number of moves that you need to determine with certainty what the value of f is. example 1: input: k = 1, n = 2 output: 2 explanation: drop the egg from floor 1. if it breaks, we know that f = 0. otherwise, drop the egg from floor 2. if it breaks, we know that f = 1. if it does not break, then we know f = 2. hence, we need at minimum 2 moves to determine with certainty what the value of f is. example 2: input: k = 2, n = 6 output: 3 example 3: input: k = 3, n = 14 output: 4 constraints: 1 <= k <= 100 1 <= n <= 104
an array of points where points[i] = [xi, yi] represents a point on the x-y plane and an integer k, return the k closest points to the origin (0, 0). the distance between two points on the x-y plane is the euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2). you may return the answer in any order. the answer is guaranteed to be unique (except for the order that it is in). example 1: input: points = [[1,3],[-2,2]], k = 1 output: [[-2,2]] explanation: the distance between (1, 3) and the origin is sqrt(10). the distance between (-2, 2) and the origin is sqrt(8). since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. we only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]. example 2: input: points = [[3,3],[5,-1],[-2,4]], k = 2 output: [[3,3],[-2,4]] explanation: the answer [[-2,4],[3,3]] would also be accepted. constraints: 1 <= k <= points.length <= 104 -104 < xi, yi < 104
an array of integers nums and an integer k. a continuous subarray is called nice if there are k odd numbers on it. return the number of nice sub-arrays. example 1: input: nums = [1,1,2,1,1], k = 3 output: 2 explanation: the only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]. example 2: input: nums = [2,4,6], k = 1 output: 0 explanation: there is no odd numbers in the array. example 3: input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2 output: 16 constraints: 1 <= nums.length <= 50000 1 <= nums[i] <= 10^5 1 <= k <= nums.length
are given an integer n, the number of teams in a tournament that has strange rules: if the current number of teams is even, each team gets paired with another team. a total of n / 2 matches are played, and n / 2 teams advance to the next round. if the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. a total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round. return the number of matches played in the tournament until a winner is decided. example 1: input: n = 7 output: 6 explanation: details of the tournament: - 1st round: teams = 7, matches = 3, and 4 teams advance. - 2nd round: teams = 4, matches = 2, and 2 teams advance. - 3rd round: teams = 2, matches = 1, and 1 team is declared the winner. total number of matches = 3 + 2 + 1 = 6. example 2: input: n = 14 output: 13 explanation: details of the tournament: - 1st round: teams = 14, matches = 7, and 7 teams advance. - 2nd round: teams = 7, matches = 3, and 4 teams advance. - 3rd round: teams = 4, matches = 2, and 2 teams advance. - 4th round: teams = 2, matches = 1, and 1 team is declared the winner. total number of matches = 7 + 3 + 2 + 1 = 13. constraints: 1 <= n <= 200
are given an n x n binary grid board. in each move, you can swap any two rows with each other, or any two columns with each other. return the minimum number of moves to transform the board into a chessboard board. if the task is impossible, return -1. a chessboard board is a board where no 0's and no 1's are 4-directionally adjacent. example 1: input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]] output: 2 explanation: one potential sequence of moves is shown. the first move swaps the first and second column. the second move swaps the second and third row. example 2: input: board = [[0,1],[1,0]] output: 0 explanation: also note that the board with 0 in the top left corner, is also a valid chessboard. example 3: input: board = [[1,0],[1,0]] output: -1 explanation: no matter what sequence of moves you make, you cannot end with a valid chessboard. constraints: n == board.length n == board[i].length 2 <= n <= 30 board[i][j] is either 0 or 1.
is a forest with an unknown number of rabbits. we asked n rabbits "how many rabbits have the same color as you?" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit. given the array answers, return the minimum number of rabbits that could be in the forest. example 1: input: answers = [1,1,2] output: 5 explanation: the two rabbits that answered "1" could both be the same color, say red. the rabbit that answered "2" can't be red or the answers would be inconsistent. say the rabbit that answered "2" was blue. then there should be 2 other blue rabbits in the forest that didn't answer into the array. the smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't. example 2: input: answers = [10,10,10] output: 11 constraints: 1 <= answers.length <= 1000 0 <= answers[i] < 1000
a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account. now, we would like to merge these accounts. two accounts definitely belong to the same person if there is some common email to both accounts. note that even if two accounts have the same name, they may belong to different people as people could have the same name. a person can have any number of accounts initially, but all of their accounts definitely have the same name. after merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. the accounts themselves can be returned in any order. example 1: input: accounts = [["john","johnsmith@mail.com","john_newyork@mail.com"],["john","johnsmith@mail.com","john00@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]] output: [["john","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]] explanation: the first and second john's are the same person as they have the common email "johnsmith@mail.com". the third john and mary are different people as none of their email addresses are used by other accounts. we could return these lists in any order, for example the answer [['mary', 'mary@mail.com'], ['john', 'johnnybravo@mail.com'], ['john', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted. example 2: input: accounts = [["gabe","gabe0@m.co","gabe3@m.co","gabe1@m.co"],["kevin","kevin3@m.co","kevin5@m.co","kevin0@m.co"],["ethan","ethan5@m.co","ethan4@m.co","ethan0@m.co"],["hanzo","hanzo3@m.co","hanzo1@m.co","hanzo0@m.co"],["fern","fern5@m.co","fern1@m.co","fern0@m.co"]] output: [["ethan","ethan0@m.co","ethan4@m.co","ethan5@m.co"],["gabe","gabe0@m.co","gabe1@m.co","gabe3@m.co"],["hanzo","hanzo0@m.co","hanzo1@m.co","hanzo3@m.co"],["kevin","kevin0@m.co","kevin3@m.co","kevin5@m.co"],["fern","fern0@m.co","fern1@m.co","fern5@m.co"]] constraints: 1 <= accounts.length <= 1000 2 <= accounts[i].length <= 10 1 <= accounts[i][j].length <= 30 accounts[i][0] consists of english letters. accounts[i][j] (for j > 0) is a valid email.
are given a character array keys containing unique characters and a string array values containing strings of length 2. you are also given another string array dictionary that contains all permitted original strings after decryption. you should implement a data structure that can encrypt or decrypt a 0-indexed string. a string is encrypted with the following process: for each character c in the string, we find the index i satisfying keys[i] == c in keys. replace c with values[i] in the string. note that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string "" is returned. a string is decrypted with the following process: for each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. if there are multiple valid i, we choose any one of them. this means a string could have multiple possible strings it can decrypt to. replace s with keys[i] in the string. implement the encrypter class: encrypter(char[] keys, string[] values, string[] dictionary) initializes the encrypter class with keys, values, and dictionary. string encrypt(string word1) encrypts word1 with the encryption process described above and returns the encrypted string. int decrypt(string word2) returns the number of possible strings word2 could decrypt to that also appear in dictionary. example 1: input ["encrypter", "encrypt", "decrypt"] [[['a', 'b', 'c', 'd'], ["ei", "zf", "ei", "am"], ["abcd", "acbd", "adbc", "badc", "dacb", "cadb", "cbda", "abad"]], ["abcd"], ["eizfeiam"]] output [null, "eizfeiam", 2] explanation encrypter encrypter = new encrypter([['a', 'b', 'c', 'd'], ["ei", "zf", "ei", "am"], ["abcd", "acbd", "adbc", "badc", "dacb", "cadb", "cbda", "abad"]); encrypter.encrypt("abcd"); // return "eizfeiam". // 'a' maps to "ei", 'b' maps to "zf", 'c' maps to "ei", and 'd' maps to "am". encrypter.decrypt("eizfeiam"); // return 2. // "ei" can map to 'a' or 'c', "zf" maps to 'b', and "am" maps to 'd'. // thus, the possible strings after decryption are "abad", "cbad", "abcd", and "cbcd". // 2 of those strings, "abad" and "abcd", appear in dictionary, so the answer is 2. constraints: 1 <= keys.length == values.length <= 26 values[i].length == 2 1 <= dictionary.length <= 100 1 <= dictionary[i].length <= 100 all keys[i] and dictionary[i] are unique. 1 <= word1.length <= 2000 1 <= word2.length <= 200 all word1[i] appear in keys. word2.length is even. keys, values[i], dictionary[i], word1, and word2 only contain lowercase english letters. at most 200 calls will be made to encrypt and decrypt in total.
have n jobs, where every job is scheduled to be done from starttime[i] to endtime[i], obtaining a profit of profit[i]. you're given the starttime, endtime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range. if you choose a job that ends at time x you will be able to start another job that starts at time x. example 1: input: starttime = [1,2,3,3], endtime = [3,4,5,6], profit = [50,10,40,70] output: 120 explanation: the subset chosen is the first and fourth job. time range [1-3]+[3-6] , we get profit of 120 = 50 + 70. example 2: input: starttime = [1,2,3,4,6], endtime = [3,5,10,6,9], profit = [20,20,100,70,60] output: 150 explanation: the subset chosen is the first, fourth and fifth job. profit obtained 150 = 20 + 70 + 60. example 3: input: starttime = [1,1,1], endtime = [2,3,4], profit = [5,6,4] output: 6 constraints: 1 <= starttime.length == endtime.length == profit.length <= 5 * 104 1 <= starttime[i] < endtime[i] <= 109 1 <= profit[i] <= 104
schema table: department +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | revenue | int | | month | varchar | +-------------+---------+ (id, month) is the primary key of this table. the table has information about the revenue of each department per month. the month has values in ["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]. write an sql query to reformat the table such that there is a department id column and a revenue column for each month. return the result table in any order. the query result format is in the following example. example 1: input: department table: +------+---------+-------+ | id | revenue | month | +------+---------+-------+ | 1 | 8000 | jan | | 2 | 9000 | jan | | 3 | 10000 | feb | | 1 | 7000 | feb | | 1 | 6000 | mar | +------+---------+-------+ output: +------+-------------+-------------+-------------+-----+-------------+ | id | jan_revenue | feb_revenue | mar_revenue | ... | dec_revenue | +------+-------------+-------------+-------------+-----+-------------+ | 1 | 8000 | 7000 | 6000 | ... | null | | 2 | 9000 | null | null | ... | null | | 3 | null | 10000 | null | ... | null | +------+-------------+-------------+-------------+-----+-------------+ explanation: the revenue from apr to dec is null. note that the result table has 13 columns (1 for the department id + 12 for the months).
schema table: employee +-------------+---------+ | column name | type | +-------------+---------+ | empid | int | | name | varchar | | supervisor | int | | salary | int | +-------------+---------+ empid is the primary key column for this table. each row of this table indicates the name and the id of an employee in addition to their salary and the id of their manager. table: bonus +-------------+------+ | column name | type | +-------------+------+ | empid | int | | bonus | int | +-------------+------+ empid is the primary key column for this table. empid is a foreign key to empid from the employee table. each row of this table contains the id of an employee and their respective bonus. write an sql query to report the name and bonus amount of each employee with a bonus less than 1000. return the result table in any order. the query result format is in the following example. example 1: input: employee table: +-------+--------+------------+--------+ | empid | name | supervisor | salary | +-------+--------+------------+--------+ | 3 | brad | null | 4000 | | 1 | john | 3 | 1000 | | 2 | dan | 3 | 2000 | | 4 | thomas | 3 | 4000 | +-------+--------+------------+--------+ bonus table: +-------+-------+ | empid | bonus | +-------+-------+ | 2 | 500 | | 4 | 2000 | +-------+-------+ output: +------+-------+ | name | bonus | +------+-------+ | brad | null | | john | null | | dan | 500 | +------+-------+
an m x n grid of characters board and a string word, return true if word exists in the grid. the word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once. example 1: input: board = [["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]], word = "abcced" output: true example 2: input: board = [["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]], word = "see" output: true example 3: input: board = [["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]], word = "abcb" output: false constraints: m == board.length n = board[i].length 1 <= m, n <= 6 1 <= word.length <= 15 board and word consists of only lowercase and uppercase english letters. follow up: could you use search pruning to make your solution faster with a larger board?
are given an integer array nums. you have an integer array arr of the same length with all values set to 0 initially. you also have the following modify function: you want to use the modify function to convert arr to nums using the minimum number of calls. return the minimum number of function calls to make nums from arr. the test cases are generated so that the answer fits in a 32-bit signed integer. example 1: input: nums = [1,5] output: 5 explanation: increment by 1 (second element): [0, 0] to get [0, 1] (1 operation). double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations). increment by 1 (both elements) [0, 4] -> [1, 4] -> [1, 5] (2 operations). total of operations: 1 + 2 + 2 = 5. example 2: input: nums = [2,2] output: 3 explanation: increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations). double all the elements: [1, 1] -> [2, 2] (1 operation). total of operations: 2 + 1 = 3. example 3: input: nums = [4,2,5] output: 6 explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums). constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109
the root of a binary search tree and an integer k, return true if there exist two elements in the bst such that their sum is equal to k, or false otherwise. example 1: input: root = [5,3,6,2,4,null,7], k = 9 output: true example 2: input: root = [5,3,6,2,4,null,7], k = 28 output: false constraints: the number of nodes in the tree is in the range [1, 104]. -104 <= node.val <= 104 root is guaranteed to be a valid binary search tree. -105 <= k <= 105
a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring). the score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring. example 1: input: s = "011101" output: 5 explanation: all possible ways of splitting s into two non-empty substrings are: left = "0" and right = "11101", score = 1 + 4 = 5 left = "01" and right = "1101", score = 1 + 3 = 4 left = "011" and right = "101", score = 1 + 2 = 3 left = "0111" and right = "01", score = 1 + 1 = 2 left = "01110" and right = "1", score = 2 + 1 = 3 example 2: input: s = "00111" output: 5 explanation: when left = "00" and right = "111", we get the maximum score = 2 + 3 = 5 example 3: input: s = "1111" output: 3 constraints: 2 <= s.length <= 500 the string s consists of characters '0' and '1' only.
is an infrastructure of n cities with some number of roads connecting these cities. each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi. the network rank of two different cities is defined as the total number of directly connected roads to either city. if a road is directly connected to both cities, it is only counted once. the maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities. given the integer n and the array roads, return the maximal network rank of the entire infrastructure. example 1: input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]] output: 4 explanation: the network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. the road between 0 and 1 is only counted once. example 2: input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]] output: 5 explanation: there are 5 roads that are connected to cities 1 or 2. example 3: input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]] output: 5 explanation: the network rank of 2 and 5 is 5. notice that all the cities do not have to be connected. constraints: 2 <= n <= 100 0 <= roads.length <= n * (n - 1) / 2 roads[i].length == 2 0 <= ai, bi <= n-1 ai != bi each pair of cities has at most one road connecting them.
a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise. example 1: input: s = "annabelle", k = 2 output: true explanation: you can construct two palindromes using all characters in s. some possible constructions "anna" + "elble", "anbna" + "elle", "anellena" + "b" example 2: input: s = "leetcode", k = 3 output: false explanation: it is impossible to construct 3 palindromes using all the characters of s. example 3: input: s = "true", k = 4 output: true explanation: the only possible solution is to put each character in a separate string. constraints: 1 <= s.length <= 105 s consists of lowercase english letters. 1 <= k <= 105
binary matrix is a matrix in which all the elements are either 0 or 1. given quadtree1 and quadtree2. quadtree1 represents a n * n binary matrix and quadtree2 represents another n * n binary matrix. return a quad-tree representing the n * n binary matrix which is the result of logical bitwise or of the two binary matrixes represented by quadtree1 and quadtree2. notice that you can assign the value of a node to true or false when isleaf is false, and both are accepted in the answer. a quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes: val: true if the node represents a grid of 1's or false if the node represents a grid of 0's. isleaf: true if the node is leaf node on the tree or false if the node has the four children. class node { public boolean val; public boolean isleaf; public node topleft; public node topright; public node bottomleft; public node bottomright; } we can construct a quad-tree from a two-dimensional area using the following steps: if the current grid has the same value (i.e all 1's or all 0's) set isleaf true and set val to the value of the grid and set the four children to null and stop. if the current grid has different values, set isleaf to false and set val to any value and divide the current grid into four sub-grids as shown in the photo. recurse for each of the children with the proper sub-grid. if you want to know more about the quad-tree, you can refer to the wiki. quad-tree format: the input/output represents the serialized format of a quad-tree using level order traversal, where null signifies a path terminator where no node exists below. it is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list [isleaf, val]. if the value of isleaf or val is true we represent it as 1 in the list [isleaf, val] and if the value of isleaf or val is false we represent it as 0. example 1: input: quadtree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]] , quadtree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] output: [[0,0],[1,1],[1,1],[1,1],[1,0]] explanation: quadtree1 and quadtree2 are shown above. you can see the binary matrix which is represented by each quad-tree. if we apply logical bitwise or on the two binary matrices we get the binary matrix below which is represented by the result quad-tree. notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree. example 2: input: quadtree1 = [[1,0]], quadtree2 = [[1,0]] output: [[1,0]] explanation: each tree represents a binary matrix of size 1*1. each matrix contains only zero. the resulting matrix is of size 1*1 with also zero. constraints: quadtree1 and quadtree2 are both valid quad-trees each representing a n * n grid. n == 2x where 0 <= x <= 9.
are given an integer array nums of size n. consider a non-empty subarray from nums that has the maximum possible bitwise and. in other words, let k be the maximum value of the bitwise and of any subarray of nums. then, only subarrays with a bitwise and equal to k should be considered. return the length of the longest such subarray. the bitwise and of an array is the bitwise and of all the numbers in it. a subarray is a contiguous sequence of elements within an array. example 1: input: nums = [1,2,3,3,2,2] output: 2 explanation: the maximum possible bitwise and of a subarray is 3. the longest subarray with that value is [3,3], so we return 2. example 2: input: nums = [1,2,3,4] output: 1 explanation: the maximum possible bitwise and of a subarray is 4. the longest subarray with that value is [4], so we return 1. constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106
dna sequence is composed of a series of nucleotides abbreviated as 'a', 'c', 'g', and 't'. for example, "acgaattccg" is a dna sequence. when studying dna, it is useful to identify repeated sequences within the dna. given a string s that represents a dna sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a dna molecule. you may return the answer in any order. example 1: input: s = "aaaaacccccaaaaaccccccaaaaagggttt" output: ["aaaaaccccc","cccccaaaaa"] example 2: input: s = "aaaaaaaaaaaaa" output: ["aaaaaaaaaa"] constraints: 1 <= s.length <= 105 s[i] is either 'a', 'c', 'g', or 't'.
sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. a word represents a price if it is a sequence of digits preceded by a dollar sign. for example, "$100", "$23", and "$6" represent prices while "100", "$", and "$1e5" do not. you are given a string sentence representing a sentence and an integer discount. for each word representing a price, apply a discount of discount% on the price and update the word in the sentence. all updated prices should be represented with exactly two decimal places. return a string representing the modified sentence. note that all prices will contain at most 10 digits. example 1: input: sentence = "there are $1 $2 and 5$ candies in the shop", discount = 50 output: "there are $0.50 $1.00 and 5$ candies in the shop" explanation: the words which represent prices are "$1" and "$2". - a 50% discount on "$1" yields "$0.50", so "$1" is replaced by "$0.50". - a 50% discount on "$2" yields "$1". since we need to have exactly 2 decimal places after a price, we replace "$2" with "$1.00". example 2: input: sentence = "1 2 $3 4 $5 $6 7 8$ $9 $10$", discount = 100 output: "1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$" explanation: applying a 100% discount on any price will result in 0. the words representing prices are "$3", "$5", "$6", and "$9". each of them is replaced by "$0.00". constraints: 1 <= sentence.length <= 105 sentence consists of lowercase english letters, digits, ' ', and '$'. sentence does not have leading or trailing spaces. all words in sentence are separated by a single space. all prices will be positive numbers without leading zeros. all prices will have at most 10 digits. 0 <= discount <= 100
the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom. example 1: input: root = [1,2,3,null,5,null,4] output: [1,3,4] example 2: input: root = [1,null,3] output: [1,3] example 3: input: root = [] output: [] constraints: the number of nodes in the tree is in the range [0, 100]. -100 <= node.val <= 100
a function to find the longest common prefix string amongst an array of strings. if there is no common prefix, return an empty string "". example 1: input: strs = ["flower","flow","flight"] output: "fl" example 2: input: strs = ["dog","racecar","car"] output: "" explanation: there is no common prefix among the input strings. constraints: 1 <= strs.length <= 200 0 <= strs[i].length <= 200 strs[i] consists of only lowercase english letters.
a 2d matrix matrix, handle multiple queries of the following type: calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). implement the nummatrix class: nummatrix(int[][] matrix) initializes the object with the integer matrix matrix. int sumregion(int row1, int col1, int row2, int col2) returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). you must design an algorithm where sumregion works on o(1) time complexity. example 1: input ["nummatrix", "sumregion", "sumregion", "sumregion"] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] output [null, 8, 11, 12] explanation nummatrix nummatrix = new nummatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); nummatrix.sumregion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle) nummatrix.sumregion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle) nummatrix.sumregion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle) constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 200 -104 <= matrix[i][j] <= 104 0 <= row1 <= row2 < m 0 <= col1 <= col2 < n at most 104 calls will be made to sumregion.
website domain "discuss.leetcode.com" consists of various subdomains. at the top level, we have "com", at the next level, we have "leetcode.com" and at the lowest level, "discuss.leetcode.com". when we visit a domain like "discuss.leetcode.com", we will also visit the parent domains "leetcode.com" and "com" implicitly. a count-paired domain is a domain that has one of the two formats "rep d1.d2.d3" or "rep d1.d2" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself. for example, "9001 discuss.leetcode.com" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times. given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. you may return the answer in any order. example 1: input: cpdomains = ["9001 discuss.leetcode.com"] output: ["9001 leetcode.com","9001 discuss.leetcode.com","9001 com"] explanation: we only have one website domain: "discuss.leetcode.com". as discussed above, the subdomain "leetcode.com" and "com" will also be visited. so they will all be visited 9001 times. example 2: input: cpdomains = ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"] output: ["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 com"] explanation: we will visit "google.mail.com" 900 times, "yahoo.com" 50 times, "intel.mail.com" once and "wiki.org" 5 times. for the subdomains, we will visit "mail.com" 900 + 1 = 901 times, "com" 900 + 50 + 1 = 951 times, and "org" 5 times. constraints: 1 <= cpdomain.length <= 100 1 <= cpdomain[i].length <= 100 cpdomain[i] follows either the "repi d1i.d2i.d3i" format or the "repi d1i.d2i" format. repi is an integer in the range [1, 104]. d1i, d2i, and d3i consist of lowercase english letters.
an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. after doing so, return the array. example 1: input: arr = [17,18,5,4,6,1] output: [18,6,6,6,1,-1] explanation: - index 0 --> the greatest element to the right of index 0 is index 1 (18). - index 1 --> the greatest element to the right of index 1 is index 4 (6). - index 2 --> the greatest element to the right of index 2 is index 4 (6). - index 3 --> the greatest element to the right of index 3 is index 4 (6). - index 4 --> the greatest element to the right of index 4 is index 5 (1). - index 5 --> there are no elements to the right of index 5, so we put -1. example 2: input: arr = [400] output: [-1] explanation: there are no elements to the right of index 0. constraints: 1 <= arr.length <= 104 1 <= arr[i] <= 105
are given an integer array prices where prices[i] is the price of the ith item in a shop. there is a special discount for items in the shop. if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. otherwise, you will not receive any discount at all. return an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount. example 1: input: prices = [8,4,6,2,3] output: [4,2,4,2,3] explanation: for item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. for item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. for item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. for items 3 and 4 you will not receive any discount at all. example 2: input: prices = [1,2,3,4,5] output: [1,2,3,4,5] explanation: in this case, for all items, you will not receive any discount at all. example 3: input: prices = [10,1,1,6] output: [9,0,1,6] constraints: 1 <= prices.length <= 500 1 <= prices[i] <= 1000
a 2d grid of size m x n and an integer k. you need to shift the grid k times. in one shift operation: element at grid[i][j] moves to grid[i][j + 1]. element at grid[i][n - 1] moves to grid[i + 1][0]. element at grid[m - 1][n - 1] moves to grid[0][0]. return the 2d grid after applying shift operation k times. example 1: input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1 output: [[9,1,2],[3,4,5],[6,7,8]] example 2: input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4 output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]] example 3: input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9 output: [[1,2,3],[4,5,6],[7,8,9]] constraints: m == grid.length n == grid[i].length 1 <= m <= 50 1 <= n <= 50 -1000 <= grid[i][j] <= 1000 0 <= k <= 100
is standing at cell (0, 0), and he wants to reach destination: (row, column). he can only travel right and down. you are going to help bob by providing instructions for him to reach destination. the instructions are represented as a string, where each character is either: 'h', meaning move horizontally (go right), or 'v', meaning move vertically (go down). multiple instructions will lead bob to destination. for example, if destination is (2, 3), both "hhhvv" and "hvhvh" are valid instructions. however, bob is very picky. bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed. given an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take bob to destination. example 1: input: destination = [2,3], k = 1 output: "hhhvv" explanation: all the instructions that reach (2, 3) in lexicographic order are as follows: ["hhhvv", "hhvhv", "hhvvh", "hvhhv", "hvhvh", "hvvhh", "vhhhv", "vhhvh", "vhvhh", "vvhhh"]. example 2: input: destination = [2,3], k = 2 output: "hhvhv" example 3: input: destination = [2,3], k = 3 output: "hhvvh" constraints: destination.length == 2 1 <= row, column <= 15 1 <= k <= ncr(row + column, row), where ncr(a, b) denotes a choose b.
a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise. example 1: input: num = 443 output: true explanation: 172 + 271 = 443 so we return true. example 2: input: num = 63 output: false explanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false. example 3: input: num = 181 output: true explanation: 140 + 041 = 181 so we return true. note that when a number is reversed, there may be leading zeros. constraints: 0 <= num <= 105
a string text, you want to use the characters of text to form as many instances of the word "balloon" as possible. you can use each character in text at most once. return the maximum number of instances that can be formed. example 1: input: text = "nlaebolko" output: 1 example 2: input: text = "loonbalxballpoon" output: 2 example 3: input: text = "leetcode" output: 0 constraints: 1 <= text.length <= 104 text consists of lower case english letters only.
are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succprob[i]. given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability. if there is no path from start to end, return 0. your answer will be accepted if it differs from the correct answer by at most 1e-5. example 1: input: n = 3, edges = [[0,1],[1,2],[0,2]], succprob = [0.5,0.5,0.2], start = 0, end = 2 output: 0.25000 explanation: there are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25. example 2: input: n = 3, edges = [[0,1],[1,2],[0,2]], succprob = [0.5,0.5,0.3], start = 0, end = 2 output: 0.30000 example 3: input: n = 3, edges = [[0,1]], succprob = [0.5], start = 0, end = 2 output: 0.00000 explanation: there is no path between 0 and 2. constraints: 2 <= n <= 10^4 0 <= start, end < n start != end 0 <= a, b < n a != b 0 <= succprob.length == edges.length <= 2*10^4 0 <= succprob[i] <= 1 there is at most one edge between every two nodes.
are given a 0-indexed integer array nums. in one operation, you can: choose two different indices i and j such that 0 <= i, j < nums.length. choose a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1. subtract 2k from nums[i] and nums[j]. a subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times. return the number of beautiful subarrays in the array nums. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [4,3,1,2,4] output: 2 explanation: there are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4]. - we can make all elements in the subarray [3,1,2] equal to 0 in the following way: - choose [3, 1, 2] and k = 1. subtract 21 from both numbers. the subarray becomes [1, 1, 0]. - choose [1, 1, 0] and k = 0. subtract 20 from both numbers. the subarray becomes [0, 0, 0]. - we can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way: - choose [4, 3, 1, 2, 4] and k = 2. subtract 22 from both numbers. the subarray becomes [0, 3, 1, 2, 0]. - choose [0, 3, 1, 2, 0] and k = 0. subtract 20 from both numbers. the subarray becomes [0, 2, 0, 2, 0]. - choose [0, 2, 0, 2, 0] and k = 1. subtract 21 from both numbers. the subarray becomes [0, 0, 0, 0, 0]. example 2: input: nums = [1,10,4] output: 0 explanation: there are no beautiful subarrays in nums. constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 106
a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. if no such positive integer exists, return -1. note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1. example 1: input: n = 12 output: 21 example 2: input: n = 21 output: -1 constraints: 1 <= n <= 231 - 1
a stack that supports push, pop, top, and retrieving the minimum element in constant time. implement the minstack class: minstack() initializes the stack object. void push(int val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getmin() retrieves the minimum element in the stack. you must implement a solution with o(1) time complexity for each function. example 1: input ["minstack","push","push","push","getmin","pop","top","getmin"] [[],[-2],[0],[-3],[],[],[],[]] output [null,null,null,null,-3,null,0,-2] explanation minstack minstack = new minstack(); minstack.push(-2); minstack.push(0); minstack.push(-3); minstack.getmin(); // return -3 minstack.pop(); minstack.top(); // return 0 minstack.getmin(); // return -2 constraints: -231 <= val <= 231 - 1 methods pop, top and getmin operations will always be called on non-empty stacks. at most 3 * 104 calls will be made to push, pop, top, and getmin.
are given a 2d integer array grid of size m x n, where each cell contains a positive integer. a cornered path is defined as a set of adjacent cells with at most one turn. more specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. after the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell. the product of a path is defined as the product of all the values in the path. return the maximum number of trailing zeros in the product of a cornered path found in grid. note: horizontal movement means moving in either the left or right direction. vertical movement means moving in either the up or down direction. example 1: input: grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]] output: 3 explanation: the grid on the left shows a valid cornered path. it has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros. it can be shown that this is the maximum trailing zeros in the product of a cornered path. the grid in the middle is not a cornered path as it has more than one turn. the grid on the right is not a cornered path as it requires a return to a previously visited cell. example 2: input: grid = [[4,3,2],[7,6,1],[8,8,8]] output: 0 explanation: the grid is shown in the figure above. there are no cornered paths in the grid that result in a product with a trailing zero. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 1 <= grid[i][j] <= 1000
are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'. you would like to reformat the phone number in a certain manner. firstly, remove all spaces and dashes. then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. the final digits are then grouped as follows: 2 digits: a single block of length 2. 3 digits: a single block of length 3. 4 digits: two blocks of length 2 each. the blocks are then joined by dashes. notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2. return the phone number after formatting. example 1: input: number = "1-23-45 6" output: "123-456" explanation: the digits are "123456". step 1: there are more than 4 digits, so group the next 3 digits. the 1st block is "123". step 2: there are 3 digits remaining, so put them in a single block of length 3. the 2nd block is "456". joining the blocks gives "123-456". example 2: input: number = "123 4-567" output: "123-45-67" explanation: the digits are "1234567". step 1: there are more than 4 digits, so group the next 3 digits. the 1st block is "123". step 2: there are 4 digits left, so split them into two blocks of length 2. the blocks are "45" and "67". joining the blocks gives "123-45-67". example 3: input: number = "123 4-5678" output: "123-456-78" explanation: the digits are "12345678". step 1: the 1st block is "123". step 2: the 2nd block is "456". step 3: there are 2 digits left, so put them in a single block of length 2. the 3rd block is "78". joining the blocks gives "123-456-78". constraints: 2 <= number.length <= 100 number consists of digits and the characters '-' and ' '. there are at least two digits in number.
s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2. given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar. example 1: input: s1 = "ab", s2 = "ba" output: 1 explanation: the two string are 1-similar because we can use one swap to change s1 to s2: "ab" --> "ba". example 2: input: s1 = "abc", s2 = "bca" output: 2 explanation: the two strings are 2-similar because we can use two swaps to change s1 to s2: "abc" --> "bac" --> "bca". constraints: 1 <= s1.length <= 20 s2.length == s1.length s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}. s2 is an anagram of s1.
the root of a binary search tree (bst), return the minimum absolute difference between the values of any two different nodes in the tree. example 1: input: root = [4,2,6,1,3] output: 1 example 2: input: root = [1,0,48,null,null,12,49] output: 1 constraints: the number of nodes in the tree is in the range [2, 104]. 0 <= node.val <= 105 note: this question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/
is a tournament where n players are participating. the players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.). the tournament consists of multiple rounds (starting from round number 1). in each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. when the number of players is odd for the current round, the player in the middle automatically advances to the next round. for example, if the row consists of players 1, 2, 4, 6, 7 player 1 competes against player 7. player 2 competes against player 6. player 4 automatically advances to the next round. after each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order). the players numbered firstplayer and secondplayer are the best in the tournament. they can win against any other player before they compete against each other. if any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round. given the integers n, firstplayer, and secondplayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively. example 1: input: n = 11, firstplayer = 2, secondplayer = 4 output: [3,4] explanation: one possible scenario which leads to the earliest round number: first round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 second round: 2, 3, 4, 5, 6, 11 third round: 2, 3, 4 one possible scenario which leads to the latest round number: first round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 second round: 1, 2, 3, 4, 5, 6 third round: 1, 2, 4 fourth round: 2, 4 example 2: input: n = 5, firstplayer = 1, secondplayer = 5 output: [1,1] explanation: the players numbered 1 and 5 compete in the first round. there is no way to make them compete in any other round. constraints: 2 <= n <= 28 1 <= firstplayer < secondplayer <= n
are given a 0-indexed array arr consisting of n positive integers, and a positive integer k. the array arr is called k-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1. for example, arr = [4, 1, 5, 2, 6, 2] is k-increasing for k = 2 because: arr[0] <= arr[2] (4 <= 5) arr[1] <= arr[3] (1 <= 2) arr[2] <= arr[4] (5 <= 6) arr[3] <= arr[5] (2 <= 2) however, the same arr is not k-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]). in one operation, you can choose an index i and change arr[i] into any positive integer. return the minimum number of operations required to make the array k-increasing for the given k. example 1: input: arr = [5,4,3,2,1], k = 1 output: 4 explanation: for k = 1, the resultant array has to be non-decreasing. some of the k-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. all of them require 4 operations. it is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations. it can be shown that we cannot make the array k-increasing in less than 4 operations. example 2: input: arr = [4,1,5,2,6,2], k = 2 output: 0 explanation: this is the same example as the one in the problem description. here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i]. since the given array is already k-increasing, we do not need to perform any operations. example 3: input: arr = [4,1,5,2,6,2], k = 3 output: 2 explanation: indices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5. one of the ways we can make the array k-increasing is by changing arr[3] to 4 and arr[5] to 5. the array will now be [4,1,5,4,6,5]. note that there can be other ways to make the array k-increasing, but none of them require less than 2 operations. constraints: 1 <= arr.length <= 105 1 <= arr[i], k <= arr.length
the string s, return the size of the longest substring containing each vowel an even number of times. that is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times. example 1: input: s = "eleetminicoworoep" output: 13 explanation: the longest substring is "leetminicowor" which contains two each of the vowels: e, i and o and zero of the vowels: a and u. example 2: input: s = "leetcodeisgreat" output: 5 explanation: the longest substring is "leetc" which contains two e's. example 3: input: s = "bcbcbc" output: 6 explanation: in this case, the given string "bcbcbc" is the longest because all vowels: a, e, i, o and u appear zero times. constraints: 1 <= s.length <= 5 x 10^5 s contains only lowercase english letters.
are given an integer array nums and an integer k. find the longest subsequence of nums that meets the following requirements: the subsequence is strictly increasing and the difference between adjacent elements in the subsequence is at most k. return the length of the longest subsequence that meets the requirements. a subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. example 1: input: nums = [4,2,1,4,3,4,5,8,15], k = 3 output: 5 explanation: the longest subsequence that meets the requirements is [1,3,4,5,8]. the subsequence has a length of 5, so we return 5. note that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3. example 2: input: nums = [7,4,5,1,8,12,4,7], k = 5 output: 4 explanation: the longest subsequence that meets the requirements is [4,5,8,12]. the subsequence has a length of 4, so we return 4. example 3: input: nums = [1,5], k = 1 output: 1 explanation: the longest subsequence that meets the requirements is [1]. the subsequence has a length of 1, so we return 1. constraints: 1 <= nums.length <= 105 1 <= nums[i], k <= 105
are given an integer array nums. the absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr). return the maximum absolute sum of any (possibly empty) subarray of nums. note that abs(x) is defined as follows: if x is a negative integer, then abs(x) = -x. if x is a non-negative integer, then abs(x) = x. example 1: input: nums = [1,-3,2,3,-4] output: 5 explanation: the subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5. example 2: input: nums = [2,-5,1,-4,3,-2] output: 8 explanation: the subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8. constraints: 1 <= nums.length <= 105 -104 <= nums[i] <= 104
are given a string s and an integer array indices of the same length. the string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string. return the shuffled string. example 1: input: s = "codeleet", indices = [4,5,6,7,0,2,1,3] output: "leetcode" explanation: as shown, "codeleet" becomes "leetcode" after shuffling. example 2: input: s = "abc", indices = [0,1,2] output: "abc" explanation: after shuffling, each character remains in its position. constraints: s.length == indices.length == n 1 <= n <= 100 s consists of only lowercase english letters. 0 <= indices[i] < n all values of indices are unique.
are given an array of n strings strs, all of the same length. we may choose any deletion indices, and we delete all the characters in those indices for each string. for example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"]. suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). return the minimum possible value of answer.length. example 1: input: strs = ["ca","bb","ac"] output: 1 explanation: after deleting the first column, strs = ["a", "b", "c"]. now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]). we require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1. example 2: input: strs = ["xc","yb","za"] output: 0 explanation: strs is already in lexicographic order, so we do not need to delete anything. note that the rows of strs are not necessarily in lexicographic order: i.e., it is not necessarily true that (strs[0][0] <= strs[0][1] <= ...) example 3: input: strs = ["zyx","wvu","tsr"] output: 3 explanation: we have to delete every column. constraints: n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 100 strs[i] consists of lowercase english letters.
binary tree is named even-odd if it meets the following conditions: the root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc. for every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right). for every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right). given the root of a binary tree, return true if the binary tree is even-odd, otherwise return false. example 1: input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2] output: true explanation: the node values on each level are: level 0: [1] level 1: [10,4] level 2: [3,7,9] level 3: [12,8,6,2] since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is even-odd. example 2: input: root = [5,4,2,3,3,7] output: false explanation: the node values on each level are: level 0: [5] level 1: [4,2] level 2: [3,3,7] node values in level 2 must be in strictly increasing order, so the tree is not even-odd. example 3: input: root = [5,9,1,3,5,7] output: false explanation: node values in the level 1 should be even integers. constraints: the number of nodes in the tree is in the range [1, 105]. 1 <= node.val <= 106
is a computer that can run an unlimited number of tasks at the same time. you are given a 2d integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi]. you may turn on the computer only when it needs to run a task. you can also turn it off if it is idle. return the minimum time during which the computer should be turned on to complete all tasks. example 1: input: tasks = [[2,3,1],[4,5,1],[1,5,2]] output: 2 explanation: - the first task can be run in the inclusive time range [2, 2]. - the second task can be run in the inclusive time range [5, 5]. - the third task can be run in the two inclusive time ranges [2, 2] and [5, 5]. the computer will be on for a total of 2 seconds. example 2: input: tasks = [[1,3,2],[2,5,3],[5,6,2]] output: 4 explanation: - the first task can be run in the inclusive time range [2, 3]. - the second task can be run in the inclusive time ranges [2, 3] and [5, 5]. - the third task can be run in the two inclusive time range [5, 6]. the computer will be on for a total of 4 seconds. constraints: 1 <= tasks.length <= 2000 tasks[i].length == 3 1 <= starti, endi <= 2000 1 <= durationi <= endi - starti + 1
two version numbers, version1 and version2, compare them. version numbers consist of one or more revisions joined by a dot '.'. each revision consists of digits and may contain leading zeros. every revision contains at least one character. revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. for example 2.5.33 and 0.1 are valid version numbers. to compare version numbers, compare their revisions in left-to-right order. revisions are compared using their integer value ignoring any leading zeros. this means that revisions 1 and 001 are considered equal. if a version number does not specify a revision at an index, then treat the revision as 0. for example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1. return the following: if version1 < version2, return -1. if version1 > version2, return 1. otherwise, return 0. example 1: input: version1 = "1.01", version2 = "1.001" output: 0 explanation: ignoring leading zeroes, both "01" and "001" represent the same integer "1". example 2: input: version1 = "1.0", version2 = "1.0.0" output: 0 explanation: version1 does not specify revision 2, which means it is treated as "0". example 3: input: version1 = "0.1", version2 = "1.1" output: -1 explanation: version1's revision 0 is "0", while version2's revision 0 is "1". 0 < 1, so version1 < version2. constraints: 1 <= version1.length, version2.length <= 500 version1 and version2 only contain digits and '.'. version1 and version2 are valid version numbers. all the given revisions in version1 and version2 can be stored in a 32-bit integer.
the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth. note that the root node is at depth 1. the adding rule is: given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root. cur's original left subtree should be the left subtree of the new left subtree root. cur's original right subtree should be the right subtree of the new right subtree root. if depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree. example 1: input: root = [4,2,6,3,1,5], val = 1, depth = 2 output: [4,1,1,2,null,null,6,3,1,5] example 2: input: root = [4,2,null,3,1], val = 1, depth = 3 output: [4,2,null,1,1,3,null,null,1] constraints: the number of nodes in the tree is in the range [1, 104]. the depth of the tree is in the range [1, 104]. -100 <= node.val <= 100 -105 <= val <= 105 1 <= depth <= the depth of tree + 1
start at the cell (rstart, cstart) of an rows x cols grid facing east. the northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column. you will walk in a clockwise spiral shape to visit every position in this grid. whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). eventually, we reach all rows * cols spaces of the grid. return an array of coordinates representing the positions of the grid in the order you visited them. example 1: input: rows = 1, cols = 4, rstart = 0, cstart = 0 output: [[0,0],[0,1],[0,2],[0,3]] example 2: input: rows = 5, cols = 6, rstart = 1, cstart = 4 output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]] constraints: 1 <= rows, cols <= 100 0 <= rstart < rows 0 <= cstart < cols
the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values. two nodes of a binary tree are cousins if they have the same depth with different parents. return the root of the modified tree. note that the depth of a node is the number of edges in the path from the root node to it. example 1: input: root = [5,4,9,1,10,null,7] output: [0,0,0,7,7,null,11] explanation: the diagram above shows the initial binary tree and the binary tree after changing the value of each node. - node with value 5 does not have any cousins so its sum is 0. - node with value 4 does not have any cousins so its sum is 0. - node with value 9 does not have any cousins so its sum is 0. - node with value 1 has a cousin with value 7 so its sum is 7. - node with value 10 has a cousin with value 7 so its sum is 7. - node with value 7 has cousins with values 1 and 10 so its sum is 11. example 2: input: root = [3,1,2] output: [0,0,0] explanation: the diagram above shows the initial binary tree and the binary tree after changing the value of each node. - node with value 3 does not have any cousins so its sum is 0. - node with value 1 does not have any cousins so its sum is 0. - node with value 2 does not have any cousins so its sum is 0. constraints: the number of nodes in the tree is in the range [1, 105]. 1 <= node.val <= 104
are given a 2d integer array ranges and two integers left and right. each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi. return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. return false otherwise. an integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi. example 1: input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5 output: true explanation: every integer between 2 and 5 is covered: - 2 is covered by the first range. - 3 and 4 are covered by the second range. - 5 is covered by the third range. example 2: input: ranges = [[1,10],[10,20]], left = 21, right = 21 output: false explanation: 21 is not covered by any range. constraints: 1 <= ranges.length <= 50 1 <= starti <= endi <= 50 1 <= left <= right <= 50
are given an array of strings of the same length words. in one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i]. two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j]. for example, words[i] = "zzxy" and words[j] = "xyzz" are special-equivalent because we may make the moves "zzxy" -> "xzzy" -> "xyzz". a group of special-equivalent strings from words is a non-empty subset of words such that: every pair of strings in the group are special equivalent, and the group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group). return the number of groups of special-equivalent strings from words. example 1: input: words = ["abcd","cdab","cbad","xyzz","zzxy","zzyx"] output: 3 explanation: one group is ["abcd", "cdab", "cbad"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these. the other two groups are ["xyzz", "zzxy"] and ["zzyx"]. note that in particular, "zzxy" is not special equivalent to "zzyx". example 2: input: words = ["abc","acb","bac","bca","cab","cba"] output: 3 constraints: 1 <= words.length <= 1000 1 <= words[i].length <= 20 words[i] consist of lowercase english letters. all the strings are of the same length.
a string s, return the last substring of s in lexicographical order. example 1: input: s = "abab" output: "bab" explanation: the substrings are ["a", "ab", "aba", "abab", "b", "ba", "bab"]. the lexicographically maximum substring is "bab". example 2: input: s = "leetcode" output: "tcode" constraints: 1 <= s.length <= 4 * 105 s contains only lowercase english letters.
are given two 0-indexed arrays of strings startwords and targetwords. each string consists of lowercase english letters only. for each string in targetwords, check if it is possible to choose a string from startwords and perform a conversion operation on it to be equal to that from targetwords. the conversion operation is described in the following two steps: append any lowercase letter that is not present in the string to its end. for example, if the string is "abc", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. if 'd' is added, the resulting string will be "abcd". rearrange the letters of the new string in any arbitrary order. for example, "abcd" can be rearranged to "acbd", "bacd", "cbda", and so on. note that it can also be rearranged to "abcd" itself. return the number of strings in targetwords that can be obtained by performing the operations on any string of startwords. note that you will only be verifying if the string in targetwords can be obtained from a string in startwords by performing the operations. the strings in startwords do not actually change during this process. example 1: input: startwords = ["ant","act","tack"], targetwords = ["tack","act","acti"] output: 2 explanation: - in order to form targetwords[0] = "tack", we use startwords[1] = "act", append 'k' to it, and rearrange "actk" to "tack". - there is no string in startwords that can be used to obtain targetwords[1] = "act". note that "act" does exist in startwords, but we must append one letter to the string before rearranging it. - in order to form targetwords[2] = "acti", we use startwords[1] = "act", append 'i' to it, and rearrange "acti" to "acti" itself. example 2: input: startwords = ["ab","a"], targetwords = ["abc","abcd"] output: 1 explanation: - in order to form targetwords[0] = "abc", we use startwords[0] = "ab", add 'c' to it, and rearrange it to "abc". - there is no string in startwords that can be used to obtain targetwords[1] = "abcd". constraints: 1 <= startwords.length, targetwords.length <= 5 * 104 1 <= startwords[i].length, targetwords[j].length <= 26 each string of startwords and targetwords consists of lowercase english letters only. no letter occurs more than once in any string of startwords or targetwords.
a snapshotarray that supports the following interface: snapshotarray(int length) initializes an array-like data structure with the given length. initially, each element equals 0. void set(index, val) sets the element at the given index to be equal to val. int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1. int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id example 1: input: ["snapshotarray","set","snap","set","get"] [[3],[0,5],[],[0,6],[0,0]] output: [null,null,0,null,5] explanation: snapshotarray snapshotarr = new snapshotarray(3); // set the length to be 3 snapshotarr.set(0,5); // set array[0] = 5 snapshotarr.snap(); // take a snapshot, return snap_id = 0 snapshotarr.set(0,6); snapshotarr.get(0,0); // get the value of array[0] with snap_id = 0, return 5 constraints: 1 <= length <= 5 * 104 0 <= index < length 0 <= val <= 109 0 <= snap_id < (the total number of times we call snap()) at most 5 * 104 calls will be made to set, snap, and get.
demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. the dungeon consists of m x n rooms laid out in a 2d grid. our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess. the knight has an initial health point represented by a positive integer. if at any point his health point drops to 0 or below, he dies immediately. some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers). to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. return the knight's minimum initial health so that he can rescue the princess. note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned. example 1: input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]] output: 7 explanation: the initial health of the knight must be at least 7 if he follows the optimal path: right-> right -> down -> down. example 2: input: dungeon = [[0]] output: 1 constraints: m == dungeon.length n == dungeon[i].length 1 <= m, n <= 200 -1000 <= dungeon[i][j] <= 1000
are given an integer n representing the size of a 0-indexed memory array. all memory units are initially free. you have a memory allocator with the following functionalities: allocate a block of size consecutive free memory units and assign it the id mid. free all memory units with the given id mid. note that: multiple blocks can be allocated to the same mid. you should free all the memory units with mid, even if they were allocated in different blocks. implement the allocator class: allocator(int n) initializes an allocator object with a memory array of size n. int allocate(int size, int mid) find the leftmost block of size consecutive free memory units and allocate it with the id mid. return the block's first index. if such a block does not exist, return -1. int free(int mid) free all memory units with the id mid. return the number of memory units you have freed. example 1: input ["allocator", "allocate", "allocate", "allocate", "free", "allocate", "allocate", "allocate", "free", "allocate", "free"] [[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]] output [null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0] explanation allocator loc = new allocator(10); // initialize a memory array of size 10. all memory units are initially free. loc.allocate(1, 1); // the leftmost block's first index is 0. the memory array becomes [1,_,_,_,_,_,_,_,_,_]. we return 0. loc.allocate(1, 2); // the leftmost block's first index is 1. the memory array becomes [1,2,_,_,_,_,_,_,_,_]. we return 1. loc.allocate(1, 3); // the leftmost block's first index is 2. the memory array becomes [1,2,3,_,_,_,_,_,_,_]. we return 2. loc.free(2); // free all memory units with mid 2. the memory array becomes [1,_, 3,_,_,_,_,_,_,_]. we return 1 since there is only 1 unit with mid 2. loc.allocate(3, 4); // the leftmost block's first index is 3. the memory array becomes [1,_,3,4,4,4,_,_,_,_]. we return 3. loc.allocate(1, 1); // the leftmost block's first index is 1. the memory array becomes [1,1,3,4,4,4,_,_,_,_]. we return 1. loc.allocate(1, 1); // the leftmost block's first index is 6. the memory array becomes [1,1,3,4,4,4,1,_,_,_]. we return 6. loc.free(1); // free all memory units with mid 1. the memory array becomes [_,_,3,4,4,4,_,_,_,_]. we return 3 since there are 3 units with mid 1. loc.allocate(10, 2); // we can not find any free block with 10 consecutive free memory units, so we return -1. loc.free(7); // free all memory units with mid 7. the memory array remains the same since there is no memory unit with mid 7. we return 0. constraints: 1 <= n, size, mid <= 1000 at most 1000 calls will be made to allocate and free.
are given two integers n and k and two integer arrays speed and efficiency both of length n. there are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively. choose at most k different engineers out of the n engineers to form a team with the maximum performance. the performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers. return the maximum performance of this team. since the answer can be a huge number, return it modulo 109 + 7. example 1: input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2 output: 60 explanation: we have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). that is, performance = (10 + 5) * min(4, 7) = 60. example 2: input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3 output: 68 explanation: this is the same example as the first but k = 3. we can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. that is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68. example 3: input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4 output: 72 constraints: 1 <= k <= n <= 105 speed.length == n efficiency.length == n 1 <= speed[i] <= 105 1 <= efficiency[i] <= 108
an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. you can return the answer in any order. example 1: input: n = 2 output: ["1/2"] explanation: "1/2" is the only unique fraction with a denominator less-than-or-equal-to 2. example 2: input: n = 3 output: ["1/2","1/3","2/3"] example 3: input: n = 4 output: ["1/2","1/3","1/4","2/3","3/4"] explanation: "2/4" is not a simplified fraction because it can be simplified to "1/2". constraints: 1 <= n <= 100
is a bookstore owner that has a store open for n minutes. every minute, some number of customers enter the store. you are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute. on some minutes, the bookstore owner is grumpy. you are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise. when the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied. the bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once. return the maximum number of customers that can be satisfied throughout the day. example 1: input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3 output: 16 explanation: the bookstore owner keeps themselves not grumpy for the last 3 minutes. the maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16. example 2: input: customers = [1], grumpy = [0], minutes = 1 output: 1 constraints: n == customers.length == grumpy.length 1 <= minutes <= n <= 2 * 104 0 <= customers[i] <= 1000 grumpy[i] is either 0 or 1.
has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupsize, and consists of groupsize consecutive cards. given an integer array hand where hand[i] is the value written on the ith card and an integer groupsize, return true if she can rearrange the cards, or false otherwise. example 1: input: hand = [1,2,3,6,2,3,4,7,8], groupsize = 3 output: true explanation: alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8] example 2: input: hand = [1,2,3,4,5], groupsize = 4 output: false explanation: alice's hand can not be rearranged into groups of 4. constraints: 1 <= hand.length <= 104 0 <= hand[i] <= 109 1 <= groupsize <= hand.length note: this question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/
are given an integer mass, which represents the original mass of a planet. you are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid. you can arrange for the planet to collide with the asteroids in any arbitrary order. if the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. otherwise, the planet is destroyed. return true if all asteroids can be destroyed. otherwise, return false. example 1: input: mass = 10, asteroids = [3,9,19,5,21] output: true explanation: one way to order the asteroids is [9,19,5,3,21]: - the planet collides with the asteroid with a mass of 9. new planet mass: 10 + 9 = 19 - the planet collides with the asteroid with a mass of 19. new planet mass: 19 + 19 = 38 - the planet collides with the asteroid with a mass of 5. new planet mass: 38 + 5 = 43 - the planet collides with the asteroid with a mass of 3. new planet mass: 43 + 3 = 46 - the planet collides with the asteroid with a mass of 21. new planet mass: 46 + 21 = 67 all asteroids are destroyed. example 2: input: mass = 5, asteroids = [4,9,23,4] output: false explanation: the planet cannot ever gain enough mass to destroy the asteroid with a mass of 23. after the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22. this is less than 23, so a collision would not destroy the last asteroid. constraints: 1 <= mass <= 105 1 <= asteroids.length <= 105 1 <= asteroids[i] <= 105
are given an array nums consisting of positive integers. you have to take each integer in the array, reverse its digits, and add it to the end of the array. you should apply this operation to the original integers in nums. return the number of distinct integers in the final array. example 1: input: nums = [1,13,10,12,31] output: 6 explanation: after including the reverse of each number, the resulting array is [1,13,10,12,31,1,31,1,21,13]. the reversed integers that were added to the end of the array are underlined. note that for the integer 10, after reversing it, it becomes 01 which is just 1. the number of distinct integers in this array is 6 (the numbers 1, 10, 12, 13, 21, and 31). example 2: input: nums = [2,2,2] output: 1 explanation: after including the reverse of each number, the resulting array is [2,2,2,2,2,2]. the number of distinct integers in this array is 1 (the number 2). constraints: 1 <= nums.length <= 105 1 <= nums[i] <= 106
schema table: insurance +-------------+-------+ | column name | type | +-------------+-------+ | pid | int | | tiv_2015 | float | | tiv_2016 | float | | lat | float | | lon | float | +-------------+-------+ pid is the primary key column for this table. each row of this table contains information about one policy where: pid is the policyholder's policy id. tiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016. lat is the latitude of the policy holder's city. it's guaranteed that lat is not null. lon is the longitude of the policy holder's city. it's guaranteed that lon is not null. write an sql query to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who: have the same tiv_2015 value as one or more other policyholders, and are not located in the same city like any other policyholder (i.e., the (lat, lon) attribute pairs must be unique). round tiv_2016 to two decimal places. the query result format is in the following example. example 1: input: insurance table: +-----+----------+----------+-----+-----+ | pid | tiv_2015 | tiv_2016 | lat | lon | +-----+----------+----------+-----+-----+ | 1 | 10 | 5 | 10 | 10 | | 2 | 20 | 20 | 20 | 20 | | 3 | 10 | 30 | 20 | 20 | | 4 | 10 | 40 | 40 | 40 | +-----+----------+----------+-----+-----+ output: +----------+ | tiv_2016 | +----------+ | 45.00 | +----------+ explanation: the first record in the table, like the last record, meets both of the two criteria. the tiv_2015 value 10 is the same as the third and fourth records, and its location is unique. the second record does not meet any of the two criteria. its tiv_2015 is not like any other policyholders and its location is the same as the third record, which makes the third record fail, too. so, the result is the sum of tiv_2016 of the first and last record, which is 45.
are given n tasks labeled from 0 to n - 1 represented by a 2d integer array tasks, where tasks[i] = [enqueuetimei, processingtimei] means that the ith task will be available to process at enqueuetimei and will take processingtimei to finish processing. you have a single-threaded cpu that can process at most one task at a time and will act in the following way: if the cpu is idle and there are no available tasks to process, the cpu remains idle. if the cpu is idle and there are available tasks, the cpu will choose the one with the shortest processing time. if multiple tasks have the same shortest processing time, it will choose the task with the smallest index. once a task is started, the cpu will process the entire task without stopping. the cpu can finish a task then start a new one instantly. return the order in which the cpu will process the tasks. example 1: input: tasks = [[1,2],[2,4],[3,2],[4,1]] output: [0,2,3,1] explanation: the events go as follows: - at time = 1, task 0 is available to process. available tasks = {0}. - also at time = 1, the idle cpu starts processing task 0. available tasks = {}. - at time = 2, task 1 is available to process. available tasks = {1}. - at time = 3, task 2 is available to process. available tasks = {1, 2}. - also at time = 3, the cpu finishes task 0 and starts processing task 2 as it is the shortest. available tasks = {1}. - at time = 4, task 3 is available to process. available tasks = {1, 3}. - at time = 5, the cpu finishes task 2 and starts processing task 3 as it is the shortest. available tasks = {1}. - at time = 6, the cpu finishes task 3 and starts processing task 1. available tasks = {}. - at time = 10, the cpu finishes task 1 and becomes idle. example 2: input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]] output: [4,3,2,0,1] explanation: the events go as follows: - at time = 7, all the tasks become available. available tasks = {0,1,2,3,4}. - also at time = 7, the idle cpu starts processing task 4. available tasks = {0,1,2,3}. - at time = 9, the cpu finishes task 4 and starts processing task 3. available tasks = {0,1,2}. - at time = 13, the cpu finishes task 3 and starts processing task 2. available tasks = {0,1}. - at time = 18, the cpu finishes task 2 and starts processing task 0. available tasks = {1}. - at time = 28, the cpu finishes task 0 and starts processing task 1. available tasks = {}. - at time = 40, the cpu finishes task 1 and becomes idle. constraints: tasks.length == n 1 <= n <= 105 1 <= enqueuetimei, processingtimei <= 109
die simulator generates a random number from 1 to 6 for each roll. you introduced a constraint to the generator such that it cannot roll the number i more than rollmax[i] (1-indexed) consecutive times. given an array of integers rollmax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. since the answer may be too large, return it modulo 109 + 7. two sequences are considered different if at least one element differs from each other. example 1: input: n = 2, rollmax = [1,1,2,2,2,3] output: 34 explanation: there will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. in this case, looking at rollmax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34. example 2: input: n = 2, rollmax = [1,1,1,1,1,1] output: 30 example 3: input: n = 3, rollmax = [1,1,1,2,2,3] output: 181 constraints: 1 <= n <= 5000 rollmax.length == 6 1 <= rollmax[i] <= 15
an integer array nums and an integer val, remove all occurrences of val in nums in-place. the order of the elements may be changed. then return the number of elements in nums which are not equal to val. consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things: change the array nums such that the first k elements of nums contain the elements which are not equal to val. the remaining elements of nums are not important as well as the size of nums. return k. custom judge: the judge will test your solution with the following code: int[] nums = [...]; // input array int val = ...; // value to remove int[] expectednums = [...]; // the expected answer with correct length. // it is sorted with no values equaling val. int k = removeelement(nums, val); // calls your implementation assert k == expectednums.length; sort(nums, 0, k); // sort the first k elements of nums for (int i = 0; i < actuallength; i++) { assert nums[i] == expectednums[i]; } if all assertions pass, then your solution will be accepted. example 1: input: nums = [3,2,2,3], val = 3 output: 2, nums = [2,2,_,_] explanation: your function should return k = 2, with the first two elements of nums being 2. it does not matter what you leave beyond the returned k (hence they are underscores). example 2: input: nums = [0,1,2,2,3,0,4,2], val = 2 output: 5, nums = [0,1,4,0,3,_,_,_] explanation: your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. note that the five elements can be returned in any order. it does not matter what you leave beyond the returned k (hence they are underscores). constraints: 0 <= nums.length <= 100 0 <= nums[i] <= 50 0 <= val <= 100
array arr a mountain if the following properties hold: arr.length >= 3 there exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]. you must solve it in o(log(arr.length)) time complexity. example 1: input: arr = [0,1,0] output: 1 example 2: input: arr = [0,2,1,0] output: 1 example 3: input: arr = [0,10,5,2] output: 1 constraints: 3 <= arr.length <= 105 0 <= arr[i] <= 106 arr is guaranteed to be a mountain array.
an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers. return the maximum product you can get. example 1: input: n = 2 output: 1 explanation: 2 = 1 + 1, 1 × 1 = 1. example 2: input: n = 10 output: 36 explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36. constraints: 2 <= n <= 58
are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match. return a list answer of size 2 where: answer[0] is a list of all players that have not lost any matches. answer[1] is a list of all players that have lost exactly one match. the values in the two lists should be returned in increasing order. note: you should only consider the players that have played at least one match. the testcases will be generated such that no two matches will have the same outcome. example 1: input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]] output: [[1,2,10],[4,5,7,8]] explanation: players 1, 2, and 10 have not lost any matches. players 4, 5, 7, and 8 each have lost one match. players 3, 6, and 9 each have lost two matches. thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8]. example 2: input: matches = [[2,3],[1,3],[5,4],[6,4]] output: [[1,2,5,6],[]] explanation: players 1, 2, 5, and 6 have not lost any matches. players 3 and 4 each have lost two matches. thus, answer[0] = [1,2,5,6] and answer[1] = []. constraints: 1 <= matches.length <= 105 matches[i].length == 2 1 <= winneri, loseri <= 105 winneri != loseri all matches[i] are unique.
are given an m x n integer matrix grid. we define an hourglass as a part of the matrix with the following form: return the maximum sum of the elements of an hourglass. note that an hourglass cannot be rotated and must be entirely contained within the matrix. example 1: input: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]] output: 30 explanation: the cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30. example 2: input: grid = [[1,2,3],[4,5,6],[7,8,9]] output: 35 explanation: there is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35. constraints: m == grid.length n == grid[i].length 3 <= m, n <= 150 0 <= grid[i][j] <= 106
are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values. return the number of connected components in nums where two values are connected if they appear consecutively in the linked list. example 1: input: head = [0,1,2,3], nums = [0,1,3] output: 2 explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components. example 2: input: head = [0,1,2,3,4], nums = [0,3,1,4] output: 2 explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components. constraints: the number of nodes in the linked list is n. 1 <= n <= 104 0 <= node.val < n all the values node.val are unique. 1 <= nums.length <= n 0 <= nums[i] < n all the values of nums are unique.
the root of a binary tree, return all duplicate subtrees. for each kind of duplicate subtrees, you only need to return the root node of any one of them. two trees are duplicate if they have the same structure with the same node values. example 1: input: root = [1,2,3,4,null,2,4,null,null,4] output: [[2,4],[4]] example 2: input: root = [2,1,1] output: [[1]] example 3: input: root = [2,2,2,3,null,3,null] output: [[2,3],[3]] constraints: the number of the nodes in the tree will be in the range [1, 5000] -200 <= node.val <= 200
are n friends that are playing a game. the friends are sitting in a circle and are numbered from 1 to n in clockwise order. more formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend. the rules of the game are as follows: start at the 1st friend. count the next k friends in the clockwise direction including the friend you started at. the counting wraps around the circle and may count some friends more than once. the last friend you counted leaves the circle and loses the game. if there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat. else, the last friend in the circle wins the game. given the number of friends, n, and an integer k, return the winner of the game. example 1: input: n = 5, k = 2 output: 3 explanation: here are the steps of the game: 1) start at friend 1. 2) count 2 friends clockwise, which are friends 1 and 2. 3) friend 2 leaves the circle. next start is friend 3. 4) count 2 friends clockwise, which are friends 3 and 4. 5) friend 4 leaves the circle. next start is friend 5. 6) count 2 friends clockwise, which are friends 5 and 1. 7) friend 1 leaves the circle. next start is friend 3. 8) count 2 friends clockwise, which are friends 3 and 5. 9) friend 5 leaves the circle. only friend 3 is left, so they are the winner. example 2: input: n = 6, k = 5 output: 1 explanation: the friends leave in this order: 5, 4, 6, 2, 3. the winner is friend 1. constraints: 1 <= k <= n <= 500 follow up: could you solve this problem in linear time with constant space?
string s can be partitioned into groups of size k using the following procedure: the first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. each character can be a part of exactly one group. for the last group, if the string does not have k characters remaining, a character fill is used to complete the group. note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s. given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure. example 1: input: s = "abcdefghi", k = 3, fill = "x" output: ["abc","def","ghi"] explanation: the first 3 characters "abc" form the first group. the next 3 characters "def" form the second group. the last 3 characters "ghi" form the third group. since all groups can be completely filled by characters from the string, we do not need to use fill. thus, the groups formed are "abc", "def", and "ghi". example 2: input: s = "abcdefghij", k = 3, fill = "x" output: ["abc","def","ghi","jxx"] explanation: similar to the previous example, we are forming the first three groups "abc", "def", and "ghi". for the last group, we can only use the character 'j' from the string. to complete this group, we add 'x' twice. thus, the 4 groups formed are "abc", "def", "ghi", and "jxx". constraints: 1 <= s.length <= 100 s consists of lowercase english letters only. 1 <= k <= 100 fill is a lowercase english letter.
an integer array nums that may contain duplicates, return all possible subsets (the power set). the solution set must not contain duplicate subsets. return the solution in any order. example 1: input: nums = [1,2,2] output: [[],[1],[1,2],[1,2,2],[2],[2,2]] example 2: input: nums = [0] output: [[],[0]] constraints: 1 <= nums.length <= 10 -10 <= nums[i] <= 10
an m x n 2d binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands. an island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. you may assume all four edges of the grid are all surrounded by water. example 1: input: grid = [ ["1","1","1","1","0"], ["1","1","0","1","0"], ["1","1","0","0","0"], ["0","0","0","0","0"] ] output: 1 example 2: input: grid = [ ["1","1","0","0","0"], ["1","1","0","0","0"], ["0","0","1","0","0"], ["0","0","0","1","1"] ] output: 3 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 300 grid[i][j] is '0' or '1'.
are given an integer n. we reorder the digits in any order (including the original order) such that the leading digit is not zero. return true if and only if we can do this so that the resulting number is a power of two. example 1: input: n = 1 output: true example 2: input: n = 10 output: false constraints: 1 <= n <= 109
an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream. implement the productofnumbers class: productofnumbers() initializes the object with an empty stream. void add(int num) appends the integer num to the stream. int getproduct(int k) returns the product of the last k numbers in the current list. you can assume that always the current list has at least k numbers. the test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing. example: input ["productofnumbers","add","add","add","add","add","getproduct","getproduct","getproduct","add","getproduct"] [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]] output [null,null,null,null,null,null,20,40,0,null,32] explanation productofnumbers productofnumbers = new productofnumbers(); productofnumbers.add(3); // [3] productofnumbers.add(0); // [3,0] productofnumbers.add(2); // [3,0,2] productofnumbers.add(5); // [3,0,2,5] productofnumbers.add(4); // [3,0,2,5,4] productofnumbers.getproduct(2); // return 20. the product of the last 2 numbers is 5 * 4 = 20 productofnumbers.getproduct(3); // return 40. the product of the last 3 numbers is 2 * 5 * 4 = 40 productofnumbers.getproduct(4); // return 0. the product of the last 4 numbers is 0 * 2 * 5 * 4 = 0 productofnumbers.add(8); // [3,0,2,5,4,8] productofnumbers.getproduct(2); // return 32. the product of the last 2 numbers is 4 * 8 = 32 constraints: 0 <= num <= 100 1 <= k <= 4 * 104 at most 4 * 104 calls will be made to add and getproduct. the product of the stream at any point in time will fit in a 32-bit integer.
are given a 0-indexed 2d integer array grid of size m x n. each cell has one of two values: 0 represents an empty cell, 1 represents an obstacle that may be removed. you can move up, down, left, or right from and to an empty cell. return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1). example 1: input: grid = [[0,1,1],[1,1,0],[1,1,0]] output: 2 explanation: we can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2). it can be shown that we need to remove at least 2 obstacles, so we return 2. note that there may be other ways to remove 2 obstacles to create a path. example 2: input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]] output: 0 explanation: we can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0. constraints: m == grid.length n == grid[i].length 1 <= m, n <= 105 2 <= m * n <= 105 grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 0
an array of integers nums, return the number of good pairs. a pair (i, j) is called good if nums[i] == nums[j] and i < j. example 1: input: nums = [1,2,3,1,1,3] output: 4 explanation: there are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed. example 2: input: nums = [1,1,1,1] output: 6 explanation: each pair in the array are good. example 3: input: nums = [1,2,3] output: 0 constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100
is a function signfunc(x) that returns: 1 if x is positive. -1 if x is negative. 0 if x is equal to 0. you are given an integer array nums. let product be the product of all values in the array nums. return signfunc(product). example 1: input: nums = [-1,-2,-3,-4,3,2,1] output: 1 explanation: the product of all values in the array is 144, and signfunc(144) = 1 example 2: input: nums = [1,5,0,2,-3] output: 0 explanation: the product of all values in the array is 0, and signfunc(0) = 0 example 3: input: nums = [-1,1,-1,1,-1] output: -1 explanation: the product of all values in the array is -1, and signfunc(-1) = -1 constraints: 1 <= nums.length <= 1000 -100 <= nums[i] <= 100
a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. if there are no two adjacent 1's, return 0. two 1's are adjacent if there are only 0's separating them (possibly no 0's). the distance between two 1's is the absolute difference between their bit positions. for example, the two 1's in "1001" have a distance of 3. example 1: input: n = 22 output: 2 explanation: 22 in binary is "10110". the first adjacent pair of 1's is "10110" with a distance of 2. the second adjacent pair of 1's is "10110" with a distance of 1. the answer is the largest of these two distances, which is 2. note that "10110" is not a valid pair since there is a 1 separating the two 1's underlined. example 2: input: n = 8 output: 0 explanation: 8 in binary is "1000". there are not any adjacent pairs of 1's in the binary representation of 8, so we return 0. example 3: input: n = 5 output: 2 explanation: 5 in binary is "101". constraints: 1 <= n <= 109
way to serialize a binary tree is to use preorder traversal. when we encounter a non-null node, we record the node's value. if it is a null node, we record using a sentinel value such as '#'. for example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node. given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree. it is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer. you may assume that the input format is always valid. for example, it could never contain two consecutive commas, such as "1,,3". note: you are not allowed to reconstruct the tree. example 1: input: preorder = "9,3,4,#,#,1,#,#,2,#,6,#,#" output: true example 2: input: preorder = "1,#" output: false example 3: input: preorder = "9,#,#,1" output: false constraints: 1 <= preorder.length <= 104 preorder consist of integers in the range [0, 100] and '#' separated by commas ','.
an array nums of size n, return the majority element. the majority element is the element that appears more than ⌊n / 2⌋ times. you may assume that the majority element always exists in the array. example 1: input: nums = [3,2,3] output: 3 example 2: input: nums = [2,2,1,1,1,2,2] output: 2 constraints: n == nums.length 1 <= n <= 5 * 104 -109 <= nums[i] <= 109 follow-up: could you solve the problem in linear time and in o(1) space?
shop is selling candies at a discount. for every two candies sold, the shop gives a third candy for free. the customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought. for example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they can take the candy with cost 1 for free, but not the candy with cost 4. given a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies. example 1: input: cost = [1,2,3] output: 5 explanation: we buy the candies with costs 2 and 3, and take the candy with cost 1 for free. the total cost of buying all candies is 2 + 3 = 5. this is the only way we can buy the candies. note that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free. the cost of the free candy has to be less than or equal to the minimum cost of the purchased candies. example 2: input: cost = [6,5,7,9,2,2] output: 23 explanation: the way in which we can get the minimum cost is described below: - buy candies with costs 9 and 7 - take the candy with cost 6 for free - we buy candies with costs 5 and 2 - take the last remaining candy with cost 2 for free hence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23. example 3: input: cost = [5,5] output: 10 explanation: since there are only 2 candies, we buy both of them. there is not a third candy we can take for free. hence, the minimum cost to buy all candies is 5 + 5 = 10. constraints: 1 <= cost.length <= 100 1 <= cost[i] <= 100
is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. the roads are represented as a 2d integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. there may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself. each time you pass through a city, you must pay a passing fee. this is represented as a 0-indexed integer array passingfees of length n where passingfees[j] is the amount of dollars you must pay when you pass through city j. in the beginning, you are at city 0 and want to reach city n - 1 in maxtime minutes or less. the cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities). given maxtime, edges, and passingfees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxtime minutes. example 1: input: maxtime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingfees = [5,1,2,20,20,3] output: 11 explanation: the path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees. example 2: input: maxtime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingfees = [5,1,2,20,20,3] output: 48 explanation: the path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees. you cannot take path 0 -> 1 -> 2 -> 5 since it would take too long. example 3: input: maxtime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingfees = [5,1,2,20,20,3] output: -1 explanation: there is no way to reach city 5 from city 0 within 25 minutes. constraints: 1 <= maxtime <= 1000 n == passingfees.length 2 <= n <= 1000 n - 1 <= edges.length <= 1000 0 <= xi, yi <= n - 1 1 <= timei <= 1000 1 <= passingfees[j] <= 1000 the graph may contain multiple edges between two nodes. the graph does not contain self loops.
are given several boxes with different colors represented by different positive numbers. you may experience several rounds to remove boxes until there is no box left. each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points. return the maximum points you can get. example 1: input: boxes = [1,3,2,2,2,3,4,3,1] output: 23 explanation: [1, 3, 2, 2, 2, 3, 4, 3, 1] ----> [1, 3, 3, 4, 3, 1] (3*3=9 points) ----> [1, 3, 3, 3, 1] (1*1=1 points) ----> [1, 1] (3*3=9 points) ----> [] (2*2=4 points) example 2: input: boxes = [1,1,1] output: 9 example 3: input: boxes = [1] output: 1 constraints: 1 <= boxes.length <= 100 1 <= boxes[i] <= 100
your implementation of the circular double-ended queue (deque). implement the mycirculardeque class: mycirculardeque(int k) initializes the deque with a maximum size of k. boolean insertfront() adds an item at the front of deque. returns true if the operation is successful, or false otherwise. boolean insertlast() adds an item at the rear of deque. returns true if the operation is successful, or false otherwise. boolean deletefront() deletes an item from the front of deque. returns true if the operation is successful, or false otherwise. boolean deletelast() deletes an item from the rear of deque. returns true if the operation is successful, or false otherwise. int getfront() returns the front item from the deque. returns -1 if the deque is empty. int getrear() returns the last item from deque. returns -1 if the deque is empty. boolean isempty() returns true if the deque is empty, or false otherwise. boolean isfull() returns true if the deque is full, or false otherwise. example 1: input ["mycirculardeque", "insertlast", "insertlast", "insertfront", "insertfront", "getrear", "isfull", "deletelast", "insertfront", "getfront"] [[3], [1], [2], [3], [4], [], [], [], [4], []] output [null, true, true, true, false, 2, true, true, true, 4] explanation mycirculardeque mycirculardeque = new mycirculardeque(3); mycirculardeque.insertlast(1); // return true mycirculardeque.insertlast(2); // return true mycirculardeque.insertfront(3); // return true mycirculardeque.insertfront(4); // return false, the queue is full. mycirculardeque.getrear(); // return 2 mycirculardeque.isfull(); // return true mycirculardeque.deletelast(); // return true mycirculardeque.insertfront(4); // return true mycirculardeque.getfront(); // return 4 constraints: 1 <= k <= 1000 0 <= value <= 1000 at most 2000 calls will be made to insertfront, insertlast, deletefront, deletelast, getfront, getrear, isempty, isfull.
define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1. given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences. a subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. example 1: input: nums = [1,3,2,2,5,2,3,7] output: 5 explanation: the longest harmonious subsequence is [3,2,2,2,3]. example 2: input: nums = [1,2,3,4] output: 2 example 3: input: nums = [1,1,1,1] output: 0 constraints: 1 <= nums.length <= 2 * 104 -109 <= nums[i] <= 109
are given a string s consisting of only lowercase english letters. in one operation, you can: delete the entire string s, or delete the first i letters of s if the first i letters of s are equal to the following i letters in s, for any i in the range 1 <= i <= s.length / 2. for example, if s = "ababc", then in one operation, you could delete the first two letters of s to get "abc", since the first two letters of s and the following two letters of s are both equal to "ab". return the maximum number of operations needed to delete all of s. example 1: input: s = "abcabcdabc" output: 2 explanation: - delete the first 3 letters ("abc") since the next 3 letters are equal. now, s = "abcdabc". - delete all the letters. we used 2 operations so return 2. it can be proven that 2 is the maximum number of operations needed. note that in the second operation we cannot delete "abc" again because the next occurrence of "abc" does not happen in the next 3 letters. example 2: input: s = "aaabaab" output: 4 explanation: - delete the first letter ("a") since the next letter is equal. now, s = "aabaab". - delete the first 3 letters ("aab") since the next 3 letters are equal. now, s = "aab". - delete the first letter ("a") since the next letter is equal. now, s = "ab". - delete all the letters. we used 4 operations so return 4. it can be proven that 4 is the maximum number of operations needed. example 3: input: s = "aaaaa" output: 5 explanation: in each operation, we can delete the first letter of s. constraints: 1 <= s.length <= 4000 s consists only of lowercase english letters.
a string composed of 'l', 'r', and 'x' characters, like "rxxlrxrxl", a move consists of either replacing one occurrence of "xl" with "lx", or replacing one occurrence of "rx" with "xr". given the starting string start and the ending string end, return true if and only if there exists a sequence of moves to transform one string to the other. example 1: input: start = "rxxlrxrxl", end = "xrlxxrrlx" output: true explanation: we can transform start to end following these steps: rxxlrxrxl -> xrxlrxrxl -> xrlxrxrxl -> xrlxxrrxl -> xrlxxrrlx example 2: input: start = "x", end = "l" output: false constraints: 1 <= start.length <= 104 start.length == end.length both start and end will only consist of characters in 'l', 'r', and 'x'.
a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. note: you can only move either down or right at any point in time. example 1: input: grid = [[1,3,1],[1,5,1],[4,2,1]] output: 7 explanation: because the path 1 → 3 → 1 → 1 → 1 minimizes the sum. example 2: input: grid = [[1,2,3],[4,5,6]] output: 12 constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 0 <= grid[i][j] <= 200
are given two integers m and n that represent the height and width of a rectangular piece of wood. you are also given a 2d integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars. to cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. after cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. you may sell multiple pieces of the same shape, and you do not have to sell all the shapes. the grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width. return the maximum money you can earn after cutting an m x n piece of wood. note that you can cut the piece of wood as many times as you want. example 1: input: m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]] output: 19 explanation: the diagram above shows a possible scenario. it consists of: - 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14. - 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3. - 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2. this obtains a total of 14 + 3 + 2 = 19 money earned. it can be shown that 19 is the maximum amount of money that can be earned. example 2: input: m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]] output: 32 explanation: the diagram above shows a possible scenario. it consists of: - 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30. - 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2. this obtains a total of 30 + 2 = 32 money earned. it can be shown that 32 is the maximum amount of money that can be earned. notice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood. constraints: 1 <= m, n <= 200 1 <= prices.length <= 2 * 104 prices[i].length == 3 1 <= hi <= m 1 <= wi <= n 1 <= pricei <= 106 all the shapes of wood (hi, wi) are pairwise distinct.
n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. example 1: input: n = 3 output: ["((()))","(()())","(())()","()(())","()()()"] example 2: input: n = 1 output: ["()"] constraints: 1 <= n <= 8
are given an n x n 2d matrix representing an image, rotate the image by 90 degrees (clockwise). you have to rotate the image in-place, which means you have to modify the input 2d matrix directly. do not allocate another 2d matrix and do the rotation. example 1: input: matrix = [[1,2,3],[4,5,6],[7,8,9]] output: [[7,4,1],[8,5,2],[9,6,3]] example 2: input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] constraints: n == matrix.length == matrix[i].length 1 <= n <= 20 -1000 <= matrix[i][j] <= 1000
strings are considered close if you can attain one from the other using the following operations: operation 1: swap any two existing characters. for example, abcde -> aecdb operation 2: transform every occurrence of one existing character into another existing character, and do the same with the other character. for example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's) you can use the operations on either string as many times as necessary. given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise. example 1: input: word1 = "abc", word2 = "bca" output: true explanation: you can attain word2 from word1 in 2 operations. apply operation 1: "abc" -> "acb" apply operation 1: "acb" -> "bca" example 2: input: word1 = "a", word2 = "aa" output: false explanation: it is impossible to attain word2 from word1, or vice versa, in any number of operations. example 3: input: word1 = "cabbba", word2 = "abbccc" output: true explanation: you can attain word2 from word1 in 3 operations. apply operation 1: "cabbba" -> "caabbb" apply operation 2: "caabbb" -> "baaccc" apply operation 2: "baaccc" -> "abbccc" constraints: 1 <= word1.length, word2.length <= 105 word1 and word2 contain only lowercase english letters.
an input string s, reverse the order of the words. a word is defined as a sequence of non-space characters. the words in s will be separated by at least one space. return a string of the words in reverse order concatenated by a single space. note that s may contain leading or trailing spaces or multiple spaces between two words. the returned string should only have a single space separating the words. do not include any extra spaces. example 1: input: s = "the sky is blue" output: "blue is sky the" example 2: input: s = " hello world " output: "world hello" explanation: your reversed string should not contain leading or trailing spaces. example 3: input: s = "a good example" output: "example good a" explanation: you need to reduce multiple spaces between two words to a single space in the reversed string. constraints: 1 <= s.length <= 104 s contains english letters (upper-case and lower-case), digits, and spaces ' '. there is at least one word in s. follow-up: if the string data type is mutable in your language, can you solve it in-place with o(1) extra space?
schema table: person +-------------+---------+ | column name | type | +-------------+---------+ | id | int | | email | varchar | +-------------+---------+ id is the primary key column for this table. each row of this table contains an email. the emails will not contain uppercase letters. write an sql query to delete all the duplicate emails, keeping only one unique email with the smallest id. note that you are supposed to write a delete statement and not a select one. after running your script, the answer shown is the person table. the driver will first compile and run your piece of code and then show the person table. the final order of the person table does not matter. the query result format is in the following example. example 1: input: person table: +----+------------------+ | id | email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | | 3 | john@example.com | +----+------------------+ output: +----+------------------+ | id | email | +----+------------------+ | 1 | john@example.com | | 2 | bob@example.com | +----+------------------+ explanation: john@example.com is repeated two times. we keep the row with the smallest id = 1.
an integer array nums and an integer k, return the number of good subarrays of nums. a subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j]. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: nums = [1,1,1,1,1], k = 10 output: 1 explanation: the only good subarray is the array nums itself. example 2: input: nums = [3,1,4,3,2,2,4], k = 2 output: 4 explanation: there are 4 different good subarrays: - [3,1,4,3,2,2] that has 2 pairs. - [3,1,4,3,2,2,4] that has 3 pairs. - [1,4,3,2,2,4] that has 2 pairs. - [4,3,2,2,4] that has 2 pairs. constraints: 1 <= nums.length <= 105 1 <= nums[i], k <= 109
a sentence text (a sentence is a string of space-separated words) in the following format: first letter is in upper case. each word in text are separated by a single space. your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. if two words have the same length, arrange them in their original order. return the new text following the format shown above. example 1: input: text = "leetcode is cool" output: "is cool leetcode" explanation: there are 3 words, "leetcode" of length 8, "is" of length 2 and "cool" of length 4. output is ordered by length and the new first word starts with capital letter. example 2: input: text = "keep calm and code on" output: "on and keep calm code" explanation: output is ordered as follows: "on" 2 letters. "and" 3 letters. "keep" 4 letters in case of tie order by position in original text. "calm" 4 letters. "code" 4 letters. example 3: input: text = "to be or not to be" output: "to be or to be not" constraints: text begins with a capital letter and then contains lowercase letters and single space between words. 1 <= text.length <= 10^5
an array of integers arr of even length n and an integer k. we want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k. return true if you can find a way to do that or false otherwise. example 1: input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5 output: true explanation: pairs are (1,9),(2,8),(3,7),(4,6) and (5,10). example 2: input: arr = [1,2,3,4,5,6], k = 7 output: true explanation: pairs are (1,6),(2,5) and(3,4). example 3: input: arr = [1,2,3,4,5,6], k = 10 output: false explanation: you can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10. constraints: arr.length == n 1 <= n <= 105 n is even. -109 <= arr[i] <= 109 1 <= k <= 105
are given an array nums consisting of positive integers. you are also given an integer array queries of size m. for the ith query, you want to make all of the elements of nums equal to queries[i]. you can perform the following operation on the array any number of times: increase or decrease an element of the array by 1. return an array answer of size m where answer[i] is the minimum number of operations to make all elements of nums equal to queries[i]. note that after each query the array is reset to its original state. example 1: input: nums = [3,1,6,8], queries = [1,5] output: [14,10] explanation: for the first query we can do the following operations: - decrease nums[0] 2 times, so that nums = [1,1,6,8]. - decrease nums[2] 5 times, so that nums = [1,1,1,8]. - decrease nums[3] 7 times, so that nums = [1,1,1,1]. so the total number of operations for the first query is 2 + 5 + 7 = 14. for the second query we can do the following operations: - increase nums[0] 2 times, so that nums = [5,1,6,8]. - increase nums[1] 4 times, so that nums = [5,5,6,8]. - decrease nums[2] 1 time, so that nums = [5,5,5,8]. - decrease nums[3] 3 times, so that nums = [5,5,5,5]. so the total number of operations for the second query is 2 + 4 + 1 + 3 = 10. example 2: input: nums = [2,9,6,3], queries = [10] output: [20] explanation: we can increase each value in the array to 10. the total number of operations will be 8 + 1 + 4 + 7 = 20. constraints: n == nums.length m == queries.length 1 <= n, m <= 105 1 <= nums[i], queries[i] <= 109
are given a 2d integer array, queries. for each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. as the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7. return an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query. example 1: input: queries = [[2,6],[5,1],[73,660]] output: [4,1,50734910] explanation: each query is independent. [2,6]: there are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1]. [5,1]: there is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1]. [73,660]: there are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910. example 2: input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]] output: [1,2,3,10,5] constraints: 1 <= queries.length <= 104 1 <= ni, ki <= 104
problem is an interactive problem.) you may recall that an array arr is a mountain array if and only if: arr.length >= 3 there exists some i with 0 < i < arr.length - 1 such that: arr[0] < arr[1] < ... < arr[i - 1] < arr[i] arr[i] > arr[i + 1] > ... > arr[arr.length - 1] given a mountain array mountainarr, return the minimum index such that mountainarr.get(index) == target. if such an index does not exist, return -1. you cannot access the mountain array directly. you may only access the array using a mountainarray interface: mountainarray.get(k) returns the element of the array at index k (0-indexed). mountainarray.length() returns the length of the array. submissions making more than 100 calls to mountainarray.get will be judged wrong answer. also, any solutions that attempt to circumvent the judge will result in disqualification. example 1: input: array = [1,2,3,4,5,3,1], target = 3 output: 2 explanation: 3 exists in the array, at index=2 and index=5. return the minimum index, which is 2. example 2: input: array = [0,1,2,4,2,1], target = 3 output: -1 explanation: 3 does not exist in the array, so we return -1. constraints: 3 <= mountain_arr.length() <= 104 0 <= target <= 109 0 <= mountain_arr.get(index) <= 109
are given a 0-indexed 2d integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. the brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length). tax is calculated as follows: the first upper0 dollars earned are taxed at a rate of percent0. the next upper1 - upper0 dollars earned are taxed at a rate of percent1. the next upper2 - upper1 dollars earned are taxed at a rate of percent2. and so on. you are given an integer income representing the amount of money you earned. return the amount of money that you have to pay in taxes. answers within 10-5 of the actual answer will be accepted. example 1: input: brackets = [[3,50],[7,10],[12,25]], income = 10 output: 2.65000 explanation: based on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket. the tax rate for the three tax brackets is 50%, 10%, and 25%, respectively. in total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes. example 2: input: brackets = [[1,0],[4,25],[5,50]], income = 2 output: 0.25000 explanation: based on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket. the tax rate for the two tax brackets is 0% and 25%, respectively. in total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes. example 3: input: brackets = [[2,50]], income = 0 output: 0.00000 explanation: you have no income to tax, so you have to pay a total of $0 in taxes. constraints: 1 <= brackets.length <= 100 1 <= upperi <= 1000 0 <= percenti <= 100 0 <= income <= 1000 upperi is sorted in ascending order. all the values of upperi are unique. the upper bound of the last tax bracket is greater than or equal to income.
are given an integer array pref of size n. find and return the array arr of size n that satisfies: pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]. note that ^ denotes the bitwise-xor operation. it can be proven that the answer is unique. example 1: input: pref = [5,2,0,3,1] output: [5,7,2,3,2] explanation: from the array [5,7,2,3,2] we have the following: - pref[0] = 5. - pref[1] = 5 ^ 7 = 2. - pref[2] = 5 ^ 7 ^ 2 = 0. - pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3. - pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1. example 2: input: pref = [13] output: [13] explanation: we have pref[0] = arr[0] = 13. constraints: 1 <= pref.length <= 105 0 <= pref[i] <= 106
the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts. the length of each part should be as equal as possible: no two parts should have a size differing by more than one. this may lead to some parts being null. the parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later. return an array of the k parts. example 1: input: head = [1,2,3], k = 5 output: [[1],[2],[3],[],[]] explanation: the first element output[0] has output[0].val = 1, output[0].next = null. the last element output[4] is null, but its string representation as a listnode is []. example 2: input: head = [1,2,3,4,5,6,7,8,9,10], k = 3 output: [[1,2,3,4],[5,6,7],[8,9,10]] explanation: the input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts. constraints: the number of nodes in the list is in the range [0, 1000]. 0 <= node.val <= 1000 1 <= k <= 50
the root of a binary search tree (bst) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it. if the tree has more than one mode, return them in any order. assume a bst is defined as follows: the left subtree of a node contains only nodes with keys less than or equal to the node's key. the right subtree of a node contains only nodes with keys greater than or equal to the node's key. both the left and right subtrees must also be binary search trees. example 1: input: root = [1,null,2,2] output: [2] example 2: input: root = [0] output: [0] constraints: the number of nodes in the tree is in the range [1, 104]. -105 <= node.val <= 105 follow up: could you do that without using any extra space? (assume that the implicit stack space incurred due to recursion does not count).
decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. for example, 101 and 1100 are deci-binary, while 112 and 3001 are not. given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n. example 1: input: n = "32" output: 3 explanation: 10 + 11 + 11 = 32 example 2: input: n = "82734" output: 8 example 3: input: n = "27346209830709182346" output: 9 constraints: 1 <= n.length <= 105 n consists of only digits. n does not contain any leading zeros and represents a positive integer.
a string s, you can transform every letter individually to be lowercase or uppercase to create another string. return a list of all possible strings we could create. return the output in any order. example 1: input: s = "a1b2" output: ["a1b2","a1b2","a1b2","a1b2"] example 2: input: s = "3z4" output: ["3z4","3z4"] constraints: 1 <= s.length <= 12 s consists of lowercase english letters, uppercase english letters, and digits.
a string s, return true if s is a good string, or false otherwise. a string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency). example 1: input: s = "abacbc" output: true explanation: the characters that appear in s are 'a', 'b', and 'c'. all characters occur 2 times in s. example 2: input: s = "aaabb" output: false explanation: the characters that appear in s are 'a' and 'b'. 'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times. constraints: 1 <= s.length <= 1000 s consists of lowercase english letters.
are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes. each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j). we view the projection of these cubes onto the xy, yz, and zx planes. a projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. we are viewing the "shadow" when looking at the cubes from the top, the front, and the side. return the total area of all three projections. example 1: input: grid = [[1,2],[3,4]] output: 17 explanation: here are the three projections ("shadows") of the shape made with each axis-aligned plane. example 2: input: grid = [[2]] output: 5 example 3: input: grid = [[1,0],[0,2]] output: 8 constraints: n == grid.length == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <= 50
have an undirected, connected graph of n nodes labeled from 0 to n - 1. you are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge. return the length of the shortest path that visits every node. you may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges. example 1: input: graph = [[1,2,3],[0],[0],[0]] output: 4 explanation: one possible path is [1,0,2,0,3] example 2: input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]] output: 4 explanation: one possible path is [0,1,4,2,3] constraints: n == graph.length 1 <= n <= 12 0 <= graph[i].length < n graph[i] does not contain i. if graph[a] contains b, then graph[b] contains a. the input graph is always connected.
an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. you may return the combinations in any order. the same number may be chosen from candidates an unlimited number of times. two combinations are unique if the frequency of at least one of the chosen numbers is different. the test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input. example 1: input: candidates = [2,3,6,7], target = 7 output: [[2,2,3],[7]] explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. these are the only two combinations. example 2: input: candidates = [2,3,5], target = 8 output: [[2,2,2,2],[2,3,3],[3,5]] example 3: input: candidates = [2], target = 1 output: [] constraints: 1 <= candidates.length <= 30 2 <= candidates[i] <= 40 all elements of candidates are distinct. 1 <= target <= 40
are given a 2d integer array stockprices where stockprices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. a line chart is created from the array by plotting the points on an xy plane with the x-axis representing the day and the y-axis representing the price and connecting adjacent points. one such example is shown below: return the minimum number of lines needed to represent the line chart. example 1: input: stockprices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]] output: 3 explanation: the diagram above represents the input, with the x-axis representing the day and y-axis representing the price. the following 3 lines can be drawn to represent the line chart: - line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4). - line 2 (in blue) from (4,4) to (5,4). - line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1). it can be shown that it is not possible to represent the line chart using less than 3 lines. example 2: input: stockprices = [[3,4],[1,2],[7,8],[2,3]] output: 1 explanation: as shown in the diagram above, the line chart can be represented with a single line. constraints: 1 <= stockprices.length <= 105 stockprices[i].length == 2 1 <= dayi, pricei <= 109 all dayi are distinct.
are given an array of events where events[i] = [startdayi, enddayi]. every event i starts at startdayi and ends at enddayi. you can attend an event i at any day d where starttimei <= d <= endtimei. you can only attend one event at any time d. return the maximum number of events you can attend. example 1: input: events = [[1,2],[2,3],[3,4]] output: 3 explanation: you can attend all the three events. one way to attend them all is as shown. attend the first event on day 1. attend the second event on day 2. attend the third event on day 3. example 2: input: events= [[1,2],[2,3],[3,4],[1,2]] output: 4 constraints: 1 <= events.length <= 105 events[i].length == 2 1 <= startdayi <= enddayi <= 105
a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible. the string is called alternating if no two adjacent characters are equal. for example, the strings "010" and "1010" are alternating, while the string "0100" is not. any two characters may be swapped, even if they are not adjacent. example 1: input: s = "111000" output: 1 explanation: swap positions 1 and 4: "111000" -> "101010" the string is now alternating. example 2: input: s = "010" output: 0 explanation: the string is already alternating, no swaps are needed. example 3: input: s = "1110" output: -1 constraints: 1 <= s.length <= 1000 s[i] is either '0' or '1'.
are given a 0-indexed binary string s which represents the types of buildings along a street where: s[i] = '0' denotes that the ith building is an office and s[i] = '1' denotes that the ith building is a restaurant. as a city official, you would like to select 3 buildings for random inspection. however, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type. for example, given s = "001101", we cannot select the 1st, 3rd, and 5th buildings as that would form "011" which is not allowed due to having two consecutive buildings of the same type. return the number of valid ways to select 3 buildings. example 1: input: s = "001101" output: 6 explanation: the following sets of indices selected are valid: - [0,2,4] from "001101" forms "010" - [0,3,4] from "001101" forms "010" - [1,2,4] from "001101" forms "010" - [1,3,4] from "001101" forms "010" - [2,4,5] from "001101" forms "101" - [3,4,5] from "001101" forms "101" no other selection is valid. thus, there are 6 total ways. example 2: input: s = "11100" output: 0 explanation: it can be shown that there are no valid selections. constraints: 3 <= s.length <= 105 s[i] is either '0' or '1'.
a multi-dimensional array arr and a depth n, return a flattened version of that array. a multi-dimensional array is a recursive data structure that contains integers or other multi-dimensional arrays. a flattened array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. this flattening operation should only be done if the current depth of nesting is less than n. the depth of the elements in the first array are considered to be 0. please solve it without the built-in array.flat method. example 1: input arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 0 output [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] explanation passing a depth of n=0 will always result in the original array. this is because the smallest possible depth of a subarray (0) is not less than n=0. thus, no subarray should be flattened. example 2: input arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 1 output [1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15] explanation the subarrays starting with 4, 7, and 13 are all flattened. this is because their depth of 0 is less than 1. however [9, 10, 11] remains unflattened because its depth is 1. example 3: input arr = [[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 2 output [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] explanation the maximum depth of any subarray is 1. thus, all of them are flattened. constraints: 0 <= count of numbers in arr <= 105 0 <= count of subarrays in arr <= 105 maxdepth <= 1000 -1000 <= each number <= 1000 0 <= n <= 1000
is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes). the survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. the answers of the students are represented by a 2d integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). the answers of the mentors are represented by a 2d integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed). each student will be assigned to one mentor, and each mentor will have one student assigned to them. the compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor. for example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same. you are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores. given students and mentors, return the maximum compatibility score sum that can be achieved. example 1: input: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]] output: 8 explanation: we assign students to mentors in the following way: - student 0 to mentor 2 with a compatibility score of 3. - student 1 to mentor 0 with a compatibility score of 2. - student 2 to mentor 1 with a compatibility score of 3. the compatibility score sum is 3 + 2 + 3 = 8. example 2: input: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]] output: 0 explanation: the compatibility score of any student-mentor pair is 0. constraints: m == students.length == mentors.length n == students[i].length == mentors[j].length 1 <= m, n <= 8 students[i][k] is either 0 or 1. mentors[j][k] is either 0 or 1.
2n balls of k distinct colors. you will be given an integer array balls of size k where balls[i] is the number of balls of color i. all the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (please read the explanation of the second example carefully). please note that the two boxes are considered different. for example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (please read the explanation of the first example carefully). return the probability that the two boxes have the same number of distinct balls. answers within 10-5 of the actual value will be accepted as correct. example 1: input: balls = [1,1] output: 1.00000 explanation: only 2 ways to divide the balls equally: - a ball of color 1 to box 1 and a ball of color 2 to box 2 - a ball of color 2 to box 1 and a ball of color 1 to box 2 in both ways, the number of distinct colors in each box is equal. the probability is 2/2 = 1 example 2: input: balls = [2,1,1] output: 0.66667 explanation: we have the set of balls [1, 1, 2, 3] this set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12): [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1] after that, we add the first two balls to the first box and the second two balls to the second box. we can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box. probability is 8/12 = 0.66667 example 3: input: balls = [1,2,1,2] output: 0.60000 explanation: the set of balls is [1, 2, 2, 3, 4, 4]. it is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box. probability = 108 / 180 = 0.6 constraints: 1 <= balls.length <= 8 1 <= balls[i] <= 6 sum(balls) is even.
schema table: students +---------------+---------+ | column name | type | +---------------+---------+ | student_id | int | | student_name | varchar | +---------------+---------+ student_id is the primary key for this table. each row of this table contains the id and the name of one student in the school. table: subjects +--------------+---------+ | column name | type | +--------------+---------+ | subject_name | varchar | +--------------+---------+ subject_name is the primary key for this table. each row of this table contains the name of one subject in the school. table: examinations +--------------+---------+ | column name | type | +--------------+---------+ | student_id | int | | subject_name | varchar | +--------------+---------+ there is no primary key for this table. it may contain duplicates. each student from the students table takes every course from the subjects table. each row of this table indicates that a student with id student_id attended the exam of subject_name. write an sql query to find the number of times each student attended each exam. return the result table ordered by student_id and subject_name. the query result format is in the following example. example 1: input: students table: +------------+--------------+ | student_id | student_name | +------------+--------------+ | 1 | alice | | 2 | bob | | 13 | john | | 6 | alex | +------------+--------------+ subjects table: +--------------+ | subject_name | +--------------+ | math | | physics | | programming | +--------------+ examinations table: +------------+--------------+ | student_id | subject_name | +------------+--------------+ | 1 | math | | 1 | physics | | 1 | programming | | 2 | programming | | 1 | physics | | 1 | math | | 13 | math | | 13 | programming | | 13 | physics | | 2 | math | | 1 | math | +------------+--------------+ output: +------------+--------------+--------------+----------------+ | student_id | student_name | subject_name | attended_exams | +------------+--------------+--------------+----------------+ | 1 | alice | math | 3 | | 1 | alice | physics | 2 | | 1 | alice | programming | 1 | | 2 | bob | math | 1 | | 2 | bob | physics | 0 | | 2 | bob | programming | 1 | | 6 | alex | math | 0 | | 6 | alex | physics | 0 | | 6 | alex | programming | 0 | | 13 | john | math | 1 | | 13 | john | physics | 1 | | 13 | john | programming | 1 | +------------+--------------+--------------+----------------+ explanation: the result table should contain all students and all subjects. alice attended the math exam 3 times, the physics exam 2 times, and the programming exam 1 time. bob attended the math exam 1 time, the programming exam 1 time, and did not attend the physics exam. alex did not attend any exams. john attended the math exam 1 time, the physics exam 1 time, and the programming exam 1 time.
two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1. sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. elements that do not appear in arr2 should be placed at the end of arr1 in ascending order. example 1: input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6] output: [2,2,2,1,4,3,3,9,6,7,19] example 2: input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6] output: [22,28,8,6,17,44] constraints: 1 <= arr1.length, arr2.length <= 1000 0 <= arr1[i], arr2[i] <= 1000 all the elements of arr2 are distinct. each arr2[i] is in arr1.
is a directed graph of n colored nodes and m edges. the nodes are numbered from 0 to n - 1. you are given a string colors where colors[i] is a lowercase english letter representing the color of the ith node in this graph (0-indexed). you are also given a 2d array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj. a valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. the color value of the path is the number of nodes that are colored the most frequently occurring color along that path. return the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle. example 1: input: colors = "abaca", edges = [[0,1],[0,2],[2,3],[3,4]] output: 3 explanation: the path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored "a" (red in the above image). example 2: input: colors = "a", edges = [[0,0]] output: -1 explanation: there is a cycle from 0 to 0. constraints: n == colors.length m == edges.length 1 <= n <= 105 0 <= m <= 105 colors consists of lowercase english letters. 0 <= aj, bj < n
two strings s and goal, return true if and only if s can become goal after some number of shifts on s. a shift on s consists of moving the leftmost character of s to the rightmost position. for example, if s = "abcde", then it will be "bcdea" after one shift. example 1: input: s = "abcde", goal = "cdeab" output: true example 2: input: s = "abcde", goal = "abced" output: false constraints: 1 <= s.length, goal.length <= 100 s and goal consist of lowercase english letters.
schema table: users +-------------+---------+ | column name | type | +-------------+---------+ | user_id | int | | user_name | varchar | +-------------+---------+ user_id is the primary key for this table. each row of this table contains the name and the id of a user. table: register +-------------+---------+ | column name | type | +-------------+---------+ | contest_id | int | | user_id | int | +-------------+---------+ (contest_id, user_id) is the primary key for this table. each row of this table contains the id of a user and the contest they registered into. write an sql query to find the percentage of the users registered in each contest rounded to two decimals. return the result table ordered by percentage in descending order. in case of a tie, order it by contest_id in ascending order. the query result format is in the following example. example 1: input: users table: +---------+-----------+ | user_id | user_name | +---------+-----------+ | 6 | alice | | 2 | bob | | 7 | alex | +---------+-----------+ register table: +------------+---------+ | contest_id | user_id | +------------+---------+ | 215 | 6 | | 209 | 2 | | 208 | 2 | | 210 | 6 | | 208 | 6 | | 209 | 7 | | 209 | 6 | | 215 | 7 | | 208 | 7 | | 210 | 2 | | 207 | 2 | | 210 | 7 | +------------+---------+ output: +------------+------------+ | contest_id | percentage | +------------+------------+ | 208 | 100.0 | | 209 | 100.0 | | 210 | 100.0 | | 215 | 66.67 | | 207 | 33.33 | +------------+------------+ explanation: all the users registered in contests 208, 209, and 210. the percentage is 100% and we sort them in the answer table by contest_id in ascending order. alice and alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67% bob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%
are given two strings s and sub. you are also given a 2d character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times: replace a character oldi of sub with newi. each character in sub cannot be replaced more than once. return true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. otherwise, return false. a substring is a contiguous non-empty sequence of characters within a string. example 1: input: s = "fool3e7bar", sub = "leet", mappings = [["e","3"],["t","7"],["t","8"]] output: true explanation: replace the first 'e' in sub with '3' and 't' in sub with '7'. now sub = "l3e7" is a substring of s, so we return true. example 2: input: s = "fooleetbar", sub = "f00l", mappings = [["o","0"]] output: false explanation: the string "f00l" is not a substring of s and no replacements can be made. note that we cannot replace '0' with 'o'. example 3: input: s = "fool33tbar", sub = "leetd", mappings = [["e","3"],["t","7"],["t","8"],["d","b"],["p","b"]] output: true explanation: replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'. now sub = "l33tb" is a substring of s, so we return true. constraints: 1 <= sub.length <= s.length <= 5000 0 <= mappings.length <= 1000 mappings[i].length == 2 oldi != newi s and sub consist of uppercase and lowercase english letters and digits. oldi and newi are either uppercase or lowercase english letters or digits.
distance of a pair of integers a and b is defined as the absolute difference between a and b. given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length. example 1: input: nums = [1,3,1], k = 1 output: 0 explanation: here are all the pairs: (1,3) -> 2 (1,1) -> 0 (3,1) -> 2 then the 1st smallest distance pair is (1,1), and its distance is 0. example 2: input: nums = [1,1,1], k = 2 output: 0 example 3: input: nums = [1,6,1], k = 3 output: 5 constraints: n == nums.length 2 <= n <= 104 0 <= nums[i] <= 106 1 <= k <= n * (n - 1) / 2
certain bug's home is on the x-axis at position x. help them get there from position 0. the bug jumps according to the following rules: it can jump exactly a positions forward (to the right). it can jump exactly b positions backward (to the left). it cannot jump backward twice in a row. it cannot jump to any forbidden positions. the bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers. given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. if there is no possible sequence of jumps that lands the bug on position x, return -1. example 1: input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9 output: 3 explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home. example 2: input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11 output: -1 example 3: input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7 output: 2 explanation: one jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home. constraints: 1 <= forbidden.length <= 1000 1 <= a, b, forbidden[i] <= 2000 0 <= x <= 2000 all the elements in forbidden are distinct. position x is not forbidden.
an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d. example 1: input: nums = [2,3,4,6] output: 8 explanation: there are 8 valid tuples: (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3) (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2) example 2: input: nums = [1,2,4,5,10] output: 16 explanation: there are 16 valid tuples: (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2) (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1) (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4) (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2) constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 104 all elements in nums are distinct.
a 2d integer array matrix, return the transpose of matrix. the transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices. example 1: input: matrix = [[1,2,3],[4,5,6],[7,8,9]] output: [[1,4,7],[2,5,8],[3,6,9]] example 2: input: matrix = [[1,2,3],[4,5,6]] output: [[1,4],[2,5],[3,6]] constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 -109 <= matrix[i][j] <= 109
are given a 0-indexed integer array nums. an index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j]. note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index. return the number of hills and valleys in nums. example 1: input: nums = [2,4,1,1,6,5] output: 3 explanation: at index 0: there is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley. at index 1: the closest non-equal neighbors of 4 are 2 and 1. since 4 > 2 and 4 > 1, index 1 is a hill. at index 2: the closest non-equal neighbors of 1 are 4 and 6. since 1 < 4 and 1 < 6, index 2 is a valley. at index 3: the closest non-equal neighbors of 1 are 4 and 6. since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2. at index 4: the closest non-equal neighbors of 6 are 1 and 5. since 6 > 1 and 6 > 5, index 4 is a hill. at index 5: there is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. there are 3 hills and valleys so we return 3. example 2: input: nums = [6,6,5,5,4,1] output: 0 explanation: at index 0: there is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley. at index 1: there is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley. at index 2: the closest non-equal neighbors of 5 are 6 and 4. since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley. at index 3: the closest non-equal neighbors of 5 are 6 and 4. since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley. at index 4: the closest non-equal neighbors of 4 are 5 and 1. since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley. at index 5: there is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley. there are 0 hills and valleys so we return 0. constraints: 3 <= nums.length <= 100 1 <= nums[i] <= 100
an alphabet board, we start at position (0, 0), corresponding to character board[0][0]. here, board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"], as shown in the diagram below. we may make the following moves: 'u' moves our position up one row, if the position exists on the board; 'd' moves our position down one row, if the position exists on the board; 'l' moves our position left one column, if the position exists on the board; 'r' moves our position right one column, if the position exists on the board; '!' adds the character board[r][c] at our current position (r, c) to the answer. (here, the only positions that exist on the board are positions with letters on them.) return a sequence of moves that makes our answer equal to target in the minimum number of moves. you may return any path that does so. example 1: input: target = "leet" output: "ddr!uurrr!!ddd!" example 2: input: target = "code" output: "rr!ddrr!uul!r!" constraints: 1 <= target.length <= 100 target consists only of english lowercase letters.
a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area. example 1: input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]] output: 6 explanation: the maximal rectangle is shown in the above picture. example 2: input: matrix = [["0"]] output: 0 example 3: input: matrix = [["1"]] output: 1 constraints: rows == matrix.length cols == matrix[i].length 1 <= row, cols <= 200 matrix[i][j] is '0' or '1'.
are climbing a staircase. it takes n steps to reach the top. each time you can either climb 1 or 2 steps. in how many distinct ways can you climb to the top? example 1: input: n = 2 output: 2 explanation: there are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps example 2: input: n = 3 output: 3 explanation: there are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step constraints: 1 <= n <= 45
are given an array nums that consists of non-negative integers. let us define rev(x) as the reverse of the non-negative integer x. for example, rev(123) = 321, and rev(120) = 21. a pair of indices (i, j) is nice if it satisfies all of the following conditions: 0 <= i < j < nums.length nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]) return the number of nice pairs of indices. since that number can be too large, return it modulo 109 + 7. example 1: input: nums = [42,11,1,97] output: 2 explanation: the two pairs are: - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121. - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12. example 2: input: nums = [13,10,35,24,76] output: 4 constraints: 1 <= nums.length <= 105 0 <= nums[i] <= 109
the root of a binary tree, each node in the tree has a distinct value. after deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees). return the roots of the trees in the remaining forest. you may return the result in any order. example 1: input: root = [1,2,3,4,5,6,7], to_delete = [3,5] output: [[1,2,null,4],[6],[7]] example 2: input: root = [1,2,4,null,3], to_delete = [3] output: [[1,2,4]] constraints: the number of nodes in the given tree is at most 1000. each node has a distinct value between 1 and 1000. to_delete.length <= 1000 to_delete contains distinct values between 1 and 1000.
two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same. in one step, you can delete exactly one character in either string. example 1: input: word1 = "sea", word2 = "eat" output: 2 explanation: you need one step to make "sea" to "ea" and another step to make "eat" to "ea". example 2: input: word1 = "leetcode", word2 = "etco" output: 4 constraints: 1 <= word1.length, word2.length <= 500 word1 and word2 consist of only lowercase english letters.
are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day. a smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. the first day of the period is exempted from this rule. return the number of smooth descent periods. example 1: input: prices = [3,2,1,4] output: 7 explanation: there are 7 smooth descent periods: [3], [2], [1], [4], [3,2], [2,1], and [3,2,1] note that a period with one day is a smooth descent period by the definition. example 2: input: prices = [8,6,7,7] output: 4 explanation: there are 4 smooth descent periods: [8], [6], [7], and [7] note that [8,6] is not a smooth descent period as 8 - 6 â‰ 1. example 3: input: prices = [1] output: 1 explanation: there is 1 smooth descent period: [1] constraints: 1 <= prices.length <= 105 1 <= prices[i] <= 105
an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements. answers within 10-5 of the actual answer will be considered accepted. example 1: input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3] output: 2.00000 explanation: after erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2. example 2: input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0] output: 4.00000 example 3: input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4] output: 4.77778 constraints: 20 <= arr.length <= 1000 arr.length is a multiple of 20. 0 <= arr[i] <= 105
define a function countuniquechars(s) that returns the number of unique characters on s. for example, calling countuniquechars(s) if s = "leetcode" then "l", "t", "c", "o", "d" are the unique characters since they appear only once in s, therefore countuniquechars(s) = 5. given a string s, return the sum of countuniquechars(t) where t is a substring of s. the test cases are generated such that the answer fits in a 32-bit integer. notice that some substrings can be repeated so in this case you have to count the repeated ones too. example 1: input: s = "abc" output: 10 explanation: all possible substrings are: "a","b","c","ab","bc" and "abc". every substring is composed with only unique letters. sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10 example 2: input: s = "aba" output: 8 explanation: the same as example 1, except countuniquechars("aba") = 1. example 3: input: s = "leetcode" output: 92 constraints: 1 <= s.length <= 105 s consists of uppercase english letters only.
are given two strings s and t. you are allowed to remove any number of characters from the string t. the score of the string is 0 if no characters are removed from the string t, otherwise: let left be the minimum index among all removed characters. let right be the maximum index among all removed characters. then the score of the string is right - left + 1. return the minimum possible score to make t a subsequence of s. a subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not). example 1: input: s = "abacaba", t = "bzaa" output: 1 explanation: in this example, we remove the character "z" at index 1 (0-indexed). the string t becomes "baa" which is a subsequence of the string "abacaba" and the score is 1 - 1 + 1 = 1. it can be proven that 1 is the minimum score that we can achieve. example 2: input: s = "cde", t = "xyz" output: 3 explanation: in this example, we remove characters "x", "y" and "z" at indices 0, 1, and 2 (0-indexed). the string t becomes "" which is a subsequence of the string "cde" and the score is 2 - 0 + 1 = 3. it can be proven that 3 is the minimum score that we can achieve. constraints: 1 <= s.length, t.length <= 105 s and t consist of only lowercase english letters.
the root of a binary tree, return the sum of every tree node's tilt. the tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. if a node does not have a left child, then the sum of the left subtree node values is treated as 0. the rule is similar if the node does not have a right child. example 1: input: root = [1,2,3] output: 1 explanation: tilt of node 2 : |0-0| = 0 (no children) tilt of node 3 : |0-0| = 0 (no children) tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3) sum of every tilt : 0 + 0 + 1 = 1 example 2: input: root = [4,2,9,3,5,null,7] output: 15 explanation: tilt of node 3 : |0-0| = 0 (no children) tilt of node 5 : |0-0| = 0 (no children) tilt of node 7 : |0-0| = 0 (no children) tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5) tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7) tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16) sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15 example 3: input: root = [21,7,14,1,1,2,2,3,3] output: 9 constraints: the number of nodes in the tree is in the range [0, 104]. -1000 <= node.val <= 1000
is a country of n cities numbered from 0 to n - 1. in this country, there is a road connecting every pair of cities. there are m friends numbered from 0 to m - 1 who are traveling through the country. each one of them will take a path consisting of some cities. each path is represented by an integer array that contains the visited cities in order. the path may contain a city more than once, but the same city will not be listed consecutively. given an integer n and a 2d integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all. a subpath of a path is a contiguous sequence of cities within that path. example 1: input: n = 5, paths = [[0,1,2,3,4], [2,3,4], [4,0,1,2,3]] output: 2 explanation: the longest common subpath is [2,3]. example 2: input: n = 3, paths = [[0],[1],[2]] output: 0 explanation: there is no common subpath shared by the three paths. example 3: input: n = 5, paths = [[0,1,2,3,4], [4,3,2,1,0]] output: 1 explanation: the possible longest common subpaths are [0], [1], [2], [3], and [4]. all have a length of 1. constraints: 1 <= n <= 105 m == paths.length 2 <= m <= 105 sum(paths[i].length) <= 105 0 <= paths[i][j] < n the same city is not listed multiple times consecutively in paths[i].
an integer n, return the number of ways you can write n as the sum of consecutive positive integers. example 1: input: n = 5 output: 2 explanation: 5 = 2 + 3 example 2: input: n = 9 output: 3 explanation: 9 = 4 + 5 = 2 + 3 + 4 example 3: input: n = 15 output: 4 explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5 constraints: 1 <= n <= 109
an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise. example 1: input: arr = [3,1,3,6] output: false example 2: input: arr = [2,1,2,6] output: false example 3: input: arr = [4,-2,2,-4] output: true explanation: we can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]. constraints: 2 <= arr.length <= 3 * 104 arr.length is even. -105 <= arr[i] <= 105
are the operator of a centennial wheel that has four gondolas, and each gondola has room for up to four people. you have the ability to rotate the gondolas counterclockwise, which costs you runningcost dollars. you are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). this means you must rotate the wheel i times before the customers[i] customers arrive. you cannot make customers wait if there is room in the gondola. each customer pays boardingcost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again. you can stop the wheel at any time, including before serving all customers. if you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation. return the minimum number of rotations you need to perform to maximize your profit. if there is no scenario where the profit is positive, return -1. example 1: input: customers = [8,3], boardingcost = 5, runningcost = 6 output: 3 explanation: the numbers written on the gondolas are the number of people currently there. 1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. current profit is 4 * $5 - 1 * $6 = $14. 2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. current profit is 8 * $5 - 2 * $6 = $28. 3. the final 3 customers board the gondola, the wheel rotates. current profit is 11 * $5 - 3 * $6 = $37. the highest profit was $37 after rotating the wheel 3 times. example 2: input: customers = [10,9,6], boardingcost = 6, runningcost = 4 output: 7 explanation: 1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. current profit is 4 * $6 - 1 * $4 = $20. 2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. current profit is 8 * $6 - 2 * $4 = $40. 3. the final 6 customers arrive, 4 board and 13 wait, the wheel rotates. current profit is 12 * $6 - 3 * $4 = $60. 4. 4 board and 9 wait, the wheel rotates. current profit is 16 * $6 - 4 * $4 = $80. 5. 4 board and 5 wait, the wheel rotates. current profit is 20 * $6 - 5 * $4 = $100. 6. 4 board and 1 waits, the wheel rotates. current profit is 24 * $6 - 6 * $4 = $120. 7. 1 boards, the wheel rotates. current profit is 25 * $6 - 7 * $4 = $122. the highest profit was $122 after rotating the wheel 7 times. example 3: input: customers = [3,4,0,5,1], boardingcost = 1, runningcost = 92 output: -1 explanation: 1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. current profit is 3 * $1 - 1 * $92 = -$89. 2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. current profit is 7 * $1 - 2 * $92 = -$177. 3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. current profit is 7 * $1 - 3 * $92 = -$269. 4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. current profit is 11 * $1 - 4 * $92 = -$357. 5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. current profit is 13 * $1 - 5 * $92 = -$447. the profit was never positive, so return -1. constraints: n == customers.length 1 <= n <= 105 0 <= customers[i] <= 50 1 <= boardingcost, runningcost <= 100
a string of english letters s, return the greatest english letter which occurs as both a lowercase and uppercase letter in s. the returned letter should be in uppercase. if no such letter exists, return an empty string. an english letter b is greater than another letter a if b appears after a in the english alphabet. example 1: input: s = "leetcode" output: "e" explanation: the letter 'e' is the only letter to appear in both lower and upper case. example 2: input: s = "arrazfif" output: "r" explanation: the letter 'r' is the greatest letter to appear in both lower and upper case. note that 'a' and 'f' also appear in both lower and upper case, but 'r' is greater than 'f' or 'a'. example 3: input: s = "abcdefghijk" output: "" explanation: there is no letter that appears in both lower and upper case. constraints: 1 <= s.length <= 1000 s consists of lowercase and uppercase english letters.
we have a class: public class foo { public void first() { print("first"); } public void second() { print("second"); } public void third() { print("third"); } } the same instance of foo will be passed to three different threads. thread a will call first(), thread b will call second(), and thread c will call third(). design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second(). note: we do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. the input format you see is mainly to ensure our tests' comprehensiveness. example 1: input: nums = [1,2,3] output: "firstsecondthird" explanation: there are three threads being fired asynchronously. the input [1,2,3] means thread a calls first(), thread b calls second(), and thread c calls third(). "firstsecondthird" is the correct output. example 2: input: nums = [1,3,2] output: "firstsecondthird" explanation: the input [1,3,2] means thread a calls first(), thread b calls third(), and thread c calls second(). "firstsecondthird" is the correct output. constraints: nums is a permutation of [1, 2, 3].
are given an m x n binary matrix matrix. you can choose any number of columns in the matrix and flip every cell in that column (i.e., change the value of the cell from 0 to 1 or vice versa). return the maximum number of rows that have all values equal after some number of flips. example 1: input: matrix = [[0,1],[1,1]] output: 1 explanation: after flipping no values, 1 row has all values equal. example 2: input: matrix = [[0,1],[1,0]] output: 2 explanation: after flipping values in the first column, both rows have equal values. example 3: input: matrix = [[0,0,0],[0,0,1],[1,1,0]] output: 2 explanation: after flipping values in the first two columns, the last two rows have equal values. constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 300 matrix[i][j] is either 0 or 1.
are n kids with candies. you are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extracandies, denoting the number of extra candies that you have. return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extracandies, they will have the greatest number of candies among all the kids, or false otherwise. note that multiple kids can have the greatest number of candies. example 1: input: candies = [2,3,5,1,3], extracandies = 3 output: [true,true,true,false,true] explanation: if you give all extracandies to: - kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids. - kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids. - kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids. - kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids. - kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids. example 2: input: candies = [4,2,1,1,2], extracandies = 1 output: [true,false,false,false,false] explanation: there is only 1 extra candy. kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy. example 3: input: candies = [12,1,12], extracandies = 10 output: [true,false,true] constraints: n == candies.length 2 <= n <= 100 1 <= candies[i] <= 100 1 <= extracandies <= 50
are given two integer arrays of equal length target and arr. in one step, you can select any non-empty subarray of arr and reverse it. you are allowed to make any number of steps. return true if you can make arr equal to target or false otherwise. example 1: input: target = [1,2,3,4], arr = [2,4,1,3] output: true explanation: you can follow the next steps to convert arr to target: 1- reverse subarray [2,4,1], arr becomes [1,4,2,3] 2- reverse subarray [4,2], arr becomes [1,2,4,3] 3- reverse subarray [4,3], arr becomes [1,2,3,4] there are multiple ways to convert arr to target, this is not the only way to do so. example 2: input: target = [7], arr = [7] output: true explanation: arr is equal to target without any reverses. example 3: input: target = [3,7,9], arr = [3,7,11] output: false explanation: arr does not have value 9 and it can never be converted to target. constraints: target.length == arr.length 1 <= target.length <= 1000 1 <= target[i] <= 1000 1 <= arr[i] <= 1000
are given a binary array nums and an integer k. a k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0. return the minimum number of k-bit flips required so that there is no 0 in the array. if it is not possible, return -1. a subarray is a contiguous part of an array. example 1: input: nums = [0,1,0], k = 1 output: 2 explanation: flip nums[0], then flip nums[2]. example 2: input: nums = [1,1,0], k = 2 output: -1 explanation: no matter how we flip subarrays of size 2, we cannot make the array become [1,1,1]. example 3: input: nums = [0,0,0,1,0,1,1,0], k = 3 output: 3 explanation: flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0] flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0] flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1] constraints: 1 <= nums.length <= 105 1 <= k <= nums.length
self-dividing number is a number that is divisible by every digit it contains. for example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. a self-dividing number is not allowed to contain the digit zero. given two integers left and right, return a list of all the self-dividing numbers in the range [left, right]. example 1: input: left = 1, right = 22 output: [1,2,3,4,5,6,7,8,9,11,12,15,22] example 2: input: left = 47, right = 85 output: [48,55,66,77] constraints: 1 <= left <= right <= 104
are n cities. some of them are connected, while some are not. if city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c. a province is a group of directly or indirectly connected cities and no other cities outside of the group. you are given an n x n matrix isconnected where isconnected[i][j] = 1 if the ith city and the jth city are directly connected, and isconnected[i][j] = 0 otherwise. return the total number of provinces. example 1: input: isconnected = [[1,1,0],[1,1,0],[0,0,1]] output: 2 example 2: input: isconnected = [[1,0,0],[0,1,0],[0,0,1]] output: 3 constraints: 1 <= n <= 200 n == isconnected.length n == isconnected[i].length isconnected[i][j] is 1 or 0. isconnected[i][i] == 1 isconnected[i][j] == isconnected[j][i]
an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. if no land or water exists in the grid, return -1. the distance used in this problem is the manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|. example 1: input: grid = [[1,0,1],[0,0,0],[1,0,1]] output: 2 explanation: the cell (1, 1) is as far as possible from all the land with distance 2. example 2: input: grid = [[1,0,0],[0,0,0],[0,0,0]] output: 4 explanation: the cell (2, 2) is as far as possible from all the land with distance 4. constraints: n == grid.length n == grid[i].length 1 <= n <= 100 grid[i][j] is 0 or 1
are given an integer array nums of even length n and an integer limit. in one move, you can replace any integer from nums with another integer between 1 and limit, inclusive. the array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. for example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5. return the minimum number of moves required to make nums complementary. example 1: input: nums = [1,2,4,3], limit = 4 output: 1 explanation: in 1 move, you can change nums to [1,2,2,3] (underlined elements are changed). nums[0] + nums[3] = 1 + 3 = 4. nums[1] + nums[2] = 2 + 2 = 4. nums[2] + nums[1] = 2 + 2 = 4. nums[3] + nums[0] = 3 + 1 = 4. therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary. example 2: input: nums = [1,2,2,1], limit = 2 output: 2 explanation: in 2 moves, you can change nums to [2,2,2,2]. you cannot change any number to 3 since 3 > limit. example 3: input: nums = [1,2,1,2], limit = 2 output: 0 explanation: nums is already complementary. constraints: n == nums.length 2 <= n <= 105 1 <= nums[i] <= limit <= 105 n is even.
set [1, 2, 3, ..., n] contains a total of n! unique permutations. by listing and labeling all of the permutations in order, we get the following sequence for n = 3: "123" "132" "213" "231" "312" "321" given n and k, return the kth permutation sequence. example 1: input: n = 3, k = 3 output: "213" example 2: input: n = 4, k = 9 output: "2314" example 3: input: n = 3, k = 1 output: "123" constraints: 1 <= n <= 9 1 <= k <= n!
an integer n, return all the structurally unique bst's (binary search trees), which has exactly n nodes of unique values from 1 to n. return the answer in any order. example 1: input: n = 3 output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]] example 2: input: n = 1 output: [[1]] constraints: 1 <= n <= 8
an integer array queries and a positive integer intlength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intlength or -1 if no such palindrome exists. a palindrome is a number that reads the same backwards and forwards. palindromes cannot have leading zeros. example 1: input: queries = [1,2,3,4,5,90], intlength = 3 output: [101,111,121,131,141,999] explanation: the first few palindromes of length 3 are: 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ... the 90th palindrome of length 3 is 999. example 2: input: queries = [2,4,6], intlength = 4 output: [1111,1331,1551] explanation: the first six palindromes of length 4 are: 1001, 1111, 1221, 1331, 1441, and 1551. constraints: 1 <= queries.length <= 5 * 104 1 <= queries[i] <= 109 1 <= intlength <= 15
the head of a linked list, rotate the list to the right by k places. example 1: input: head = [1,2,3,4,5], k = 2 output: [4,5,1,2,3] example 2: input: head = [0,1,2], k = 4 output: [2,0,1] constraints: the number of nodes in the list is in the range [0, 500]. -100 <= node.val <= 100 0 <= k <= 2 * 109
an integer array nums, return the number of and triples. an and triple is a triple of indices (i, j, k) such that: 0 <= i < nums.length 0 <= j < nums.length 0 <= k < nums.length nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-and operator. example 1: input: nums = [2,1,3] output: 12 explanation: we could choose the following i, j, k triples: (i=0, j=0, k=1) : 2 & 2 & 1 (i=0, j=1, k=0) : 2 & 1 & 2 (i=0, j=1, k=1) : 2 & 1 & 1 (i=0, j=1, k=2) : 2 & 1 & 3 (i=0, j=2, k=1) : 2 & 3 & 1 (i=1, j=0, k=0) : 1 & 2 & 2 (i=1, j=0, k=1) : 1 & 2 & 1 (i=1, j=0, k=2) : 1 & 2 & 3 (i=1, j=1, k=0) : 1 & 1 & 2 (i=1, j=2, k=0) : 1 & 3 & 2 (i=2, j=0, k=1) : 3 & 2 & 1 (i=2, j=1, k=0) : 3 & 1 & 2 example 2: input: nums = [0,0,0] output: 27 constraints: 1 <= nums.length <= 1000 0 <= nums[i] < 216
are given two sorted arrays of distinct integers nums1 and nums2. a valid path is defined as follows: choose array nums1 or nums2 to traverse (from index-0). traverse the current array from left to right. if you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (only one repeated value is considered in the valid path). the score is defined as the sum of uniques values in a valid path. return the maximum score you can obtain of all possible valid paths. since the answer may be too large, return it modulo 109 + 7. example 1: input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9] output: 30 explanation: valid paths: [2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10], (starting from nums1) [4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10] (starting from nums2) the maximum is obtained with the path in green [2,4,6,8,10]. example 2: input: nums1 = [1,3,5,7,9], nums2 = [3,5,100] output: 109 explanation: maximum sum is obtained with the path [1,3,5,100]. example 3: input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10] output: 40 explanation: there are no common elements between nums1 and nums2. maximum sum is obtained with the path [6,7,8,9,10]. constraints: 1 <= nums1.length, nums2.length <= 105 1 <= nums1[i], nums2[i] <= 107 nums1 and nums2 are strictly increasing.
are given a string num, representing a large integer. return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists. a substring is a contiguous sequence of characters within a string. example 1: input: num = "52" output: "5" explanation: the only non-empty substrings are "5", "2", and "52". "5" is the only odd number. example 2: input: num = "4206" output: "" explanation: there are no odd numbers in "4206". example 3: input: num = "35427" output: "35427" explanation: "35427" is already an odd number. constraints: 1 <= num.length <= 105 num only consists of digits and does not contain any leading zeros.
is a 2d grid of size n x n where each cell of this grid has a lamp that is initially turned off. you are given a 2d array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. even if the same lamp is listed more than once, it is turned on. when a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal. you are also given another 2d array queries, where queries[j] = [rowj, colj]. for the jth query, determine whether grid[rowj][colj] is illuminated or not. after answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. a lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj]. return an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not. example 1: input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]] output: [1,0] explanation: we have the initial grid with all lamps turned off. in the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4]. the 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). it is illuminated, so set ans[0] = 1. then, we turn off all lamps in the red square. the 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). it is not illuminated, so set ans[1] = 0. then, we turn off all lamps in the red rectangle. example 2: input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]] output: [1,1] example 3: input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]] output: [1,1,0] constraints: 1 <= n <= 109 0 <= lamps.length <= 20000 0 <= queries.length <= 20000 lamps[i].length == 2 0 <= rowi, coli < n queries[j].length == 2 0 <= rowj, colj < n
a valid (ipv4) ip address, return a defanged version of that ip address. a defanged ip address replaces every period "." with "[.]". example 1: input: address = "1.1.1.1" output: "1[.]1[.]1[.]1" example 2: input: address = "255.100.50.0" output: "255[.]100[.]50[.]0" constraints: the given address is a valid ipv4 address.
an array of string words, return all strings in words that is a substring of another word. you can return the answer in any order. a substring is a contiguous sequence of characters within a string example 1: input: words = ["mass","as","hero","superhero"] output: ["as","hero"] explanation: "as" is substring of "mass" and "hero" is substring of "superhero". ["hero","as"] is also a valid answer. example 2: input: words = ["leetcode","et","code"] output: ["et","code"] explanation: "et", "code" are substring of "leetcode". example 3: input: words = ["blue","green","bu"] output: [] explanation: no string of words is substring of another string. constraints: 1 <= words.length <= 100 1 <= words[i].length <= 30 words[i] contains only lowercase english letters. all the strings of words are unique.
a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value. implement the datastream class: datastream(int value, int k) initializes the object with an empty integer stream and the two integers value and k. boolean consec(int num) adds num to the stream of integers. returns true if the last k integers are equal to value, and false otherwise. if there are less than k integers, the condition does not hold true, so returns false. example 1: input ["datastream", "consec", "consec", "consec", "consec"] [[4, 3], [4], [4], [4], [3]] output [null, false, false, true, false] explanation datastream datastream = new datastream(4, 3); //value = 4, k = 3 datastream.consec(4); // only 1 integer is parsed, so returns false. datastream.consec(4); // only 2 integers are parsed. // since 2 is less than k, returns false. datastream.consec(4); // the 3 integers parsed are all equal to value, so returns true. datastream.consec(3); // the last k integers parsed in the stream are [4,4,3]. // since 3 is not equal to value, it returns false. constraints: 1 <= value, num <= 109 1 <= k <= 105 at most 105 calls will be made to consec.
an equation, represented by words on the left side and the result on the right side. you need to check if the equation is solvable under the following rules: each character is decoded as one digit (0 - 9). no two characters can map to the same digit. each words[i] and result are decoded as one number without leading zeros. sum of numbers on the left side (words) will equal to the number on the right side (result). return true if the equation is solvable, otherwise return false. example 1: input: words = ["send","more"], result = "money" output: true explanation: map 's'-> 9, 'e'->5, 'n'->6, 'd'->7, 'm'->1, 'o'->0, 'r'->8, 'y'->'2' such that: "send" + "more" = "money" , 9567 + 1085 = 10652 example 2: input: words = ["six","seven","seven"], result = "twenty" output: true explanation: map 's'-> 6, 'i'->5, 'x'->0, 'e'->8, 'v'->7, 'n'->2, 't'->1, 'w'->'3', 'y'->4 such that: "six" + "seven" + "seven" = "twenty" , 650 + 68782 + 68782 = 138214 example 3: input: words = ["leet","code"], result = "point" output: false explanation: there is no possible mapping to satisfy the equation, so we return false. note that two different characters cannot map to the same digit. constraints: 2 <= words.length <= 5 1 <= words[i].length, result.length <= 7 words[i], result contain only uppercase english letters. the number of different characters used in the expression is at most 10.
two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times). given two strings str1 and str2, return the largest string x such that x divides both str1 and str2. example 1: input: str1 = "abcabc", str2 = "abc" output: "abc" example 2: input: str1 = "ababab", str2 = "abab" output: "ab" example 3: input: str1 = "leet", str2 = "code" output: "" constraints: 1 <= str1.length, str2.length <= 1000 str1 and str2 consist of english uppercase letters.
are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'. return the lexicographically smallest string that starts at a leaf of this tree and ends at the root. as a reminder, any shorter prefix of a string is lexicographically smaller. for example, "ab" is lexicographically smaller than "aba". a leaf of a node is a node that has no children. example 1: input: root = [0,1,2,3,4,3,4] output: "dba" example 2: input: root = [25,1,3,1,3,0,2] output: "adz" example 3: input: root = [2,2,1,null,1,0,null,0] output: "abc" constraints: the number of nodes in the tree is in the range [1, 8500]. 0 <= node.val <= 25
are given two 0-indexed binary strings s and target of the same length n. you can do the following operation on s any number of times: choose two different indices i and j where 0 <= i, j < n. simultaneously, replace s[i] with (s[i] or s[j]) and s[j] with (s[i] xor s[j]). for example, if s = "0110", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] or s[2] = 0 or 1 = 1), and s[2] with (s[0] xor s[2] = 0 xor 1 = 1), so we will have s = "1110". return true if you can make the string s equal to target, or false otherwise. example 1: input: s = "1010", target = "0110" output: true explanation: we can do the following operations: - choose i = 2 and j = 0. we have now s = "0010". - choose i = 2 and j = 1. we have now s = "0110". since we can make s equal to target, we return true. example 2: input: s = "11", target = "00" output: false explanation: it is not possible to make s equal to target with any number of operations. constraints: n == s.length == target.length 2 <= n <= 105 s and target consist of only the digits 0 and 1.
string s is called happy if it satisfies the following conditions: s only contains the letters 'a', 'b', and 'c'. s does not contain any of "aaa", "bbb", or "ccc" as a substring. s contains at most a occurrences of the letter 'a'. s contains at most b occurrences of the letter 'b'. s contains at most c occurrences of the letter 'c'. given three integers a, b, and c, return the longest possible happy string. if there are multiple longest happy strings, return any of them. if there is no such string, return the empty string "". a substring is a contiguous sequence of characters within a string. example 1: input: a = 1, b = 1, c = 7 output: "ccaccbcc" explanation: "ccbccacc" would also be a correct answer. example 2: input: a = 7, b = 1, c = 0 output: "aabaa" explanation: it is the only correct answer in this case. constraints: 0 <= a, b, c <= 100 a + b + c > 0
an integer n, return the number of structurally unique bst's (binary search trees) which has exactly n nodes of unique values from 1 to n. example 1: input: n = 3 output: 5 example 2: input: n = 1 output: 1 constraints: 1 <= n <= 19
are given the root of a binary tree. we install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children. return the minimum number of cameras needed to monitor all nodes of the tree. example 1: input: root = [0,0,null,0,0] output: 1 explanation: one camera is enough to monitor all nodes if placed as shown. example 2: input: root = [0,0,null,0,null,0,null,null,0] output: 2 explanation: at least two cameras are needed to monitor all nodes of the tree. the above image shows one of the valid configurations of camera placement. constraints: the number of nodes in the tree is in the range [1, 1000]. node.val == 0
the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child. example 1: input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9] output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9] example 2: input: root = [5,1,7] output: [1,null,5,null,7] constraints: the number of nodes in the given tree will be in the range [1, 100]. 0 <= node.val <= 1000
an m x n binary matrix mat, return the number of special positions in mat. a position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed). example 1: input: mat = [[1,0,0],[0,0,1],[1,0,0]] output: 1 explanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0. example 2: input: mat = [[1,0,0],[0,1,0],[0,0,1]] output: 3 explanation: (0, 0), (1, 1) and (2, 2) are special positions. constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 mat[i][j] is either 0 or 1.
are given an integer array arr. we split arr into some number of chunks (i.e., partitions), and individually sort each chunk. after concatenating them, the result should equal the sorted array. return the largest number of chunks we can make to sort the array. example 1: input: arr = [5,4,3,2,1] output: 1 explanation: splitting into two or more chunks will not return the required result. for example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted. example 2: input: arr = [2,1,3,4,4] output: 4 explanation: we can split into two chunks, such as [2, 1], [3, 4, 4]. however, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible. constraints: 1 <= arr.length <= 2000 0 <= arr[i] <= 108
two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. note that after backspacing an empty text, the text will continue empty. example 1: input: s = "ab#c", t = "ad#c" output: true explanation: both s and t become "ac". example 2: input: s = "ab##", t = "c#d#" output: true explanation: both s and t become "". example 3: input: s = "a#c", t = "b" output: false explanation: s becomes "c" while t becomes "b". constraints: 1 <= s.length, t.length <= 200 s and t only contain lowercase letters and '#' characters. follow up: can you solve it in o(n) time and o(1) space?
are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. you are given an array heights of distinct integers where heights[i] represents the height of the ith person. a person can see another person to their right in the queue if everybody in between is shorter than both of them. more formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]). return an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue. example 1: input: heights = [10,6,8,5,11,9] output: [3,1,2,1,1,0] explanation: person 0 can see person 1, 2, and 4. person 1 can see person 2. person 2 can see person 3 and 4. person 3 can see person 4. person 4 can see person 5. person 5 can see no one since nobody is to the right of them. example 2: input: heights = [5,1,2,3,10] output: [4,1,1,1,0] constraints: n == heights.length 1 <= n <= 105 1 <= heights[i] <= 105 all the values of heights are unique.
a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions: the substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true. a substring that contains a certain character c must also contain all occurrences of c. find the maximum number of substrings that meet the above conditions. if there are multiple solutions with the same number of substrings, return the one with minimum total length. it can be shown that there exists a unique solution of minimum total length. notice that you can return the substrings in any order. example 1: input: s = "adefaddaccc" output: ["e","f","ccc"] explanation: the following are all the possible substrings that meet the conditions: [ "adefaddaccc" "adefadda", "ef", "e", "f", "ccc", ] if we choose the first string, we cannot choose anything else and we'd get only 1. if we choose "adefadda", we are left with "ccc" which is the only one that doesn't overlap, thus obtaining 2 substrings. notice also, that it's not optimal to choose "ef" since it can be split into two. therefore, the optimal way is to choose ["e","f","ccc"] which gives us 3 substrings. no other solution of the same number of substrings exist. example 2: input: s = "abbaccd" output: ["d","bb","cc"] explanation: notice that while the set of substrings ["d","abba","cc"] also has length 3, it's considered incorrect since it has larger total length. constraints: 1 <= s.length <= 105 s contains only lowercase english letters.
an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col]. the rank is an integer that represents how large an element is compared to other elements. it is calculated using the following rules: the rank is an integer starting from 1. if two elements p and q are in the same row or column, then: if p < q then rank(p) < rank(q) if p == q then rank(p) == rank(q) if p > q then rank(p) > rank(q) the rank should be as small as possible. the test cases are generated so that answer is unique under the given rules. example 1: input: matrix = [[1,2],[3,4]] output: [[1,2],[2,3]] explanation: the rank of matrix[0][0] is 1 because it is the smallest integer in its row and column. the rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1. the rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1. the rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2. example 2: input: matrix = [[7,7],[7,7]] output: [[1,1],[1,1]] example 3: input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]] output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]] constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 500 -109 <= matrix[row][col] <= 109
is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. the edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgecosti] meaning that there is an edge from fromi to toi with the cost edgecosti. implement the graph class: graph(int n, int[][] edges) initializes the object with n nodes and the given edges. addedge(int[] edge) adds an edge to the list of edges where edge = [from, to, edgecost]. it is guaranteed that there is no edge between the two nodes before adding this one. int shortestpath(int node1, int node2) returns the minimum cost of a path from node1 to node2. if no path exists, return -1. the cost of a path is the sum of the costs of the edges in the path. example 1: input ["graph", "shortestpath", "shortestpath", "addedge", "shortestpath"] [[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]] output [null, 6, -1, null, 6] explanation graph g = new graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]); g.shortestpath(3, 2); // return 6. the shortest path from 3 to 2 in the first diagram above is 3 -> 0 -> 1 -> 2 with a total cost of 3 + 2 + 1 = 6. g.shortestpath(0, 3); // return -1. there is no path from 0 to 3. g.addedge([1, 3, 4]); // we add an edge from node 1 to node 3, and we get the second diagram above. g.shortestpath(0, 3); // return 6. the shortest path from 0 to 3 now is 0 -> 1 -> 3 with a total cost of 2 + 4 = 6. constraints: 1 <= n <= 100 0 <= edges.length <= n * (n - 1) edges[i].length == edge.length == 3 0 <= fromi, toi, from, to, node1, node2 <= n - 1 1 <= edgecosti, edgecost <= 106 there are no repeated edges and no self-loops in the graph at any point. at most 100 calls will be made for addedge. at most 100 calls will be made for shortestpath.
passengers board an airplane with exactly n seats. the first passenger has lost the ticket and picks a seat randomly. but after that, the rest of the passengers will: take their own seat if it is still available, and pick other seats randomly when they find their seat occupied return the probability that the nth person gets his own seat. example 1: input: n = 1 output: 1.00000 explanation: the first person can only get the first seat. example 2: input: n = 2 output: 0.50000 explanation: the second person has a probability of 0.5 to get the second seat (when first person gets the first seat). constraints: 1 <= n <= 105
are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jth bank. return the wealth that the richest customer has. a customer's wealth is the amount of money they have in all their bank accounts. the richest customer is the customer that has the maximum wealth. example 1: input: accounts = [[1,2,3],[3,2,1]] output: 6 explanation: 1st customer has wealth = 1 + 2 + 3 = 6 2nd customer has wealth = 3 + 2 + 1 = 6 both customers are considered the richest with a wealth of 6 each, so return 6. example 2: input: accounts = [[1,5],[7,3],[3,5]] output: 10 explanation: 1st customer has wealth = 6 2nd customer has wealth = 10 3rd customer has wealth = 8 the 2nd customer is the richest with a wealth of 10. example 3: input: accounts = [[2,8,7],[7,1,3],[1,9,5]] output: 17 constraints: m == accounts.length n == accounts[i].length 1 <= m, n <= 50 1 <= accounts[i][j] <= 100
schema table: activity +--------------+---------+ | column name | type | +--------------+---------+ | player_id | int | | device_id | int | | event_date | date | | games_played | int | +--------------+---------+ (player_id, event_date) is the primary key of this table. this table shows the activity of players of some games. each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device. write an sql query to report the first login date for each player. return the result table in any order. the query result format is in the following example. example 1: input: activity table: +-----------+-----------+------------+--------------+ | player_id | device_id | event_date | games_played | +-----------+-----------+------------+--------------+ | 1 | 2 | 2016-03-01 | 5 | | 1 | 2 | 2016-05-02 | 6 | | 2 | 3 | 2017-06-25 | 1 | | 3 | 1 | 2016-03-02 | 0 | | 3 | 4 | 2018-07-03 | 5 | +-----------+-----------+------------+--------------+ output: +-----------+-------------+ | player_id | first_login | +-----------+-------------+ | 1 | 2016-03-01 | | 2 | 2017-06-25 | | 3 | 2016-03-02 | +-----------+-------------+
are given an integer array nums. the unique elements of an array are the elements that appear exactly once in the array. return the sum of all the unique elements of nums. example 1: input: nums = [1,2,3,2] output: 4 explanation: the unique elements are [1,3], and the sum is 4. example 2: input: nums = [1,1,1,1,1] output: 0 explanation: there are no unique elements, and the sum is 0. example 3: input: nums = [1,2,3,4,5] output: 15 explanation: the unique elements are [1,2,3,4,5], and the sum is 15. constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100
are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?). the valid times are those inclusively between 00:00 and 23:59. return the latest valid time you can get from time by replacing the hidden digits. example 1: input: time = "2?:?0" output: "23:50" explanation: the latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50. example 2: input: time = "0?:3?" output: "09:39" example 3: input: time = "1?:22" output: "19:22" constraints: time is in the format hh:mm. it is guaranteed that you can produce a valid time from the given string.
are given a string num, representing a large integer, and an integer k. we call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. there can be many wonderful integers. however, we only care about the smallest-valued ones. for example, when num = "5489355142": the 1st smallest wonderful integer is "5489355214". the 2nd smallest wonderful integer is "5489355241". the 3rd smallest wonderful integer is "5489355412". the 4th smallest wonderful integer is "5489355421". return the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer. the tests are generated in such a way that kth smallest wonderful integer exists. example 1: input: num = "5489355142", k = 4 output: 2 explanation: the 4th smallest wonderful number is "5489355421". to get this number: - swap index 7 with index 8: "5489355142" -> "5489355412" - swap index 8 with index 9: "5489355412" -> "5489355421" example 2: input: num = "11112", k = 4 output: 4 explanation: the 4th smallest wonderful number is "21111". to get this number: - swap index 3 with index 4: "11112" -> "11121" - swap index 2 with index 3: "11121" -> "11211" - swap index 1 with index 2: "11211" -> "12111" - swap index 0 with index 1: "12111" -> "21111" example 3: input: num = "00123", k = 1 output: 1 explanation: the 1st smallest wonderful number is "00132". to get this number: - swap index 3 with index 4: "00123" -> "00132" constraints: 2 <= num.length <= 1000 1 <= k <= 1000 num only consists of digits.
four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise. the allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y). example 1: input: sx = 1, sy = 1, tx = 3, ty = 5 output: true explanation: one series of moves that transforms the starting point to the target is: (1, 1) -> (1, 2) (1, 2) -> (3, 2) (3, 2) -> (3, 5) example 2: input: sx = 1, sy = 1, tx = 2, ty = 2 output: false example 3: input: sx = 1, sy = 1, tx = 1, ty = 1 output: true constraints: 1 <= sx, sy, tx, ty <= 109
a directed acyclic graph (dag) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order. the graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]). example 1: input: graph = [[1,2],[3],[3],[]] output: [[0,1,3],[0,2,3]] explanation: there are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3. example 2: input: graph = [[4,3,1],[3,2,4],[3],[4],[]] output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] constraints: n == graph.length 2 <= n <= 15 0 <= graph[i][j] < n graph[i][j] != i (i.e., there will be no self-loops). all the elements of graph[i] are unique. the input graph is guaranteed to be a dag.
the ruler of a kingdom, you have an army of wizards at your command. you are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. for a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values: the strength of the weakest wizard in the group. the total of all the individual strengths of the wizards in the group. return the sum of the total strengths of all contiguous groups of wizards. since the answer may be very large, return it modulo 109 + 7. a subarray is a contiguous non-empty sequence of elements within an array. example 1: input: strength = [1,3,1,2] output: 44 explanation: the following are all the contiguous groups of wizards: - [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1 - [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9 - [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1 - [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4 - [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4 - [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4 - [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3 - [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5 - [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6 - [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7 the sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44. example 2: input: strength = [5,4,6] output: 213 explanation: the following are all the contiguous groups of wizards: - [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25 - [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16 - [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36 - [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36 - [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40 - [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60 the sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213. constraints: 1 <= strength.length <= 105 1 <= strength[i] <= 109
are given an n x n grid representing a field of cherries, each cell is one of three possible integers. 0 means the cell is empty, so you can pass through, 1 means the cell contains a cherry that you can pick up and pass through, or -1 means the cell contains a thorn that blocks your way. return the maximum number of cherries you can collect by following the rules below: starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1). after reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells. when passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0. if there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected. example 1: input: grid = [[0,1,-1],[1,0,-1],[1,1,1]] output: 5 explanation: the player started at (0, 0) and went down, down, right right to reach (2, 2). 4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]]. then, the player went left, up, up, left to return home, picking up one more cherry. the total number of cherries picked up is 5, and this is the maximum possible. example 2: input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]] output: 0 constraints: n == grid.length n == grid[i].length 1 <= n <= 50 grid[i][j] is -1, 0, or 1. grid[0][0] != -1 grid[n - 1][n - 1] != -1
are playing a simplified pac-man game on an infinite 2-d grid. you start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. there are several ghosts on the map with their starting positions given as a 2d array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. all inputs are integral coordinates. each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. all actions happen simultaneously. you escape if and only if you can reach the target before any ghost reaches you. if you reach any square (including the target) at the same time as a ghost, it does not count as an escape. return true if it is possible to escape regardless of how the ghosts move, otherwise return false. example 1: input: ghosts = [[1,0],[0,3]], target = [0,1] output: true explanation: you can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you. example 2: input: ghosts = [[1,0]], target = [2,0] output: false explanation: you need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination. example 3: input: ghosts = [[2,0]], target = [1,0] output: false explanation: the ghost can reach the target at the same time as you. constraints: 1 <= ghosts.length <= 100 ghosts[i].length == 2 -104 <= xi, yi <= 104 there can be multiple ghosts in the same location. target.length == 2 -104 <= xtarget, ytarget <= 104
are given an array of points in the x-y plane points where points[i] = [xi, yi]. return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes. if there is not any such rectangle, return 0. answers within 10-5 of the actual answer will be accepted. example 1: input: points = [[1,2],[2,1],[1,0],[0,1]] output: 2.00000 explanation: the minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2. example 2: input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]] output: 1.00000 explanation: the minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1. example 3: input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]] output: 0 explanation: there is no possible rectangle to form from these points. constraints: 1 <= points.length <= 50 points[i].length == 2 0 <= xi, yi <= 4 * 104 all the given points are unique.
are given two integers n and maxvalue, which are used to describe an ideal array. a 0-indexed integer array arr of length n is considered ideal if the following conditions hold: every arr[i] is a value from 1 to maxvalue, for 0 <= i < n. every arr[i] is divisible by arr[i - 1], for 0 < i < n. return the number of distinct ideal arrays of length n. since the answer may be very large, return it modulo 109 + 7. example 1: input: n = 2, maxvalue = 5 output: 10 explanation: the following are the possible ideal arrays: - arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5] - arrays starting with the value 2 (2 arrays): [2,2], [2,4] - arrays starting with the value 3 (1 array): [3,3] - arrays starting with the value 4 (1 array): [4,4] - arrays starting with the value 5 (1 array): [5,5] there are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays. example 2: input: n = 5, maxvalue = 3 output: 11 explanation: the following are the possible ideal arrays: - arrays starting with the value 1 (9 arrays): - with no other distinct values (1 array): [1,1,1,1,1] - with 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2] - with 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3] - arrays starting with the value 2 (1 array): [2,2,2,2,2] - arrays starting with the value 3 (1 array): [3,3,3,3,3] there are a total of 9 + 1 + 1 = 11 distinct ideal arrays. constraints: 2 <= n <= 104 1 <= maxvalue <= 104
is played by two players a and b on a 3 x 3 grid. the rules of tic-tac-toe are: players take turns placing characters into empty squares ' '. the first player a always places 'x' characters, while the second player b always places 'o' characters. 'x' and 'o' characters are always placed into empty squares, never on filled ones. the game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. the game also ends if all squares are non-empty. no more moves can be played if the game is over. given a 2d integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (a or b). in case the game ends in a draw return "draw". if there are still movements to play return "pending". you can assume that moves is valid (i.e., it follows the rules of tic-tac-toe), the grid is initially empty, and a will play first. example 1: input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]] output: "a" explanation: a wins, they always play first. example 2: input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]] output: "b" explanation: b wins. example 3: input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]] output: "draw" explanation: the game ends in a draw since there are no moves to make. constraints: 1 <= moves.length <= 9 moves[i].length == 2 0 <= rowi, coli <= 2 there are no repeated elements on moves. moves follow the rules of tic tac toe.
a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. the result should also be sorted in ascending order. an integer a is closer to x than an integer b if: |a - x| < |b - x|, or |a - x| == |b - x| and a < b example 1: input: arr = [1,2,3,4,5], k = 4, x = 3 output: [1,2,3,4] example 2: input: arr = [1,2,3,4,5], k = 4, x = -1 output: [1,2,3,4] constraints: 1 <= k <= arr.length 1 <= arr.length <= 104 arr is sorted in ascending order. -104 <= arr[i], x <= 104
schema table: product +--------------+---------+ | column name | type | +--------------+---------+ | product_id | int | | product_name | varchar | | unit_price | int | +--------------+---------+ product_id is the primary key of this table. each row of this table indicates the name and the price of each product. table: sales +-------------+---------+ | column name | type | +-------------+---------+ | seller_id | int | | product_id | int | | buyer_id | int | | sale_date | date | | quantity | int | | price | int | +-------------+---------+ this table has no primary key, it can have repeated rows. product_id is a foreign key to the product table. each row of this table contains some information about one sale. write an sql query that reports the products that were only sold in the first quarter of 2019. that is, between 2019-01-01 and 2019-03-31 inclusive. return the result table in any order. the query result format is in the following example. example 1: input: product table: +------------+--------------+------------+ | product_id | product_name | unit_price | +------------+--------------+------------+ | 1 | s8 | 1000 | | 2 | g4 | 800 | | 3 | iphone | 1400 | +------------+--------------+------------+ sales table: +-----------+------------+----------+------------+----------+-------+ | seller_id | product_id | buyer_id | sale_date | quantity | price | +-----------+------------+----------+------------+----------+-------+ | 1 | 1 | 1 | 2019-01-21 | 2 | 2000 | | 1 | 2 | 2 | 2019-02-17 | 1 | 800 | | 2 | 2 | 3 | 2019-06-02 | 1 | 800 | | 3 | 3 | 4 | 2019-05-13 | 2 | 2800 | +-----------+------------+----------+------------+----------+-------+ output: +-------------+--------------+ | product_id | product_name | +-------------+--------------+ | 1 | s8 | +-------------+--------------+ explanation: the product with id 1 was only sold in the spring of 2019. the product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019. the product with id 3 was sold after spring 2019. we return only product 1 as it is the product that was only sold in the spring of 2019.
your implementation of the circular queue. the circular queue is a linear data structure in which the operations are performed based on fifo (first in first out) principle, and the last position is connected back to the first position to make a circle. it is also called "ring buffer". one of the benefits of the circular queue is that we can make use of the spaces in front of the queue. in a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. but using the circular queue, we can use the space to store new values. implement the mycircularqueue class: mycircularqueue(k) initializes the object with the size of the queue to be k. int front() gets the front item from the queue. if the queue is empty, return -1. int rear() gets the last item from the queue. if the queue is empty, return -1. boolean enqueue(int value) inserts an element into the circular queue. return true if the operation is successful. boolean dequeue() deletes an element from the circular queue. return true if the operation is successful. boolean isempty() checks whether the circular queue is empty or not. boolean isfull() checks whether the circular queue is full or not. you must solve the problem without using the built-in queue data structure in your programming language. example 1: input ["mycircularqueue", "enqueue", "enqueue", "enqueue", "enqueue", "rear", "isfull", "dequeue", "enqueue", "rear"] [[3], [1], [2], [3], [4], [], [], [], [4], []] output [null, true, true, true, false, 3, true, true, true, 4] explanation mycircularqueue mycircularqueue = new mycircularqueue(3); mycircularqueue.enqueue(1); // return true mycircularqueue.enqueue(2); // return true mycircularqueue.enqueue(3); // return true mycircularqueue.enqueue(4); // return false mycircularqueue.rear(); // return 3 mycircularqueue.isfull(); // return true mycircularqueue.dequeue(); // return true mycircularqueue.enqueue(4); // return true mycircularqueue.rear(); // return 4 constraints: 1 <= k <= 1000 0 <= value <= 1000 at most 3000 calls will be made to enqueue, dequeue, front, rear, isempty, and isfull.
are given a 0-indexed integer array nums whose length is a power of 2. apply the following algorithm on nums: let n be the length of nums. if n == 1, end the process. otherwise, create a new 0-indexed integer array newnums of length n / 2. for every even index i where 0 <= i < n / 2, assign the value of newnums[i] as min(nums[2 * i], nums[2 * i + 1]). for every odd index i where 0 <= i < n / 2, assign the value of newnums[i] as max(nums[2 * i], nums[2 * i + 1]). replace the array nums with newnums. repeat the entire process starting from step 1. return the last number that remains in nums after applying the algorithm. example 1: input: nums = [1,3,5,2,4,8,2,2] output: 1 explanation: the following arrays are the results of applying the algorithm repeatedly. first: nums = [1,5,4,2] second: nums = [1,4] third: nums = [1] 1 is the last remaining number, so we return 1. example 2: input: nums = [3] output: 3 explanation: 3 is already the last remaining number, so we return 3. constraints: 1 <= nums.length <= 1024 1 <= nums[i] <= 109 nums.length is a power of 2.
are given a string s formed by digits and '#'. we want to map s to english lowercase characters as follows: characters ('a' to 'i') are represented by ('1' to '9') respectively. characters ('j' to 'z') are represented by ('10#' to '26#') respectively. return the string formed after mapping. the test cases are generated so that a unique mapping will always exist. example 1: input: s = "10#11#12" output: "jkab" explanation: "j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2". example 2: input: s = "1326#" output: "acz" constraints: 1 <= s.length <= 1000 s consists of digits and the '#' letter. s will be a valid string such that mapping is always possible.
are given a 0-indexed m x n binary matrix grid. you can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1. the matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1). you can flip the value of at most one (possibly none) cell. you cannot flip the cells (0, 0) and (m - 1, n - 1). return true if it is possible to make the matrix disconnect or false otherwise. note that flipping a cell changes its value from 0 to 1 or from 1 to 0. example 1: input: grid = [[1,1,1],[1,0,0],[1,1,1]] output: true explanation: we can change the cell shown in the diagram above. there is no path from (0, 0) to (2, 2) in the resulting grid. example 2: input: grid = [[1,1,1],[1,0,1],[1,1,1]] output: false explanation: it is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2). constraints: m == grid.length n == grid[i].length 1 <= m, n <= 1000 1 <= m * n <= 105 grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 1
are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. each edge is red or blue in this graph, and there could be self-edges and parallel edges. you are given two arrays rededges and blueedges where: rededges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and blueedges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph. return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist. example 1: input: n = 3, rededges = [[0,1],[1,2]], blueedges = [] output: [0,1,-1] example 2: input: n = 3, rededges = [[0,1]], blueedges = [[2,1]] output: [0,1,-1] constraints: 1 <= n <= 100 0 <= rededges.length, blueedges.length <= 400 rededges[i].length == blueedges[j].length == 2 0 <= ai, bi, uj, vj < n
schema table: products +---------------+---------+ | column name | type | +---------------+---------+ | product_id | int | | new_price | int | | change_date | date | +---------------+---------+ (product_id, change_date) is the primary key of this table. each row of this table indicates that the price of some product was changed to a new price at some date. write an sql query to find the prices of all products on 2019-08-16. assume the price of all products before any change is 10. return the result table in any order. the query result format is in the following example. example 1: input: products table: +------------+-----------+-------------+ | product_id | new_price | change_date | +------------+-----------+-------------+ | 1 | 20 | 2019-08-14 | | 2 | 50 | 2019-08-14 | | 1 | 30 | 2019-08-15 | | 1 | 35 | 2019-08-16 | | 2 | 65 | 2019-08-17 | | 3 | 20 | 2019-08-18 | +------------+-----------+-------------+ output: +------------+-------+ | product_id | price | +------------+-------+ | 2 | 50 | | 1 | 35 | | 3 | 10 | +------------+-------+
are given a positive integer n. continuously replace n with the sum of its prime factors. note that if a prime factor divides n multiple times, it should be included in the sum as many times as it divides n. return the smallest value n will take on. example 1: input: n = 15 output: 5 explanation: initially, n = 15. 15 = 3 * 5, so replace n with 3 + 5 = 8. 8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6. 6 = 2 * 3, so replace n with 2 + 3 = 5. 5 is the smallest value n will take on. example 2: input: n = 3 output: 3 explanation: initially, n = 3. 3 is the smallest value n will take on. constraints: 2 <= n <= 105
are given an array of integers distance. you start at the point (0, 0) on an x-y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. in other words, after each move, your direction changes counter-clockwise. return true if your path crosses itself or false if it does not. example 1: input: distance = [2,1,1,2] output: true explanation: the path crosses itself at the point (0, 1). example 2: input: distance = [1,2,3,4] output: false explanation: the path does not cross itself at any point. example 3: input: distance = [1,1,1,2,1] output: true explanation: the path crosses itself at the point (0, 0). constraints: 1 <= distance.length <= 105 1 <= distance[i] <= 105
are given a string s that consists of only digits. check if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1. for example, the string s = "0090089" can be split into ["0090", "089"] with numerical values [90,89]. the values are in descending order and adjacent values differ by 1, so this way is valid. another example, the string s = "001" can be split into ["0", "01"], ["00", "1"], or ["0", "0", "1"]. however all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order. return true if it is possible to split s as described above, or false otherwise. a substring is a contiguous sequence of characters in a string. example 1: input: s = "1234" output: false explanation: there is no valid way to split s. example 2: input: s = "050043" output: true explanation: s can be split into ["05", "004", "3"] with numerical values [5,4,3]. the values are in descending order with adjacent values differing by 1. example 3: input: s = "9080701" output: false explanation: there is no valid way to split s. constraints: 1 <= s.length <= 20 s only consists of digits.
