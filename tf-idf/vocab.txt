example
1:
the
=
input:
output:
constraints:
of
<=
return
2:
1
is
and
a
explanation:
in
are
to
that
an
given
2
if
0
number
3
be
you
array
integer
all
it
can
with
3:
each
for
there
two
where
or
any
4
n
one
==
at
not
from
only
we
have
as
-
5
105
+
by
no
so
will
has
this
such
string
1,
2,
104
1.
which
following
on
same
integers
after
first
100
6
1000
than
length
answer
note
<
109
*
nums
3,
may
example,
nums.length
possible
x
i
value
then
maximum
minimum
consists
english
nums[i]
2.
k
ith
10
sum
7
0.
order.
lowercase
some
also
equal
3.
since
every
its
contains
should
letters.
between
elements
more
both
4,
s
must
true
binary
most
range
other
false
cannot
either
values
8
5,
valid
total
9
they
second
0,
represents
[1,
because
make
does
find
characters
s.length
0-indexed
into
left
n,
but
exactly
4.
result
their
element
nodes
three
positive
different
least
index
do
strings
order
7.
m
new
right
list
-1
choose
when
your
int
array.
multiple
need
numbers
time
size
letters
input
unique.
2d
tree
last
contain
them
sequence
representing
get
guaranteed
n.
row
less
5.
k.
node
character
above
empty
sorted
-1.
another
indices
query
it.
output
column
j
write
smallest
shown
nums.
m,
type
starting
root
6.
format
consist
key
matrix
string.
could
adjacent
these
6,
arr
without
(i.e.,
node.val
unique
using
arrays
position
distinct
single
k,
20
name
1)
largest
non-empty
->
!=
grid
b
move
consisting
50
table
within
//
path
greater
before
digits
exists
nums,
way
500
represented
becomes
returns
times
next
calls
made
modulo
arr[i]
considered
even
start
pair
|
otherwise.
s.
7,
already
third
want
form
12
would
implement
take
set
contiguous
arr.length
them.
example.
15
1]
[0,
substring
primary
operations
end
106
schema
sql
table:
s,
always
table.
indicates
target
use
notice
integer.
containing
operation
defined
follow
note:
large,
four
remove
words
original
11
otherwise,
follows:
was
while
>
class:
false.
subarray
pairs
once
remaining
30
longest
2)
called
cell
integers.
times.
initializes
explanation
until
id
up
ways
strictly
consecutive
words,
means
tree.
/
add
[]
respectively.
tree,
initially
word
letter
starts
generated
reach
2nd
grid.length
[1]
case
difference
200
numbered
function
however,
are:
object
solution
denotes
1st
leading
[null,
many
change
characters.
grid[i].length
up:
[1],
order,
replace
9.
[2,
digit
final
resulting
now
smaller
cells
edges
...
grid.
grid[i][j]
how
current
3)
that:
10,
shows
where:
value.
i,
point
formed
moves
solve
still
impossible
non-negative
13
'a'
10.
top
8,
3rd
left,
once.
digits.
test
[1,2]
score
product
points
-104
0)
s[i]
perform
allowed
very
distance
group
positions
represent
space
appear
labeled
varchar
thus,
(1,
edge
[1,2,3]
1],
therefore,
number.
assume
16
needed
amount
optimal
step
c
obtain
subsequence
pick
steps
takes
time.
connected
lower
whose
ascending
among
alice
about
is:
y
part
void
used
(0,
integers,
8.
rows
changing
delete
deleting
who
queries
only.
9,
returned
>=
distinct.
were
[2],
operation,
"a"
answer[i]
absolute
through
14
accepted.
split
corresponding
ends
231
words.length
increasing
bob
elements.
true.
"abc"
cases
swap
out
substrings
day
permutation
square
exist
answers
x.
num
'0'
(0-indexed).
""
person
appears
count
call
let
target.
rules:
[3,
being
present
right,
(1
become
104].
words[i]
words[i].length
arr,
search
good
task
place
game
subarrays
previous
fourth
separated
uppercase
null,
operations.
(2,
right.
like
'b'
is,
moving
occurs
lexicographically
above.
just
2],
i.
(i.e.
been
on.
answer.
words.
2000
formally,
people
removing
initial
divide
required
information
equals
queries.length
target,
[0]
[ai,
ai
consider
satisfies
[1,2,3,4]
b,
too
[],
report
graph
odd
data
highest
repeated
jth
array,
problem
values.
letters,
bi
[3],
'a',
(2
1).
3],
ordered
shortest
cost
price
n)
decimal
1's
apply
non-decreasing
red
nums2
nums1
following:
figure
(i,
5000
b.
32-bit
-1000
digits,
valid.
placed
2]
applying
initially,
(possibly
algorithm
+-------------+---------+
equal.
(0-indexed)
edges.length
bi]
types
x,
node.
returned.
those
common
infinite
t
height
...,
nums2.length
4:
17
possible.
other.
[2]
300
[5,
[1,2,3],
val
25
it's
-109
down
move,
row,
kth
never
date
divisible
complete
code
duplicate
zero
obtained
over
line
d
linked
whether
5)
then,
[4,
proven
arr.
nums[0]
time,
edges[i]
-100
itself.
zeros.
'b',
structure
[1,2],
choosing
(the
go
according
back
representation
undirected
sort
process
24
put
query.
conditions:
performing
results
added
define
character.
'1'.
diagram
-105
[1,2,3,4],
1].
numbers.
otherwise
"a",
blue
ai,
20.
fit
prefix
see
[xi,
yi
(in
extra
nums1[i],
nums[1]
null
row.
string,
"abc",
first,
empty.
4)
3]
(n
days
longer
groups
average
reverse
concatenation
bottom
upper
coordinates
paths
create
city
boolean
occurrences
'
xi,
list.
wants
case,
4th
chosen
occur
except
length.
head
a,
also,
correct
queries[i]
exists.
j)
conditions
13.
color
insert
satisfy
side
inclusive
points.
he
0th
during
if:
cell.
26
108
matrix.
needs
(0
written
[0,1]
along
larger
'c'
[1,2,3,4,5]
calculate
interval
occurrence
determine
corner
sums
large
class
trailing
check
area
trees
board
pass
[1,1]
space.
nums[2]
[[],
edges[i].length
even.
grid,
outside
left.
necessarily
node,
5]
:
2).
times,
actual
[4],
not.
21
customer
special
invalid
p
per
level
subtree
children
convert
select
element.
nums2[i]
11,
connecting
under
[1,1,1]
1),
conditions.
%
unit
know
example:
thus
first.
{
(not
"ab"
spaces.
entire
node's
turn,
operations:
-231
-->
player
game,
"aa"
five
nums[i],
index.
'1'
32
letter.
hence,
rearrange
parentheses
visited
xor
spaces
rotate
negative
stones
squares
user
11.
text
keep
107
12,
null.
same.
signed
true,
path.
one.
child
strings,
o(1)
gets
}
step,
[3]
it,
(3
leftmost
0).
exists,
value,
"ab",
"b"
-1,
making
play
frequency
keys
inside
goal
best
lengths
employee
60
adding
players
visit
palindrome
based
direction
,
nums[j]
green
40
that,
day,
'e',
what
repeat
18
can't
describes
word.
0's
mat
described
root.
[2,3]
y,
said
5:
100].
target.length
times:
counted
fewer
standing
names
12.
image
prices
bitwise
plus
relative
include
map
flip
scores
subset
directly
27
4],
5],
j,
(a
currently
bi.
his
19
number,
4]
[].
[3,4]
c.
subarray.
makes
6)
please
way:
answers,
edges.
rounded
[]]
"1"
day.
10-5
several
remains
+---------------+---------+
depth
traversal
1s
student
long
bit
water
rectangle
bits
system
nth
vertical
lowest
full
-2
maximize
closest
location
colored
stone
replacing
did
10^9
though
none)
group.
nums1.length
k)
answer,
false,
possible,
sequence.
operation.
nodes.
mat[i][j]
strings.
us
additional
o(n)
[1,2,3,4,5],
filled
round
"b",
built-in
0),
5].
2);
subsequences
concatenated
certain
14.
together
units
match
swaps
buy
leaf
employees
design
minutes
money
colors
zeros
bst
box
rearranging
front
'.
yi]
13,
higher
2),
nums[3]
b)
starti
endi
second,
person.
matrix.length
element,
exceed
[1,3]
below
digit.
respectively,
mentioned
mat.length
shown.
question
matrix[i][j]
graph.
[2,1]
modify
parent
bottom-right
turns
(including
assigned
leave
twice.
ans
removes
list,
matrix,
"c"
"leetcode"
arranged
travel
23
rest
'c',
c,
items
removed
build
expression
similar
swapping
columns
prime
sentence
sequences
width
found
merge
alphabet
middle
17.
transform
twice
ones
num,
elements,
including
position.
arrays.
ids
therefore
she
complexity?
[starti,
denoting
replaced
'.',
going
3000
10^5
key.
below:
[5]
[0],
underlined
score.
(5
integer,
90
cover
[1].
mat[i].length
"".
modified
')'.
line.
moves.
sum.
top-left
located
achieve
20,
them,
together.
pairs.
"aa",
index,
adds
beginning
taken
'd'
numbers,
needed.
turn
none
able
our
up,
equal,
[5],
power
pile
jump
construct
subtract
building
2n
max
available
16.
finish
separate
version
users
differ
customers
increase
open
heights
points,
denote
[2,2]
nums1.length,
nums2.
foreign
matter
nums2,
num.
5th
followed
walk
ending
'.'
'e'
nums[i
rules
cells.
function.
immediately
4-directionally
give
characters,
22
share
optimally.
costs
matrix[i].length
'('
derived
playing
(3,
so,
r
"aba"
ans[i]
operation:
places.
'c'.
assign
done
rightmost
here
empty,
val)
[2,3],
item
space?
road
students
lists
nearest
partition
seat
weight
double
matches
intervals
leetcode
room
stack
24.
concatenating
continuous
circular
increment
satisfying
period
seats
cities
state
limit
lead
winner
salary
hence
direction.
points.length
now,
arr[1]
arr[0]
[a,
allowed.
num.length
point.
'r',
15,
[10,
object.
doesn't
meaning
passed
column.
sequence,
'o',
150
7)
"abc".
begin
follows
]
[
s2
s1
way.
instead
[1,3],
due
increasing.
exist,
-3
nodes,
28
move.
'b'.
t,
receive
xi
int[]
arr[j]
trees.
input.
continue
clockwise
zero.
comes
(inclusive).
[4]
(with
2].
down,
suppose
above,
answer[0]
reaches
wall
directed
say
stops
vertices
greatest
placing
pattern
doing
file
overlapping
repeating
candies
win
subsets
permutations
splitting
orders
sign
leaves
coordinate
company
rotated
vi
boxes
friends
played
lexicographical
record
mapping
earliest
palindromic
friend
non-overlapping
[2,1,3]
[2,4]
regardless
total.
calculated
runs
employee.
connected.
have.
nums.length,
duplicates.
south,
east,
meet
program
arr[i
created
total,
path,
"0"
again.
nor
beginning,
17,
"abcd"
reads
'a'.
floor
children.
complexity
1's.
nums[1],
(1-indexed)
(4
(m
true:
9)
game.
word.length
asked
t.
n).
made.
user_id
+-------------+------+
0:
ones.
(i
"aaa"
stones.
const
values,
solutions
had
val.
sorted.
3);
column,
onto
rounds
21.
identical
half
coins
condition
decrease
1000.
addition
30.
rank
divisor
piles
rotating
rotation
subtrees
products
belong
running
ascii
sell
stream
events
maximal
off
19.
instance
"
points[i]
text.length
nums1[i]
included
inclusive.
uses
+--------------+---------+
name,
nums2[j]
might
much
other,
minutes.
square.
'.'.
remain
deleted
ui
provided
child.
'i',
s[0]
fn
=>
y.
'z'
similarly,
1000].
process.
city.
returning
query,
operations,
to.
(if
representation.
j.
again
steps:
achieve.
pair.
divided
better
yields
-1]
[0,0]
started
[1,0]
substring.
once,
simultaneously
z
even,
whole
fits
minute
simultaneously.
36
stones.length
water.
get.
yield
constant
meets
complexity.
gives
1);
"aab"
word,
answer[1]
decided
nums[4]
queries[i].length
step.
table,
4].
pay
different.
stay
matching
combinations
probability
vertically
sorting
island
distribute
places
encoded
robot
transactions
jumps
latest
speed
descending
sets
waiting
moment
15.
having
profit
year
diagonal
pieces
suffix
balanced
reorder
obstacle
judge
update
vowel
taking
destination
ranges
sold
reconstruct
v
leads
print
calling
id,
group,
7],
her
[1,3,5]
affect
endi]
same,
read
(or
invalid.
problem,
"e"
edges,
contained
let's
recursive
append
letter,
6].
'#'
board.length
board[i].length
root,
34
m.
[7],
[10],
"leetcode",
changed
4),
pile.
o(log
d.
arbitrary
(row,
characters:
'(',
rules.
come
non-zero
100,
substring,
goes
(can
result.
(of
impossible.
14,
^
assuming
maximized.
ordering
1][n
moves,
s.length,
"abcd",
'r'
"1",
s2.length
decide
randomly
6:
holds
[5].
["a",
-2,
in.
leaving
odd,
"c",
type.
0s
n]
score,
tie,
stop
series
red,
0]
cell,
north,
free
mark
show
visits
(from
indexed
'd'.
rule
rearranged
[1,3,2]
3].
exist.
product.
preorder
built
horizontal
eat
evaluate
network
triplet
frequent
factor
intersection
boundary
distances
store
cut
queue
push
flips
tasks
seconds
100.
candy
22.
piece
division
earn
reachable
house
divisors
27.
covered
collect
event
alternating
parts
degrees
dictionary
card
ball
random
equivalent
marked
message
arrive
closed
[3,3]
123
x-y
if,
format.
divides
be:
[1,1,1,1,1]
name.
[[1,
groups.
[6,
accepted
runtime
directions
earlier
fifth
"00"
neither
(starting
6th
'l',
increases
itself
103
18,
date.
real
end.
start,
[1,1,1],
anywhere
box.
try
10^4
30,
alice's
key,
alphabet.
in-place
modifying
b]
101
inputs
(a,
gain
400
run
around
'x'
performed
s2,
cols
42
ensure
properties:
0's.
[1,2,3].
queries,
ui,
answer.length
zero,
ab
character,
8]
3),
grid[m
plane,
either:
length,
however
|x|
t.length
can:
is.
range.
3).
concatenate
n-1.
beyond
0;
l
bidirectional
conditions,
[3,2,1]
"aba",
queries.
[0,2]
forward
y)
"add",
trying
finally,
[lefti,
bst.
scenario
i.e.,
request
nums[0],
10].
initially.
[1,1,2]
rooted
correct.
31
word2
word1
each.
specific
top,
maps
[7]
forms
'f'
indices.
target[i]
plane
associated
stones[i]
"000"
anything.
candies.
[3,1,2]
[3].
9].
(xi,
center
minute,
named
days.
vice
[1,2].
x-axis.
'd',
(inclusive)
false]
follow-up:
(1,1)
indices,
checks
round,
and/or
'l'
good.
forming
wait
[[0,1],[1,0]]
c)
grouped
[[1,2,3],[4,5,6],[7,8,9]]
end,
[left,
pushes
0-indexed.
[2].
120
seconds.
seats.
distribution
arrange
selling
houses
anagram
rectangles
parenthesis
capacity
fill
dates
decode
team
triplets
source
fraction
cards
happy
sales
neighbors
31.
tile
stock
zeroes
deletion
reduce
combination
arrangement
circle
execution
base
non-increasing
symbol
requests
activity
decoded
parallel
video
describe
work
display
block
threshold
missing
fully
label
allocate
50.
tie
method
units.
points[i].length
plane.
indicate
wall.
cost.length
opposite
[8,
[1,1],
3|
respectively
happen
recall
cause
20);
10);
names.
6).
'-',
[ui,
50,
color.
treat
finally
function,
else
alex
solution.
board[i][j]
7]
swaps.
"cba",
size,
8)
ri
intervals[i]
"aaa",
applied
'*',
intersect
structure.
merging
rows,
area.
country
')',
stored
-106
edge.
positions.
high
[8]
[1,2,1]
received
overlap.
arr[i],
corresponds
nums.length.
wins
player's
horizontally
16,
nothing
weights
pairs,
0],
denoted
implementation
stays
[1,4]
(and
a.
sit
"abab"
[-1]
fromi
[fromi,
toi
"d",
"01",
prices.length
prices[i]
enter
'h'
word2.length
[0,1,2]
"ccc"
john
arrays,
choice
"",
possibly
1's,
"hello"
bob's
sum,
"01"
enough
0.5
216
p.
[2,3].
[3,1]
[2,1].
integers:
grid[0][0]
to:
zeros,
supports
instead.
(x,
')'
blue.
6]
initialize
minutes,
changes
"bb"
inserted
inserting
"this
(no
roots
105].
'o'
as:
rows.
subsequent
help
fn,
45
-10
inserts
length)
lefti
finished
logs
case.
[1,3].
[2,3,4],
"2"
'u'
"d"
mat,
winston
right)
individually
composed
login
transaction
generate
roads
deletions
domino
factors
nice
18.
cross
varying
anagrams
percentage
puzzle
custom
segments
memory
decreasing
white
chunks
duplicates
eating
42.
regular
labels
ranks
resultant
rating
car
hand
overlap
flipping
spell
fall
flower
strange
instructions
bank
drop
32.
alphabetical
counting
counts
hour
vowels
job
cycles
rooms
minimize
conversion
obstacles
garden
perfect
reversing
multiply
unable
excluding
lines
serialization
23.
food
container
origin
60.
beautiful
dot
course
unoccupied
sub-arrays
weighted
queries[j]
id.
abs(x)
heights.length
location.
east
facing
text.
[1,1,1,1,1],
obtain.
linear
care
multiplied
garden.
removed.
arr[2]
[0,0,0]
overall
walls
unless
used.
43
memory.
second.
's'
arr[arr.length
kind
happens
10],
20],
format:
constraints
minimal
zero)
(x1,
x2,
[1,2,1,2]
(both
'+',
additionally,
vertex
keys.
social
vi]
(10
city,
n),
small
order:
impossible,
printable
child,
10]
existing
'u'.
s[1]
piles.length
coins.
piles[i]
picked
li
intervals[i].length
[li,
intervals.length
'p'
processed
singly
"0000"
s1,
col)
rectangular
rectangle.
yellow
number:
'+'.
converted
evaluates
'*'
low
palindrome.
operator.
graph,
difference.
chooses
lose
of:
etc.
corner,
side.
"aab",
nothing.
again,
future
access
f
strategy
[2,5],
empty)
belongs
[2,5]
4).
dollars.
constraints.
trip
passes
cities.
user.
there.
asks
outer
expression.length
[-1,
[-1,-1]
(1).
[0,0,0,0]
world
[[1,1,1],[1,0,1],[1,1,1]]
+----------------+---------+
proved
r,
[[1]]
'9'.
non-empty.
"code"
33
bit.
arrival
handle
nums[j].
surrounded
completely
method.
"5"
10000
digit,
[1,2,3,4,5,6]
250
tasks[i]
task.
tasks.
overlap,
arr1
arr2
"11"
"001"
"010"
quantity
kinds
wins.
or,
19,
top-right
49
(6
[7,
circle.
yi)
(4,
west
[1,2,4]
alphabetically
stone.
converts
(i.e
21,
copy
previously
[[3,
bi,
size.
[0,0],
[[1,2],[3,4]]
optimally,
ended
draw
"acb"
distance.
num2
num1
amongst
price.
[1,0],
"()"
accepts
own
(x
steps.
(1,2)
testcases
[2,3,5]
sentence.
minimized.
occupied
chose
i)
correspond
sum:
differ,
below.
"bab"
although
col
strs
strs.length
strs[i]
strs[i].length
stack.
enum
exact
-4
simple
year.
product_id
add(int
solution?
constructed
[3,2],
"a".
o(n
positioned
58
six
submatrices
multiplication
fixed
decrypt
limited
levels
jobs
generator
shift
catch
arithmetic
land
teams
bus
booking
title
far
exam
connection
ancestor
difficulty
meeting
online
triangle
folder
calendar
buildings
01
replacement
border
offers
simplified
labelled
cycle
dominoes
transformation
connect
roll
log
great
reports
pairings
close
encoding
allocated
straight
break
big
balls
promise
courses
mountain
paint
direct
chessboard
equation
address
.
getting
component
hidden
components
summation
ranked
capital
workers
secret
spiral
floors
department
tiles
balance
trips
immediate
manager
tower
flowers
sizes
difference,
spaces,
chosen.
&
heights[i]
rotation.
field
support
changed.
position,
point,
[idi,
idi
turned
[10]
+----+-------+
cost.
2]]
3]]
full.
full,
valid,
|3
|2
2|
distinct,
arr[3]
arr[4]
duplicates,
cells,
cardinal
month
date,
50)
causing
treated
level,
erasing
x1
x2
y2)
minus
vertex.
nums[5]
box,
keys,
candies,
line,
addition,
bob,
people.
appends
[2]]
pairs[i]
()
resolve
"ba"
cards.
"2",
"0",
[3,6]
[c,
'u',
'y'
'/',
'-'
completed
hold
o(m
'2'
printed
pieces.
h
w
formatted
ignored.
evaluation
i.e.
"10"
lists.
nums[i][j]
includes
values[i]
values.length
lands
falls
1000,
110
vi,
ranking
whereas
automatically
"abcde",
subsequence,
connects
connected,
paths.
(a),
b),
(see
expression,
('a',
etc.).
corner.
1]).
sides
'o'.
'i'
dropped
ways:
dollars
repeatedly
queue.
respective
order).
paired
expected
seven
g
n-1
media
+=
limit.
dictionary.
dictionary,
examples
intermediate
variable
"101"
endpoints
[[0,0]]
(bst),
substrings.
s1.length
algorithm:
nums[i].
round.
blocked
(5)
significant
others.
7:
logged
set.
num)
[1,3,4]
values:
don't
preceding
finishes
available,
fromi,
'-'.
actually
output.
well
(for
"3"
office
entries
optimize
word2,
word1.length,
"bbb"
b.length
islands.
inputs.
objects
disjoint
similarly
'x'.
isn't
"z"
array's
min(n
odd.
[1,3,2],
bottom-left
[2,2],
imagine
radius
formed.
[1,1,1,1]
sitting
applies
segment
allow
'9'
unlock
"leet"
"bab",
evaluated
paths[i]
paths.length
system.
[1,5]
6],
price,
tasked
29
require
tasks.length
balanced.
covers
"ab".
various
y1)
exam.
"123",
occurring
direction,
"bc"
"ac",
price.length
price[i]
(0-indexed),
axis-aligned
pop
nums:
64
right).
positive.
i-th
lost
'*'.
binary,
considering
"get",
"get"]
"111"
representations
"o"
"cba"
210.
'g',
easy
sentence.length
"i
1])
solution,
[0,1,1]
games
thread
answers.
-x
board.
board,
condition.
[3,3],
[1,1,1,1],
person,
palindromes
99
===
5);
500.
problem.
way,
shape
listed
collection
bool
all.
righti
's',
logs.length
logs[i]
80
"a
s1.length,
directions:
down.
reversed
[1,2,3,4,5,6,7],
n].
zeroes.
specified
achieved
1.00000
across
continues
1-indexed
[2,1],
keeping
37
[0,1],
year,
flipped
passing
specifically,
stack,
push(int
pop()
(left
orders,
top.
[1,2,5],
website.
root2
root1
requires
prove
s[i
"cab",
arr2.length
lower-case
$5
"10",
state.
[1,2,3,4,5,6,7]
dictionary[i]
dictionary[i].length
dictionary.length
ways,
[6],
compute
columns,
interval.
seat.
destination.
executed
't'
',
necessary
away.
two.
(1,3)
traveling
up.
text,
40.
cars
broken
topmost
28.
staying
differences
falling
tallest
postorder
machine
run-length
deepest
rolls
questions
iterator
perimeter
flights
median
assigning
configuration
islands
trimmed
fair
pivot
mouse
coin
mean
assignment
worked
accounts
reformat
reaching
flight
tournament
force
cousins
numeric
periods
ingredients
nesting
3n
trim
bricks
connections
walking
restaurant
safe
recover
25.
track
removals
movies
n-ary
combine
folders
key-value
buying
filling
queens
gray
fractions
64.
account
nested
uncommon
others
password
34.
shifting
compare
lucky
painting
phone
gap
frog
cat
magic
importance
arrangements
collision
complement
servers
degree
chain
stick
59.
×
attack
bags
forest
rotations
bracket
window
subtraction
bars
discount
delivery
cutting
sticks
jewels
sentences
away
shop
bought
averages
movie
daily
zigzag
expansion
rain
active
submatrix
emails
checking
fibonacci
visible
room,
answer[j]
smaller.
"world"
"hello
999
area,
integral
vali
47
henry
joe
sam
plant
planted
flowers.
1010
nums1[0]
triplets.
nums[2].
|i
|0
diagram.
duration
domino.
infinitely
speed.
towards
collide
amount.
money.
coins,
hours,
'?'
mm
years
triple
[start,
book.
15);
true]
-107
over.
paths:
system,
subsequence.
coming
unchanged.
opening
candy.
collected
language.
[[1,2],[1,3],[2,3]]
languages,
vi.
vi)
there's
content:
[4,5]
lowest.
considered.
(labeled
string[]
"cab"
"c".
subsequences.
val,
pairs.length
"bca"
divisors:
throws
b;
100ms.
optimal.
cards,
picking
d)
ri]
1234
num[i]
[[1,0],[0,1]]
1s,
[[1,1],[1,1]]
prefix.
steps,
moment,
intersect.
locations
(note
judge:
104.
s3
vertically.
requirements:
huge
(empty
[1,2,4],
105)
domain
form:
email
merged
2.00000
nums[i].length
items.
[[0]]
mat.
piles,
trivially
nums[2],
2;
(0,1)
negative.
nums2[2]
"ace"
words[1]
words[0]
words[2]
"abba"
selecting
graph.length
u
{0,
independent
partitioned
property
formula
parentheses,
produce
start.
trivial,
nodes'
traversal.
(6,
operator
writing
'u')
subarray,
109.
yi].
later
ten
route
"bbb",
less.
reuse
f.
(where
worker
5).
receives
street.
main
boxes,
sixth
bag
explantion:
friends,
because:
(int
code:
i++)
[[1,2]]
user,
"aa".
[3,2,1].
threshold.
simultaneously,
5000].
selected
"ll"
create.
palindrome,
created,
"apple"
terms
expressions
expression.
details
"11",
righti]
set,
got
recursively
s2.
added.
neighboring
reference
5|
provide
station
[2,7,4]
d,
1-indexed).
interpreted
"123"
"l"
itself).
net
toi,
pieces,
appeared
and:
ways.
55
differs
2's
internal
server
server.
each,
a.length,
(land)
totally
threshold,
"()()",
[9,
head.
themselves
idle.
upper-case
tasks,
"x"
"hello",
taken.
giving
intervals,
(-1)
one,
here,
(as
refer
at.
25,
100)
"11".
"011"
itself,
erase
x).
underlined.
balls.
2-d
bottom.
b2
x-axis
drawn
parents.
neighbor
perm[i]
perm
height.
200,
11]
lie
coordinates.
grow
computed
120,
works
"111000"
ends,
freely
result:
"leet",
once).
right),
lexicographically.
separating
brackets
12]
lexicographic
that's
deleted.
matter.
"b".
paths[i].length
q
vice-versa.
unknown
8].
customer.
customers,
customers.
requirements
pricei.
functions:
shop.
pricei]
2]],
pricei
swap.
"ba",
people,
[0,1].
chessboard.
j),
left-to-right
[2,2,2]
24-hour
half.
win,
"aaaa"
required.
[2,3,1]
days,
calculates
distance,
(x2,
euclidean
59
place.
banned.
"6"
directly.
turn.
nums[3],
(2,3),
7),
computer
minute.
splits
reset
j]
[i,
'0'.
knows
(to
rounds.
sub-array
arr.length.
matrices
unit.
team.
allows
old
public
[1]]
[1,1,1].
"231"
converting
numerical
"acb",
210
picks
indices[i]
indices.length
left).
keeps
'r'.
space,
customer_id
order_date
remove.
[5,4,3,2,1]
non-decreasing.
'k'
level.
nums[j],
queries[i].
"bbb".
timestamp
in,
device.
1/3
someday
games.
too.
nums[k]
4000
forward.
backward
threads
threads:
methods
(r,
permutations.
path:
e,
4);
hold:
diagonals
well.
newarray
plusone(n)
fn(arr[i],
downward
shortest.
events.
hours
happened
[2,3,4]
[2,3,5],
process,
lies
player.
compared
obtaining
car.
right].
error
'5'
(2,3).
upper,
"abb"
"aabaa"
apple
[5,5]
-3,
|5
float
division.
begins
"0".
condition,
cost[i]
strs,
[3,4].
not).
more.
street
dist
crosses
visited.
west,
you.
employee,
+------+
salary,
(binary
discount.
command.
o
turns,
floor,
wall,
9000
6),
1;
called.
42;
executed.
"the
movement
stream.
scores.
(except
|nums[i]
product_name
sale
+------------+--------------+
+-------------+-------+
'0's
nums)
below,
jonathan
i]
indicating
39
age
initialized
ki
[3,0]
queries[i],
arr[i].
[0].
students.
plan
'e'.
"i"
(there
pass?
[[1,2,3],[4,5,6]]
68
ones,
(2).
"bca",
"baa"
arr1.length,
arr2[i]
particular,
"leetcode".
"s"
10^6
activities
items,
$4
$2
want.
$3
decrypted
diagonal.
preorder.length
word1[i]
smallest.
"abccba"
black
[4].
insertion.
0);
image,
consecutively.
nums2[i].
16)
orders.
adjacent.
blank
endtime
starttime
desired
shorter
grid[row][col]
(5,
[x,
him
subtrees.
(0,1),
(bst)
pairwise
satisfied.
requirements.
instances
grid[r][c]
another.
j).
disconnected
35
$1
l,
arr1[i],
yj
moved
100%
consecutively
so.
[8],
bsts
tickets
cpu
43.
monotone
powers
partners
attendance
laser
sequential
75.
non
majority
communicate
tag
strength
truncate
33.
halves
tic-tac-toe
flood
local
defuse
contaminated
keyboard
pow(x,
wizards
divisibility
planting
encode
45.
cinema
temperatures
ages
temperature
54.
bomb
angle
transpose
marking
balloons
iv
insertion
printer
k-increasing
disconnect
spreading
knight
altitude
partitions
cooldown
crossing
asteroids
videos
short
clock
hamming
hit
exit
increments
project
subpath
roman
cheese
king
favorite
contest
ugly
exchange
service
baseball
rate
furthest
recipes
25%
operators
tweet
captures
bonus
pizza
eliminate
handling
categories
insertions
diameter
supplies
backspace
inorder
grandparent
900.
36.
min
n-queens
machines
tweets
functions
widths
cups
asterisks
composition
routes
addresses
squared
history
critical
peak
lock
bloom
logical
avoid
stacks
browser
outermost
entrance
filter
chalkboard
eaten
ice
super
conflict
packages
sub
single-threaded
quality
gcd
fruits
robber
shapes
criteria
cheapest
73.
3d
trail
view
29.
encrypt
diff
sudoku
bookings
rational
spanning
traverse
population
eggs
gardens
e-mails
basket
1d
iii
computers
ant
solving
asteroid
ship
parser
dice
rods
diagonally
owner
ii
wheel
weakest
wonderful
compete
factorial
brick
49.
slices
strongest
polygon
salaries
unsorted
ip
flatten
removal
apples
excel
egg
spent
90.
non-space
world"
enhances
bar
coordinate.
wide
ids.
pressing
status
button
on,
non-overlapping.
nobody
competition.
hand,
section
earns
arrows
70000
60000
90000
80000
cost[i].length
[[2,
cost[i][j]
partial
plant.
8).
nums1[j]
[-1,0,1]
0|
j|
a[1],
rowi,
[rowi,
coli]
held
meeting.
room.
free.
done,
figure.
string)
seconds)
memory,
road.
's'.
coins[i]
coin.
coins.length
"hh:mm".
hh
bob.
31,
60);
book(int
implementing
"book"]
event.
half-open
successfully
calendar.
15],
end)
"book",
square,
'/'
path.length
'/'.
solutions,
y1
x1,
y1,
[1,1,2,2],
10^3
["abc",
'+'
(either
n-1,
spend
[1,2,2,3]
closed,
keys[i]
keys.length
arrays:
candies.length
candies[i]
language
(ui,
tuples
yielding
z.
z,
lines,
script
file.txt
10th
filters
painted
constructor.
"bob",
x's
constructor
parent,
class.
children,
directions.
'#',
3x3
sequence:
generates
34,
[13,
"iii"
"bacd"
"bac"
primes.
palindromes.
throw
(n)
promise(res
settimeout(res,
reached.
asyncronous
error.
inputs.length
8),
[2,4,5]
card.
"6",
intervals.
181
[1,0,2,1]
shifts
alphabet,
(wrapping
1s.
[[1,1],[1,0]]
daniel
"xy"
usual
transactions.
program.
'8'
[3,2,4],
skip
parts.
"10101"
necessary.
allowed).
direction:
cuts.
horizontally,
(an
mask
nums1.
lengths.
[2,1,2]
triangle.
non-leaf
swapped.
non-empty,
d]
22,
[5,4,3,2,1],
[1,1,2,2,3],
subset.
values[i],
third,
[[0,0],[0,1]]
stone,
clockwise,
stones'
positions,
[low,
pile,
[1,3,3].
nums[i+1]
nums[nums.length
costs.length
costs[i]
digits[i]
digits.length
(0,0)
queries[j].length
[false,true]
higher.
student_id
decreases
(contiguous)
substrings:
duplicated
(12
rob
multiplication,
-2.
toward
environment
part.
divisor,
"abcde".
performed.
"cd"
"baba"
{1,
v,
3}.
values).
store,
ever
[1,1,1,1,1].
200].
tree)
descendant
[1,2,3,4].
9]
[1,null,3,2,4,null,5,6]
[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
nary-tree
iteratively?
pairing
maximized
bi)
elements)
unary
'a's
floor.
have,
remember
7th
dropping
break,
99,
drops
ranges[i]
[4,8]
ranges.length
overlapping.
pays
job,
profit[i]
separately.
profit.length
[2,4,6,8,10],
aforementioned
everyone
[1,2,3,1]
security
constraint
effect
similar,
(n,
can.
queue,
boxes.length
distributing
[1,2,2,1],
ingredients.
[[0,
preferred
pass,
expectednums.length;
underscores).
(hence
slots
assert
expectednums
[...];
expectednums[i];
assertions
(you
this:
rows:
[[1,2],[2,3]]
(user_id,
vowel.
limit,
variables
checked
protected
question,
calculations
firsti
[firsti,
reminder,
cycles.
subtree.
install
installing
throughout
boundary.
walls.
[1,0,1]
sent
from.
kn
february
+----------------+----------+
user_id.
2020.
[2,2].
removals.
components.
n2
supply
individual
statement
alternate
pick,
eat.
suffix.
(excluding
requests[i].length
requests.length
toi]
buildings.
requests[i]
cities,
weighti]
denominator
calculation
"1101"
"bc",
"ca"
"bb",
"abb",
"o",
zeroes,
(that
done.
yi],
outgoing
day).
again).
engage
41
entered
-3.
it?
bits.
known
permitted
available.
(i+1)th
load
handles
project,
employee_id
working
+-------------+-------------+
54
(all
grid[0].length
"acd",
"5",
"021"
only,
"("
b:
"(()"
")("
trees.length
trees[i]
xth
(ie.
0.50000
e
00
"f"
[2,6]
stones,
(-2)
0.25
75
causes
lose.
arr[k]
arr[5]
few
xn
wi
against
shaped
"v"
stuck
remove,
odd-indexed
even-indexed
5]],
minimizes
equally
5]);
container.
(nums[i]
[1
dimensions
height,
14].
yi,
seats,
enters
sits
words)
words[i],
0's,
reached
through.
turning
wrap
position.length
position[i]
step:
'a':
chars
words[i].length,
highlighted
'p',
"1
chunk
term
[-231,
printed.
clear
"00",
"0110",
[2,1,1,1]
smash
destroyed,
[2,7,4,1,8,1]
hour,
hours.
eats
hour.
strings:
"aeb",
[nums[k],
jobs,
i).
versa.
company.
timei
arrives
customers.length
arrives,
customers[i]
stops.
result,
[1,2,0]
"search",
res
shop,
"search"]
tiles.
[1,4],
[0,1,2,3]
(indexed
coordinates,
"good"
attain
searchword
searchword.length
products.
typing
[9]
task,
root.val
south
north
squares,
source.length
endpoints.
replaces
outcome
puzzle.
respect
satisfied:
(red
(even
balanced,
parenthesis.
'('.
forever.
[2,1,2,1]
segments.
anything
"abcde"
"abacaba"
+-----------+
maximum.
reachable.
score.length
banned
banned,
banned.length
num2,
0001
hasnext()
combination.
next()
"ac"
"next",
unrooted
[[0,1],[1,2]],
times).
digits).
increasing,
1018
(109
picture.
(2,2),
interested
has.
front,
back.
split.
divisors.
[2,0]
'|'
precedence
'x',
"f",
wordlist
shown,
minimum.
vote
match.
p.length
p,
"burger"
judged
2):
image.
participating
place,
rule.
"count",
"count"]
"1010"
(1,7)
"r"
signifies
criteria:
present.
'j'
"210"
231.
(index
node.val,
repeats
into.
['a',
further.
sentence,
(minimum
love
2019.
website
2019-08-01
samsung
321
word's
[0,1,2,3,4],
"00111"
"100"
'b's
frequency.
modifications
[1,2,1],
structurally
[1,0,1],
occupied.
whitespace
boundaries
2018-07-03
2017-06-25
games_played
2016-03-02
player_id
device_id
logging
players.
+-----------+-----------+------------+--------------+
(player_id,
event_date
2016-03-01
event_date)
amount,
[2,1,1]
[2,3,3]
do.
vj
[[1,0]],
uj
[uj,
abs(1
[5,2,1,3].
[4,2,1,3]
[5,6,4]
three.
[3,5]
(1-indexed).
[1,1,0]
shares
loses
hh:mm.
tournament.
words[j]
[[[1,
[2,4,6]
[3,3].
accept
[20,
10;
lodash's
defines
a2
[3,4,5]
[[1,0]]
two-dimensional
seen
worth
type:
libraries.
product,
righti].
make.
water,
press
messages
reading
code,
operations.length
travels
arr[j].
|1
incorrect
sn
subgrid
string).
[[1,2],[2,3],[3,4]]
p2
p1
righti.
disturbing
[4,6]
(9
1|
|10
|2-3|
words[i].
(2,3)
climb
[2,1,3].
(2,2)
'w',
subarrays.
(2)
[[0,1]]
endi].
[1,2,3,4,5,6],
2000].
themself.
manager.
treenode.val
i=0
j=0,
i=1
j=1,
accounts.
64-bit
prices.
50%
customer,
next.
appended
index)
ci]
'#'.
down).
upcoming
val1
val2
ring's
ring
colors.
green,
ring.
100);
used:
goal,
resolves
('a'
align
transformed
message,
key.length
4th,
1st,
groups,
nums[j])
46
62
9).
shuffled
partitions.
anticlockwise
counter-clockwise
movements
lengths,
placed.
result[i]
root)
record,
"4"
-4,
ops
t1
reversed.
traversal,
query:
good,
[xj,
minimal.
inclusive,
match,
s[2]
")",
2]);
[9],
add.
"11111",
reserved
trimming
stacks.
push,
"pop"]
"pop",
capacity.
"push",
pop,
in-order
44
6|
[[0,1]],
stand
[4,2,5]
sign.
111
[5,6,7,8,9],
a[i]
formally
[4,4]
reduced
1.5
similar.
0.00000
candidates
candidates[i]
[1,2,2],
combinations.
candidates.length
connections[i]
connections.length
indirectly
[0,5]
0].
nine
abs(i
(more
"e",
(11
mapped
20)
sure
typed
entering
password.
colsum[i]
colsum
colsum.length
emails.
david
period.
case),
overlapped
[0,2,4]
larger.
sum(nums[i].length)
aligned
keyword
[6,7,8,9,10]
(because
to,
description.
sensitive,
"zz"
"z",
count.
"c"]
"bcb",
9th
"aca",
arr1[i]
play,
positions).
(such
play.
say,
endpoint
bad
-10^6
basketball
t-shirt
pencil
+------------+------------+
shapes.
round:
advances
want,
special[i]
item,
[3,2]
special.length
$10
given,
$2,
$9
code.length
2+3,
dominoes.length
pushed
dominoes[i]
pushed.
preorder[i]
word1.length
"cbda",
process:
dictionary)
"ei",
word1,
["abcd",
"acbd",
objective
"abcc"
m)
book
from,
members
value)
string:
vertices,
immediately.
fall.
target)
updates
"1010",
28,
blue,
orange
actions
acyclic
relationship
flattened
14)
10:
2019-01-01
restaurant.
'3'
met:
executes
execute
executing
start.length
starttime,
attend
lines.
-5,
["a","b","c"]
consistent.
persons
people[i]
people.length
"12"
world",
white.
units,
devise
acceptable
"abcabc",
stores
timestamp.
brackets.
[1,4,2],
asynchronously.
fired
(horizontal
(representing
-108
0-indexed).
determines
parsed
evenly
[2,4,6],
3rd,
[2,3,1,1,4]
pair,
(3,5),
[1,2,3,3],
same:
73
bitwise-xor
len
500].
n.length
+----------+
country,
four.
versa,
rolls.
valued
pi
(3,4),
(1,1),
follow:
't',
time[i]
180
behind
faster
(10)
"0011",
ignored
symbols:
lowercase.
algorithm.
list1
list2
121
0.25000
bank.
dist[i]
dist.length
roads.
min(5,
[1,2,3,5],
further
nums1[1]
arr2,
7].
9],
[1,3,3]
"is",
hello
70
[2,7,11,15],
tests
o(n2)
(represented
-6
basket.
baskets
grid[1][1]
(2,1)
"abab",
instead,
simply
(100)
[2,1,3],
[2,2,2,2,2]
email.
"aaaaa"
speed.length
speed[i]
column).
off.
types:
right]
[true,false,true]
graph[i]
deletes
blocks
differing
burgers
skiplist
artifacts
cyclically
763.
unguarded
teach
surface
pens
redundant
managers
prefixes
rungs
bottles
quad-trees
elimination
rle
descent
chair
70.
pseudo-critical
followers
bananas
rhombus
fence
74.
skips
b's
sequentially
gifts
harmonious
uploaded
monotonic
competition
editor
fewest
storage
soup
reservation
goat
itinerary
xor-beauty
pseudo-palindromic
handled
reshape
magnetic
foobar
underground
atm
projection
inheritance
cooperated
shopping
valleys
frogs
visiting
squareful
covering
slashes
captured
possibilities
tinyurl
equality
square-free
refueling
twin
chart
sightseeing
calculator
alternately
repair
dartboard
unhappy
ants
unreachable
darts
37.
76.
tilt
leaf-similar
ramp
airplane
ipo
lcp
bookstore
deviation
interleaving
erasure
807.
boats
couples
well-performing
cookies
boomerang
separator
dna
global
snapshot
cream
confirmation
donuts
673.
2020
strong
holding
68.
x-matrix
scramble
watched
codes
890.
monthly
views
awesome
cancellable
beams
article
sufficient
stadium
cornered
frequencies
powerful
deque
market
patients
halve
climbing
poker
gain/loss
no-zero
rabbits
k-similar
totals
variance
mutating
quadruplets
tracker
uncrossed
tenth
200.
latin
capitalize
array-form
transfer
bounds
184.
histogram
596.
sliding
enemy
mutable
parking
truck
complementary
alien
songs
validator
monkeys
delivering
classes
week
json
pruning
checker
sleep
collisions
snail
hashmap
turbulent
44.
home
blacklist
meals
cache
triangulation
archery
attended
hire
happiness
even-valued
gcds
simulation
plank
comments
traversable
express
326.
fee
190.
allocator
triangular
fire
xored
lemonade
complex
barcodes
taps
mode
redistribute
99.
parse
wear
alert
decomposition
companies
self
marbles
appeal
oranges
virus
successful
cherry
bridge
1551.
spellchecker
guess
35.
lattice
rental
inversions
profitable
cake
sub-folders
backlog
pickup
compression
washing
dungeon
statistics
dividing
my
clumsy
coprime
competitive
completing
town
watering
achievable
carpets
pillow
corridor
rook
billboard
forts
module
spells
additive
removable
wildcard
incompatibility
wasted
deeply
prison
lonely
concert
burst
invited
56.
bouquets
delay
chalk
verifying
magical
champagne
finding
cuboids
inverse
wealth
richest
ideal
rocks
reordered
fix
personal
dishes
pangram
deci-binary
advantage
widest
80.
a's
smoother
pencils
fancy
dota2
special-equivalent
rope
biggest
min-product
paid
entity
key-card
compatibility
plants
shelves
operating
1202.
kids
mailboxes
homework
golf
fleet
96.
potions
999.
streak
progression
remapping
pool
schemes
debounce
naming
morse
equations
546.
save
boring
subrectangle
performance
tac
monsters
maze
tastiness
fresh
detect
95.
koko
sample
rearrangements
hills
grumpy
respecting
allocation
triples
schedule
subdomain
escape
ports
html
swim
chips
votes
smooth
genetic
1011.
examinations
sector
energy
rings
cuts
fingers
harvested
counter
effort
k-beauty
senate
26.
parity
tic
lunch
philosophers
wood
k-diff
interpretation
insufficient
alike
grammar
inform
bookcase
199.
hourglass
ors
restaurants
hats
consistent
stickers
waste
carpet
growth
47.
cameras
greatness
hashset
tromino
tribonacci
41.
subgraph
ghosts
beauty
bulb
hands
sub-tree
centennial
pancake
700.
mysterious
exclusive
skyline
minesweeper
2016
prefix-aligned
mice
rooms.
rooms.length
[2,3]:
abs(2
[2,5]:
rooms[i]
fly
me
element:
angles
region
location,
counterclockwise.
90,
idi,
evenly.
presses
[on,
bulbs
[off,
off,
[4,2],
ranging
arrows.
(6,9)
+------------+----------+--------+
+----+-------+--------+--------------+
department.
departments.
departmentid
size2.
[36,
size1,
3--a
size2
8]]
size1
[[15,
1--a
96],
2--b
2--c
determined
flowers[i]
gardens,
flowers.length
nums2[1]
(42
nums2[0]
(type
(0,1,2),
[5,7]
[3,5,2,6],
become:
[a[0],
a[n-1]]
-5000
[a[n-1],
why?
a[n-2]].
a[2],
a[0],
(north,
colj
[rowj,
guards
guarded
meetings.
delayed
rooms,
finishes.
manner:
finish.
half-closed
dominoes,
"24"
240.
[3,1,0]
car,
collides
stationary
[1,3,1]
denominations
[1,2,5]
choices.
?
"23"
mary
names[i].length
names.length
names[i]
1971
2019
1993
2100.
55]]
40],
40);
[50,
booked,
booking.
events.).
[25,
end),
55)
55);
booked
60],
event,
directory
unix
'_'.
"/"
directory,
directories
[10,8]
included.
different:
y2.
y2
matrix[0].length
"."
lowercase),
numbers:
(0-9),
formats:
vertices.
apple.
beautiful.
[1,1,2,2,3,3]
[1,2,3,5]
shifted
most.
closed.
guarantee
possibilities.
file.txt,
pricei,
[3,1,5]
lowest).
simplicity
true)
houses[i]
summer
houses.length
[0,0,0,0,0],
successor
alice,
death
dies
dead
name.length
birth
older
'@'
lock,
str1
str2
str1.length,
"ac".
str2,
"abac"
"abac",
str2.length
["h","e","l","l","o"]
reverses
["h","a","n","n","a","h"]
["o","l","l","e","h"]
sub-boxes
1-9
[5,3,1]
nodes:
14]
api
20]
26,
"ode"
108].
12321
n;
resolved
t=50ms
milliseconds
100));
reject
50ms.
[5,10]
choice,
[2,4,1,2,7,8]
consecutive).
[9,8,7,6,5,1,2,3,4]
cards[i]
cards.length
[4,2,3,4]
1015
"8".
"4",
7).
twice,
1200
215
applied.
[3,5,9]
'a').
transaction,
transactions.length
transactions[i]
transactions,
heads
(2nd
linked-lists
ahead
all,
[3,2,4].
[1,5],
[1,5].
lists,
[[]]
"1001"
s3.
be"
you"
"how
"to
[[0,0,0]]
k-1
code.
symbol.
"xxxx"
separation
symbols
address.
time?
evaluating
and.
illustrates
2.5.
"1100"
[1,3,3,3,2],
obstacle,
["#","#"],
rests
high]
bottom,
[1,5,2,4,1]
[1,2,2].
[1,1,2].
planning
"bcabc"
"cbacdcbc"
"acdb"
type,
unnecessary
(1,0)
report[i].
negative_feedback[j].length
["this
report[i]
["not"],
report[i].length
positive_feedback[i].length,
["smart","brilliant","studious"],
negative_feedback
feedback,
negative_feedback[j]
negative_feedback.
3-1=2
feedback
report.length
studious","the
student_id.length
reports,
negative_feedback,
negative_feedback.length
student_id,
positive_feedback.length,
student_id[i]
smart"],
positive_feedback[i]
positive_feedback
"banana"
+1
contact
house.
alerting
night.
smart
police
police.
mod
-231,
division,
fractional
text2
"def"
text1
phrase
self-edges
2}
v.
u.
().
[0,3,0]
[1,1,0,1]
2}.
formula.
chalkboard.
[0,1,0]
examples)
min(2,
(ignoring
5),
min(1,
min(3,
subtraction,
subtraction.
anywhere.
tries
corner:
grid[0][0]).
unit,
visits.
sqrt(2)
width,
boxes.
placement
fuel.
fuel
'n'
55,
unbroken
certainty
breaks,
breaks
break.
them:
inclusive)
[10,20]
ranges.
jobs.
attempt
profit,
ability
systems
[[0,0,1],[1,1,0],[1,0,0]]
[[1,0,0],[1,1,0],[1,1,1]]
[[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
"ccc",
"ddd",
boxes[i]
trips.
port
violating
ship.
given.
rearrangement
weights.length
bags.
bag.
distributions.
weights[i]
[9,4,9,8,4]
[9,4]
[4,9,5],
[4,9]
intersection.
remaining.
cheese.
[1,6]
slice.
happy.
1]],
prefers
xi.
friends.
0]]
kept
k;
removeduplicates(nums);
[1,1,1,2,2,3]
(lower-case
line:
upper-case),
[2,3,-1,5,4].
[4,-2,3].
[4,2,3],
[3,-1,0,2],
-nums[i].
[2,-3,-1,5,-4],
[3,1,0,2].
will,
app
{1}
commands
instruction
"e".
queries.length,
[6,5]
[3,4,3]
intersecting
"xx".
backward.
"cc",
"gg"
[1,5,6,8,9,10,12,13,...].
[5,6,7,...].
[2,3,4,7,11],
convenience,
variable,
expressions,
"let",
e2,
follows.
legal
tokens
sequentially.
e1,
context
concept
e1
[0,0].
lefti.
[0,null,1]
[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
[1,null,1]
error,
loss
originally
unfortunately,
stop.
decision
existed.
descendants.
spreads
installed
shared
tie.
built.
(101)
request,
+----+-----+
case?
|7
stations.length
stations
10|
stations[i]
stations.
leaves.
coloured
[3,5,1,6,2,0,8,null,null,7,4]
[0,1,3,null,2]
faces
die
2021-01-06
time_stamp)
2020-02-01
datetime
time_stamp
+---------+---------------------+
[1,4,3,2,5]
[[0,1],[1,2],[1,3],[3,4]]
before,
want:
"2".
"16",
put,
forever
think
assumed
701
aa
"zy"
empty:
[-1,-1,-1,-1]
reside
employee's
toi.
requests.
employees.
(fromi,
toi)
concatenations
numerator
positive,
cases.
accepted,
things:
important
gain[i]
gain.length
[0,-5,-4,1,1,-6].
[-4,-3,-2,-1,4,3,2]
trip.
[-5,1,5,0,-7]
altitudes
biker
[0,-4,-7,-9,-10,-6,-3,-1].
altitudes.
seq
seq[i]
ranks[i]
hand.
rank,
rank.
"high
ranks.length
fibonacci-like
parents
stock,
times)
office.
2020-12-09
exits
office,
java,
unsigned
(also
compiler
unsigned.
implementation,
11111111111111111111111111111101
notation.
integer's
word2.
necessary).
arrives.
"eee".
goal.
+------------------+---------+
2.50
khaled
experience
[1,1,1,1,1,1,1]]
grid.length,
<=1
bottom)
[1,0,1,1,1,0,1],
1s).
(group
[[1,1,1,1,1,1,1],
[[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
[[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
(water).
[1,0,1,0,1,0,1],
[1,0,0,0,0,0,1],
s:
primitive
alphanumeric
preserved.
"1":
0-9
"132"
|2-7|
|2-2|
[4,7]
"()(()())"
depth("")
depths
depth(a),
"(()())"
vps's,
depth(a
a.length
vps's
vps)
vps
")")
depth("("
depth(s)
vps.
depth(b)),
max(depth(a),
vps's.
(denoted
s[5]
s[3]
'z'.
h.
last,
center,
procedure
[1,1,1,2]
[1,1,1,1].
[2,1,4,3]
list's
largest.
idle
do,
[0,2,3,1]
bit,
[0,1,3,2]
letters.length
'f'.
letters[i]
beginning.
take,
[2,2,2],
[1,6].
(-5)
(-6)
[13].
natural
arr2.
wooden
photo
rod
"110"
0.25.
serve
volume
successful.
[5,1,3],
[3,1,2],
strengths
success
[2,0,2]
j:
incrementing
callcount
rectangles.length
li,
rectangles.
rectangles[i]
rectangles[i].length
[2,3,1],
visible.
spans
photo.
hits
corners
[5,2],
ie.
[[7,
solution(int
likely
min(105,
["solution",
pick.
store.
section)
height.length
height[i]
(blue
[4,3,5]
num[3]
[1,2,3,null,4],
neighbors.
encoded.length
perm.
encoded[i]
perm[i
mass
either.
mass,
35,
category
hi]
hi
[16,
circles
green.
[2,1,1,2]
[0,0,0,0,0]
3!
n!
leave.
[[10],
maximizes
pref
longer,
"110100010"
1000000000
situated
displays
'0',
'3',
"0102"
invalid,
'1',
[2,2,2,3,3]
51
chars.length
chars.
(each
proper
"bba"
ordering.
ties
1}
coefficient
["e"],
ignoring
heaviest
[2,4,1,1,1]
folder.
paths,
subfolder
identical.
"/a"
deletion,
subfolders
identical,
folders.
"two",
likes
q,
"100",
4321
[3,1,2,0]
[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
scores.length
scores[i]
"abe",
x[i]
"cad",
"bae",
y[i]
order)
nums.length)
nums[n-1],
rotated.
nums[k-1]]
[0,1,2,4,5,6,7]
nums[k+1],
valid:
selections.
chef
waits
5.00000
[arrivali,
preparing
arrivali
distance.length
distance[i]
85
mathematical
movies.
5]]],
movie,
int[][]
rented
finds
carries
search,
list<integer>
search(int
movie.
1]]
5]]);
permutation.
[1,1,5]
tiles.length
tiles[i]
188
tiles,
index=2
coordinates.length
black.
white,
"first
"alice
rock
[1,2,3,3,3].
products.length
products[i]
key's
will:
quotation
123.
[1,0].
like.
finishing
leftover
4421
234
holds.
blocked.
squares.
yi).
ty
million
y).
tx,
[[0,1],[1,0]],
sy,
sx,
self-loops.
disconnected.
"hh:mm",
"hh:mm"
23:59.
23,
00:00,
'?'.
'7'.
'2'.
half:
win.
"abcdefg",
"aaaa",
jumps.
obstacles.length
obstacles,
obstacles[i]
[0,1,2,3,0]
")()",
"(())())))"
"))())("
'))',
"()))"
closing
'))'.
"())",
"(())))"
"())"
'))'
"())(())))"
matching.
"(()))"
bloomed
[1,4,3],
[1,2,3,2],
grows
huge,
compressed
piles.
anymore.
prefix,
definition.
videos,
signal
function).
matrix)
exams.
diagram,
student,
shouldn't
banned[i]
library
commas,
"1.0",
2-dimensional
anti-clockwise
"hasnext",
"hasnext"]
blue)
[7].
red)
lying
choice.
incurred
rooting
nums[5],
[2,3,2]
computer.
processes
[0,2,1,3]
middle,
parts:
calculation.
(bitwise
'|'.
startvalue
[1,-2,-3]
)
iteration,
iteration
"xyz"
"query",
"query"]
(one
positions[i]
map,
4.00000
positions.length
[2,2,3,4]
triangles
(using
relations
group.length
group[i]
procedure.
party
right:
party,
skipped
appearance
partial).
soldiers
recipes.length
["bread","sandwich"],
"bread".
ingredient
["bread"]
recipes.
ingredients[i].
recipes[i].length,
"yeast"
ingredients[i][j].length,
supplies[k]
[["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]],
["bread","sandwich"]
supplies.length
ingredients.length
supplies[k].length
["bread"],
ingredients[i][j],
recipe
[["yeast","flour"],["bread","meat"]],
ingredients[i].length,
"sandwich"
"meat"
"bread"
["bread","sandwich","burger"]
["bread","sandwich","burger"],
recipes[i],
[["yeast","flour"]],
["yeast","flour","meat"]
"flour".
["yeast","flour","corn"]
recipes,
combined
"sandwich".
ingredients[i]
arr.length).
flips.
3):
[3,2,1],
[3,2,1,4]
4):
erased.
images.
ranking.
resolved.
t=0,
40,
milliseconds.
requested
methods:
count()
"set",
t=200,
[1,1,3].
base-10.
part,
"xy".
x)
x-coordinate
"oo"
"t"
pattern,
"foobar"
absent
eligible
late,
award
('l')
absences
late.
absent,
absent.
'l':
'p':
'p'.
late
('a')
award.
"cdb"
secondword.length,
firstword,
targetword,
targetword.length
targetword
firstword.length,
"021".
secondword,
letter's
firstword
secondword
option
occur,
"eee",
replacements
3000].
[1,3,null,null,2]
north.
position:
performs
stands
east.
y-axis.
instructions[i]
west.
instructions,
instructions.length
departure
departs
substrings,
problem",
+-------------+
hp
info
join
buyer_id
order_id
seller_id
lenovo
decreasing,
[5,4,3,2]
infinity.
count:
ball's
factory
"ababc",
"happy"
layout
distinct).
[3,3,7]
4-queens
"000".
"00000".
journey
ladder
ladder.
bricks.
wordlist.
"aaabbbcc"
ignored).
'c's
"aaabbc".
"ceabaacb"
"aaabcc".
"eabaab".
[3,2].
rearrangement.
[5,4,3].
[1,null,2]
01,
[1,1,1,0]
[1,0,0]
"aaabbb"
day:
above).
permutation,
[i
(underlined
("ab",
s)
[""]
0.33
exceeds
transaction.
including)
comma-separated
[3,2,3]
[2,3,3],
present,
three,
molecule.
threads.
worry
words:
prerequisite
prerequisites
independent.
c1)
c2)
[2,3,4,5]
"ll",
[2,4,3],
forgot
supposed
procedure:
loops/recursion?
[3,5,6]
63
subsequences,
look
[1,1,0],
parent[0]
cycles)
parent.length
parent[i]
secret,
winning
[4,2,1]
seventh
00:00
cases,
arr[left...right]
[1,3,2,5,3,null,9]
extending
non-null
records
visit.
199
[3,7,11]
[1,1,3,3]
unique,
filtered
firstindex(n,
[20,30]
filtering
[-2,0,1,2]
30]
falsey
truthy
fn);
[0,10,20,30],
filter(arr,
[-2,-1,0,1,2],
greaterthan10(n)
array.filter
[[0,0,0],[0,1,0],[0,0,0]]
(list)
callback
there're
grid[i
grid[i][j
maria
+-------------+--------------+--------------+-------------+
2020-03-01
2020-02-11
+-------------+--------------+
james
user_id)
2020-02-25
2020-02-17
+--------------+
33.33
200))
dog
((5
"bb".
"cbbd"
teacher
diagonals.
memoized
before.
[8,1]
cached
vertex,
uncolored
purple
centered
shifts.
answering
questions.
[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
"acb".
contains.
remove(key)
"remove",
add,
hash
folder,
weight,
min(200,
(ai,
abbreviated
[2,2,2,2,2],
groups:
plants.
1)th
pressed
'7'
logs[i].length
employees,
[5,3,2]
index2
index1
clear,
quote
interfere
(here,
","
",
implicit
effective
bolded
c;
source[i]
c++
testing
pairs:
(0,4),
(1,3),
(0,3),
buses
-8
sentences,
single-space
plots
[-3,
[5,1]
|arr[j]
11],
m|
|arr[i]
((4
83
[2,5].
possibilities,
cases:
[3,1,2].
sign,
1))
"1".
si
s4
xi+1
[1,2,3,4,5,6,7,8]
there?
[[1,2,3],[4,5,6],[7,8,9]],
"aebdc",
"aebdc"
210].
solved,
4|
|4
|3-3|
|5-3|
|10-9|
song
odd-numbered
["abcd"]
"abcd".
answer[2]
sums.
problem:
cycle.
diagrams
(empty)
walk.
(0,2)
obstacles.
'n',
"nes"
'w'.
"nesww"
path[i]
(0)
subarrays:
[1,2,3,4,5,10],
[11].
nums[starti]
requests[1]
[2,1,3,4,5]
[[1,3],[0,1]]
[19,18,10].
[3,5,4,2,1]
nums[endi
requests[0]
nums[starti
nums[endi].
[4,10,5,3,2,1]
[[0,2],[1,3],[1,1]]
[6,5,4,3,2,1]
[4,1,2]
arr[0].
comprise
amy
managerid
102
dan
+----+--------+
[[2,1],[3,2,5],[5,4]]
j=1
trees[1],
[[3,2,5,1],[5,4]].
bst,
grandchildren.
[[5,4],[3]]
trees[1]
[[3,2,5,1,null,4]].
trees[0],
performed,
trees[1].
trees[0].
[3,2,5,1,null,4]
[[5,3,8,2,6]].
[[5,3,8],[3,2,6]]
property:
trees[j].
bsts.
trees[0]
trees[j]
income
account.
-99
[1,2]:
[3,2,5]
[1,2,3,2]
prices,
amount)
sale.
(price
((100
amount.length
purchased
bill
prices[i].
bought.
insertion,
get,
attribute
get(int
attributes:
["a"]
"()",
command,
"g",
'='.
equation,
solution"
100]
describing
[ri,
extract
ci
parentheses.
333
'f',
mouse.
occupies
walked
'm',
cols,
bash
[[0,1],[0,2],[1,2]]
(10000
10)
8000
7000
drawing
gains
0.60000
plays
card,
draw,
val2.
[1,4,3]
distributed
colors:
('0'
wish
};
50);
thrown
resolve,
promises
rejected
function's
cancelled,
increment.
quick
fox
lazy
'z')
'f').
brown
batch
2nd,
serving
high,
"ee"
96
[1,0,0,0,1,1]
[1,0,0,1,0,1],
newly
sentence"
-200
convex
collide.
3/1
[5,5,5].
obj
street,
placed,
|3-5|
result[0]
result[1]
|5-5|
[4,1]
descendants
300].
"9"
record.
[-3
["5","-2","4","c","d","9","+","+"]
-2].
-4].
invalidate
"+"
operations[i]
["1","c"]
["5","2","c","d","+"]
104,
"-2"
"+",
15].
"sad"
element)
t2
depth.
answered
(3)
(3,4,5)
yj]
xj|
|xi
|val|
manhattan
used,
creating
"6777133339"
largest,
"777".
"2300019"
"42352338"
"333".
"777"
[15]
course,
100th
continuously
durationi
times[i]
send
times.length
times[i].length
6000
quantity,
2011
sold.
(sale_id,
sale_id
nokia
year)
2009
2008
+---------+------------+------+----------+-------+
s[4]
'1's.
locked
unchanged
queen
'q'
kthlargest.add(5);
[4]]
kthlargest.add(10);
"add"]
kthlargest(3,
["kthlargest",
kthlargest(int
kthlargest
kthlargest.add(3);
kthlargest.add(4);
kthlargest.add(9);
capital,
sequences.
listnode
(id,
meir
"00100",
[4,1,2,3]
"1101",
100000
+-------------+----------+
hercy
employee_id.
rounding
1024
labels:
bookings,
seats:
[[1,2,10],[2,3,20],[2,5,25]],
bookings[i]
[[1,2,10],[2,2,15]],
seatsi
bookings[i].length
lasti
[10,25]
seatsi]
reserved:
bookings.length
[10,55,45,25,25]
lasti,
[[1,1],[2,3],[4,2],[1,2]]
kith
["2","3","1","4"].
"02"
[[2,1],[2,2]]
trimi].
["24","37","96","04"],
trimi
["02","73","51","14"].
["102","473","251","814"],
remain.
radix
problem?
251
[ki,
["4","7","6","4"].
[2,2,1,0]
num1,
0011
uniquely
d.pop()
d.push(21);
[[2],
﹈
dinnerplates
d.push(20);
d.push(3);
d.push(2);
[20],
d.popatstack(0);
dinnerplates(2);
dinnerplates(int
now:
capacity)
popatstack(int
["dinnerplates",
popatstack.
[21],
"popatstack",
d.popatstack(2);
d.push(4);
d.push(1);
d.push(5);
30);
|6
orders:
trip,
starti,
3x2.
2x1.
[[1,0,1],[1,1,0],[1,1,0]]
1x1.
[[0,1,1,0],[0,1,1,1],[1,1,1,0]]
1x2.
3x1.
2x2.
1x3.
school
students[i]
[1,1,1,0,0,1],
students.length
[0,1,0,1]
→
[4,2,3,7,2,1,4]
elements'
[2,4,2]
elements),
goal.length
modifies
[1,4,2,3],
directly,
[[],[0]]
set).
subsets.
[4,4,4].
solutions:
together,
cup
33,
quarter
equally,
(which
[1,7],
[1,1,6],
f(3)
[[1,3]]
connections.
network.
garden,
[4,2]
[7,1]
abs(0
abs(4
[1,2,3,null,4]
"26"
"*"
grouping
"aajf"
"11106"
"kjf"
ways).
"h",
"06".
"8",
into:
a-z
"06"
decoding
mapping:
represent.
06)
"(())"
(a)
"()()"
rule:
cousin
[0,0,0,7,7,null,11]
cousins'
[5,4,9,1,10,null,7]
[5,7,7,8,8,10],
-1].
"10011",
"234",
"345",
"012345":
"01100"
"345"
incorrect.
unlocks.
safe.
4096
peculiar
"012",
password:
"11001"
recent
column(0-indexed)
colsum[i],
colsum.
[[1,0,1],[0,1,0]],
[2,2,1,1]
upper.
[[1,1,0],[0,0,1]]
[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
lower.
[2,1,2,0,1,0,1,2,0,1]
[[0,1,1],[1,0,0]]
0-th(upper)
1-st(lower)
winston@leetcode.com
david69@gmail.com
(upper
jonathanisgreat
underscore
e-mail
'@leetcode.com'.
#
mail
sally.come@leetcode.com
sally
shapiro
marwan
'_',
.shapo@leetcode.com
bella-@leetcode.com
quarz#2020@leetcode.com
annabelle
domain.
dash
+---------+-----------+-------------------------+
[1,3,2,5],
root2.
[3,4,5,5,4,null,7]
[2,1,3,null,4,null,7]
[1,2,1,2,6,7,5,1],
[1,2,1,2,1,2,1,2,1],
floor(nums.length
[0,3,5]
dashes
[[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
[3,1,2,4,5],
[3,4,5,6]
fallout
"12:00"
purpose
engraved
stage).
button.
spelled
"ddinggo".
(next
ring"
spell,
stage
key[i]
"freedom
spelled,
ring.length,
keyword.
"gd"
pressing,
door.
key[i].
spelling.
"godding"
key[i]:
metal
quest
dial
freedom"
"road
"godding",
arr[i-3]
arr[1])
k-increasing,
arr[i-k]
suboptimal
[2,2,3,4,4].
[4,1,5,4,6,5].
arr[i-2]
arr[3]).
[4,1,5,2,6,2],
["1","1","1","1","0"],
'1's
["0","0","0","0","0"]
["0","0","1","0","0"],
["1","1","0","1","0"],
(water),
["1","1","0","0","0"],
["0","0","0","1","1"]
array.map
returnedarray[i]
resides
[42,42,42]
map(arr,
i;
constant()
plusone);
plusi(n,
[10,20,30],
notes:
[-1,-2],
[1,-2,1],
"aaabbbb"
jewels.length,
jewels,
jewels.
[[0,0,0],[0,1,1]]
selected.
[[0,0],[1,1],[0,0]]
work.
url
url.length
'c'].
"abcbabcbcb"
["aba",
(string
"ababbc"
"cac",
"cbc"].
"bac",
[-2,-1,3,4],
[2,-1,3,4],
[8,6,2,4]
[vali,
[-2,-1,3,6],
[[4,0]]
indexi].
indexi
nums[indexi]
vali,
[2,2,3,4],
[[1,0],[-3,1],[-4,0],[2,3]]
rounds,
[2,2,3,3,2,4,4,4,4,4]
[7,4,9]
[6,5,4,3,10]
illegal
[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
[["1"]]
[["0"]]
"cc"
scenarios,
"aacc"
"abbacc"
"leeeetcode"
[3,1,2,10,1]
1+2,
sum(nums[0]â€¦nums[i]).
1+1+1,
[3,4,6,16,17]
[1,3,6,10]
runningsum[i]
1+1,
1+1+1+1+1].
1+2+3+4].
1+2+3,
1+1+1+1,
sell_date
num_sold
2020-05-30
market.
(mask),
activities:
basketball,headphone,t-shirt
t-shirt),
headphone
(headphone,
basketball,
bible),
bible,pencil
2020-05-30,
2020-06-01
bible
+------------+----------+------------------------------+
2020-06-02,
sell_date.
comma.
2020-06-01,
(pencil,
2020-06-02
patches
patch.
[1,5,10],
add/patch
firstplayer
(player
lined
over,
competes
(ascending
winners
secondplayer,
firstplayer,
participating.
secondplayer
2a
special[i].length
1b,
offers,
2b,
1c,
2b
needs.length
needs[i]
special[i][j]
offer.
2a.
[[3,0,5],[1,2,10]],
array)
[[1,1,0,4],[2,2,1,9]],
1c.
price[i],
1b
sell.
(special
offers.
1a
2b.
#2),
offer
3a
,2b
buy.
special[i][n]
0b
#1),
[0,10,14,22]
leftsum[i]
[15,11,3,0].
0|]
3|,|22
leftsum
rightsum[i]|.
15|,|10
[15,1,11,22].
rightsum[i]
rightsum
11|,|14
[15,1,11,22]
[|0
|leftsum[i]
[10,4,8,3]
circular,
[7+1+4,
[12,10,16,13]
code[0],
5+7+1].
defuse,
4+5+7,
4+2,
informer
around.
[3+9,
out!
code[i]
[12,5,6,13]
[5,7,1,4],
code[n-1]
code[0]
code[n-1].
bomb!
negative,
[2,4,9,3],
-(n
1+4+5,
9+4].
"1101110010111011110001001101010111100".
505379714
505379714.
118505380540.
"11011",
[[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
[[5,3],[4,0],[2,1]],
movecost
movecost[i][j]
movecost.length
[[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
[[5,1,2],[4,0,3]],
movecost[i].length
"ll.rr.llrrll.."
fallen
".l.r...lr..l.."
upright.
sides,
"rr.l"
forces.
expends
purposes
postorder.length
postorder[i]
[1,2,4,5,3,6,7],
[4,5,2,6,7,3,1]
"ccaccbcc"
"ccbccacc"
encrypter.encrypt("abcd");
out,
"am".
"abad"
decrypt(string
'd'],
decryption.
encrypter
dictionary[i],
"cbad",
"adbc",
"am"
["ei",
word1)
[[['a',
["eizfeiam"]]
"eizfeiam".
word2)
"abad"]],
"encrypt",
encrypter(char[]
decryption
encrypt(string
encryption
"eizfeiam",
"zf",
"zf"
"cadb",
encrypter([['a',
encrypts
values[i].length
carried
encrypter.decrypt("eizfeiam");
encrypted
"am"],
"cbcd".
"badc",
"abad",
["encrypter",
["abcd"],
"dacb",
"abad"]);
"decrypt"]
"ei"
piles[i].
palindrome.length
"zbccba",
"aaccba"
"aaccba",
"abacba".
matrix's
added,
tracks
called,
locations.
divisors,
distinct)
chessboard,
occurrences.
(0).
2019-08-02
viewed
2019-07-21
origin,
moves.length
moves[i]
origin.
elevation
bus.
passenger
bus,
why
capacity,
passengers
660.
[1,4].
122
strs[0][1]
"vyz"].
deletions,
(strs[0][0]
["bef",
["abcdef","uvwxyz"]
3},
strs[0]
answer.length.
strs[1]
on).
overlaps
[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
picky.
member
books
layer
layers,
map.
[[1,1]]
arr[1],
game:
"11101",
[1,0,3]
queries[1]
queries[2]
[0,5]:
queries[0]
[0,2]:
|4-5|
queries[3]
[1,3,4,8],
[4,3],
find(int
looks
row2
row2,
row1,
col1
col1,
row1
like:
col2
maxsum.
maxsum
color,
balloon
colors[i]
colors.length
types,
[1,1,2,3]
types.
(since
2500
'm'
'm'.
package
[0,1,2,3,4]
decrement
indexes
maxsize
multi-dimensional
iterates
maxnestingdepth
mid,
mid
painted.
endi,
12)
factors.
12],
"99",
"1010".
+-----------------+
2019-01-07
130
elvis
140
[1,1,2,2,2,3]
execute.
[startrow,
startrow,
startpos
left),
"u".
array).
nums[i+1])
newnums[i]
newnums
newnums.
depicts
moves:
[starttime,
endtime)
pointer.
reserved.
reserved,
adjacent,
[3,8]
spots
pixels
"abcdefghijklmnopqrstuvwxyz"
numarray(int[]
5]]
numarray.sumrange(0,
"sumrange",
"sumrange"]
numarray
nums[right]).
sumrange.
["numarray",
-3]
nums[left
sumrange(int
nums[left]
nums[2
[3,2,0,1]
answer[x]
definitely
logically
floating-point
256
chunks,
partitions),
chunk.
change,
$15
broken,
+----+---------+
one's
non-negative.
pattern.length
carpetlen
115
2019-03-31
2019-02-17
230
15)
periods.
(product_id,
o(log(n))
a2,
[5,7,5]
[5,2,3]
[[1,0,1],[0,0,0],[1,0,1]]
contents
202,
operation).
).
(
400ms.
met.
functions.
job.
"abcabc"
"abcab",
scenario.
16],
16);
language,
order.length
company's
"bcb"
lot
key.length,
stamps
foo
value.length
"111",
1/6
knight's
eight
updated
change.
root2,
a:
c:
parameter
console.
prints
printnumber
255
(0,0),
(0,2),
(1,2),
(1,0),
[[0,0,0],[0,0,0],[0,0,0]]
picture
[4,2,7,1,3],
123,
ignore
non-digit
"42"
words"
dates.
special,
jumping
...)
5th,
optimally
minimized
ordered.
via
differences,
|8
[[1,4],[2,5],[3,6]]
y]
y],
["hello",
arr[j
probability.
seat,
seats.length
traveled
ride.
ride
salary.
this.
"sea"
"sea",
"eat"
["a","aa","aaa","aaaa"]
xy
brick,
"leetcode.com"
width.
y-axis
220
(1,7),
grid[i][j],
floor:
orderings
(row
[3,9,20,null,null,15,7]
-2:
-1:
col),
days[i]
days.length
sub-arrays.
(16
[7,7,7,7,7,7,7]
stonevalue.
stonevalue.length
stonevalue[i]
lets
row),
dots
["a","b","c"],
{a
orders.length
orders[i].length
else,
amounti
"abc
exceeding
600
nums[0].
nums[n
month.
yyyy-mm-dd,
8],
fee.
sum(paths[i].length)
content
files
content.
scores,
island.
island,
29,
5*3
bi-directional
(1,1).
(0,1).
(4,4).
(2,4),
(this
connections[i].length
50000
york
counterclockwise,
exists)
[[1,0,0,0],
inner
expression[i]
'!',
'|',
','.
time.length
s[j]
']',
'}',
'{',
search.
comparing
arrive.
flowers,
days:
12:
function_id
recursively.
[1,2,3,4,5,6,7,8,9,10],
[2,3,4,5],
"abcabcabc"
arr.length,
[0,3]
army
unmarked
elements:
it:
activity_type
inclusively.
list2.
100.0
[1,4,2]
speed,
0.6
0))
warehouse,
puts
8);
leetcode"
(non-empty)
restrictions
[0,1,2,3,4,5],
example).
[1,3,5,7]
[1,3,1,2]
instructions.
upper]
[-2,
[lower,
hidden,
nums[j]|
"h"
[0,0,0],
[3,4,5,1,2]
cubes
face
[[2,2,2],[2,1,2],[2,2,2]]
"baab"
48
traversing
4]]
15]
!==
transforms
arr1.length
>.
[3,2,2]
(xj,
inside.
circle,
permute
[2,3,6,7],
(3-1)
(4-1)
nums1[2]
nums1,
nums1[3]
sentences.
"the",
"what
"is"
grid[r].length
[positioni,
x-axis,
positioni
fruit
[-1].
$100.
[-1],
list2.length
ball.
[-1,0],
manages
[[5],
{};
func
number)
0's).
"01".
asteroid,
asteroids.length
asteroids[i]
date.now();
200ms.
roads.length
(0,3)
roads[i].length
roads[i]
country.
"leetcode
[0,2],
"ababa"
[1,2,3,7]
"day"
engineer
x=5,
inputs:
(bst).
tournament,
ages.length
ages[i]
bound
bonus.
vals[i]
vals
vals.length
path).
+---------+
math
[x1,
"of",
"aaab"
[10,11,12]
action
timei]
xj
"y"
statement.
index:
"abca"
[nums[i],
partition.
r)
"bob"
person's
fill.
fill,
[1,null,3]
preorder,
dec
jan
't'.
subordinates.
subordinates
relationships
[3,2,2],
indices[i],
(but
[9].
occurred
original.
2k
answers[i]
parameters
terms,
inputs.flat().length
inputs[i][j]
efficiency
free,
warehouse
"bab".
specify
customer's
score[i]
mines
mines.
('1'
constructs
arriving
"insert",
'v',
ix.
numeral
numeral,
1994
900,
iv.
xii,
(50)
cm
iiii.
(500)
ii.
(1000)
xxvii,
principle
"mcmxciv"
numerals
xx
xc
"lviii"
usually
nine,
-9
[1,2,3,6]
staircase.
cost,
9999
(every
tells
train
kilometers
0.66667
[1,0,48,null,null,12,49]
[4,2,6,1,3]
alternating,
"1110"
"0100"
alternating.
destination,
drive
miles
[1,3,5,4,7]
s[k]
[7,6,8]
starttime[i]
starttime.length
endtime[i]
endtime.length
red.
viewing
increased
[1,3,4].
"example
through,
tree's
cell).
trees,
4]],
(4,4)
[7]]
nums2)
4]);
(5,3),
(5,4)
quantities
heighti]
heighti
then:
everybody
properties
manner.
"()".
[[0,1],[1,1]]
satisfied,
nums[index]
distributions
input,
cherries
cherries,
111,
val]
freq
selection
"123".
number.length
y|.
|x
2-
1-
3-
guesses.
guessed
vj]
guesses,
uj,
[0,4],
endi.
25).
[6]
earned
[[1,1],[2,2],[3,3],[4,4],[5,5]]
["leetcode"],
advance.
$11
travel.
1100
seem
leaf.
(0,0).
(1,2).
monitor
words[j].
"k"
"ea"
s[i+1]
first:
third:
second:
union
"aaaaaa"
graph[i].length
graph[i][j]
ans[0]
ans[1]
range,
(2,1).
9:
65
achieved.
[1,3,1],
"abaca",
returns:
long.
took
matches.
(3,1)
wins,
expressed
[2,0,1]
closer
winner.
forest.
accounts[i][j]
accounts.length
accounts[i].length
scheduled
serialized
dollar
$6
retrieves
remaining,
joined
unlimited
interface:
looking
isfull()
isempty,
isempty()
isfull.
"isfull",
[[3],
"x",
earned.
frequently
axes.
programming
home,
121,
92
[[1,0,0],[0,1,0],[0,0,1]]
bst's
coli
[[4,
1400.
aware
2568.
307.
2-row
67.
2108.
1104.
730.
869.
1700.
tables
602.
patching
537.
buddy
1170.
1286.
542.
3sum
1330.
773.
1450.
1323.
1622.
871.
606.
day?
validate
taxes
1510.
69.
2596.
1621.
1401.
brainpower
520.
1593.
1432.
1871.
648.
tiling
1728.
2540.
66.
993.
515.
1734.
2582.
2552.
795.
535.
154.
1504.
872.
2561.
1054.
1041.
1075.
croaking
2501.
610.
1832.
1116.
968.
1626.
180.
1627.
825.
1653.
2543.
740.
1808.
2119.
895.
567.
1103.
1325.
1073.
2223.
543.
1472.
1846.
77.
2610.
2406.
2536.
584.
1096.
2111.
784.
607.
1425.
suggestions
clone
72.
1407.
965.
1830.
92.
2315.
1732.
conflicts
1803.
2423.
2319.
1629.
638.
2434.
1663.
779.
1297.
863.
additions
1807.
151.
1252.
1032.
2328.
629.
2216.
1835.
2127.
1556.
1465.
1590.
2585.
toeplitz
1376.
881.
523.
2635.
1416.
2215.
894.
617.
39.
1206.
2241.
1139.
504.
1108.
2304.
2612.
771.
1922.
2583.
173.
1563.
2227.
negations
1242.
2124.
517.
2556.
697.
1546.
2336.
1557.
1392.
886.
559.
836.
815.
1725.
834.
1899.
301.
81.
1894.
1419.
lisp
820.
1748.
1391.
1617.
1569.
vii
1315.
1287.
2605.
1339.
1403.
1462.
1722.
650.
1683.
2144.
1484.
1039.
1661.
1526.
1703.
530.
2606.
2212.
786.
1656.
analysis
193.
1594.
781.
639.
522.
991.
1342.
restore
2424.
centre
174.
1110.
897.
332.
1736.
2338.
1573.
1822.
824.
2129.
82.
1195.
2412.
2633.
1292.
2145.
989.
1301.
1943.
2438.
1329.
1562.
2293.
1815.
extracted
buzz
843.
actors
categorize
160.
524.
1397.
1311.
961.
649.
straights
echo
1217.
1446.
898.
1802.
887.
1210.
1106.
609.
1138.
1824.
1503.
798.
2602.
2258.
2628.
957.
floored
1262.
995.
1829.
503.
1137.
1521.
1394.
1914.
1686.
1320.
330.
1537.
769.
2295.
1006.
1131.
1850.
1606.
875.
1816.
818.
ordinal
2572.
2623.
696.
2569.
chunked
1898.
1359.
1025.
958.
2294.
1572.
868.
1028.
341.
2560.
sender
998.
2517.
1051.
829.
640.
703.
1833.
decompress
835.
726.
725.
689.
1043.
travellers
595.
637.
1609.
2141.
538.
2231.
1585.
1052.
1610.
849.
2617.
1801.
univalue
justification
prototype
627.
2649.
2535.
178.
1248.
2650.
1333.
1438.
687.
1530.
2146.
990.
62.
1353.
1582.
2242.
564.
2541.
1318.
1221.
980.
560.
739.
1638.
1839.
992.
comparisons
969.
1517.
810.
(atoi)
1834.
194.
3-same-digit
1021.
767.
880.
865.
1704.
1615.
curry
749.
2529.
959.
1879.
2642.
1631.
1742.
985.
2150.
528.
1374.
1278.
1560.
974.
2437.
mismatch
splitted
2427.
1524.
973.
855.
length-3
1424.
2343.
183.
diminishing-valued
2285.
1857.
2302.
661.
52.
2259.
1037.
1291.
1601.
645.
988.
710.
172.
1357.
1455.
2281.
2296.
1405.
1818.
1223.
954.
1528.
1926.
848.
thousand
197.
2264.
1012.
1125.
1514.
loud
toe
187.
1600.
2558.
847.
996.
327.
680.
1280.
2255.
connectivity
575.
2440.
2549.
bipartite?
2208.
185.
1-bordered
subdivided
1209.
1402.
1640.
735.
1420.
48.
1385.
866.
1169.
2542.
632.
873.
1587.
1707.
appropriate
2249.
1745.
1309.
2347.
solver
2337.
reflection
stacking
1498.
1673.
1711.
2584.
1317.
1084.
durations
2574.
599.
human
860.
countries
61.
1406.
550.
722.
1008.
2312.
2303.
pyramid
2433.
1581.
191.
scheduling
2646.
2120.
web
2316.
1200.
1668.
1678.
2611.
1338.
2644.
1670.
1904.
1527.
1721.
trainers
952.
equalize
2614.
1092.
2631.
963.
1717.
2201.
884.
2321.
1124.
1873.
189.
2225.
312.
757.
2133.
1346.
2401.
853.
589.
2641.
1382.
1566.
abbreviating
2332.
1946.
1172.
668.
2576.
supersequence
2274.
1603.
858.
335.
1743.
1251.
substitutions
732.
2335.
incremental
641.
2554.
811.
2637.
1114.
1071.
1276.
1004.
852.
1864.
1870.
715.
1947.
2218.
1934.
2648.
55.
664.
844.
1578.
2601.
bbb
1247.
2587.
2545.
675.
823.
1448.
1091.
1523.
319.
verify
distant
edit
1345.
688.
1348.
1646.
2140.
98.
1235.
dependencies
1263.
583.
1156.
83.
2407.
2639.
623.
1464.
344.
1328.
518.
1061.
979.
2269.
2630.
171.
2449.
1558.
802.
1605.
2245.
existence
1599.
1739.
1574.
318.
1431.
1630.
978.
594.
1-bit
2627.
h2o
783.
1938.
2622.
1637.
1652.
wiggle
322.
2527.
2276.
342.
basic
2287.
600.
91.
k-group
813.
2645.
1632.
754.
1411.
2232.
2447.
vegan-friendly,
89.
501.
1696.
788.
2236.
1208.
1813.
1547.
negabinary
706.
1122.
819.
821.
1144.
896.
1053.
n-th
1929.
665.
1880.
720.
2600.
1442.
1354.
1674.
1625.
1314.
552.
508.
reinitialize
summary
1577.
633.
892.
1030.
870.
fizz
2538.
1396.
1447.
797.
805.
561.
1190.
1729.
2286.
1921.
mutated
transition
981.
1001.
828.
845.
1665.
679.
1812.
1859.
1254.
1712.
1148.
2135.
960.
622.
88.
1332.
983.
195.
2273.
preimage
2443.
1591.
1643.
2626.
1023.
1157.
198.
1031.
570.
717.
2413.
2101.
837.
colorful
1856.
1074.
46.
1486.
1014.
2116.
647.
2588.
1368.
1443.
1255.
destroying
2283.
2239.
investments
1414.
aaa
874.
1689.
1316.
2594.
past
judgement
1470.
1423.
2551.
1452.
833.
1642.
2279.
1456.
2327.
1932.
expressive
2430.
1393.
1568.
1905.
790.
1111.
2148.
1201.
1413.
2288.
1552.
1189.
2618.
169.
652.
1878.
2320.
1130.
529.
701.
1941.
1363.
984.
168.
2341.
1492.
167.
502.
1690.
1658.
1249.
539.
1128.
1737.
1140.
1611.
181.
enclaves
1250.
724.
1620.
2251.
861.
507.
86.
2270.
1805.
1861.
ii:
785.
inequality
1616.
1117.
2342.
756.
846.
1915.
1174.
1719.
1341.
1049.
1662.
1695.
188.
race
541.
893.
721.
1837.
1284.
2564.
766.
746.
summing
zero-filled
826.
1576.
655.
1362.
1496.
2615.
1697.
1141.
590.
2211.
?'s
2523.
1261.
2518.
347.
ambiguous
2325.
350.
similarity
filesystem
1277.
1047.
328.
2115.
2577.
2224.
514.
753.
dinner
1881.
608.
2344.
791.
2442.
1378.
885.
1575.
1226.
1219.
794.
earning
2284.
891.
1866.
2217.
n-repeated
1089.
reducing
2446.
994.
1433.
2114.
1457.
1222.
1494.
2516.
2421.
1518.
trapping
1828.
odds
729.
1735.
2562.
1377.
1203.
2515.
877.
1220.
1655.
1387.
2289.
718.
563.
712.
2322.
1706.
1817.
1331.
1224.
2625.
2210.
1146.
2272.
1845.
2250.
175.
540.
2301.
1449.
1907.
87.
304.
losses
601.
colony
2103.
4sum
977.
2598.
1525.
bigram
1381.
1671.
768.
1081.
1480.
1191.
1115.
671.
1489.
628.
2578.
2280.
812.
832.
1042.
2566.
provinces
686.
1718.
1478.
643.
1326.
987.
2299.
677.
stairs
states
1179.
1862.
878.
1313.
2226.
1094.
1945.
164.
839.
brace
1727.
1877.
809.
684.
2121.
appearing
1860.
975.
1493.
1080.
1539.
2131.
1685.
707.
966.
840.
1044.
738.
1015.
1367.
2221.
1502.
572.
2243.
2106.
1048.
1475.
shuffle
1937.
1497.
817.
1046.
1281.
176.
1680.
1026.
intersections
803.
memoize
1334.
1389.
967.
2418.
1895.
598.
1024.
577.
tuple
592.
2149.
1410.
powered
801.
196.
1050.
2593.
2616.
1386.
745.
1079.
630.
1422.
1534.
84.
516.
2334.
1090.
1657.
685.
1027.
1356.
leak
2262.
spliced
k-th
586.
192.
1542.
691.
2634.
854.
2234.
gold
331.
2595.
1515.
657.
1289.
2104.
2240.
1177.
1713.
1720.
576.
822.
1659.
1909.
1260.
2528.
830.
2138.
1095.
777.
1347.
2117.
752.
674.
842.
1444.
1636.
982.
rich
57.
698.
1375.
53.
789.
672.
1865.
simplify
1395.
654.
1687.
876.
850.
slowest
1702.
regions
1178.
1639.
reversal
827.
2544.
stitching
1299.
506.
2405.
71.
2520.
1529.
2509.
526.
1883.
2202.
787.
658.
1705.
2425.
1608.
1948.
1253.
626.
976.
2409.
defanging
1884.
1268.
1633.
1418.
1844.
313.
2130.
58.
2448.
pooling
2331.
2350.
1019.
556.
1583.
859.
1903.
343.
2260.
2547.
2426.
1237.
714.
793.
1022.
2571.
1694.
1155.
1882.
1192.
1033.
713.
2309.
316.
85.
51.
2207.
1545.
1163.
565.
1749.
816.
2235.
1540.
1327.
315.
2530.
1679.
547.
1366.
1005.
951.
349.
1093.
1840.
1886.
1716.
1269.
2271.
2203.
1901.
1923.
transformable
2122.
1559.
78.
1302.
verbal
762.
1460.
viii
956.
2607.
1218.
1851.
521.
2506.
switcher
1040.
1009.
1619.
2511.
2592.
1896.
581.
841.
1070.
557.
2503.
1171.
1343.
1383.
962.
747.
1595.
masking
177.
2597.
2586.
2147.
670.
867.
2139.
65.
1267.
2441.
1298.
856.
rising
2220.
1240.
997.
690.
1561.
2102.
519.
165.
1512.
1351.
2508.
1544.
1283.
2531.
rotting
882.
1819.
659.
coloring
1931.
705.
69
2608.
1482.
1003.
667.
182.
1415.
multithreaded
2248.
2256.
1893.
1483.
1723.
2522.
2579.
1806.
2136.
1232.
1509.
1741.
2629.
2550.
2348.
1234.
1541.
1193.
93.
1158.
1204.
1002.
2513.
packaging
2326.
1337.
1823.
2416.
2570.
309.
879.
1109.
1584.
1129.
1187.
1439.
1154.
throne
lr
1641.
1324.
1068.
2318.
1888.
constrained
crawler
corporate
153.
1488.
1935.
1693.
743.
1321.
63.
1664.
669.
servings
1684.
orderly
1614.
2278.
1854.
2603.
764.
662.
1349.
1434.
682.
337.
2555.
306.
1900.
744.
814.
completeness
1233.
1604.
1290.
1239.
2435.
2125.
1453.
782.
1147.
k-subarray
1624.
1370.
551.
1589.
593.
748.
sheet
345.
partitioning
1925.
2640.
2439.
179.
778.
referee
2580.
1293.
587.
1887.
reduction
1471.
2591.
budget
152.
1731.
1944.
1227.
692.
1738.
1550.
2410.
1312.
1487.
2209.
1838.
1476.
1930.
cracking
1463.
1701.
1942.
1365.
155.
971.
1473.
2537.
605.
2404.
1361.
1592.
1491.
1890.
recurring
1029.
1520.
1409.
97.
1340.
2565.
862.
532.
1360.
1654.
1017.
2265.
1675.
775.
1451.
2632.
traffic
1038.
1726.
1744.
719.
1855.
1733.
709.
1535.
1513.
94.
770.
1185.
329.
1849.
310.
1911.
636.
2553.
699.
2619.
693.
838.
653.
955.
1481.
1649.
799.
731.
1390.
1436.
796.
2306.
1145.
identifier
erect
591.
reorganize
1588.
1319.
2621.
953.
mirror
2559.
1441.
1466.
1936.
2305.
1505.
1848.
sideway
freedom
2502.
2244.
864.
2267.
1266.
2126.
2512.
satisfiability
1078.
2567.
1184.
1304.
986.
2311.
334.
553.
1825.
728.
1310.
2206.
1399.
2419.
765.
2514.
889.
1847.
1681.
162.
1160.
1519.
1648.
bipartition
detonate
1688.
513.
1300.
1207.
1567.
1105.
2428.
1036.
780.
1437.
1461.
1579.
1928.
camelcase
1143.
1371.
plate
831.
1408.
1373.
2266.
1018.
1508.
585.
1863.
620.
dining
1045.
mk
1275.
2620.
1161.
970.
321.
2573.
2233.
1913.
611.
1531.
38.
directors
1750.
2261.
1306.
1910.
899.
1667.
1869.
2609.
deep
1352.
doubled
2563.
1897.
1417.
2624.
1876.
1553.
1710.
1072.
1162.
2290.
2575.
1358.
2132.
1598.
1912.
2-bit
2300.
2349.
2414.
1035.
bombs
2429.
566.
1186.
1916.
2109.
1404.
sqrt(x)
2507.
2415.
1669.
reward
scheduler
immutable
857.
1458.
2526.
univalued
eventual
1013.
79.
1499.
736.
741.
k-concatenation
621.
1927.
808.
2134.
2333.
678.
2317.
1211.
1889.
1672.
2402.
676.
illumination
804.
2222.
792.
1372.
stamping
2636.
1507.
883.
619.
2532.
2420.
303.
554.
972.
2246.
k-sum
1872.
509.
2643.
2525.
1034.
695.
1379.
2589.
tour
1920.
1010.
atoms
formation
bounded
2310.
166.
2521.
1007.
2110.
1380.
324.
1282.
1388.
1295.
964.
2546.
888.
2432.
646.
2411.
1335.
1691.
1827.
2444.
1296.
1020.
558.
1305.
1238.
1344.
1175.
806.
1164.
2581.
grids
1647.
1477.
525.
2257.
1467.
1016.
1814.
options
2105.
733.
1906.
1307.
511.
1288.
338.
1536.
704.
336.
761.
851.
1123.
texts
2213.
parsing
2275.
preferredj)
roomidi,
[2,4]:
[5,2]:
[[2,2],[1,2],[3,2]],
abs(3
minsizej
minimized,
preferredj
minsizej].
[3,1]:
minsizej,
sizei]
sizei.
abs(id
sizei,
[[2,3],[2,4],[2,5]]
hotel
[3,-1,3]
[roomidi,
[[1,4],[2,3],[3,5],[4,1],[5,2]],
roomidi
[3,3]:
[preferredj,
[[3,1],[3,3],[5,2]]
moon
"luffy
"moon"
joyboy"
"joyboy"
[40,25]
[5,25]
nums.last()
array.last()
[2,1,5,6,2,3]
histogram.
histogram's
view.
[d
posy,
obstruct
sight.
vision
angle/2,
[posx,
view,
[[2,1],[2,2],[3,4],[1,1]],
[[1,0],[2,1]],
angle/2].
[[2,1],[2,2],[3,3]],
angle,
rotate.
posy]
location.length
posx,
posx
see.
360
shaded
determining
posy
"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".
subtextk
"ghiabcdefhelloadamhelloabcdefghi"
"merchant"
subtext2,
"(merchant)".
"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)".
subtexti
text).
subtext2
"antaprezatepzapreanta"
subtext1
subtextk)
k).
(subtext1,
[[1,3],[4,3]]
nums1[i].length
vali]
[[1,3],[2,4],[3,6],[4,3],[5,5]]
[[1,4],[3,2],[4,1]]
[[1,2],[2,3],[4,5]],
[[1,6],[2,3],[3,2],[4,6]]
[[2,4],[3,6],[5,5]],
nums2[j].length
ids,
vali.
[1,2,1,2,4,1,5,10].
gcds.
[4,6,16]
[6,10,3]
[5,15,40,5,6]
[2,5,10]
buttons
press,
[off]
press.
functionality
off]
presses.
3k
[on]
...).
presses,
bulbs.
on]
statuses
[3,5,1,4,2,-9])
[-1,3,5,1,4,2,-9],
([5,1],
target(2).
sections
[0,0,0,0,0,0,0,0,1,1,1,0]
bk,
shot
alicearrows.length
[0,0,0,0,1,1,0,0,1,2,3,1]
opponents
numarrows.
bk
sum(alicearrows[i])
[1,1,0,1,0,0,2,1,0,1,2,0]
numarrows
shoots
ak
scored.
alicearrows[i],
bobarrows[i]
[0,0,1,0,0,0,0,0,0,0,0,2]
alicearrows
bobarrows
section,
bobarrows.length
scoring
11),
(3,6)
[3,6,9,1]
[1,3,6,9],
successive
form.
jim
newflowers
incomplete
flowers[i],
[5,4,5,5].
[1,3,1,1],
beauty.
gardens.
additionally
caretaker
partial.
[2,4,5,3],
[3,6,2,2].
complete.
newflowers,
nums2[2].
(1,1,2).
nums2[3]2
nums1[k].
nums2[i]2
nums1[3]2
nums1[1].
(2,0,1).
(0,0,1),
nums1[1]2
(1,0,2),
nums2[k]
nums1.length.
nums2.length.
[1,2,9,7]
[7,4],
(1,0,1),
[5,2,8,9]
nums1[i]2
(3,0,1).
[7,7,8,3],
(3,0,2).
nums2[k].
(0,0,2),
nums1[k]
[-3,-1,2,-2,4].
[-5,-1,1,2,3]
[-7,-1,1,3,4]
[4,1,3],
[3,1,7]
nums[3].
[5,0,3,4,0]
[0,5,3]
[1,3,1,1,2]
[0,1,4,4,5,6,7]
[2,2,2,0,1]
[4,5,6,7,0,1,4]
guard
guards[i].length
coli,
[[0,1],[1,0],[2,1],[1,2]]
rowj
[[0,1],[2,2],[1,4]]
walls.length
[[0,0],[1,1],[2,3]],
guards.length
walls[j]
guards.length,
[[1,1]],
obstructed
guards[i]
guarded.
guard.
colj]
west)
walls[j].length
meetings,
unused,
[10,12).
meetings
delayed.
endi).
meetings[i].length
[[0,10],[1,5],[2,7],[3,4]]
unused
[10,11).
meetings[i]
meetings.length
[[1,20],[2,10],[3,5],[4,9],[6,8]]
[5,10).
tops.length
[5,2,6,2,3,2]
tops
bottoms[i]
[3,6,3,3,4]
tops[i]
domino,
tops[i],
bottoms:
bottoms.length
[2,1,2,4,2,2],
rotations.
[3,5,1,2,3],
tile.)
bottoms
indicated
(taking
"30"
"40"
430043,
"43"
430043.
"430043":
k:
"04"
"240":
240,
sticks.
memory2
memory2crash
memory1
memory).
crashed
memory2crash],
crashtime
[crashtime,
consumes
faulty
[6,0,4]
crashes.
memory1crash
memory1,
memory1crash,
stationary,
directions[i]
collided.
involved
motion.
collision,
directions,
directions.length
"rlrsll"
"llrr"
[2,1,1,5,6,2,3,1]
[1,5,6,3,1].
5=2+1+1+1
5=5
5=2+2+1
amount:
5=1+1+1+1+1
"00:00"
"15:00".
unknown,
"59"
1440
"25:00"
digital
choices
"05:00"
"23:59".
"0?:0?"
"?5:00"
producing
"??:??"
["mary","john","emma"],
emma
[180,165,170]
tallest,
["mary","emma","john"]
names,
["bob","alice","bob"]
[155,185,150]
heights.
["alice","bob","bob"],
people's
john.
"tuesday",
1999
{"sunday",
"wednesday",
"saturday"
"friday",
"saturday"}.
"sunday"
"monday",
"thursday",
mycalendartwo.book(50,
mycalendartwo.book(5,
mycalendartwo.book(25,
mycalendartwo();
mycalendartwo
[40,
booked.
40)
mycalendartwo()
["mycalendartwo",
mycalendartwo.book(10,
(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
[[1,0,0,0],[0,0,0,0],[0,0,0,2]]
(0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
non-obstacle
(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
[[0,1],[2,0]]
(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
walks
(0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4-directional
(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
'..')
'/')
no-op,
unix-style
slash
"/../"
"/home/foo"
file/directory
"/home/"
'...'
'//')
"/home"
"/home//foo/"
canonical
go.
'..'
refers
[4,3,10,9,8]
(14
[7,6,7]
[7,7,6]
[10,9]
[7,7]
[4,4,7,6,7]
1x1
submatrices,
-10^8
x2',
matrix[i]
[[1,-1],[-1,1]],
matrix[x][y]
[[904]],
y2')
[[0,1,0],[1,1,1],[0,1,0]],
1x2
y1',
(x1',
submatrix.
10^8
2x1
x1'.
2x2
[x1,y1,x2,y2,...,xn,yn].
y1=3,
[2,3,5,4,1,7].
[x1,x2,...,xn,y1,y2,...,yn].
y3=7
[2,3,5,4,1,7]
x3=1,
[1,2,3,4,4,3,2,1],
x2=5,
[2,5,1,3,4,7],
[1,4,2,3,3,2,4,1]
x1=2,
y2=4,
"0089",
"+6e-1",
"-+3",
"95a54e53"].
"1e",
"4.",
"-0.1",
"2e10",
"e3",
"99e2.5",
(optional)
"53.5e93",
"--6",
"-123.456e789"],
order):
["2",
"-90e3",
"-.9",
'-').
"3e+7",
"+3.14",
"1a",
[false,false,false,false,false,false,false]
hasapple[i]
hasapple,
hasapple
apple;
[false,false,true,false,true,true,false]
[false,false,true,false,false,true,false]
hasapple.length
[[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]],
[1,1,2,3,5]
[7,5,4,100],
containedboxes[i].length
status[i]
containedboxes[i][j]
[[],[],[1],[]],
[1,1,1,1,1,1],
[[1,2],[3],[],[]],
status,
initialboxes.length
containedboxes
keys[i].length
containedboxes.length
initialboxes
[1,0,0,0,0,0],
1,2,3,4
initialboxes[i]
[1,0,1,0],
status.length
keys[i][j]
containedboxes[i]
[[1,2,3,4,5],[],[],[],[],[]],
users,
languages.length
friendship
friendships.length
[[1,4],[1,2],[3,4],[2,3]]
friendships[i]
friendships
languages[i].length
transitive,
languages[i][j]
[[1],[2],[1,2]],
languages
[[2],[1,3],[1,2],[3]],
teach.
languages[i]
knows,
output?
explore
solutions.
file.
ratingi,
distance=10]
[id=4,
[id=5,
veganfriendlyi
rating=8,
price=50,
veganfriendly=1,
distance=4]
price=40,
[id=1,
distancei
[id=2,
maxdistance
[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]],
price=10,
[id=3,
price=15,
veganfriendly=0,
price=30,
veganfriendly
restaurants[i]
restaurants[i].length
(meaning
[4,3,2,1,5]
restaurants.length
distance=3]
filtering,
maxprice,
maxprice
restaurant).
rating=10,
(ordered
veganfriendlyi,
rating,
rating=1,
rating=4,
distance=5]
distancei].
distance=1]
filters.
neighborhood
yet.
{2,2},
[{3},{1},{2},{3}]
[2,2,1,2,2]
{1},
[{1},
{2},
[1,2,2,3,3,2,1,1]
[{2,2},
[[1,10],[10,1],[10,1],[1,10],[5,1]],
neighborhoods
{2,2}].
{3,3},
{1,1}].
houses,
painted,
houses[i]:
[[1,1,1],[1,1,1],[1,1,1],[1,1,1]],
[1,2,2,1,1]
[0,2,1,2,0],
neighborhoods.
neighborhoods,
[3,1,2,3],
cost[i][j]:
oldest
t.getinheritanceorder();
dead.
successor(x,
t=
"alex"],
asha
["andy",
"catherine"],
kingdom
son
"birth",
["bob",
parentname.length,
jack.
family
"getinheritanceorder"]
"matthew",
death(string
successor(x's
"alex",
"matthew");
["king",
born.
curorder):
"catherine"]]
parentname
childname),
inheritance.
throneinheritance(string
bob),
kingname
who's
successor(jack,
getinheritanceorder()
throneinheritance
childname,
getinheritanceorder.
"alex");
"alice",
parentname,
["throneinheritance",
"asha"],
throneinheritance("king");
t.birth("bob",
someone
"bob");
"jack"].
jack,
curorder:
t.birth("andy",
"asha");
"andy"],
"asha",
curorder
curorder)
"getinheritanceorder",
far,
curorder),
kingname.length,
birth(string
gave
well-defined
(alice
childname)
"jack",
andy
kingname,
[null]]
matthew
t.death("bob");
arguments
"catherine");
successor(alice,
childname.length,
kingname)
"andy",
grandchildren,
childname
alive.
["bob"],
"bob"].
[null],
birth(parentname,
king,
childname.
"andy");
"bob"],
"death",
death.
catherine
["king"].
"matthew"],
"alice"].
successor(king,
"catherine"]
while,
name)
t.birth("king",
successor(bob,
member.
[["king"],
lock.
["@aa"]
acquire
["@..aa","..b#.","....b"]
key;
'@'.
locks
["@.a..","###.#","b.a.b"]
locks.
"cabac"
"aaaaaaaa",
"aaaaaaaa"
properties.
[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
[10,4,6]
fancy.multall(2);
10*2]
["fancy",
fancy.getindex(0);
fancy.append(7);
fancy()
fancy.addall(3);
"getindex"]
fancy.append(10);
"append",
inc,
append,
17*2,
multall(m)
fancy.getindex(1);
idx
[5*2,
append(val)
inc.
addall,
fancy();
[2+3]
17]
[10+3,
multiplies
"addall",
addall(inc)
multall
14+3]
getindex(idx)
multall,
fancy.getindex(2);
[26,
"getindex",
7*2]
fancy.append(2);
getindex.
[13*2,
"multall",
vowels.
"lee",
"abciiidef",
"eet"
"aeiou",
pairs[i][0],
[[0,3],[1,2],[0,2]]
[[0,3],[1,2]]
pairs[i][1]
"dcab",
s[2],
"bcad"
explaination:
s[1],
indices(0-indexed)
[[0,1],[1,2]]
"acbd"
s[3],
{"rejected":"time
"time
rejects
t=100ms.
120));
milliseconds,
exceeded".
fullfill.
{"resolved":15,"time":120}
t=120ms.
exceeded","time":50}
{"resolved":25,"time":100}
async
await
{"rejected":"error","time":0}
"error";
"cdbcbbaaab"
"aabbaaxybbaabb",
"cdbcba"
"cabxbae"
"cdbcbbaaabab",
"cdbcbbaa"
"cdbcba".
"cabxe".
"cxbae".
"cdbc"
"cdbcbbaa".
"cdbcbbaaabab".
"cdbcbbaaab".
[1,0,5,3]
[3,4,2,3,4,7]
[3,4,2,3]
"2582"
prime.
"3245"
564908303
[1,1,2,3,3,4,4,8,8]
[3,3,7,7,10,11,11]
[2,8],
[[1,4],[2,3]]
ri),
[[1,4],[3,6],[2,8]]
[1,3,2,1].
1021
[4,5,5]
274
1321,
[2,7,4],
806
455
[2,1,5],
[1,2,0,0],
shifts[i]
shift('a')
shift('z')
"rpl",
shift()
shift('t')
"gfd"
"igc".
"dbc".
"rpl"
shifts.length
bigger,
acne
cough
patient_id,
yfev
george
diab1
diab1.
patient_name
alain
diab100
myop
+------------+--------------+--------------+
'conditions'
diabetes.
diab201
patient_id
diabetes
hospital.
"ag"
"ur".
multiples
"ohhh"
"holasss"
"pppz"
"love".
factorial(10)
arithmetic.
clumsy(10)
cashbacki.
[[3,0],[0,3]]
cashbacki].
[[0,3],[3,0]],
costi,
cashbacki
costi
[costi,
[[2,1],[5,0],[4,2]]
transactions[i].length
[[3,0],[0,3]],
fail
[1,9,1,2,4],
memory?
lista[skipa]
head)
(your
inputs):
listb
returns.
[2,6,4],
intersect).
headb,
heads,
[4,1,8,4,5],
[5,6,1,8,4,5],
lista
correctly
listb[skipb]
[4,1,8,4,5].
references.
(3rd
intersect,
heada
retain
skipa
intersected
headb
[5,6,1,8,4,5].
occurs.
a;
skipb
[2,6,4].
c1:
intersectval
[1,9,1,2,4].
list:
lists[i]
[[1,4,5],[1,3,4],[2,6]]
lists[i].length
1->4->5,
lists.length
2->6
[1,1,2,3,4,4,5,6]
1->1->2->3->4->4->5->6
1->3->4,
linked-list
lists[i][j]
"1|01|01"
"00|0|0"
"1|010|1"
"0|0|00"
"0|00|0"
"10|10|1"
"10|1|01"
g","t"]
(trailing
n","s
i","e
"hay"
"oro"
["hay","oro","weu"]
["cic","oso","n
t"]
m","t
"tbontb"
t"
"oerooe"
["tbontb","oerooe","
"weu"
coming"
"contest
targetgrid[row][col]
[[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
turns.
solid
targetgrid.length
[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
[[1,2,1],[2,1,2],[1,2,1]]
targetgrid,
targetgrid
targetgrid[i].length
[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
horizontal,
["a..","aaa","..."],
vertically,
pizza.length
cell)
apple)
["a..","a..","..."],
pizza[i].length
["a..","aa.","..."],
pizza.
sum(nums[i])
two,
[23,
[23,2,4,6,7],
[23,2,6,4,7],
verticalcuts.length
horizontalcuts
cake.
min(h
min(w
[3,1],
cut.
verticalcuts[i]
verticalcuts
verticalcuts.
cake,
h,
horizontalcuts[i]
verticalcuts[j]
horizontalcuts.length
address:
symbol,
"+*-***-***-xxxx"
"1(234)567-890"
email:
"***-***-7890".
masked
character).
"+***-***-***-xxxx"
"ab@qq.com"
0-3
middle.
{'+',
asterisks.
lowercase,
"l*****e@leetcode.com"
10-13
"a*****b@qq.com"
somewhere
"+**-***-***-xxxx"
letters)
"*****".
"leetcode@leetcode.com"
'}
"***-***-7890"
"***-***-xxxx"
[1,2,2,3,5,6]
merged,
this,
accommodate
[2,5,6].
[1,2,3,0,0,0],
[2,5,6],
lengths:
[1,2,1,10]
[2,1,3,null,null,0,1]
children's
evaluations.
(m+n)).
2.50000
"11011000"
consecutive,
"11100100"
s[3]]
[occuring
[at
s[1]]
24,26],
3500
30],
[20,24]
[[1,2,3],[1,2,3],[1,2,3]]
[20,24].
[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
labels.length
labels[i]
numwanted.
uselimit.
numwanted
numwanted,
[0,0,0,1,1],
[9,8,8,7,6],
uselimit
(flip
[[1,0,0],[1,0,0]]
cannot.
box[i][j]
[["#",".","#"]]
[".","."]]
["#","#","#",".","#","."]]
["#"]]
["#","#","*","."]]
["#","#","#","*",".","."],
[["#",".","*","."],
["#",".","."]]
box.length
["#",".","*"],
["#"],
["#","#","*"],
gravity
box's
["#","*","."],
[["#","#","*",".","*","."],
inertia
[[".","#","#"],
obstacles'
[["#","."],
[".","#","#"],
side-view
gravity.
[["."],
["*","*"],
box[i].length
13000
[123,234]
[1234,2345,3456,4567,5678,6789,12345]
"231132"
"24142"
"24241"
"213123"
"3242415"
"12345678"
denominations.
706
[[1,100,3],[7,8,9]],
piles[i][j]
wallet
101.
assorted
wallet.
[[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]],
sum(piles[i].length)
[2,-1,2]
circularly,
nums[0]),
[2,3,4,-1,4]
circularly
traversing-order
[1,2,3,4,3]
bcosti],
acosti,
1859
bcosti.
flying
interviewing
bcosti
[[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
[acosti,
3086
[[10,20],[30,200],[400,50],[30,20]]
[[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
interview
316:
https://leetcode.com/problems/remove-duplicate-letters/
[8,6,7,1,0]
"8760"
[8,1,9]
"981"
[[5,2],[1,6]],
pj,
limitj],
[[0,1,2],[0,2,5]]
[[0,1,10],[1,2,5],[2,3,9],[3,4,13]],
edgelist
disi.
disi]
edgelist[i].length
edgelist.length,
edgelist,
qj,
[pj,
edgelist[i]
[[0,1,2],[1,2,4],[2,0,8],[1,0,16]],
[[0,4,14],[1,4,13]]
limitj
qj
[true,false]
disi,
pj
"ana"
k1,
[5,8,6,9],
8)2
10)2
k2
579.
2)2
nums2[i])2
19)2
(nums1[i]
7)2
20)2
5)2
k1
[2,10,20,19],
k2.
9)2
579
[1,4,10,12],
realized
himself
directly-linked
[3,2,3,null,3,null,1]
thief
thievery
besides
tour,
[3,4,5,1,3,null,1]
-2.33333..
dividend,
-2.7335
8.345
[−231,
dealing
10/3
quotient
3.33333..
7/-3
truncated
-231.
dividend
range:
divisor.
−
losing
[1,2,3,4,null,5,6,null,null,7]
text2,
text2.length
text1.length,
["abba","cd"].
["abba","baba","cd","cd"].
words[1].
words[2].
words[i
["abba","cd","cd"].
["abba","cd"]
"abdc".
["a","b","c","d","e"]
"dacb"
"bbaa"
["abba","baba","bbaa","cd","cd"]
anagrams,
sets:
undirected).
bipartite.
graph[v]
graph[u][i]
graph[u].length
u).
(graph[u]
graph[u],
bipartite
graph[u]
[[1,2,3],[0,2],[0,1,3],[0,2]]
[[1,3],[0,2],[1,3],[0,2]]
bars.
[1,6,3,1,2,5],
boy
spend,
afford
0,1,2,4
sort.
[10,6,8,7,7,8],
[1,3,2,4,1],
sweltering
[["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
"((()))".
"))("
[[")",")"],["(","("]]
"()(())".
")((".
dress
<--
machines.length
[1,0,5]
move:
dresses
dresses.
[0,2,0]
machines,
machines[i]
[0,1,1,1,1,1,0,1]
[0,1,1,1,0,1,1,0,1]
[1,1,0,1,1,null,1]
[1,1,0,1,1,0,1,0]
"every
[1,null,1,null,1]
[1,null,0,null,1]
[1,null,0,0,1]
1".
[1,0,1,0,0,0,1]
1}.
{'h':
(optionally
formulas.
{'k':
element's
"h2mgo2"
"mg(oh)2"
"h1o2"
's':
"k4(on(so3)2)2"
'n':
'o':
chemical
formula.length
'mg':
formula,
"(h2o2)"
"h2o"
atom.
4}.
"h2o2"
order),
"k4n2o14s4"
atomic
"(h2o2)3"
formulas
follow.
added)
"h2o2he3mg4"
[7,5,3,1].
[1,3,5,7],
[1,5,7,8,5,3,4,2,1],
"^"
0])
[1,3,5,6,2,4]
[1,2,3,6,7,11,14,4,8,12,5,9,13,10]
b2),
(a1,
min(ai,
[6,2,6,5,1,2]
(a2,
(an,
[1,4,3,2]
b1),
min(6,
bn)
"x
op2,
*,
(-).
/).
(+,
negation
(op2)
op1,
501
(op3)
conventions:
adhere
(op1)
(/)
-,
"-x
x"
negation.
100000000
'i's,
"aaaaaaeiiiioou"
"aeiou"
"aeiaaioaaaaeiiiiouuuooaauuaeiu"
"aeeeiiiioooauuuaeiou"
beautiful,
vowels,
'e's,
"aaaaeiiiiouuu"
"aaaeeeooo"
"aeoiu",
"uaeio",
'e's
-7
"202"
"-10"
[2,-1,2],
points[i][1]
[[3,2],[-2,2]]
[-1,0]
[[1,1],[3,4],[-1,0]]
second).
points[i][0],
storeroom
cube
cubic
touching
boxes:
fuel:
routes:
locations.length
[5,2,1],
|locations[i]
locations[j]|.
routes,
[2,3,6,8,4],
[4,3,1],
reduces
locations[i]
finish).
27th
"bcd",
"ouput",
"input",
45,
64,
drops.
79,
72,
survive,
85,
outcome,
97,
didn't,
94,
[[1,3],[10,20],[2,5],[4,8]]
[[6,10],[5,15]]
ranges[i].length
overlapping,
workers.
difficulty,
[24,66,99],
$0.
difficulty[i]
difficulty.length
$3.
$1,
difficulty[i],
[85,47,57],
[4,5,6,7]
profit[i],
[40,25,25]
worker[j]).
[10,20,30,40,50],
worker.length
[4,4,6,6]
[20,20,30,30]
worker[j]
worker[i]
[5,4,5,1,1,null,5]
[1,4,5,4,4,null,5]
dollars)
dollar.
distributed.
money,
professional
house,
stopping
[2,7,9,3,1]
stashed,
(money
tonight
robbing
"pbbcggttciiippooaais",
"dddaa"
"ddbbbdaa"
"deeedbbcccbdaa",
delete.
"eee"
"ps"
delivered.
deliver
weightsi
maxboxes
[[1,1],[2,1],[1,1]],
carry.
box).
portscount
[[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]],
ports.
maxweight
maxboxes,
[portsi,
[[1,2],[3,3],[3,1],[3,1],[2,4]],
portscount,
maxweight.
limits
delivered
port,
portsi
loaded
weighti],
storage.
needed,
[2,5,6,5,2,2,-1],
prefix[i]
[2,-1,0,1,-3,3,-3]
[2,3,1,-1,-3,0,-3].
[-2,-3,0]
"1.234"
(".")
thousands
"987"
987
weights[j].
(3+1)
bag,
[1,3],[5,1],
inclusively,
(1+3)
(1+1)
(5+1)
marble.
marble
[1],[3,5,1]
[1],[3].
[1,3,5,1],
total_small]
[total_jumbo,
burger
burgers.
tomato
jumbo
tomatoslices,
cheeseslices
burger:
2*6
4*1
cheeseslices.
tomatoslices
0]],
preferences[i]
unhappy.
preferences[i][j]
preferences.length
[[1],
n/2
preferences
preferences[i].length
pairs[i].length
preference.
[0]],
but:
[0,0,1,1,2,3,3,_,_]
[1,1,2,2,3,_]
[0,0,1,1,1,1,2,3,3]
','
numrows
convert(string
"paypalishiring",
"pinalsigyahrpi"
"pahnaplsiigyir"
numrows);
legibility)
"paypalishiring"
font
subset,
{2,3,4}
{2,4}
[3,4,0]
{1,2,3},
dth
[[1,2],[2,3],[2,4]]
{2,3}
{1,2,4},
{1,2,3,4}
{1,2},
+---------+-------------+
follower_id
followers_count|
follower_id)
follower
{0,1}
followers.
+---------+----------------+
{0}
(reverse):
(accelerate)
"aar",
drives
"aaara".
*=
["aba","bcb","ece","aa","e"],
["a","e","i"],
[[0,2],[0,1],[2,2]]
sum(words[i].length)
(strings
"e").
[2,3,0].
"ece",
[2,3,0]
"ece").
[[0,2],[1,4],[1,1]]
[6,5,6],
[6,5,6,5],
3.5.
[6,5,6,5,8]
[6,5,6,5,8],
[1,3,4,3,1],
[5,4,8,11,null,17,4,7,1,null,null,5,3],
[1,2,-3,-5,null,4,null],
[1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14],
[5,4,8,11,null,17,4,7,null,null,null,5]
[1,2,3,4,null,null,7,8,9,null,14]
[1,null,-3,4]
"ty"
["cc","ll","xx"]
"yt"
"cl"
["lc","cl","gg"]
"lc"
"tylcclyt",
["ab","ty","yt","lc","cl","ab"]
"lcyttycl"
created.
"clgglc"
"lcggcl",
"worl".
"apply"
["a","banana","app","appl","ap","apply","apple"]
"wo",
["w","wo","wor","worl","world"]
"wor",
"apply".
"w",
[3,1,7,11]
-103
[10,2,5,3]
expr.
x)"
(add
lisp-like
scope.
vn
statements
y))))"
"mult"
evaluation,
sequentially;
legal.
variable.
evaluate.
of.
e2
v2
(let
(mult
evaluated,
scopes
mult
innermost
syntax
scope
v1
parentheses)
"mult",
expr)",
e2)"
3+2
e2.
en
y),
"(add
negative.)
y))"
"(mult
"(let
[[-1,-1]]
"101101",
[[0,2],[2,3]]
[[0,5],[1,2]]
secondi].
firsti,
[0,2].
[[12,8]]
[[4,5]]
secondi
firsti.
"0101",
secondi.
https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/
1038:
repetition
[1,2,2,4]
scrambled
"at"
e/at"
a/t"
"caebd"
e/
"g/r
"great"
"a/t".
"r/g
"gr/eat"
led
"rgeat"
"great",
recursively,
[[1,2],[2,3],[3,4],[1,4],[1,5]]
[4,0,1,1,3]
nums[3]=2
j's
nums[0]=8
nums[2]=2
[7,7,7,7]
[8,1,2,2,3]
[6,5,4,8]
nums[4]=3
nums[1]=1
[2,1,0,3]
[4,8,5,0,1,null,6]
infect
isinfected
infected,
viral
threatens
isinfected[i][j]
rapidly,
(continuous
saved,
[[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]
uninfected
wall)
night).
regions.
night,
quarantine
infected
isinfected,
limited.
builds
affected
modeled
[[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]
resources
isinfected[i].length
cells)
contained.
isinfected.length
uncontaminated
virus.
singly-linked
(requester_id,
2016/06/08
world,
accept_date
2016/06/03
accepter_id)
requester_id
2016/06/09
accepter_id
+--------------+-------------+-------------+
requestaccepted
power,
stations,
[4,4,4,4],
sanctioned
pre-existing
government
[1,4,4,5,0].
[1,2,4,5,0],
lca
https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/
leaf-nodes
865:
1+6,
222616187
2+5,
ways)
5+2,
6+1.
dice,
(out
faces.
face-up
3+4,
4+3,
15:06:07
2020-06-30
2019-03-07
02:49:50
2020,
logins
2019-07-14
00:46:50
december.
last_stamp
2020-12-30
09:00:00
14:06:06
00:18:15
(december)
2020-01-16
05:10:53
07:59:08
2019-08-25
11:59:59
2021-04-21
smallestinfiniteset.addback(2);
addback.
smallestinfiniteset
addback(int
smallestinfiniteset();
popsmallest
"popsmallest",
"addback",
["smallestinfiniteset",
smallestinfiniteset()
smallestinfiniteset.popsmallest();
"popsmallest"]
popsmallest()
smallestinfiniteset.addback(1);
...].
[7,9,6,6,7,8,3,0,9,5],
[7,9,6,6,8,7,3,0,9,5]
[1,5,5,4,11],
defined:
[[0,1],[1,2],[5,2],[4,3],[1,3]]
[3,3,3].
[5,5].
[5,5,2,4,4,2],
[4,4].
[1,9],
[4,5,7],
[5,4,11].
[[1,2,3],[8,9,4],[7,6,5]]
havenâ€™t
[1,2,6,10].
[6,8,11,12]
[5,8,3]
[4,9,6,10]
[1,9,6,10].
"238182",
"165462",
"54",
wantstoeat(philosopher,
philosophers.
putleftfork,
behaviour
thinking,
pickleftfork,
spaghetti
forks
ends.
fork:
controlling
thinking
putleftfork
think.
eat,
starve;
[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
silent
number).
fork
c]
forks.
concurrent
philosopher,
discipline
putrightfork)
bowls
asking
wikipedia.org
assumed.
philosopher.
spaghetti.
eat}.
philosopher
(three
philosophers'
{1
integers)
pickrightfork,
putrightfork
simulate
algorithm)
specifies
right}.
pickrightfork
space;
pickleftfork
eating,
stomach
demand
amounts
threads,
output[i]
columntitle
sheet,
columntitle.length
"fxshrxw"].
"le",
"l".
"level"
"vel",
("l",
"lev",
"el",
"evel").
"ababab"
"leve"),
"azz"
s="bdda",
s="c",
robot.
"addb"
p="ab",
t="".
p="addb",
"bdda"
t="ba".
paper.
p="abc",
p="",
s="",
t="bdda".
t="c".
t="zza".
p="azz",
"zza"
s="zza",
optionally
deletion.
[1,-2,0,3]
(contiguous
[1,-2,-2,3]
[[0,3],[3,1],[1,2],[2,0]]
building,
[[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
transfers
season,
requests:
[[0,0],[1,2],[2,1]]
uni-valued
uni-valued,
[2,2,2,5,2]
[1,1,1,1,1,null,1]
[[0,1,3],[1,2,1],[1,3,4],[2,3,1]],
distancethreshold,
[city
[[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]],
weighti,
distancethreshold
edges'
distancethreshold.
"un"
"ique"
"acters"
["cha","r","act","ers"]
("un"
"ue"
["un","iq","ue"]
"iq")
"ue")
arr[i].length
("act"
("cha"
("iq"
["abcdefghijklmnopqrstuvwxyz"]
"uniq"
"chaers"
"iq"
"ers")
"ers").
"0/1"
output)
"-1/2+1/2"
(input
omitted.
irreducible
'9',
int.
"-1/6"
"-1/2+1/2+1/3"
fraction.
â±numerator/denominator.
"1/3-1/2"
fractions,
"1/3"
2/1.
corressponds
[0,1,2,3,4,_,_,_,_,_]
[1,2,_]
[0,0,1,1,1,2,2,3,3,4]
[3,6,9,12]
[20,15,10,5].
seq[i
[20,1,15,3,10,5,8]
seq.length
[4,7,10].
[9,4,7,2,10]
"od",
"cod",
"code":
"abbc",
"co",
"bbca"
"bbc",
"abbca":
"de"
"abbca"
suit
"pair".
suits[i]
[13,2,3,1,9],
suits.length
["d","a","a","b","c"]
["a","a","a","a","a"]
"flush"
["a","b","c","a","d"]
[4,4,2,4,4],
"pair":
kind"
case-sensitive.
[10,10,2,12,9],
card":
kind".
kind":
"pair"
suit,
"three
suits
suits.
suits[i].
"flush".
suit.
"flush":
worst:
f[i
f.length
"123456579".
[11,0,11,11]
111]
type),
f[i]
"1101111"
"0123"
231,
[123,
"112358130"
579].
[110,
456,
allowed,
[[1,2],[2,3],[2,4],[1,5]]
ancestors.
return:
oriented
figures.
[[1,2],[2,3],[1,3]]
[buy,
[1,2,3,0,2]
cooldown,
restrictions:
buy,
sell]
sell,
entry
out_time.
47)
(33
(32
173
in_time
event_day
in_time.
event_day,
+--------+------------+---------+----------+
events:
173,
out_time
2020-11-28
(emp_id,
employees'
(74
total_time
1440.
2020-12-03
+------------+--------+------------+
74
emp_id
(200
happened,
in_time)
[3,1,4,null,2]
[1,null,2,null,3,null,4,null,null]
[2,1,3,null,null,null,4]
thirty
00000000000000000000000000001011
weight).
00000000000000000000000010000000
"ros"
'r')
"intention",
horse
't')
rorse
rose
'e')
(insert
exection
(remove
(replace
word:
ros
'x')
inention
'c')
"horse",
intention
"execution"
enention
exention
arrival.length,
[5,2,3,3,3]
complete).
load,
server(s).
[10,12,11]
arrival[i]
server,
arrival.length
load.length
k)th
dropped.
all).
computational
busy,
(i+2)th
arrival[i],
requests,
busiest
load[i]
busiest.
servers.
"dabadd",
"caa"
"cda"
+-------------+--------+------------------+
+-------------+---------------+
project_id
employee_id)
2.00
average_years
doe
ali
(project_id,
project_id.
experience_years
[18,43,36,13,7]
[10,12,19,14]
"dsahjpjauf",
"ace".
["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
["a","bb","acd","ace"]
object,
json.stringify(object).length
inludes
{"key":{"a":1,"b":[{},null,"hello"]}}
booleans,
{"y":1,"x":2}
object.keys().
json.stringify
primitives
{"a":"str","b":-12,"c":true,"d":null}
objects,
maxnestinglevel
[[1,2,3],[3,1,2],[2,3,1]]
[[1,1,1],[1,2,3],[1,2,3]]
[6,7,6,0,4]
[6,7],
[3,9],
[8,9],
[9,8,6,5,3]
[3,4,6,5],
[6,0,4],
[9,8,9]
[9,1,2,5,8,3],
[1,4,7,5,3,2,5,6,9,4]
"832"
"021":
"132",
change.length
to)
change[1]
change[0]
"934"
change[num[i]]).
change[2]
"934".
"832".
"021",
change[d].
change[d]
[9,4,3,5,7,2,1,9,0,6]
mutate
0-9.
[9,8,5,0,3,6,4,2,6,8]
[8,2]
[8,2,4,7]
[8,2,4]
|4-4|
[4,2,2,2,4,4,2,2],
[2,4,7,2]
|2-4|
|8-2|
|4-7|
[2,4,7]
|8-8|
[8,2,4,7],
|7-7|
[10,1,2,4,7,2],
[[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]],
side-length
[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]],
"()(())()"
seq.length).
")"
encodes
[0,0,0,1,1,0,1,1]
[0,1,1,1,1,0]
seq.length)
depth(b))
seq,
seq.size
expensive.
[[4,2],[2,2],[1,2]]
perimeter.
[[1,2],[2,2],[4,2]]
[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
enclosed.
trees[i].length
rope,
[[1,1],[2,0],[4,2],[3,3],[2,4]]
well-fenced
fence.
s[7]
x),
shift(s[i-1],
"abbdcfdhe"
shift('a',
shift('e',1)
shift('b',2)
shift('d',4)
"a1c1e1"
s[i]).
shift('c',1)
shift('a',1)
"abcdef"
shift(c,
"a1b2c3d4e"
s[i])
shift('x',
shift('c',3)
({4,
3}),
node-values
2h
filled,
[1,2,3,4,5,null,7]
{2,
6})
[[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
[[1,0],[1,1]]
[9,3,5]
[8,5]
changed.)
[5,2,6,1]
counts[i]
[2,1,1,0]
[[1,0],[0,0],[0,1]]
-50
[[0,0],[0,1],[1,0],[0,2],[2,0]]
task.length
["b","b","b","a","a","a"]
["a","a","a","b","b","b"]
array),
["a","b","a","b","a","b"]
["a","a","a","a","a","a","b","c","d","e","f","g"],
["a","a","a","b","b","b"],
[00,01,11,10].
n-bit
[00,10,11,01].
letters[0].
["c","f","j"],
["x","x","y","y"],
"ate"
["hello","i","am","leetcode","hello"],
startindex,
n],
words[(i
["i","eat","leetcode"],
startindex
"ate",
["a","b","leetcode"],
cardpoints
cardpoints.
cardpoints.length
[9,7,7,9,7,7,9],
[1,2,3,4,5,6,1],
cardpoints[i]
endi],
[[1,6],[8,10],[15,18]]
[[1,4],[4,5]]
[[1,5]]
[[1,3],[2,6],[8,10],[15,18]]
[-3].
[2,-5].
(alice's
-22
[-1,2,-3,4,-5]
(-10)
(-12)
(-22)
(-3)
score).
-22.
[-22].
[7,-6,5,10,5,-2,-6]
[-10,-12]
divisor1,
[2,3,4].
divisor1.
uniquecnt2
divisor2.
uniquecnt1
divisor2,
[2,6].
divisor2
uniquecnt1,
uniquecnt2,
[1,3,5,7,9,11,13,15],
divisor1
explanation.
[5,6,1,4,2]
scenario:
cut).
cut),
cut,
stick,
16).
[1,3,4,5]
cuts.length
cuts[i]
wish.
(0th)
(i-2)th
(i-1)th
"110".
[0,1,2,2,4,4,1]
[29,47,21,41,13,37,25,7]
[4,4,4,9,2,4]
these,
0.625.
someone,
soup:
becoming
0.71875
ml
0.62500
soup,
soup.
ml's
wants,
choices:
loses.
chalkboard,
erases
potion
spell.
[24,15,24].
[5,10,15,20,25].
potions[j]
potions[i]
[8,5,8]
spells[i]
[3,6,9,12,15].
spell:
[16,10,16].
[8,5,8].
success.
potions.length
[4,0,3]
potion.
spells[i],
[1,2,3,4,5].
spells.length
[8,5,8],
potions,
[100]
comparison
[4,8,12,16]
arr[j]]
[9,4,2,10,7,8,8,1,9]
arr[k
[arr[i],
maxdoubles
maxdoubles,
gen
[0,1,1,2,3]
gen.next().value;
xn-1
outputted
gen.next()
relation
xn-2.
fibgenerator();
[[2,3],[3,7],[4,3],[3,7]]
wi.
[5,3,5,5].
maxlen
maxlen.
wi]
[[5,8],[3,9],[5,12],[16,5]]
[4,6],
uniquely-sized
647427950
(mod
arrangements.
[1,3,2,5,4],
[[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
b0
[0,1,2,3,4,-1]
b3
[[-1]]
[[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
redirects
boards
sides.
redirect
b1
b4
[1,-1,-1,-1,-1]
[3,1,4,2],
[6,3]
[6,3,5,2],
a[4]
a[2]
[9,6,1,6,2]
a[1]
a[0]
a[3]
1/4).
blacklist.length
ok.
blacklist[i]
solution(7,
[0,1,4,6]
"pick",
blacklist.
blacklist)
"pick"]
blacklisted
solution.pick();
pick()
[1,8,6,2,5,4,8,3,7].
[1,8,6,2,5,4,8,3,7]
slant
height[i]).
container,
candies[1]
candies[2]
[5,8,6],
unused.
candies[i].
1012
[6,5].
[2,2,4,5],
[3,6,1,2,5],
[2,1,4,3,5],
xor.
[1,2,3,9,2]
[3,2,4,6]
[1,2,3,null,4,null,5],
cousins,
-âˆž.
peaks.
nums[n]
peaks,
nums[-1]
[1,2,1,3,5,6,4]
[2,4,1,5,3]
[6,5,4,6]
2,2
"bulky".
24500000
"neither"
"heavy",
700,
categories,
"heavy"
categorized
"both".
"heavy".
800,
"neither".
"bulky"
"bulky",
lo
lo,
(lo
[lo,
[12,13,14,15].
hi)
circles[i]
[[2,2,2],[3,4,1]]
min(xi,
circles.
circumference
circles.length
circles[i].length
[[2,2,1]]
search_cost
satisify
[3,1,1,2]
initial.
[3,1,2,2,2]
[3,1,1,1,1]
[3,1,3,3,2]
[1,2,3,2,1]
[3,1,5,4,2].
[1,2,2,2,1]
[3,1,5,4,2]
[3,1,4,4,2]
[2,1,1,1,1]
logarithmic
n!.
5!
examroom.seat();
examroom(10);
p)
"leave",
examroom(int
seat()
"seat"]
leave(int
["examroom",
"seat",
examroom.leave(4);
simulates
examroom
wordfilter(["apple"]);
pref.length,
searches
pref,
suff
"f"]
"e"]]
f(string
suff.
["wordfilter",
suff)
wordfilter(string[]
[[["apple"]],
"e");
wordfilter.f("a",
wordfilter
suff.length
grass,
touching).
field.
[[0,0,0,0],[0,1,2,0],[0,2,0,0]]
safely
safehouse
[[0,0,0],[2,2,0],[1,2,0]]
[[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]
latter
former
grass
fire,
stayed,
spread
safehouse.
[2,-3,4]
[5,2,-5]
[5,2,-3]
'8',
"0009".
'4',
"1000"
'6',
"1201"
"0102".
wheels.
deadends
'5',
deadends.length
"0202"
"0002"
'7',
"1202"
deadends[i].length
around:
"0009"
'0000',
"8888"
"1200"
deadends[i]
["0201","0101","0102","1212","2002"],
deadends.
'2',
"0001"
["8888"],
["8887","8889","8878","8898","8788","8988","7888","9888"],
"0202".
slots:
wheels
stuck.
codes,
slot.
[1,1000000000]
position[i].
chip
chips,
"ca","cc","cd",...,"cz"
evil.length
'd':
"leetgoes",
"da".
evil,
evil
"da",
"aa","ac","ad",...,"az".
"gx",
'c':
"gz",
["cat","bt","hat","tree"],
"hat"
"welldonehoneyr"
"atach"
["hello","world","leetcode"],
"cat"
[["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]]
[["a","b","b"],["b","z","b"],["b","b","a"]]
[["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]]
(up,
"practice"
"mangaar"
"anagram",
same)
anagrams.
"anagram"
["-2*a*a*a",
"a*b*c".
["e",
evalvars[i]
terms)
coefficient,
(e
["7"].
5"
"-x".
asterisk
exist.)
["-1*pressure","5"]
{"e":
"(e
"-6"].
evalvars[i].length
"3*a*a*b",
"temperature"],
"2x"
["e"]
"e
pressure",
term.
evalvars.length
well-formatted
"3*b*b",
(given
multiplied,
"5*c",
"a*a*b*c"
breaking
evalints
"b*a*c",
evalvars
5",
["-1*a","14"]
digits.)
evalints[i]
["1*e*e","-64"]
evalints.length
alternates
[1]),
"4*a",
8)",
symbols,
multiplicity.
3"
"00110110",
"/b"
/b/x
underlying
bug,
"/one/two/three".
[["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]]
"/a/x"
marked,
/b/z
"/b/w",
"y".
subfolders.
/a
[["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]]
"/b/x"
marked:
/b/x/y
sum(paths[i][j].length)
[["c"],["c","b"],["a"],["a","b"]]
"/w"
level)
["one",
[["c"],["c","d"],["a"],["a","b"]]
[["d"],["d","a"]]
beforehand.
subfolders)
/a/z
/b
"three"]
/a/x/y
"/c"
path[i][j]
"/a/b/x"
/a/x
[["a","b"],["c","d"],["c"],["a"]]
paths[i][j].length
loves
slowly
bananas,
bananas.
return.
[30,11,23,4,20],
[3,6,7,11],
bananas-per-hour
gone
reflected
eventually.
receptor
corners,
receptor.
ray
receptors
mirrors
southwest
"1342"
"36789",
"36789"
ok
"4321",
[0,1,2,3].
[9,20,6,4,11,12],
[[0,3],[5,3],[2,4],[1,3]]
[0,3,2,4]
[1,0,2,3]
[5,2,9,8,4],
"adc",
s1="abe"
"cda",
"ayx"
"interview"
"eba"
s1="abc".
s2="xya"
"xya"
"leetcodee",
"bea",
"acd"
"dac"
"eab"
"dca".
s2="acd"
[4,5,6,7,0,1,2],
[4,5,6,7,0,1,2].
prior
difficulties
schedule.
[9,9,9],
[6,5,4,3,2,1],
jobdifficulty[i].
jobdifficulty[i]
dependent
jobdifficulty.length
jobdifficulty
[1,3,5,3]
[10,6,5,8]
[1,4,1,3],
circular.
[1,3,1,3]
[5,5,5,5]
[2,5,5,7],
doffee".
selections:
"tonuts
"time"):
tonuts".
ideaa
selections
("coffee",
ideas[i].length
space)
ideas.length
["lack","back"]
ideas[i]
ideas
dime".
("time",
"conuts
["coffee","donuts","time","toffee"]
conuts".
"doffee
ideab.
("donuts",
ideas,
"coffee"):
"dime
("toffee",
"toffee"
ideab,
"donuts"):
"toffee"):
ideab
[[1,2],[2,5],[4,3]]
chef.
3.25.
3.25000
arrivali+1
till
timei]:
[[5,2],[5,4],[10,3],[20,1]]
arrivali,
prepares
prepare
"247+38"
"12+34"
"2(4)7+38"
"999+999"
170.
"<num1>+<num2>"
170
(47
<num2>
"(999+999)"
"1(2+3)4"
1998.
"2(47+38)"
38)
<num1>
inversions.
[1,0,2]
inversion
inversion.
movierentingsystem(int
[shopi,
entries.
movierentingsystem(3,
[shopj,
moviei,
report.
for,
rent:
drop:
rented,
rent
moviei.
booking,
moviej
cheapest;
rent,
moviej]
report()
movierentingsystem
entries.length
renting
shops,
entries[i]
movie)
shopj.
shops.
id)
rents
shops
movierentingsystem.rent(0,
generating
movierentingsystem.rent(1,
entries)
shopj
drop(int
"report",
movierentingsystem.drop(1,
copy,
unrented
movies,
search:
"drop",
rent(int
cheapest,
movierentingsystem.report();
"rent",
movierentingsystem.search(2);
moviei
movierentingsystem.search(1);
shopi
res[j]
2]].
report:
["movierentingsystem",
searching
list<list<integer>>
[1,7,4,6,9]
exchanges
distinct),
[1,9,4,6,7]
"aaabbc"
"baa".
dislikes[i]
dislike
dislikes
dislikes.length
dislikes[i].length
[[1,2],[1,3],[2,4]]
favoritecompanies[0]=["leetcode","google","facebook"]
favoritecompanies[0]=["leetcode","google","facebook"],
favoritecompanies[i][j].length
[["leetcode","google","facebook"],["leetcode","amazon"],["facebook","google"]]
favoritecompanies[j].
[0,1,4]
favoritecompanies[2]=["google","facebook"]
favoritecompanies[3]=["google"]
favoritecompanies[i].length
favoritecompanies
favoritecompanies[2]=["facebook","google"]
index=3
companies.
favorites
[["leetcode"],["google"],["facebook"],["amazon"]]
favoritecompanies.length
favoritecompanies[1]=["google","microsoft"].
favoritecompanies[i]
[0,1,4].
[["leetcode","google","facebook"],["google","microsoft"],["google","facebook"],["google"],["amazon"]]
"c7"
coordinates[0]
"h3"
"a1"
black,
coordinates[1]
reference.
"we
"will"
third",
student",
["we","rock"]
["girl","student"]
second.length
third".
girl
"we",
you",
first.length,
[10,10,10,10,10],
[1,4,3,3,3].
ceiling
[1,10,3,3,3],
ceil(nums[i]
ceil(val)
[1,1,1,3,3].
typed.
"mouse"
["mouse","mousepad"].
"havana"
["mobile","moneypot","monitor","mouse","mousepad"].
minimums
suggested
products[i].length
mous
mou,
suggests
["mobile","moneypot","monitor"].
[["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
["mobile","mouse","moneypot","monitor","mousepad"],
[["mobile","moneypot","monitor"],["mobile","moneypot","monitor"],["mouse","mousepad"],["mouse","mousepad"],["mouse","mousepad"]]
mo
["havana"],
sum(products[i].length)
searchword.
marks).
"name",
knowledge[i]
keyi
[["name","bob"],["age","two"]]
[keyi,
knowledge
"a"s
evaluated.
"age".
"hi?"
"bob".
"age"
valuei.
"two".
"(name)is(age)yearsold",
valuei]
knowledge[i].length
"(a)"
"yes".
"?".
[["a","b"]]
[["a","yes"]]
"yesyesyesaaa"
"(age)"
(without
valuei.length
"yes",
"hi(name)",
keyi.length,
"(a)(a)(a)aaa",
"?"
"(name)"
"name"
knowledge.
"bobistwoyearsold"
keyi,
knowledge.length
valuei
[[2,1,0],[1,0,0]]
(k,
(downward
(rightward
[[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]
[[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]
movement),
movement).
cells:
4321.
[4,3,2,1]
124.
[4,3,2,2]
[4,3,2,2].
4322.
[1,2,4].
[[1,2],[2,4],[4,8]]
minimumi
energy,
minimumi]:
[[1,3],[2,4],[10,11],[10,12],[8,9]]
[actuali,
actuali
[[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
sub-nodes.
sub-nodes,
25].
sub-node.
root.right.val)
min(root.left.val,
[2,2,5,null,null,5,7]
[999999,999999]
blocked[i].length
blocked[i]
xy-plane,
inaccessible
blocked.length
sy]
[sx,
[tx,
ty]
prizes.
prize.
prize
[1,1,2,2,3,3,5],
prizepositions.length
prizepositions[i]
segments).
prizepositions
prizes
[[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]
[[1,2],[1,3],[1,4]]
current.
"02:30",
"11:01"
current,
"04:35"
"11:00",
"03:30".
"04:30".
"04:35".
"9329592?".
2+4+3
8+0+3.
"243803",
"243801",
"93295927".
'?'s
"93295???".
"932959??".
num:
8+0+1.
"5023"
"?3295???"
"25??"
"baggage",
["apple","pleas","please"],
puzzles.length
"asas",
"asas"
"cabbage",
puzzles[i].
puzzle).
puzzles
"able"
["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
"based"
"aboveyz"
"absoryz"
puzzles[i]
["aelwxyz","aelpxyz","aelpsxy","saelpxy","xaelpsy"]
"beefed"
["aaaa","asas","able","ability","actt","actor","access"],
[0,1,3,2,0]
"faced",
"access"
"actresz"
'a')
"gaswxyz"
puzzles[i].length
"abrodyz"
"abslute"
(includes
(does
[1,1,3,2,4,0]
'g'.
"actt",
[0,2,1,0,3,0]
obstacles[0]
[0,1,1,3,3,0]
lanes
arrows).
lane
obstacles[2]
adjacent)
obstacles[n]
(ranging
lane.
bloom.
growing
grayed
growtime
planttime[i],
seed
planttime
blooms
blooms.
seeds
grow,
growth,
planttime.length
seed.
pots
seeds.
planttime[i]
blooming.
planted.
growtime.length
growtime,
growtime[i]
each:
{(0,2)},
{(0,1),(2,3)},
{(1,2),(2,3)},
796297179.
n-1)
3796297200.
{(1,2)}.
{(0,1),(1,3)},
{(0,2),(2,3)},
{(0,1)},
796297179
{(0,1),(1,2)}.
1-d
"abcccd"
"aaabcccd",
(length
"a2bc3".
abc3d.
"a2"
(repeated
"a4"
compress
"aaaaaaaaaaa",
run).
"a11"
"aabbaa",
"a3bc3d"
"a3c3"
compressing
"c3".
"aabccc"
[2,2,1],
[3,2,5],
[3,-1],
diff.
[-2,2],
[3,5,1,2,6],
[3,2,4,1],
[10].
[17].
"za"
"abcdefghijklmnopqrstuvwxyz".
customerid
+----+------------+
"longest",
upload(int
luprefix
uploads
server.upload(2);
yet,
server.upload(1);
videos.
server.longest();
luprefix(4);
luprefix(int
longest.
["luprefix",
"upload",
longest()
server.upload(3);
video)
"longest"]
"upload"
upload
[[4],
sqrt(1)⌋
⌊7⌋
towers.
tower,
towers,
garbled,
qi]
[cx,
⌊val⌋
quality.
towers[i]
[[23,11,21]],
cy)
[[1,2,13],[2,1,7],[0,1,9]],
⌊4.5⌋
⌊qi
radius.
tower's
qi
⌊7
quality,
qi.
towers
[23,11]
⌊2.07⌋
d)⌋,
towers.length
qualities
⌊9
⌊5
towers[i].length
[[1,2,5],[2,1,7],[3,1,9]],
sqrt(0)⌋
cy]
(cx,
sqrt(2)⌋
degrees)
7.5
165
score[i][j]
[[7,5,11,2],[10,6,9,1],[4,8,3,15]]
score[i].length
[[5,6],[3,4]]
scored
[[3,4],[5,6]],
[[10,6,9,1],[7,5,11,2],[4,8,3,15]],
happen.
[2,4],
[0,1,3],
arr[banned[i]]
i's.
[0,-1,-1,1]
bring
perform,
[-1,-1,0,-1]
[0,-1,-1,-1,-1]
num1.length,
num2.length
"456"
"56088"
biginteger
23)","(1.2,
3)"
"(1,
"(123)"
"(13)"
2.3)","(1,
00,
"(00011)"
123)","(0.1,
2.3)","(0.1,
been.
0.0,
extraneous
3)","(12,
s[s.length
0.5)".
["(0,
1)"]
"0.00",
"(2,
"0.0",
comma.)
0.011)","(0.001,
12.3)","(0,
23)","(0.12,
["(1,
0.5)"
1.23)","(0,
"00.01",
00.01
3)"]
(occurring
".1".
"001",
"(0123)"
"(205)".
[8,9,8,6,1,1]
pizzas.
slices.length
slices[i]
slice
combinationiterator
combinationlength)
itr
combinationlength
itr.hasnext();
[["abc",
combinationiterator("abc",
["combinationiterator",
hasnext.
itr.next();
characters.length
arguments.
combinationiterator(string
[2,1,3,4]:
[7,8,6,10],
[[0,1],[1,2],[1,3],[3,4],[3,5]],
[0,1,2]:
[9,8,7,6,10,5]
(colored
"baab".
"aabccabba"
"cabaabac"
"cca".
"bccabb".
"abaaba".
[12,345,2,6,7896]
1771
7896
345
[555,901,482,1771]
(odd
nums[nums[1]],
nums[nums[2]],
[nums[5],
[nums[nums[0]],
memory)?
[0,2,1,5,3,4]
nums[nums[4]],
[5,0,1,2,3,4]
nums[4]]
zero-based
[nums[0],
[0,1,2,4,5,3]
nums[nums[3]],
[4,5,0,1,2,3]
nums[nums[5]]]
nums[nums[i]]
[1,2,5,7]
[1,2,10,5,7]
[1,1].
[2,3,1,2]
[1,2,5,7].
nums.length).
xi1
yi1
[[0,0,1000000000,1000000000]]
rectangle[i]
illustrated
yi2)
[[0,0,2,2],[1,0,2,3],[1,0,3,1]]
yi2]
rectanges[i].length
xi2
(xi1,
[xi1,
yi1)
yi2
xi1,
rectangles,
(xi2,
xi2,
yi1,
drained
batteries[i]
batteries.length
batteries.
drained,
running.
battery
recharged.
batteries
computers.
[3,3,3]
exchange,
exchange.
alicesizes[i]
bobsizes.length
alicesizes
bobsizes
alicesizes.length,
bobsizes[j]
alicesizes[i],
i:
perm[n
q.pushback(2);
popback.
pushing
pushback,
["frontmiddlebackqueue",
popfront()
frontmiddlebackqueue
q.popfront();
q.popmiddle();
pushback(int
popping
"popfront"]
pushmiddle(int
q.pushfront(1);
q.popback();
pushfront(int
popfront,
frontmost
frontmiddlebackqueue();
"popback",
"popfront",
popmiddle,
q.pushmiddle(3);
popback()
frontmiddleback
pushfront,
"pushback",
popmiddle()
frontmiddleback()
q.pushmiddle(4);
"pushmiddle",
choices,
pushmiddle,
"popmiddle",
"pushfront",
[4,-8,7],
[10,4,-8],
[2,3,1,0]
[10,4],
[10,4,-8,7]
[-8,7],
[21,4,7]
[21,21]
"reset",
reset.
flip.
"flip"]
flip()
resets
solution.reset();
solution(3,
solution.flip();
"flip",
reset()
returned,
"1&(0&1)"
expressions.
"(((1))|(0))",
"(0&0)&(0&0&0)"
matched.
'1','0','&'
'&'.
(i.e:
"()1|1"
"(0|1)|(0&0&0)"
operator),'|'
properly
1&1
1|0&1
operator),'(',
"(0|(0|0&1))"
1|1|(0&0)&1
"1&(0|1)"
'1','0','&','|','(',
'&'
expression).
"(1)&()"
"(0|(1|0&1))"
"1|(0&(1))"
1|1|0&1
"1|1|(0&0)&1",
startvalue.
+2
[-3,2,-3,4,2]
+4
streamchecker.query("e");
["l"]]
"kl"]],
letter)
streamchecker.query("f");
streamchecker.query("c");
["g"],
'z',
["streamchecker",
["d"],
one)
streamchecker.query("k");
streamchecker.query("l");
streamchecker
streamchecker.query("j");
query(char
"xyz"]
'cd'
["f"],
streamchecker(["cd",
streamchecker.query("h");
["i"],
["h"],
streamchecker.query("b");
streamchecker(string[]
["a"],
["k"],
'kl'
["j"],
streamchecker.query("g");
streamchecker.query("d");
streamchecker.query("a");
["c"],
'y',
["b"],
"kl"]);
"axyz"
[[["cd",
streamchecker.query("i");
2d-map
[[0,1],[1,0],[1,2],[2,1]]
2.82843
[xcentre,
positions[i].length
[[1,1],[3,3]]
minimized:
ycentre]
2,3,4
2,2,3
belonging
indexed.
beforeitems
[6,3,4,1,5,2,0,7]
beforeitems.length
beforeitems[i][j]
[[],[6],[5],[6],[3,6],[],[],[]]
beforeitems[i]
[[],[6],[5],[6],[3],[],[4],[]]
beforeitems[i].length
[-1,-1,1,0,0,1,0,-1],
item).
belonging.
senators
dire.
parties.
senate.length
rights
"rd"
"dire".
"rdd"
party.
predict
guy
senator
round-based
senate[i]
dire
dota2,
ban
senators,
"radiant"
voting
voting.
exercise
"dire"
victory:
senator's
announce
victory
rights:
vote.
anymore
parties:
radiant
(*)
"a*"
"zero
(.)".
".*"
(5,4,1),
(rating[i],
[2,5,3,4,1]
rating.length
teams).
rating[j],
rating[j]
rating[i]
rating[k])
(rating[i]
(5,3,1).
rating[k]).
soldier
(soldiers
(2,3,4),
flips,
state:
sorted,
[3,2,4,1]
arr[0...k-1]
[4,2,4,3]
sorts
(k
k-values
img2[i][j]
img2
(shown
img2[i].length
translation
img1[i][j]
[[0]],
borders
[[0,0,0],[0,1,1],[0,0,1]]
img2,
img1.length
img2.length
red).
images
images,
translate
translated
img1[i].length
img1
[[1,1,0],[0,1,0],[0,1,0]],
[[1]],
votes[i]
"zmnaguedsjylbophrqicwfxtvk"
third.
team,
votes.length
systems.
conflict,
votes[j].length
tied
votes[0]
["zmnaguedsjylbophrqicwfxtvk"]
voted
position-one
"xwyz"
votes[i].length
votes[i][j]
tie-breaking
voters
voters.
["abc","acb","abc","acb","acb"]
votes[j]
votes.
voter,
votes.length.
["wxyz","xyzw"]
voter
count():
150]
t=50,
100],
constructed.
expiration
non-expired
expires.
42,
cache.
get(key):
t=250,
setting
key=1
50],
overwritten.
un-expired
elapsed,
t=120,
inaccessible.
["timelimitedcache",
t=140,
250]
duration):
t=150,
set(key,
t=40,
42)
overwritten
existed
(1:
get(1)
t=100,
[5,1,3]
nextlargest.
[1,1,2,2,2].
[1,1,1,1,2].
[1,1,1,2,2].
equal:
[3,1,3].
[1,1,2,2,3]
nextlargest
"0101"
https://leetcode.com/problems/number-complement/
complement.
476:
"daabcbaabcbc",
"axxxyyyb",
"dababc",
"dab".
done:
"dab"
"axxxxyyyyb",
"dabaabcbc".
"axyb".
"axxxyyyb".
"axxyyb",
"axxyyb".
"axyb",
"dababc".
"dabaabcbc",
part.length
removed:
targetx
(1,4)
y-coordinate
(4,7).
targety)
(targetx,
(2,7)
targety
points:
finite
targetx,
(1,8)
disobeys
(two
representations:
ones)
[false,true,false,false,false]
"foobartest"
"r".
["foobar","foobartest","football","framebuffer","forcefeedback"],
"framebuffer"
"all".
"foba"
"fb"
"ll".
pattern.length,
"est".
"oot"
"ot"
[true,false,true,false,false]
"football"
"ar".
"fo"
[true,false,true,true,false]
"uffer".
"fobat"
"rame"
"ppalll"
"ppallp"
award,
correct:
3]);
[null,1,1,1,1,0]
sum(w).
pickindex(),
0.75
1/4.
[null,1,0,1,0,0]
......
[[[1,3]],[],[],[],[],[]]
solution([1,
[null,0]
3/4.
[null,1,1,1,1,1]
[null,1,1,1,0,0]
["solution","pickindex","pickindex","pickindex","pickindex","pickindex"]
[null,1,1,1,0,1]
randomization
w.
75%).
solution([1]);
pickindex
25%),
[[[1]],[]]
w.length
solution.pickindex();
outputs
["solution","pickindex"]
w[i]
"ec"
sources.length
indexing
targets,
sources
["eee",
targets.length
targets[i].
"eeecd"
indexes[i]
"ffff".
"eeecd".
["eee","ffff"]
sources,
sources[i]
targets
"ffff"]
"eeebffff"
targets[i].length
["ab","ec"],
testcase
sources[i].length,
"cd"],
targets[i]
["ab","bc"]
[1,2,null,2,null,2],
cannot).
(picture
center).
[1,2,3,2,null,2,4],
removing,
[1,null,3,null,4]
(target
primes.length
primes[i]
primes,
primes
[2,7,13,19].
[2,3,5].
[1,2,4,7,8,13,14,16,19,26,28,32]
[2,7,13,19]
factors,
[2,6,14,11,7,3,12,8,4,13,9,10,5,1]
[5,6,3,2,4,1]
"r":
"ggllgg"
"gl"
(-1,
anti-clockwise.
direction).
"l":
cycle:
"g":
instructions:
south.
advancing
itineraries,
tickets[i]
flight.
"jfk",
["jfk","muc","lhr","sfo","sjc"]
lexical
airports
toi.length
["jfk","sfo","atl","jfk","atl","sfo"]
airline
tickets[i].length
fromi.length
"jfk".
man
["jfk",
["jfk","atl","jfk","sfo","atl","sfo"]
[["jfk","sfo"],["jfk","atl"],["sfo","atl"],["atl","jfk"],["atl","sfo"]]
"lgb"].
"lga"]
itinerary.
[["muc","lhr"],["jfk","muc"],["sfo","sjc"],["lhr","sfo"]]
reconstruction
tickets.length
'cc'].
maximally
"ababccc"
'ba'].
'ab',
'cc']
"burg"
"problem"
tired",
"pro"
"you"
burger",
am
index).
searchword,
product_key
buyer
+-----------+------------+----------------+
2019-08-05
2018-08-04
item_brand
2018-08-02
orders_in_2019
2019-08-03
lg
2018-01-19
favorite_brand
+---------+------------+
join_date
+---------+------------+----------------+
2018-02-09
2018-05-21
item_id
2018-01-01
+----------+------------+---------+----------+-----------+
[4,3,2,1].
[1,2,3,10,4,2,3,5]
[3,10,4].
[10,4,2]
[1,2,3,3,5]
lowlimit
highlimit,
highlimit
sequence.length
k-repeating
"ababc".
x2|
fingers.
fingers,
y2|.
finger
"cake"
|y1
|x1
[1,2,null,3],
[5,8,9,2,1,3,7,4,6],
[[12,4],[8,1],[6,3]]
[5,2,4,6,6,3],
mi.
mi].
[[3,1],[1,3],[5,6]]
[15,-1,5]
xi)
mi
mi,
max(nums[j]
"11000"
"00000"
"10111"
ladders
[4,2,7,6,9,14,12],
(h[i+1]
ladders.
building's
buildings,
bricks,
i+1
h[i])
[4,12,2,7,3,18,20,3,19],
[14,3,19,3],
match)
wordlist[i]
["kite","kite","kite","hare","hare","hear","hear","keti","keet","keto"]
"yellow"
wordlist[i].length,
capitalization:
mistakes:
operates
individually,
["yellow"]
capitlization,
["yellow"],
"yllw":
["kite","kite","kite","hare","hare","","","kite","","kite"]
"yeellow":
errors:
(case-insensitive),
"yellow":
["kite","kite","hare","hare"],
(case-sensitive),
wordlist,
spelling
errors,
"yollow":
wordlist.length,
(nums1[0]
nums2[n
[5,3,4]
nums2[0])
(nums1[n
nums2[1])
[1,0,3],
(nums1[1]
[1,0,0,2,3,0,0,4]
written.
[1,0,2,3,0,4,5,0]
fixed-length
figured
[5,4,-1,7,8]
subtle.
conquer
approach,
[4,-1,2,1]
coding
[-2,1,-3,4,-1,2,1,-5,4]
[false,false,false]
x0
011;
most-significant-bit
least-significant-bit).
nums[0..i]
booleans
[true,false,false]
11).
two-bit
one-bit
bits[i]
bits.length
cells.length
cells[i]
[0,1,0,1,1,0,0,1],
vacant
[0,0,1,1,0,0,0,0]
vacant,
summarizes
vacant.
[0,0,1,1,1,1,1,0]
[1,0,0,1,0,0,1,0],
actor
director
actor_id
provides
director_id)
actordirector
(actor_id,
+-------------+-------------+-------------+
director_id
"s'tel
edocteel
gnid"
ekat
"let's
"god
preserving
tsetnoc"
contest"
ding"
"dog
(recall
[1,2,5,4,3]
(1-indexed.)
[5,2,3,4,1]
682289015
it.)
[1,-1,-2,4,-7,3],
[10,-5,-2,4,0,3],
[1,-1,4,3]
[10,4,3]
k)]
[1,-5,-20,4,-1,3,-6,-3],
"ba")
split).
(good
("aac",
sleft
("aa",
"caba")
"cd").
"a")
"aba")
("aacab",
"acaba")
("aaca",
"aacaba"
("a",
sright
["(())()","()()()"]
["(a())()","(a)()()"]
"()())()"
"(a)())()"
["bob,50,1200,mtv"]
{name}
2000.
{amount}
["alice,50,1200,mtv"]
{city}
{time}
["alice,20,800,mtv","bob,50,1200,mtv"]
["alice,20,800,mtv","alice,50,1200,mtv"]
minutes),
$1000,
["alice,20,800,mtv","alice,50,100,beijing"]
or;
"{name},{time},{amount},{city}"
quadruplet
l)
nums[l].
quadruplets,
nums[k],
[1,3,2,4,5]
quadruplets.
"mdbabdm".
"mbdadbm"
insertions.
"zzazz"
"mbadm"
"leetcodocteel".
'a's,
[2,3,1,3,1,null,1]
[2,3,1].
(palindrome)
[2,1,1,1,3,null,null,null,null,null,1]
[2,1,1],
[2,1,3,1],
(palindrome).
thread.
water[i]
barriers
"hohhho",
molecules.
"hhohho"
"ohh"
"hohhoh",
water.length
molecule
"ohhohh"
bond
sets;
barrier.
"hoh"
"ohhhho",
releaseoxygen
barrier
"hhoohh",
explicitly;
synchronization
hydrogen.
"oohhhh"
"hho"
hydrogen
molecules
oxygen
with.
enforces
"ohhhoh",
releasehydrogen
bind
"hhohoh",
"hohohh"
examine
[[1,2],[1,0],[2,0]],
(numcourses
vj].
indirect.
[false,false]
prerequisites,
prerequisites[i]
prerequisites.length
numcourses
[true,true]
prerequisites[i].length
[[1,0],[1,2]]
points[r][c]
abs(c1
[[1,5],[2,3],[4,2]]
points[r].length
(r
[[1,2,3],[1,5,1],[3,1,1]]
smallest,
[1,2,3,6],
"llllrrrr"
"lr",
"rlrrllrlrl"
"rrll",
"rr",
"rrrllrll",
"rl",
"rlrrrllrll"
"llllrrrr".
[9,9,9,9]
465
[9,9,9,9,9,9,9],
l2
342
[7,0,8]
[8,9,9,9,0,0,0,1]
l1
whitespaces
"1000",
[1000]
[1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
"1317",
k]
elapsed.
billion
3x.
3x
(-1).
(63
[2,3,3,4,6,7],
61
[3,5,6,7],
(nums
[3,3,6]
61).
numbers).
([6,7],
[7]).
[3,3,6,8],
0110.
"1229857369"
reformatted
"0a1b2c",
"0a1b2c"
(alphanumeric
"a0b1c2",
"0c2a1b"
"a0b1c2"
"0a1b2c".
arr[0].length
[0,1,1,1]
arr[i][j]
[0,1,1,1],
[2,1,3,5,6,4,7]
[2,3,6,7,1,5,4]
[1,3,5,2,4]
[-1,0,0,0],
"aabc"
[-1,0,0,1,1,2],
"abacbe"
forget
person)
people)
afterwards.
forget,
forgets
discovers
delay,
discovering
secret.
he/she
[4,2,3]
(0-based)
10:00
09:45
clock.
10:00.
09:30
logintime
ended.
"03:00"
logouttime.
10:15
midnight
03:00.
logintime,
23:45.
"21:30",
09:31
01:30.
00:45,
logout
10:14
starts.
began.
chess
"09:31",
00:15,
21:30
logouttime
"10:14"
"holle"
"leotcede"
["a",""]
["abcd","dcba","lls","s","sssll"]
[[0,1],[1,0],[3,2],[2,4]]
["battab","tabbat"]
words.length,
["a","a"]
strings)
["abcddcba","dcbaabcd","slls","llssssll"]
["bat","tab","cat"]
threshold)
["majoritychecker",
arr)
efficiently
majoritychecker.query(0,
1]);
majoritychecker
majoritychecker.query(2,
query(int
majoritychecker([1,
majoritychecker(int[]
nodes),
levels.
(6,null,null,null,null,null,7).
end-nodes
[1,3,2,5,null,null,9,6,null,7]
(5,3,null,9).
[1,3,2,5]
(3,2).
[[5,7,0],[0,3,1],[0,5,0]]
non-zero.
x-matrix.
(diagonals)
[[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]
2017-01-03
visit_date,
2017-01-02
visit_date
2017-01-06
1455
2017-01-05
145
2017-01-09
attended.
2017-01-04
2017-01-01
id's,
+------+------------+-----------+
increases,
2017-01-07
higher[i]
[8,10,12].
[2,6,10,4,8,12],
higher,
possibility
[1,1,3,3],
[2,10,6,4,8,12]
215.
[5,7,9]
lower[i]
[5,435]
remembers
[4,8,12].
[435].
belonged
[2,6,10]
[220]
combining
[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
2500].
[1,4,2,6,8],
[4,2,8],
downwards.
[1,4,2,6],
obstaclegrid[i].length
[[0,1],[0,0]]
obstaclegrid[i][j]
obstaclegrid.length
obstacle.
obstaclegrid
"id"
string(list[0]);
string(n
item.id;
{"id":
selector
(item)
"2":
_.groupby
[{"id":
fn(arr[i])
array.length
"2"}]
{"id":"1"},
"1"},
acceptable.
"1"}],
],
9]]
"false":
"true":
{"id":"2"}
array.groupby(fn).
array.groupby(fn)
[[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
[[1,2],[4,3]]
[[1,1,3],[3,2,2],[1,1,4]]
pointing
arrow
1][j])
signs
(movie_id,
rated
avengers
movie_id
review
monica
created_at
2020-01-01
2"
user's
2020-01-12
"frozen
review.
("avengers",
"joker")
movierating
joker
3.5
frozen
2020-02-22
2020-02-12
event2[i].length
["10:00","11:00"],
event1
starttime1
starttime2
01:20
endtime1
event2.length
hh:mm
02:00.
evnet1.length
event2,
["02:00","03:00"]
["01:00","02:00"],
event1[i].length
2:00.
["14:00","15:00"]
endtime2].
[starttime2,
events).
endtime1]
endtime2
["01:15","02:00"],
event2
["01:20","03:00"]
[starttime1,
846:
[3,2,1,2,3,4,3,4,5,9,10,11],
[3,4,5,6].
[1,2,3,3,4,4,5,6],
https://leetcode.com/problems/hand-of-straights/
[9,10,11].
dist(0,5)
dist(0,1)
dist(0,2)
[8,12,6,10,10,10]
dist(0,3)
dist(0,4)
[[0,1],[0,2],[2,3],[2,4],[2,5]]
neccesarilly
56803
[60864,25176,27249,21296,20204],
difference)
11361
[4,9,3],
shepherd
database.
ratio
shirazi
poor_query_percentage
poor
query_name,
query_percentage
sphynx
siamese
poor_
retriever
poor_query_percentage.
+------------+---------+-----------------------+
7))
+------------+-------------------+----------+--------+
((2
german
query_name
golden
mule
0.66
subsequence's
"bbbb".
"bbbab"
chalk[i]
[3,4,1,2],
chalk.length
restart
chalk,
chalk.
solve,
chalk[i],
[5,1,5],
nums[i][i]
[1,5,9]
diagonals,
nums[i][nums.length
[3,5,7].
[[1,2,3],[5,6,7],[9,10,11]]
prime,
4*106
[[1,2,3],[5,17,7],[9,11,10]]
numsi.length
fib(n
["call","getcallcount"]
sum()
[2,6,2,2,6,2]
memoizedsum
factorial(n
memofactorial(2);
memoize(sum);
memoize(factorial);
factorial.
fib(5)
"factorial"
[[2,2],[2,2],[],[1,2],[]]
1));
attempts
[[5],[]]
memofactorial
fib
[[2],[3],[2],[],[3],[]]
memoizedsum(2,
"fib"
[4,4,1,3,2]
["call","call","getcallcount","call","getcallcount"]
memofactorial(3);
memoizedsum(1,
"sum"
fib,
["call","call","call","getcallcount","call","getcallcount"]
[1,0,0,0,0,1],
[[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]
presence
[[0,1],[1,2],[2,3],[3,4],[4,5]]
[0,0,0,1,1,0,0,1],
if)
node.)
[1,2,3,4,5,6,7,8,9,10,11],
nums1's
sorted?
nums2's
disk,
better?
once?
size?
algorithm?
green:
[228,216,211]
[[7,7,7]]
[20,9,8]
depicted
(area
red:
[[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
211
blue:
228
corner)
middle)
point].
[one
[3,1,4,0,2],
[1,3,0,2,4].
[2,3,1,4,0]
[0,2,3,1,4],
nums[k-1]].
[2,4,1,3,0],
[1,4,0,2,3],
[1,3,0,2,4]
[no
points],
[4,0,2,3,1],
afterward,
point],
[2,3,1,4,0],
nums[k
types.length
indistinguishable.
counti,
marksi]
[[50,1],[50,2],[50,5]]
types[i]
marksi
[counti,
counti
[[6,1],[3,2],[2,3]]
types[i].length
questions,
[2,1,1]]
[[1,1,2],
"aaabc".
string..
"aacab".
"aaabc"
"baaca",
"bac".
myhashset.add(2);
found)
hashset.
"contains",
contains(key)
myhashset.contains(3);
myhashset.remove(2);
removed)
"contains"]
myhashset.contains(2);
myhashset.contains(1);
hashset,
myhashset.add(1);
myhashset();
["myhashset",
myhashset
add(key)
(already
comprising
must:
[4,6,1,6].
[4,6,2,5].
[3,7,1,6]
[10,1]
[5,5,2,5].
"aaca",
"ay"
"ca".
"azxxzy"
"abbaca"
"/a".
"/a/b/c"
["/a","/a/b/c","/a/b/d"]
folder[j],
sub-folder
filesystem.
folder[i].length
["/a","/a/b","/c/d","/c/d/e","/c/f"]
"/a/b"
["/a"]
"/a/b/d"
"/leetcode/problems"
["/a/b/c","/a/b/ca","/a/b/d"]
"/leetcode"
["/a","/c/d","/c/f"]
"/c/d/e"
folder[i]
folder.length
"/c/d"
repaired.
ranksi
mechanic
[5,1,8],
repaired
mechanics.
mechanics
[4,2,3,1],
mechanic.
cars.
garage
drink:
drink.
bottle
numbottles
numexchange
numexchange,
bottle.
drinking
graph's
mst
[[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
[[],[0,1,2,3]]
(mst)
pseudo-critical.
mst.
observe
msts,
msts
[[0,1],[2,3,4,5]]
weighti
weight.
[[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
(mst).
msts:
rightchild
leftchild[i]
[1,-1,3,-1],
rightchild[i],
leftchild.length
rightchild.length
leftchild[i],
[2,-1,-1,-1]
leftchild
rightchild[i]
[2,3,-1,-1]
abbreviate
399168.
12345...54321,
"399168e2"
1234567654321
"24e0".
"12345...89876e5".
"24e0"
<pre>
"399168e2".
<pre>...<suf>
1234567
39916800.
"<pre>...<suf>ec".
7219856259000.
12345678987600000
abbreviation
<suf>
1234567.
"e2".
371,
"e0".
375
"7219856259e3"
"aaca"
[[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]
"aaaa".
lcp[3][3]
lcp.length
lcp.
"aabd"
[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]
word[j,n-1].
lcp[i].length
"abab".
word[i,n-1]
[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]
lcp[i][j]
word[3,...,3]
letter;
lcp,
nums[d]
[1,0,-1,0,-2,2],
[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
nums[d]]
[[2,2,2,2]]
[nums[a],
nums[a]
nums[c]
nums[c],
nums[b],
nums[b]
[[1,3],[5,6],[8,10],[11,13]]
[[5,10],[6,8],[1,5],[2,3],[1,10]]
capacitya
max(plants[i])
alice/bob
can,
[2,2,3,3],
(instantaneously)
plants[i]
cans.
refills
waters
refill
his/her
needs,
plants,
cans
needs.
capacities
plants.length
capacityb
capacitya,
plant,
"abdd",
"22233"
transmission,
pressedkeys
"badd",
82876089
"cdd",
"222222222222222222222222222222222222"
phone.
82876089.
2082876103
"ce".
'k',
sent.
texting
"aaae",
messages,
"aaadd",
"2266622".
pressedkeys.length
idi+1
leavetimei
[[1,1],[3,7],[2,12],[7,17]]
[[0,3],[2,5],[0,9],[1,15]]
[[0,10],[1,20]]
leavetimei]
expressible,
indexk
nums[index2]
nums[indexk]
nums[index1]
expressible
expressible.
deleted,
details.
","int
comments,
eventually
main()",
*/
main()
(non-overlapping)
"a/*comment\nline\nmore_comment*/b",
delimited
c;","a
comment.
*/";"
["/*test
6-9.
"{
c++,
program,
*/",
double-quote
"*/"
yet
/*
["ab"]
'\n'.
comments.
"//"
right.)
visualized
"int
"/*/"
"/*
declaration
"}"]
single-quote
control
c;","}"]
source[i].length
test",
["a/*comment",
c;",
["ab"].
"/*"
"more_comment*/b"]
"string
main()","{
multiline
"line",
["int
comment,
macros
comment
/*test
newline
quote,
(1,4),
[1,7,9,2,5],
pair:
(0,5),
[0,1,7,4,4,5],
(1,5).
operations[i].length
operations[i][1]
[3,2,7,1].
[1,2,4,6],
[[1,3],[4,7],[6,1]]
operations[i][0],
[3,1].
operations[i][0]
operations[i][1].
[[1,3],[2,1],[3,2]]
[3,2,4,6].
[3,2,7,1]
[3,2,7,6].
routes[i].length
routes[i]
sum(routes[i].length)
routes[i][j]
[[1,2,7],[3,6,7]],
routes[0]
[[7,12],[4,5,15],[6],[15,19],[9,12,13]],
initially),
source,
routes.length
'bbb'
'aaa'
maximal.
[1,7,0,7,-8,null,null]
[989,null,10250,98693,-89388,null,null,null,-32127]
["sweet","sour"]
apple",
sour"
["banana"]
"apple
sweet",
flowerbed.length
flowerbed
[1,0,0,0,1],
planted,
flowerbed[i]
no-adjacent-flowers
flowerbed.
plots.
[5,1,4,2,3].
[5,5,1,1,3].
17,â€‰3],
[1,1,3,5,5],
((n
[11,8,6,6,7,7].
arr[m]
[11,8,6,6,7]
[-7,
stronger
m|,
22]
[6,7,11,7,6,8],
[7,1,3,9]
[8,3].
10921,
[1,3,2,5,8,3,7,7]
[1,0,9,2,1].
[13,25,83,77]
separations
[1,3,2,5,8,3,7,7].
[7,1,3,9].
77
[7,7].
(2/(3/4))
"1000/((100/10)/2)"
1000/(100/10/2)
8/3
1000/100/10/2
bold
priority.
1000/(100/(10/2))
"2/(3/4)"
"1000/(100/10/2)"
priority
1000/100/(10/2)
1000/(100/10)/2
"1000/(100/10/2)".
1000/((100/10)/2)
influence
[1000,100,10,2]
2.667
"2/3/4".
[[3,4,5],[3,2,6],[2,2,1]]
[[9,9,4],[6,6,8],[2,1,1]]
wrap-around
[1,-1].
[-1,1]
[1,-1]
[-2,3,-5,1,-4,2]
|nums[i]|
[3,1,2,-2,-5,-4],
[3,-2,1,-5,2,-4].
[3,1,-2,-5,2,-4]
[3,-2,1,-5,2,-4]
signs.
[-2,-5,-4].
[1,-2,2,-5,3,-4],
reverse(x)
"0111001".
"0111001"
sn.
inverts
"011100110110001"
"011100110110001".
invert(x)
reverse(invert(si
11th
[4,3,2,5,6,7,2,5,5],
[7,6,5,5,5,6,8,7,8],
"7772"
cost[i],
cost("7772")
cost("85")
3*1
2*3+
"977",
"85"
[2,4,6,2,4,6,4,4,4],
xi+2
[3,11,14]
fibonacci-like:
[1,2,3,5,8].
[1,3,7,11,12,14,18]
[1,11,12],
[7,11,18].
[2,1,2,5,3,2]
[5,1,5,2,5,3,5,4]
[1,2,3,3]
even;
odd;
"magic
square:
[[8]]
contiguous).
square"
[[4,3,8,4],[9,5,1,9],[2,7,6,2]]
not:
subgrids
mat[r][c]
[[12,21,16],[27,45,33],[24,39,28]]
[[45,45,45],[45,45,45],[45,45,45]]
answer[i][j]
for:
["aaa","aaa","aa"]
["aba","cdc","eae"]
[1,2,4,8]
[1,2,4,8,16,32,64,128,256,512,1024]
representation,
[0,1,2,3,4,5,6,7,8]
[0,1,2,4,8,3,5,6,7]
[1024,512,256,128,64,32,16,8,4,2,1]
[[1,2],[7,8],[4,5]]
fashion.
[7,8].
[1,2,3,3,4,4,5,5]
integer).
subsequences:
[1,2,3,3,4,5]
[1,2,3,4,4,5]
ther
[6,7]
[7,1,4,6,null,5,3,null,null,null,null,null,2],
[[4,1,2],[0,5,3]]
[[1,2,3],[4,0,5]]
solves
[[1,2,3],[4,5,0]].
[[1,2,0],[4,5,3]]
[[1,0,2],[4,5,3]]
[[4,1,2],[5,0,3]]
solved
[[0,1,2],[4,5,3]]
solved.
[[1,2,3],[4,5,0]]
[[1,2,3],[5,4,0]]
["push","push","pop","push"]
["push","push"]
"pop":
["push","push","push"]
"push":
top)
|19
|24
(integer
[2,5,3,9,5,3]
|27
|(2
division)
monotonic,
decreasing.
[6,5,4,4]
|20-20|
|12-14|
|9-8|
mailbox.
|3-1|
[1,4,8,10,20],
[2,3,5,12,18],
|4-3|
|18-14|
war
+----+------------+-------------+--------+
ids:
8.5
8.6
rating.
fiction
"boring".
9.1
8.9
genre,
science
interesting
irish
fantacy
description
6.2
["abc","ab","bc","b"]
answer[3]
"cab"],
"bc".
prefixes:
prefix:
(5),
[4,3,2,3,5,2,1],
decimal.
"00101001",
"00101"
decimal,
"000001"
"00100"
"00010",
"1001010",
ground.
rung.
[1,3,5,10],
[3,4,6,7],
[3,6,8,10],
rung
climbed
rungs.
rungs.length
rungs[i]
rung)
[1,3,5,7,8,10].
dist.
[1,3,4,6,7].
[[5,3],[4,7],[2,3]]
[4,2,1,3,7].
[4,5,3]
bi].
(3,2)
eliminating
[[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]],
[[0,1,1],[1,1,1],[1,0,0]],
(obstacle).
(4,2).
[3,4,3,4].
trimmed(subarray)
splits.
[1,2,1,2,1].
[1,2,1,2,1,3,3],
[1,2,1,2,1]
[1,2,1,3,3]
subarray:
[1,2,3,3,3,4,4],
[1,2,1,2,1],
trimmed([1,2,3,3,3,4,4])
[3,3,3,4,4].the
[1,2,1].
trimmed([3,1,2,4,3,4])
[1,2,1,3,3].
trimmed(subarray).length.
[[1,3,5,7],[10,11,16,20],[23,30,34,60]],
matrix[i][j],
n))
o(log(m
subroot.val
[3,4,5,1,2,null,null,null,null,0],
subroot
[3,4,5,1,2],
subroot,
[1,0,2,1],
[4,2,0,7,4]
[6,2,7,3],
["a","a"],
["a","b","c","ab","bc","abc"],
friends.length
[[1,2],[0,3],[0,3],[1,2]],
friends[i].length
watchedvideos[i].length
(increasing).
["b","c"]
(green
friends[i]
watchedvideos
friends[j]
figure)
watchedvideos.length
watchedvideos[i]
figure).
friends[i][j]
figure):
["c"]
["d"]
greatest.
(yellow
watchedvideos[i][j].length
[["a","b"],["c"],["b","c"],["d"]],
general,
partner_id's.
2020-12-8,
make_name
+-----------+-----------+---------+------------+
date_id
honda
2020-12-7,
lead_id
toyota
partner_id
2020-12-8
lead_id's
dailysales
unique_partners
2020-12-7
+-----------+-----------+--------------+-----------------+
partner
make_name,
unique_leads
+-----+-------+------------+-----------+
reports.
department,
ron
anne
secondhighestsalary
+---------------------+
+----------------+----------------+
108939
91796
[$20000,
$50000].
$20000.
87709
+------------+--------+
categories.
account_id
12747
category,
accounts_count
salary:
"low
category.
salary":
"average
$50000.
[3,5,7],
[1,5,7],
[2,6,8],
[1,5,9],
[2,4,8],
[1,6,7],
[3,4,9],
[[7]]
[2,4,9],
[2,6,7],
[3,4,8],
[1,6,8],
perm[1]
construct.
[2,1]:
perm[2]
perm[i].
consequently,
[3,4,2]
afterwards,
[2,2,3,3,3,4]
4's
"ababcbacadefegdehijhklij"
"defegde",
"ababcbaca",
"eccbbbbdec"
"hijhklij"
"ababcbacadefegde",
incorrect,
[9,7,8]
"hijhklij".
+------------------------+
getnthhighestsalary(2)
(3+3)
[3,1,5,6,4,2]
(5+6+4)
[2,3,3,1,2]
(3+2+5)
(2+3+2)
cashier.getbill([4],[10]);
products,
bill,
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
product[j]
4000.
4000.0.
1600
cashier.getbill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);
amount[j]
7350.
prices)
frequented
discount)
800.0.
percent
["cashier","getbill","getbill","getbill","getbill","getbill","getbill","getbill"]
getbill(int[]
cashier.getbill([7,3],[10,10]);
product.length
product[j],
cashier
groceries
cashier.getbill([2,3,5],[5,3,2]);
2500.0.
cashier(int
cashier.getbill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]);
paying
subtotal
500.0.
supermarket
subtotal.
cashier.getbill([1,2],[1,2]);
800.
100).
7350.0.
cashier.getbill([3,7],[10,10]);
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
any).
getbill.
14700
product).
cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
paying,
14700,
discount,
mylinkedlist()
linkedlist
addattail(int
1->3
"addatindex",
doubly
indexth
mylinkedlist.deleteatindex(1);
pointer/reference
deleteatindex.
mylinkedlist();
addatindex(int
mylinkedlist.get(1);
prev
addattail,
1->2->3
"addathead",
mylinkedlist
"deleteatindex",
addathead,
mylinkedlist.addatindex(1,
mylinkedlist.addathead(1);
mylinkedlist.addattail(3);
"addattail",
deleteatindex(int
library.
inserted.
["mylinkedlist",
addatindex
addathead(int
["eat","tea","tan","ate","nat","bat"]
phrase,
[["a"]]
[[""]]
[["bat"],["nat","tan"],["ate","eat","tea"]]
typically
"algaloog"
"goal"
interprets
"al".
"goal".
"(al)g(al)()()g"
"gooooal"
(al)
al
"g()()()()(al)"
command.length
"(al)"
command
parser's
"g"
"g()(al)"
interpret
"x=0"
"x+5-3+x=6+x-2"
"x=2"
coefficient.
solutions"
"no
"2x=x"
"infinite
"x=x"
equation.
equation.length
"x=#value".
ri,
c2i]
c1i,
dig[i]
(ri,
artifact
'd')
c2i)
artifacts.length,
artifacts[i].length
namely
excavated
r2i,
artifact.
r2i
extract.
(r2i,
extracted,
(r1i,
[[0,0],[0,1],[1,1]]
r1i
artifacts.
excavate
dig[i].length
[[0,0,0,0],[0,1,1,1]],
artifacts[i]
uncovered.
dig.length
uncovered,
uncovered
[r1i,
ci),
c1i)
buried
mud
dig
r1i,
c2i
c1i
c2i,
underneath,
min(n2,
fraction,
repeating,
"0.(012)"
numerator,
enclose
"0.5"
'c'(cat),'m'(mouse).
(cat,
mousejump
(left,
mousejump,
catjump
food.
mouse,
["####f","#c...","m...."],
["m.c...f"],
cat.
mouse),
catjump,
digit)
987-123-4567
456-7890
line),
one-liner
(xxx)
xxx-xxx-xxxx.
(123)
xxx-xxxx
456
7890
[1,null,2,3]
[[0,2],[0,5],[2,4],[1,6],[5,4]]
other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
('sell',
30000
(1010
capital_gain_loss
operation_day)
9500
'sell'
9500$.
+---------------+-------------------+
stocks
+---------------+-----------+---------------+--------+
-23000
stock_name
stock.
corona
(stock_name,
1000)
10000$.
(500
gains/losses
-23000$.
500$.
10$
'buy'
operation_day
9000$.
'buy')
1000$
8000$.
1010$.
7000$.
handbags
masks
('buy'
30000$
'sell')
0.73278
"21".
draws
outcomes
maxpts],
loosely
maxpts
probabilities.
[3,3,2,2,1].
nums[i...j].
[1,0,2,1,3]
[1,0,2].
[3,3,2,2,1]
max(bik)
sized
or.
[0,2,1].
bij
[4,7,15,8,3,5]
coprime,
validly
[4,7,8,15,3,5]
coprime.
val2)
gcd(val1,
[3,1,3,4,3]:
[1,2,3,4]:
3's,
[3,1,3,4,3],
6-2
[3,2,6,5,0,3]
[2,4,1]
3-0
transactions:
4-2
('r',
rings.length
"g4"
"r3g2b1"
rings,
'9').
rods.
rings:
"b0r0g0r9r0b0g0"
color-position
'b').
rings[i]
"b0b6g0r6r0r6g9"
res("hello"));
resolving
object).
tasks()
cancellable(generator);
t=0ms
promise.
catch(e)
yielded.
resolve(2
"cancelled"
settimeout(resolve,
cancelledat
generatorfunction
`error:
caught
reject)
cancellable(tasks());
promise(resolve
completes.
"success";
res(1));
promise.then(console.log);
result;
"error:
promise.catch(console.log);
promise((resolve,
t=100ms,
settimeout(cancel,
"cancelled"}
caught.
42}
2));
cancelling
rejects,
200));
4}
usual.
cancel()
function*
${msg}`;
rejects.
hasn't
t=150ms,
uncaught,
generatorfunction();
resolve(2));
cancel
yielded
cancelled.
promise]
reject("promise
rejected"));
msg
generator.
caught,
function*()
hello"}
[cancel,
200ms,
promises.
{"rejected":
responsibility
{"resolved":
quickly"
cipher
"zwx
vcnjrdb"
secret"
themselves.
dog",
(actual
('h'
alphabet),
boxing
boy"
"eljuxhpwnyrdgtqkviszcfmabo".
lqantp
message.
dog".
bs
mnoeius
substitution
suepuv"
hnfx
ycgk
"happy
"eljuxhpwnyrdgtqkviszcfmabo",
message.length
"vkbs
substituted
batch.
donut
[6,2,4,5,1,3].
donut.
donuts.
batches
[1,3,2,5,2,2,1,6]
bakes
groups.length
batchsize
served
groups[i]
batchsize.
[9,8,4,2,1],
high.
1):
[1,4,2,7],
"eeeee"
"abbcccddddeeeeedcba"
+----------+-------------+
mall.
+----------------+----------+--------+
910
visit_id.
visit_id
970
count_no_trans
transaction_id
see,
+-------------+----------------+
mall
310
comprises
sum(nums)
[1,0,0,0,0,0,1,1],
[1,1,0,1],
[0,0,0,0,0,1,1,1].
49).
released.
"spuda"
keypresses,
release
keypress
releasetimes[i]
releasetimes[i
[12,23,36,46,62],
50).
29).
tester
keypresses
test,
releasetimes
tested,
keyspressed.length
releasetimes,
keyspressed[i]
keypad
releasetimes[i+1]
released
keyspressed
designed
releasetimes[0].
releasetimes.length
keypresses.
(pressed
"cbcd"
duration.
[9,29,49,50],
myself2
this1"
sentence4
a3
"is2
i"
a3"
and3
this1
myself
sentence4",
me1
and3"
i4",
appending
"me
"this1
a3".
i4
"me1
"sentence4
is2
"myself2
[1,2,2,4,3,5]
[1,4,3,2,5,2],
preserve
collision.
movements.
direction;
happens.
monkey
monkey.
obj.addelement(10);
calculatemkaverage()
"calculatemkaverage"]
mkaverage
addelement
5/1
mkaverage(int
[3,1,10,5,5]
obj.addelement(1);
obj.calculatemkaverage();
[3,1,10,5]
[3,1,10]
"addelement",
[3,1,10,5,5,5]
["mkaverage",
mkaverage(3,
calculatemkaverage.
[3,1,10].
k*2
addelement(int
obj.addelement(3);
obj.addelement(5);
"calculatemkaverage",
"textbook"
"book"
"text"
'u').
"ok".
alike.
"book".
"bo"
plot,
plots,
arrangements:
plot
result[2]
sum(|nums[i]-nums[j]|)
|5-2|
|3-2|
[1,4,6,8,10]
0-indexed,
[24,15,13,15,21]
|2-5|
2d-array.
[[1,2],[2,3],[3,4],[4,1],[1,5]]
2d-array
num[0]
'3'.
num[2]
"030"
"1210",
violate
"1210"
num[1]
+----+----+----+----------+
z)
yes
+----+----+----+
[1,1,2,3,3]
needle
haystack,
"leeto"
"sadbutsad",
haystack.
haystack.length,
haystack
needle.length
[4,16,2]
streak.
[2,4,16].
[4,16,2].
[2,3,5,6,7]
[4,3,6,16,8,2]
nums[5]|)
nums[j]|,
nums[4]|,
[4,2,1,2],
attain.
(nums.length)/2
max(0,
[10,1,2,7,1,3],
|nums[2]
max(|nums[1]
t_3
tn.
1389537
tn+2
2^31
tn
tn+1
t_4
t0
tn+3
(signed
unsigned).
-321
-123
examples).
farthest
maximumbit.
[2,3,4,7],
[0,1,2,2,5,7],
2maximumbit
[0,1,1,3],
nums[nums.length-1]
maximumbit
[5,2,6,5]
[0,3,2,3]
[0,1,1],
[4,3,6,4,6,7]
[-10^4,
10^5].
[3,1,4,3,null,1,5]
10^4].
[3,3,null,4,2]
(3,4)
(3,1,3)
|yi
[[3,12],[-2,5],[-4,1]]
yj|,
[[0,0],[2,2],[3,10],[5,2],[7,0]]
2d-plane,
1,3
[1,3,4,1,2,3,1]
[[4,3,2,1]]
1,3,4,2
[[1,3,4,2],[1,3],[1]]
le
[[88],[15]]
sum(pieces[i].length)
pieces[i].
[91,4,64,78],
pieces[i].length
[49,18,16],
[88]
[[78],[4,64],[91]]
[15,88],
pieces[0].
[91]
[78]
pieces[i][j]
[[16,18,49]]
[4,64]
pieces.length
courses.length
1101st
1100th
courses[i]
1300th
lastdayi
3300th
[[3,2],[4,3]]
durationi,
101st
most:
[durationi,
ready
courses,
lastdayi]
[[100,200],[200,1300],[1000,1250],[2000,3200]]
lastdayi.
take.
[[0,0,0],[0,1,0],[1,1,1]]
[[0,0,0],[0,1,0],[1,2,1]]
signal,
[[2,1,1],[2,3,1],[3,4,1]],
edges.)
signal.
wi),
[[1,2,1]],
[[0,0]],
[[5,2,4],[3,0,5],[0,7,2]],
[[7,3,4,9],[2,3,6,2],[2,3,7,0]],
selects
+------------+------------+----------+-------+
first_year
s[3].
locked[1]
locked[3]
"010100"
s[0].
permits
locked[i]
s[i].
locked.length
locked,
"))()))",
placement,
n-queens'
[["q"]]
[[".q..","...q","q...","..q."],["..q.","q...","...q",".q.."]]
capital[i]
ipo.
projects.
capital.
projects,
profits[i]
projects
profits.length
soon.
profits
capital.length
pure
resources,
venture
|1|
|-4|
[2,-1,1]
|4|
|8|
[-4,-2,1,4,8]
|-2|
[1,2,3,-3,4]
[1,2,-3,3,1]
objects.)
serializations
[1,2,3,-3,-2]
unique_id)
+----+-----------+
unique_id
employeeuni
+----+----------+
+-----------+----------+
flips[i]
"0001",
prefix-aligned.
"1001",
"01110",
"01100",
"0000".
[3,2,4,1,5]
"1111",
flips.length
"11110",
pictorial
thereafter,
routine
touches
minutes:
(n-1-i)th
twins
[1,100000]
[4,2,2,3]
[5,4,2,1]
100001.
100001
max(7,
twin.
seconds,
changes,
1th
afer
2th
38.5,
anyone
reports_count
him,
null).
(reports_to
average_age
reports_to
reporting
managers,
(41+36)/2
+-------------+---------+------------+-----+
+-------------+-------+---------------+-------------+
incremented
m[x][y]
[[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
[[2,2],[3,3]]
ops,
ops[i].length
ops[i]
ops.length
[2,4,8,16]
10080
[2,4,3,7,10,6]
determined.
0101,
1100,
[1,3,2,1,1,3,2,1]
ans.
[1,3,2,1]
[nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
ans[i
[nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
[1,2,1,1,2,1]
[3,8,1]
secondlen
[0,6,5,2,2,5,1,9,4],
secondlen,
[0,3,8]
firstlen
[8,9]
firstlen,
[3,8,1,3,2,1,8,9,0],
secondlen.
[2,1,5,6,0,9,5,0,3,8],
[5,6,0,9]
mycalendar.book(20,
[15,
mycalendar.book(10,
mycalendar();
25);
mycalendar()
30]]
["mycalendar",
25],
mycalendar
mycalendar.book(15,
considered,
subtree,
231).
36,
children;
[6,2,4]
[4,11]
3s
j|.
[2,1,3,1,2,3,3]
[10,5,10,10]
[4,2,7,2,4,4,5]
[5,0,3,4]
10s
pickup/delivery
(p1,
d1),
services.
(p1,p2,d2,d1),
(p2,p1,d2,d1)
pickup(i).
(p2,p1,d1,d2),
(p1,d2,p2,d1)
delivery(i)
(p1,d1,p2,d2),
(p1,p2,d1,d2),
(p2,d2,p1,d1).
trips[i]
[2,2,10,6],
trips.length
[0,1,3].
trips,
[[0,3],[2,1],[2,3]]
non-adjacent
proven,
[[0,1],[1,2],[1,3]],
stack)
sandwich
preference
[1,1,0,0],
sandwiches
[1,1,0].
(j
cafeteria
sandwiches.
queue's
sandwiches[i]
referred
sandwiches.length
[1,0,1].
students[j]
[1,0,0,1].
students.length,
[0,0,1,1].
queue).
prevroom
[-1,0,0,1,2]
colony.
prevroom.length
built,
rooms:
prevroom[i]
prevroom,
prevroom[0]
[4,2,5,3]
[5,6,7,8]
[6,1,5]
(after
subsequence).
reindexing
[6,2,1,2,4,5]
(+8)
(+6)
521
(-9)
(+5)
886996
(+1)
(+9)
(-8)
s[j].
"cbad".
[3,2,20,1,1,3],
[1,1,4,2,3],
total)
[5,2,4,null,1,3]
a[a.length
a[i
[5,2,4,null,1],
construct(b).
[2,1,5,3,4]
[5,2,4,null,1,null,3]
[4,1,3,null,null,2],
a[i].
[2,1,5,4],
routine:
construct(a))
(root
[5,2,3,null,1],
construct(a)
construct(a).
construct([a[i
1]]).
[2,1,5,4,3]
[1,4,2,3,5]
[5,4,null,1,3,null,null,2]
construct([a[0],
[2,1,5,3],
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
[1,4,13,13].
[1,8,8,13].
[4,4,8,13].
[1,4,8,13],
[3,9,6],
[3,4,-1,1]
[7,8,9,11,12]
missing.
22:
[2,-1,4,6]
19:
contains,
[20,25]
[[1,4],[2,4],[3,6],[4,4]],
[2,19,5,22]
[[2,3],[2,5],[1,8],[20,25]],
[3,3,1,4]
9.5.
16.5
31/2
1.5.
15.5.
14.5.
operations.)
14.75.
overall,
18.25,
14.75
4.75.
[5,19,8,1]
[3,8,20]
16.5,
[1.5,
9.5
16.5.
4.75
4.75,
33/2
14.5
18.25
{"star"}.
positions)
"arts".
"rats"
"tars"
"star"
(swapping
similarity:
strs.
"rats",
["omv","ovm"]
"arts"
["tars","rats","arts","star"]
"tars",
{"tars",
"arts"}
liquid.
glasses
champagne,
champagne.
champange
query_glass
floor.)
0)).
pyramid,
excess
now.
champange.
pictured
query_row
liquid
0-indexed.)
glasses,
glass
glass,
100000009,
poured,
poured
pouring
[2,5,2,1,2],
(candidates)
[10,1,2,7,6,1,5],
candidate
(target),
11!
f(x)
39916800
1!,
x!
f(11)
2!,
x!.
convention,
0!
4!
0!,
3!,
2.82842...,
exponent
python.
**
0.5)
[2,6]},
[5,6],
[2,3,3,4]
{[3,5],
[3,6],
[2,4,3,3,5,4,9,6],
competitive.
subsequence:
removed,
[[3,1]]
[[0,1],[1,2],[2,0],[1,3]]
server-to-server
one-dimensional
[-3,3]
[-3,5]
[3,4,1,1,0,0]
activate
ranges[i]]
watered
tap
ranges[i],
open.
["e12","1x1","21s"]
["e11","xxx","11s"]
(diagonally)
collect,
up-left
["e23","2x2","12s"]
,[".",".",".",".","8",".",".","7","9"]]
,[".",".",".","4","1","9",".",".","5"]
validated
,["7",".",".",".","2",".",".",".","6"]
(partially
repetition.
,[".","6",".",".",".",".","2","8","."]
solvable.
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["6",".",".","1","9","5",".",".","."]
[["5","3",".",".","7",".",".",".","."]
sub-box,
8's
filled)
[["8","3",".",".","7",".",".",".","."]
,[".","9","8",".",".",".",".","6","."]
start),
start).
start)
[1,1,1,1,1,1,1,1,1,1],
res[r+1][c-2height-r-1]
[["","1",""],
res[r][c],
res.
["","","4","","","",""]]
res[0][(n-1)/2]).
[["","","","1","","",""],
["","2","","","","3",""],
res[r+1][c+2height-r-1].
2height+1
["2","",""]]
"*".
"29"
"22",
"25",
"1*".
"7",
"17",
decoded,
"19".
"24",
"29".
"23",
"k").
"21",
"26",
(e.g.
"13",
"18",
"1*"
"2*"
"12",
"15",
"3",
"2*".
"28",
excluded).
"9".
"27",
"14",
(<=
77,
66,
262
88,
44,
atleast
30228214
yellow,
color).
-500
[1,401,null,349,88,90]
[1,2,5,3,4,6,7]
[1,2,5,3,null,6,null,4,null,7]
"1-2--3---4-5--6---7"
"1-2--3--4-5--6--7"
(dfs)
"1-401--349---90--88"
node),
depth-first
indeed
687
num2.
4325
shorturl.
tinyurl.
restriction
solution();
shorturl)
"https://leetcode.com/problems/design-tinyurl"
solution()
url.
obj.decode(tiny);
guranteed
encode/decode
longurl.
https://leetcode.com/problems/design-tinyurl
obj.encode(url);
tiny
shorturl
longurl)
decode(string
companion
encode(string
shortening
http://tinyurl.com/4e9iak.
zeros:
(-2)^2
(-2)^0
(-2)^3
[1,0,0,0,0]
tile.
tilings
shape.
tiles:
tiling,
[7,8,9]]
[[1,2,3],
[[1,1,1,1],
secondary
[[5]]
mat[1][1]
[1,1,1,1]]
[4,5,6],
2m.
[2,7,9,4,4]
max(m,
[1,2,3,4,5,100]
mat[3][1],
[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
[[1,1,1,1],[1,2,2,2],[1,2,3,3]]
mat[2][0],
mat[4][2].
[[3,3,1,1],[2,2,1,2],[1,1,1,2]]
[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]
scenic
"alps"
attractiveness
invocation).
"bradford".
name="branford"
name="alpine"
name="alps"
branford
"branford".
"alps",
["orland",
location:
name="orland"
name="orlando"
["alps",
tracker.add("bradford",
add(string
tracker.add("orlando",
worst,
sortracker
alps,
orland.
"orland"]
["alpine",
score)
queried
"orland".
["bradford",
tracker.get();
querying
better.
tracker.add("branford",
score=3
score=2
invoked
locations,
tracker.add("alpine",
get()
orlando,
supports:
"bradford",
["sortracker",
precedes
["branford",
locations:
tracker.add("orland",
bradford,
bradford
["orlando",
tracker.add("alps",
"branford",
branford,
worst.
name="bradford"
alps
sortracker();
bradford.
query).
sortracker()
alpine,
[2,2,3],
[2,2,2,5,5],
primefactors
primefactors.
factors:
[10,20,40,50,100,200].
yking]
ad
xking,
king.
yqueeni]
[xking,
[[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]],
[xqueeni,
king.length
[[2,2],[3,4],[4,4]]
queens[i]
xqueeni,
queens.length
yqueeni,
queens[i].length
[[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]],
dashes).
[[0,1],[1,0],[3,3]]
yking
["please
sentences[i]
wait",
(underlined)
fight",
much"]
"continue
too",
win"]
["alice
sentences.length
sentences[i].length
much",
leetcode",
thanks
[2,2,1,1,5,3,3,5]
[2,2,1,1,5,3,3]
ocurrences
[2,2,1,1,3,3],
[1,1,1,2,2,2,3,3,3,4,4,4,5]
authors
author)
view_date
article_id
viewer_id
(written
2019-07-22
articles.
author_id
+------------+-----------+-----------+------------+
viewer
(up),
irrelevant.
(right),
robot's
completes
"moves"
started.
(down).
(left),
magnitude
"facing"
"ud"
magnitude,
[10,5,2,6],
[4,2,0,3,2,5]
trap
[0,1,0,2,1,0,1,3,2,1,2,1]
[0,1,0,2,1,0,1,3,2,1,2,1].
trapped.
raining.
(black
passengers[j]
[20,30,10],
passenger,
[10,20],
passengers[i]
passenger.
passengers.length
buses.length
buses[i],
passengers.
[19,13,26,4,25,11,21],
[2,17,18,19],
buses[i]
arrived
later,
[[3,2],[1,0]]
row-wise
negatives
column-wise,
[[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
148,
74,
596
673
512,
[7,52,2,4]
522,
1549.
[52,2].
52,
numerals.
512.
[5,14,13,8,12]
[14,13,8].
score's
[3,1,4].
[7,90,5,1,100,10,10,2]
[5,3,1,4].
[5,3,1,4,2]
loses),
(poor
strs[1][strs[1].length
["edcba"]
(row)
"az"].
1]),
["babca","bbazb"]
["bc",
strs[0][strs[0].length
strs[1][0]
strs[1][1]).
strs[0][0]
(strs[1][0]
["ghi","def","abc"]
strs[1][1]
[[1,2],[3,10],[12,16]]
[[1,3],[6,9]],
(merge
[3,5],[6,7],[8,10].
newinterval
newinterval.length
[[1,5],[6,9]]
end]
starti.
[[1,2],[3,5],[6,7],[8,10],[12,16]],
"aabaaaacaabc",
grandparent.
grandparents.
even-value
grandparent,
maxrow,
spectators
hence:
"gather",
allocates
gather(int
bms.gather(4,
ticketing
"scatter"]
hall.
maxrow
maxrow.
vary
gather
["bookmyshow",
scatter.
"scatter",
maxrow)
(respectively)
bookmyshow(int
scatter(int
bookmyshow(2,
bms.scatter(5,
bms
bms.gather(2,
hall
bookmyshow
allocated,
nummoves
step).
nummoves)
nummoves),
steps).
[1,2,3,4,5,null,6,7,null,null,null,null,8]
figures
[[10,20],[40,30]]
[[40,10],[30,20]],
layer:
cyclic
[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],
[2,1,1,2],
array:
[2,1,1,1,3,4,1],
[[1,1],
hashmap.
myhashmap.get(3);
put(int
myhashmap
myhashmap.put(2,
(key,
[2,1]]
myhashmap.put(1,
myhashmap();
key)
myhashmap.get(1);
myhashmap()
[2,2]]
"put",
["myhashmap",
mapped,
myhashmap.remove(2);
found),
myhashmap.get(2);
"cdabcdab"
notice:
"abcabc".
"abcdabcdabcd",
[2,1,3,5,4,6,7]
win_count
[5,4,6,7,1,2,3]
[2,3,5,4,6,7,1]
[2,1,3,5,4,6,7],
arr[1]).
[3,5,4,6,7,1,2]
"(*))"
"(*)"
[3,5,1,6,2,9,8,null,null,7,4],
[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
leaf-similar.
[1,0,0,0,1,0,0,1],
apart
["1",
"111"]
"10100",
["1"]
(assuming
"10101",
"00101",
"1"]
"10111",
["11111"]
1-indexed)
[3,5,1,2,4],
["111",
[3,1,5,4,2],
extended
245,
triangles.
144.
triangulate
[3,7,4,5]
3*7*5
1*1*1
triangulations,
144
3*4*7
1*1*5
1*1*3
3*4*5
[1,3,1,4,1,5]
n-sided
triangle,
1*1*4
triangulation.
4*5*7
polygon.
triangulated,
scores:
mex
excluded)
[1,0,7,13,6,8]
[1,-10,0,13,6,8]
[1,0,2,13,6,8]
[-1,2,3].
[-1,2,3]
[1,-10,7,13,6,8],
[1,0,2,3,6,8]
|a[i]
[4,5,2]
[1,3,4,8]
a[j]
|1-3|
ri].
[0,1]:
[3,5]:
[2,1,4,1]
0-based
[-1,1,1,3]
[[0,1],[1,2],[2,3],[0,3]]
|3-4|
[[2,3],[0,2],[0,5],[3,5]]
|7-10|
|4-8|
[4,5,2,2,7,10],
nums[li...ri]
a[j]|,
[0,3]:
[4,5,2,2,7,10]
[2,7,10]
a[j].
[5,2,3,7,2]
4.0000000001,
[0,1,2,3,4,5,6,7],
ant(s)
[0,1,2,3,4,5,6,7]
-the
left.length
right[i]
plank,
plank).
right.length
left[i]
plank.
above:
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
findelements
treenode.left.val
["findelements","find","find","find","find"]
[[[-1,null,-1]],[1],[2]]
findelements.find(1);
[null,true,true,false]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
treenode.left
findelements([-1,null,-1,-1,null,-1]);
findelements(treenode*
[null,false,true]
findelements([-1,-1,-1,-1,-1]);
[null,true,false,false,true]
["findelements","find","find","find"]
findelements([-1,null,-1]);
findelements.find(3);
findelements.find(5);
contaminated,
find()
104]
treenode.right
recovered
findelements.find(4);
["findelements","find","find"]
findelements.find(2);
treenode.right.val
recovers
subrectanglequeries.updatesubrectangle(3,
newvalue,
newvalue)
subrectanglequeries.updatesubrectangle(1,
(row1,col1)
subrectanglequeries
(row,col)
col2,
newvalue
rectangle[i][j]
subrectanglequeries.getvalue(3,
getvalue(int
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
(4x3)
subrectanglequeries.getvalue(2,
getvalue.
subrectanglequeries([[1,1,1],[2,2,2],[3,3,3]]);
rectangle.length
["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue","getvalue"]
["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue"]
(row2,col2).
subrectanglequeries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);
subrectanglequeries.getvalue(0,
[null,1,null,5,5,null,10,5]
rectangle[i].length
updatesubrectangle
subrectanglequeries.updatesubrectangle(0,
[null,1,null,100,100,null,20]
updatesubrectangle(int
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
"1011"
[11],
banned[i],
[1,6,5],
paste
'aaa'.
notepad.
notepad
paste:
copied
screen.
all:
screen
'aa'.
neededtime
ballon
"abaac",
rope.
[1,2,3,4,1]
neededtime[i]
colorful.
ballons
help.
"aabaa",
neededtime.length
balloon.
boomerang.
[[1,1],[2,2],[3,3]]
[[1,1],[2,3],[3,2]]
candytype[i]
doctor.
doctor's
[6,6,6,6]
candytype[i].
candytype
even).
candytype.length
advised
advice.
noticed
doctor
much,
2*(9/3)
orange.
kitchen
oranges,
2*(3/3)
orange,
oranges.
6/2
t3
splits,
"aadbbcbcac"
o(s2.length)
"aadbbbaccc"
s3,
"aadbbcbcac".
"dbbc"
"dbbca",
|n
s3.length
"aabcc",
tm
interleave
[[0,1,2,-1]]
(clockwise),
presented
[[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
[3,0,2,6,8,1,7,9,4,2,5,5,0]
versa)
5500
a)
sex
temporary
tables.
statement,
+----+------+-----+--------+
1500
('m',
[4,8],
[[1,4],[2,3],[3,4]]
[3,5,8,10,11,12],
size-10
(10-8)
packages.length
size-8
boxes[j].length
boxes[j]
sum(boxes[j].length)
[[4,8],[2,8]]
[[12],[11,9],[10,5,14]]
(10-10)
(4-2)
size-4
size-3
boxes[j][k]
(4-3)
size-2
suppliers
size-5
supply).
produces.
package.
(8-5)
size-8.
size-14
(14-11)
packages[i]
(14-12)
packages,
(5-5)
supplier
supplier,
(5-3)
demonstrated
ties.
[5,3,4,5]
sum(piles[i])
[3,7,2,3]
relations.length
taking.
[[2,1],[3,1],[4,1],[1,5]],
[[2,1],[3,1],[1,4]],
semester,
nextcoursei],
(n-1)
semesters
course.
prevcoursei,
relations[i].length
nextcoursei
courses.
nextcoursei.
nextcoursei:
relations[i]
[prevcoursei,
semester.
nextcoursei]
prevcoursei
[0,1,2,2,1]
index[i],
[1,2,3,4,0],
[0,4,1,3,2]
index.length
index[i]
[3,8,5,2],
[2,4,1,6],
[1,3,7,1],
[1,3,7,1].
[1,3,4,4].
[4,3,1,4],
nums1:
min(26,
maxsize).
(between
maxletters.
"aababcaab",
minsize
maxletters
s.length)
array?
[6,1,3]
encounters.
generator.next().done;
arr.flat()[i]
arr.flat().length
inordertraversal(arr);
encounters
generator.next().value;
[[[6]],[1,3],[]]
"real+imaginaryi"
2i,
0+-2i.
multiplications.
i2
"1+-1i",
imaginary
"1+1i",
0+2i.
"0+2i"
"1+-1i"
-2i,
"0+-2i"
"1+1i"
[-100,
[2,4,5,10]
trees:
[1,2,2,2,5,0]
[2,5,0]
[5,0]
[2,2,5,0]
{5,9}
{7,9}
[[1,4,12],[4,7,7]]
[[1,4,14],[4,7,16]]
colori]
[[1,4,5],[1,7,7]]
painted).
painting[j]
colori
endi)
mixed
mixj]
[1,4)
rather
[leftj,
{9,15}
{2,4,6}.
[1,7)
mix,
segments[i]
[8,10)
{5,7}
[[1,4,5],[1,4,7],[4,7,1],[4,7,11]]
[1,6)
[7,8)
mixed,
simplicity,
segment.
[[1,6,9],[6,7,24],[7,8,15],[8,10,7]]
24)
rightj)
[[1,7,9],[6,8,15],[8,10,7]]
segments.length
mixj.
{1,11}
sake
segments[i].length
[6,7)
segments,
[4,7)
[[1,4,5],[4,7,7],[1,7,9]]
{7}
thin
rightj,
[[1,4,12],[4,7,12]]
pangram,
"thequickbrownfoxjumpsoverthelazydog"
"9",
word[0,...,i]
"998244",
"998244353",
div[i]
div
"9982443".
[1,1,0,0,0,1,1,0,0]
customer_number
+--------------+-----------------+
order_number
+-----------------+----------+
888
555
average_amount
visited_on
840
analyze
(customer_id,
2019-01-08
122.86
860
110)/7
(120
(100
before).
jade
visited_on)
(130
+--------------+--------------+----------------+
jhon
anna
2019-01-05
2019-01-03
142.86
2019-01-06
2019-01-10
jaze
(110
80)/7
2019-01-04
(customer_id)
2019-01-02
2019-01-09
150)/7
[-1,1,-6,4,5,-6,1,4,1]
[3,1,1,2,2,2]
frequency,
[5,-1,4,4,-6,-6,1,1,1]
[1,3,3,2,2]
[2,3,1,3,2]
latin.
"ma"
peaksmaaa
made-up
"oatgma".
consonant
"ma".
pig
speak
"imaa
overmaaaaaaa
rownbmaaaa
azylmaaaaaaaaa
"goat
'u'),
jumped
dog"
vowel),
ogdmaaaaaaaaaa"
"goat"
hetmaaaaaaaa
uickqmaaa
latin.)
umpedjmaaaaaa
oxfmaaaaa
latin"
atinlmaaaaa"
"hetmaa
oatgmaaaa
"applema".
startcol
startcol).
5th:
"ddlu".
[4,1,0,0]
"rrddlu".
"d".
1st:
"lu".
"lrud"
"rrddlu"
(startrow,
"dlu".
"lurd"
4th:
"lurd".
robot:
0th:
startpos.length
[1,5,4,3,1,0]
"rd".
3rd:
2nd:
"urd".
(move
instruction:
startcol]
"rddlu".
up),
[1,4,1,5,1,6]
nums[3]....
[1,6,1,5,1,4]
[1,3,2,2,3,1]
[2,3,1,3,1,2]
[1,5,1,1,6,4]
[1,1,1,0,0,0,0,1,1]
[1,1,0,0,0,0,1]
[1,1,0,0,1]
[0,1,1,1,0,0,0]
[0,1,1,1,0,0,1,1,0]
[0,0,1,1,1,0,0]
[1,1,1,1,1,0,0,0,0]
together:
[0,1,0,1,1,0,0]
parent)
"getkthancestor"]
ancestor,
["treeancestor",
treeancestor.getkthancestor(6,
"getkthancestor",
treeancestor(7,
treeancestor(int
treeancestor
treeancestor.getkthancestor(3,
getkthancestor(int
treeancestor.getkthancestor(5,
terminates:
"_rl_".
"l______rr"
"__lr"
"_l__r__r_",
"_r",
"r_"
"r_l_",
'_'
"l______rr".
"l___r___r".
anymore,
"l___r__r_".
[1,4,2,7,5,3,8,6,9]
[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
[[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
events.)
mycalendarthree();
mycalendarthree.book(25,
mycalendarthree()
mycalendarthree
endtime),
mycalendarthree.book(10,
["mycalendarthree",
mycalendarthree.book(50,
mycalendarthree.book(5,
k-booking
non-existent
initializing
[[[7,
(bst):
pointer
bstiterator.next();
o(h)
20]],
hasnext,
bstiterator([7,
20]);
bstiterator(treenode
["bstiterator",
bstiterator.hasnext();
pointer,
bstiterator
tree?
[3,4])
[[2,1],[1,8],[2,6]]
reservedseats[i][0]
[[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
four-person
[[4,3],[1,4],[4,6],[1,7]]
reservedseats.length
reservedseats[i]
reservedseats
min(10*n,
reservedseats[i].length
reservedseats[i][1]
aisle
10^4)
exceptional
[0,3,1,6,2,2,7].
[3,6,2,7]
invited.
beside
capable
seating
invite
favorite,
favorite.length
[3,0,1,4,1]
[2,2,1,2]
organizing
favorite[i]
klmnopqrst
"bbbcccdddaaa"
abcdefghij
98
widths.length
bbbcccdddaa
uvwxyz
stopped
[4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
widths[1]
widths[i]
pixels.
[3,60]
wide.
[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
widths[0]
-1]],
-1]);
numarray.sumrange(2,
[[[-2,
numarray([-2,
telephone
'9'].
(just
2-9
["ad","ae","af","bd","be","bf","cd","ce","cf"]
['2',
buttons)
[0,1,1,2,1,3,2,3],
max(0,1,1)
nums[(3
nums[(1
[0,1,1,2].
rules,
max(0,1,1,2,1,3,2,3)
max(0,1,1,2)
[0,1,1].
nums[(2
row[i]
(row[1])
hands.
row.length
couple
switch
seated
(row[2])
(2n
situation
[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]],
quiet[x])
quietness
[5,5,2,5,4,5,6,7]
richer[i]
quiet
[3,2,5,4,6,1,7,0]
reasoning.
richer.length
quiet[y])
richer
quieter
answer[7]
observations
quietness.
quiet.length
quiet[i]
(has
time).
quietest
[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[minimum,
median:
[1,2,2,2,3,3,3,3].
(1+2+2+2+3+3+3+3)
sum(count)
[0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
mode].
(1+1+1+1+2+2+2+3+3+4+4)
statistics:
[1,1,1,1,2,2,2,3,3,4,4].
maximum,
mode:
count[k]
[1.00000,3.00000,2.37500,2.50000,3.00000]
purposes,
minimum:
mean:
median,
255].
count.length
[1.00000,4.00000,2.18182,2.00000,1.00000]
mean,
2.18182).
maximum:
2.18181818...
count[i]
sample.
sample,
2.375.
[1,0,2,3,4]
[4,3,2,1,0]
[3,5,3,4],
[3,2,2,1],
(4),
boat
carry
(3),
214].
[7,13,11]
reversal.
[2,1,3,4,7,11,29,18],
[7,11,13]
[0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]
[2,5,3,8,13,21,34]
[0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]
[2,3,5,8,13,21,34]
[18,29,11,7,4,3,1,2].
countandsay(3)
"3322251":
saying
"21"
countandsay(n)
formula:
count-and-say
countandsay(n-1),
"1211"
countandsay(2)
countandsay(1)
"say"
countandsay(4)
[5,5,5,10,20]
bill.
stand,
$10,
$5.
bills).
$5,
bills
$20
pays,
bills.length
bills[i]
bills.
[5,5,10,10,20]
malfunctioning
brokenletters.length
properly.
"leet
broken.
keyboard.
spaces)
"lt"
code",
brokenletters
"ad"
jeames
emerson
abbot
student.
doris
[100,1,1000]
[2,2,1,2,1]
[1,2,2,2,1].
[1,100,1000].
abs(arr[i]
[5,6,7,1,2,3,4]
[7,1,2,3,4,5,6]
[99,-1,-100,3]
[3,99,-1,-100]
[6,7,1,2,3,4,5]
[-1,-100,3,99],
text[1]
"aaabb",
"abdcdbc",
suboptimal.
obtainable,
"aabbb".
"aabdcdbc"
"abadcdbc".
pattern[0]
"abdccdbc",
text[2],
"aabb",
"abdcadbc",
pattern[1]
"abdacdbc".
"abdcdbcc",
"abcabcbb"
"pwwkew"
"bbbbb"
"pwke"
"wke",
[[10,11],[1,1]],
carpet.
tiles[i].length
[[1,5],[10,11],[12,18],[20,25],[30,32]],
carpetlen,
2019-03-01
2019-02-01
2019-02-20
6.96
average_price
((200
start_date,
30))
20))
end_date.
start_date
2019-02-21
product_id.
+------------+---------------+
end_date
purchase_date
unitssold
16.96
+------------+------------+------------+--------+
+------------+---------------+-------+
2019-02-10
2019-02-28
2019-02-25
2019-03-22
end_date)
(15
(30
[8,1,5,2,6]
spot.
spots.
values[j]
spots,
neg.
-2000
pos
[-2,-1,-1,1,2,3]
[5,20,66,1314]
[-3,-2,-1,0,0,1,2]
neg,
b1,
a1,
104860361
'bb',
"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"
'bcb',
3104860382
'bcb'
b2,
'cc',
'bccb'.
"bccb"
divisors[2]
divisors[0],
divisors[1]
divisors[2]).
divisors[i]
[20,14,21,10],
divisors[0]
divisors[0]).
[10,16]
divisors[1],
divisors[i].
divisors.length
[12],
[4,7,9,3,9],
[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
o(mn)
idea.
improvement
probably
[[0,1,2,0],[3,4,5,2],[1,3,1,5]]
straightforward
[2,4,0,6].
[4,0,6].
[5,4,0,6].
[5,2,2,4,0,6],
[2,2,4,0,6].
["customstack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
stk.increment(2,
201,
stk
customstack
maxsize)
stk.push(3);
[201,
[101,
202]
102,
[201]
103]
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
maxsize,
stk.push(4);
customstack(3);
202
maxsize.
103,
pops
stk.push(2);
stk.increment(5,
inc(int
stk.push(1);
customstack(int
stk.pop();
increment,
201
positives
resolve.
300)),
promisepool.
700ms,
available),
promisepool
400ms,
400)),
t=300,
reject.
900ms.
500ms.
pending
resolves.
t=400,
functions.length
series.
t=700,
t=500,
200ms
functions[i]
300ms,
500ms
resolves,
[[300,400,200],400]
900ms
t=900,
functions[i
[[300,400,500],500]
[[300,700,900],900]
[3,2,3],
11)
assignment.
(working
jobs.length
worker.
jobs[i]
[1,2,4,7,8],
"aaacb"
"aacb"
"aaacb",
"abca",
"bcabc",
(again).
"bcab",
"cabc"
[-1,-1,1,2,-1,-1]
lakes.
rains[i]
flood.
[1,2,0,0,2,1]
[1,2,0,1,2]
changes.
ans.length
lake,
lake
flood-free.
rains.length
[-1,-1,2,1,-1,-1]
rains
lakes
dry
floods
lake.
rangemodule.queryrange(10,
tracked
17)
"queryrange",
"addrange",
14.03,
addrange(int
tracking
tracked,
rangemodule.removerange(14,
17);
["rangemodule",
rangemodule.queryrange(13,
despite
true,(every
14);
operation)
rangemodule.queryrange(16,
rangemodule();
rangemodule
queryrange(int
"removerange",
tracked)
partially
addrange,
queryrange,
removerange.
removerange(int
[14,
14],
false,(numbers
"queryrange"]
rangemodule()
rangemodule.addrange(10,
tracked.
14.17
17]]
"racecar"
palindromic,
"ada".
"ada"
["notapalindrome","racecar"]
["def","ghi"]
["abc","car","ada","racecar","cool"]
"racecar".
"hlabcdefgijkmnopqrstuvwxyz"
"worldabcefghijkmnpqstuvxyz"
"app"
surprisingly,
["hello","leetcode"],
["apple","app"],
"app",
["word","world","row"],
'∅'
size.)
unsorted.
'∅',
info).
words[1],
earner
69000
department:
janet
85000
second-highest
third-highest
randy
executives
seeing
earners
forwards
"adc".
backwards.
"bbcbaba")
"aabca")
"bbcbaba"
"adc"
(subsequence
"aca"
"aabca"
arr:
[1,3,2].
[1,5,1]
threshold).
[11,13,17,23,29,31,7,5,2,3],
[2,5,5],[5,5,5]
[5,5,8]
[2,2,2,2,5,5,5,8],
big,
addcar
lot.
park
parkingsystem
medium
parkingsystem.addcar(3);
cartype.
["parkingsystem",
small,
parkingsystem.addcar(1);
addcar(int
cartype
parkingsystem.addcar(2);
kinds:
slot
"addcar",
medium,
small)
parkingsystem(1,
spaces:
parkingsystem(int
"addcar"]
cartype)
timemap
timestamps
"bar2"]
["foo",
timemap.set("foo",
set(string
retrieve
timemap.get("foo",
get(string
"bar".
timemap();
timestamp_prev.
timestamp)
timemap()
"bar"
"bar2"
"bar",
timestamp_prev
"bar2",
"foo"
previously,
time-based
["timemap",
"00000000",
"346"
"23".
"000",
"135"
"5".
"222",
"11111222223",
"112",
"00".
group:
"3465"
"13"
completed.
"0.9(9)"
correctly:
explanation.]
"0.1666(6)",
<integerpart><.><nonrepeatingpart><(><repeatingpart><)>
0.5,
"1."
"0.9(9)",
<nonrepeatingpart>.length
0.999999999...
1.(9),
2.12,
(nonrepeatingpart)
0.1(6),
"0.5(25)"
0.1(6)
<repeatingpart>.length
0.166(66).
123.0001.
"0.(52)",
portion
0.16666666...
<integerpart>,
forever,
conventionally
[see
1.,
<integerpart><.><nonrepeatingpart>
123.00(1212).
"0.(52)"
0.1666(6)
0.52525252525.....
0.52525252...,
<repeatingpart>.
(integerpart)
<nonrepeatingpart>,
<integerpart>.length
"0.166(66)"
<integerpart>
link
[[0,3,6],[5,8,1],[2,7,4]]
8th
configuration.
grid[row][col]th
configuration,
[[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]
[3,4],
mat[i]
[[1,10,10],[1,4,5],[2,3,6]],
nm)
mat.length[i]
[1,5,2],
[1,1,2],
[1,5,3].
[1,1,3],
[[1,3,11],[2,4,6]],
(c
[4,2,5,9,7,4,8]
w,
(c,
(nums[w],
nums[z])
nums[x])
[5,6,2,7,4]
(9,
d).
(nums[y],
[2,7,5].
[max(2,
max(5,2),
max(3,5)]
[[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
[[2,5,3],[1,8,4],[1,7,5]].
ci,
max(5,3)]
[max(ai,
max(ci,
[5,5,5]
triplet.
triplets[i]
max(5,
[[2,5,3],[1,8,4],[1,7,5]],
bj),
aj),
[[2,5,3],[2,3,4],[1,2,5],[5,2,3]],
[max(2,1),
[2,5,5].
z]
triplets,
max(bi,
[[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
[[3,4,5],[4,5,6]],
max(3,
[[2,5,3],[2,3,4],[1,2,5],[5,2,3]].
[max(2,5),
[[2,5,3],[1,8,4],[2,7,5]]
5)]
max(5,7),
triplets.length
triplets[j]
zero):
[2,7,5]
triplets[i].length
cj)].
99899.
d2.
99009.
d1
remap
d2,
"danny
mittal
remaps
sneakily
11891
congratulate
danny
weekly
99009
mittal"
99].
[1,3,2,null,6,4,5,null,null,null,null,8,7]
[1,2,3,4,5,6,null,null,null,7,8],
[11,7,2,15]
[-3,3,3,90]
[1,1,4,2,1,1,0,0]
[30,40,50,60]
temperatures.length
temperatures[i]
[73,74,75,71,69,72,76,73]
temperature.
temperatures,
warmer
[30,60,90]
even(printnumber)
even()
"010203040506..."
"0102030405"
odd().
odd()
zeroevenodd
odd(printnumber)
zero()
zero(),
2n.
zero(printnumber)
printnumber(7)
zeroevenodd(int
even(),
[[137,141,137],[141,138,141],[137,141,137]]
img[i].length
floor(0.75)
img
floor((200+200+50+200+100+100)/6)
floor(0.88888889)
img.length
floor(0.83333333)
img[i][j]
floor(3/4)
141
grayscale
(2,0),
floor(141.666667)
[[100,200,100],[200,50,200],[100,200,100]]
surrounding
floor((50+200+200+200+200+100+100+100+100)/9)
floor((100+200+200+50)/4)
(2,2):
floor(8/9)
(2,1):
137
floor(138.888889)
smoother).
floor(137.5)
floor(5/6)
138
(1,1):
grid2.length
[[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
sub-islands.
land).
grid2
grid1
[[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]],
grid1[i][j]
grid1[i].length
[[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
water)
grid2[i].length
[[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]],
sub-island.
grid2[i][j]
vertical).
grid1.length
sub-island
grid2.
[4,2,7,1,3,5]
[4,2,7,1,3,null,null,null,null,null,null],
[40,20,60,10,30,50,70,null,null,25]
[40,20,60,10,30,50,70],
"ccb",
"abcacb",
"abcbddddd"
"abcddddd".
removable[i]
"abcbddddd",
removable.length)
removable.length
removable,
"accb".
s[removable[i]]
"abcacb"
(s
[3,2,1,4,5,6]
32).
non-digit)
("4193"
read,
-42"
in;
"0032"
clamp
(leading
ignored)
'+')
("42"
in)
-42
reader
"4193
-42.
c/c++'s
clamped
whitespace.
caret
atoi
myatoi(string
4193.
whitespace)
4193
('-'
(similar
negative)
duplicates)
"banc"
window.
"adobecodebanc",
yyyy-mm-dd
"2019-06-29",
"2020-01-15",
"2019-06-30"
examples.
date1
"2019-12-31"
date2
[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
secondlist
secondlist[j]
firstlist[i]
[startj,
[[0,2],[5,10],[13,23],[24,25]],
startj
firstlist.length
starti+1
endj
secondlist,
startj+1
endj].
[[1,5],[8,12],[15,24],[25,26]]
firstlist
secondlist.length
firstlist.length,
[[1,3],[5,9]],
cloned
[7,4,3,null,null,6,19],
[8,null,6,null,5,null,4,null,3,null,2,null,1],
allowed?
[4,2,3,0,3,1,2],
[3,0,2,1,2],
[5,4,4,7,6,11,11]
[5,3,4,4,7,3,6,11,8,5,11]
[5,4,7,11,11]
performed:
[4,5,7,7,13]
[5,7,11,11]
[2,1,5,0,4,6]
nums[k].
subarray's
[9,3,1,2,6,3],
[9,3,1,2,6,3]
[0,4,3,0,4]
[2,4,6].
[10,13,12,14,15]
(even-numbered),
arr[3],
[5,1,3,4,2]
manner,
(1st,
(odd-numbered),
...),
(2nd,
arr[2].
even-numbered
arr[2],
arr[4]]
[arr[1],
deduce
already.
jumps,
arr[0]),
6th,
[arr[3],
arr[1].
[arr[2],
numbered,
max(1+5,
max(8,
[3,5,2,3]
max(3+5,
(1,5),
4+4,
(3,3)
(6,2).
5+2)
(5,2).
6+2)
4+4)
(4,4),
max(6,
(a,b)
[3,5,4,2,4,6]
max(3+3,
quantity.length
quantity[i]
quantities,
subgraph.
src1
[[0,1,1],[2,1,1]],
constituent
dest
[[1,0,3],[0,5,6]]
weighti.
src2,
src2
[[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
weight[i]
lastly,
subgraphs
src1,
rowsum[i]
[[0,5,0],
[5,7,10],
rowsum[i],
sum(colsum)
colsum[0]
fulfills
rowsum[1]
[[1,2],
[[3,0],
[3,5]]
colsum[j]
column:
rowsum
[6,1,0],
[2,0,8]]
row:
[3,8],
rowsum[0]
[1,7]]
rowsum.length,
rowsum.length
[8,6,8]
sum(rowsum)
colsum[1]
[1,null,2,null,0,3]
ancestor-node
7|
|a.val
b.val|
[8,3,10,1,6,null,14,null,null,4,7,13]
13|
[false,false,true]
[true,true,true,true,true]
[y,
[[4,5],[4,5],[3,2],[2,3],[3,4]]
3--6
[false,false,false,false,false]
[[4,5],[3,4],[3,2],[2,6],[1,3]]
x].
indirectly.
them).
"helo"]
stretchy.
"zzzzzyyyyy",
"helloo"
stretchy
"lllll"
"hellooo",
"helllllooo",
"helllllooo".
applications
"hi",
"heeellooo".
"hellooo"
"heeellooo"
extension
"hi"
"helo"
"hiiii"
feeling.
"helllllooo"
"ooo".
["zzyy","zy","zyy"]
"heeellooo",
extend
characters'
y[i],
alphabetic
"aay"
"aaszz"
"abe"
27,
(2,3,4)
(2,4,4)
[2,3,1,6,7]
(0,2,2),
[15,15,15,9,10,10,10]
[1,4,1,5,7,3,6,1,9,9,3],
partitioning.
[1,15,7,9,2,5,10],
partitioning,
84
[19,39].
[9,49],
58,
37,
[[-10],
non-negative,
-15
[[1],[22],[333]]
[12]],
[[-15,1,3],[15,7,12],[5,6,-2]]
unvisited
0.3333333333333333
1/2
0.16666666666666666
[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]],
0.16666666666666666.
seats[2]),
sitting.
seats[3]),
[1,0,0,0]
[1,0,0,0,1,0,1]
seats[i]
traveler
lee
+------+-----------+
"distance".
miles,
donald
alex,
rides,
450
222
jonathan,
rides
312
+----------+--------------------+
317
lee.
+------+----------+----------+
travelled_distance
2500.00000
2000.00000
[4000,3000,1000,2000]
[1000,2000,3000]
salary.length
salary[i]
(2000)
(2000+3000)
"delete",
403.
100+101+101+101
"eet",
"lee"
116
433
"delete"
101[e]
100[d]
403
417,
(115)
"dee"
[3,2,1,4,5]
[2,1,4,3,5]
left-out
alter
[3,5,1,6,2,0,8,null,null,7,4],
[7,4,1]
"121"
itself),
"xtfn".
["abcw","baz","foo","bar","xtfn","abcdef"]
length(word[i])
length(word[j])
"abcw",
["a","ab","abc","d","cd","bcd","abcd"]
"cd".
+----+-------+--------+-----------+
managers.
coordinates[i]
coordinates[i].length
coordinates[i][1]
[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
[[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
-10^4
coordinates[i][0],
[1,2,2,3,3,3]
frequency[2]
[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
wall[i].length
crossed
wall[i][j]
[[1],[1],[1]]
sum(wall[i])
sum(wall[i].length)
crossed.
wall.length
obviously
widths.
unit)
[0,1,2,4,4,4,5,6,6,7]
pivot.
[2,5,6,0,0,1,2],
[4,5,6,6,7,0,1,2,4,4].
url,
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]
back(int
forwarding
homepage.length
browserhistory.back(7);
browserhistory(string
browserhistory.visit("linkedin.com");
browserhistory("leetcode.com");
back,
"google.com"
browserhistory.back(2);
browserhistory.forward(1);
browserhistory.back(1);
"facebook.com",
visit,
["browserhistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
"google.com".
browserhistory
homepage)
url)
browserhistory.forward(2);
browser.
clears
browserhistory.visit("facebook.com");
"linkedin.com"
"google.com",
browserhistory.visit("google.com");
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
"leetcode.com".
steps)
"youtube.com"
tab
history.
browserhistory.visit("youtube.com");
homepage
visit(string
forward(int
"youtube.com",
"linkedin.com",
"facebook.com".
page.
"facebook.com"
[[8,7],[9,9],[7,4],[9,7]]
fixed-width
height).
[[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
(7,9).
[1,3,5,7,9]
meal.
meal
deliciousness.length
and,
food,
(3,5)
foods
deliciousness
[1,1,1,3,3,3,7]
deliciousness[i]
"aabbbb").
"bbaaaaabb"
"aaabbb"),
s[j]=
("aababbab"
"aababbab"
(i,j)
[[5,2,1],[1,1,2]],
[[1,2,3],[2,5,7],[3,5,1]],
[5,6,2]
[5,8,1]
nestedlist)
[1,4,6].
[1,1,2,1,1]
iterator.next()
tested
nestedlist.
[[1,1],2,[1,1]]
[1,[4,[6]]]
iterator.hasnext()
nestedlist.length
nestediterator
106].
[1,1,2,1,1].
[1,4,6]
nestediterator(list<nestedinteger>
nestedlist
pseudocode:
[-106,
hasnext
reward1,
reward2,
reward1.length
reward2
[4,4,1,1],
cheese,
reward2.length
reward2[i]
[1,1,3,4],
reward1[i]
reward1[i],
reward1
25500100
20609294
population,
albania
countries.
20343000000
25000000).
3712000000
1246700
+-------------+-----------+---------+------------+--------------+
asia
gdp
belongs,
188681000000
78115
andorra
+-------------+------------+---------+
algeria
652230
km2),
bigint
continent
12960000000
2381741
africa
37100000
angola
europe
3000000
afghanistan
28748
468
100990000000
2831741
twenty-five
crimes
participate
commit.
crimes,
(0,1,2).
(1),
[6,7,8]
members,
participates
minprofit
(0),
schemes:
crime.
(2),
crime,
schemes.
crime
commit
scheme
[20,50,9,63]
[4,6,15,35]
[2,3,6,7,4,12,21,39]
graph:
["e","l","l"]
["bella","label","roller"]
["c","o"]
["cool","lock","cook"]
duplicates).
carpetlen.
numcarpets
floor.length
"10110101",
carpets,
floor[i]
[1,2,3,4,6,5,7]
[[9],[3,15],[20],[7]]
[[4],[2],[1,5,6],[3],[7]]
top-to-bottom
apples.length
rot
[1,2,3,5,2],
doctors
[3,2,1,4,2]
grew
[3,0,0,0,0,2]
[3,0,0,0,0,2],
apples[i],
apples,
rot.
apples:
fouth
eaten.
apples[i]
rotten
away).
[4,3,2,6,2,3,4],
([7],
sub-arrays,
([3]
[7,3,4,7],
[3]).
[3,2,2,4,3],
[7]),
(4,3,5),
(a,b,c)
(6,8,10),
(3,4,5),
(4,3,5).
(8,6,10).
c2.
4x.
four,
[4,5,5].
[6,2,3],
[6,2,3,4,5,5]
stonevalue
"192.168@1.1"
["255.255.11.135","255.255.111.35"]
"25525511135"
addresses,
"0.011.255.245",
dots.
"192.168.1.1"
"101023"
["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
["0.0.0.0"]
"0.1.2.201"
"192.168.1.312"
addresses.
bijection
pattern.
["mee","aqq"]
...}
"mee"
...}.
["abc","deq","mee","aqq","dkd","ccc"],
letters:
p(x),
happens:
999999995
999999984
ordertypei
[[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
orders[i]
[pricei,
matched
executed,
backlog.
(1000000000-3)
orders[i+1]
backlog,
(999999995-1)
ordertypei]
amounti,
1999999991,
[[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
order's
6-sided
184
roll,
"oto
"oot
"def
hot"
oht".
bef"
toh",
"adc
hot",
"too
dfe"
"acb
def",
cab"
mynumbers
+-----+
simplicity.
175
(last
kilograms,
(cannot
___
350
person_id
+-----------+-------------+--------+------+
board)
turn=1
marie
turn=n
cena
kilograms.
+------+----+-----------+--------+--------------+
person_name
folowing
[2,3,0,1,4]
"oct",
"dec"}.
"feb",
"2052-10-20"
{"jan",
1960"
"31st"}.
"apr",
"30th",
dd
"26th
"jul",
2100].
"1960-05-26"
[1900,
"sep",
"may",
"2nd",
1933"
"mar",
2052"
{"1st",
oct
"nov",
"4th",
"3rd",
yyyy
jun
"6th
"aug",
"1933-06-06"
"20th
"jun",
"34852"
"14234"
"84532"
"23451"
"23415"
"12345",
"84352"
"34521"
"12344".
"12435"
"84532",
"34521",
conver[i]
nums[0..i].
max(arr[0..i])
[1,1,2,4,8,16]
conver
[4,10,24,36,56]
[2,3,7,5,10]
32]
[2,4,8,16,32,64]
56
16]
by:
[1,3,7,5,10,3],
prices[3]
[1,3,2,8,4,9],
prices[5]
prices[0]
((8
prices[4]
like,
((9
(f1.txt,
separates
optimize?
directory.
2.txt(efgh)","root/c
fn.txt)
4.txt(efgh)","root
memory-consuming
dfs
["root/a
"directory_path/file_name.txt"
3.txt(abcd)","root/c/d
"root/d1/d2/.../dm".
positive?
f2.txt(f2_content)
[["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]
(gb
info,
1.txt(abcd)
f1.txt(f1_content)
4.txt(efgh)"]
f2.txt
[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]
f2_content
info.
bfs?
(f1_content,
fn_content)
"root/d1/d2/.../dm
files?
level),
time-consuming
fn.txt(fn_content)"
1kb
+-------+------+
floating
3.65
holes
3.85
ranks.
4.00
3.50
land)
4-directionally.
[[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
vertical.)
[[0,0,0,0,0,0,0,0]]
root).
parents,
parents[root]
parents[i]
parents[x]
[nodei,
[1,15]:
parents.length
[3,7,-1,2,0,7,0,2],
nodei
pi,
pi.
[3,2]:
[[0,2],[3,2],[2,5]]
[6,14,7]
[-1,0,1,1],
[[4,6],[1,15],[0,5]]
[2,3,7]
vali].
[4,6]:
6*(-3)
multiplicand.
29*1
[12,5,7,23]
10*(-1)
7*(-2)
[29,6,10]
[[0,1],[0,2]]
[[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
edge,
[30,29,19,5],
[25,25,25,25,25]
(3,4).
(3,3),
[55,30,5,4,2],
nums2.length,
[100,20,10,10,5]
arr[i-1]
non-increasing.
[10,10,1]
(2,4).
nums2[j].
occurrences,
[1,2,2,1,1,3]
[-3,0,1,-3,1,1,1,-3,10,0]
[3,6,1,0]
orient
tree).
narrow.
reorder.
(city
transport
[[1,0],[2,0]]
ministry
[[0,1],[1,3],[2,3],[4,0],[4,5]]
reorienting
[[1,0],[1,2],[3,2],[3,4]]
(capital).
attending.
leavingi
[[1,4],[2,3],[4,6]],
targetfriend
leavingi],
sat
[[3,10],[1,5],[2,6]],
comes,
chairs
chair.
targetfriend.
sz.
sz
1/1/2014
"red".
pam
com_id
paid.
+----------+------+--------+-----------------+------------+
alongside
located.
boston
1/1/2005
related
4/1/2014
12000
+----------+------------+--------+----------+--------+
sales_id
salesperson.
12/25/2008
tell
5/1/2010
commission_rate
rate,
austin
company,
salespersons
65000
2/3/2007
2/1/2014
+-----------------+---------+
3/1/2014
commission
4/1/2006
25000
salesperson
+--------+--------+----------+
salesperson,
hire_date
down].
(n-1,
[[0,0,1,1,1,1],
[0,1,1,0,0,0]]
(r+1,
counterclockwise
c).
[0,0,0,0,1,1],
[1,1,1,0,0,0]]
[0,1,1,0,0,0],
[1,1,0,0,0,1],
horizontal/vertical
snake
c+1)
n*n
n-1).
[1,1,0,0,1,0],
[[0,0,0,0,0,1],
c+1).
[right,
[0,0,1,0,1,0],
n-2)
does,
[[1,0,0,0],[1,1,0,0]],
disappear.
stable,
bricks).
hits[i].length
apply.
grid:
hits[i]
[1,1,0,0]]
erasures
[[1,0,0,0],[1,1,1,0]],
coli).
(rowi,
[0,1,1,0]]
drop.
falls,
stable
hits.length
[1,0,0,0]]
stable.
[0,0,0,0]]
[1,1,1,0]]
hits,
erased
next,
[6,4,8,1,3,2],
[1,4,3,1,2].
target.length,
[1,4,1,2],
[9,4,2,3,4]
target[i],
[4,7,6,2,3,8,6,1]
[5,9,4,1,2,3,4],
[0,5].
[6,3,5,null,2,0,null,null,1]
[3,null,2,null,1]
[3,2,1,6,0,5]
subexprn
subexpr.
shapes:
'&(subexpr1,
'&',
(false
subexpr2,
"|(f,f,f,t)"
'|(subexpr1,
subexpr1,
|(f)
&(f)
"f".
"&(f)".
"&(|(f))"
'!(subexpr)'
"!(&(f,t))"
"!(f)".
!(f)
subexprn)'
&(f,t)
100):
time[2]
40):
(time[1]
(time[0]
(time[i]
[60,60,60]
150):
time[j])
time[3]
time[4]
[30,20,150,100,40]
60:
[6,0,8,2,1,5]
nums[9]
9):
[9,8,1,0,1,9,4,0,4,1]
5):
111.
namely,
bits:
"011010",
"01101110",
min(i
maxjump.
minjump
maxjump
maxjump,
fulfilled:
'()[]{}'.
"()[]{}"
"(]"
'['
1]|
[2,3,1,5,4]
[2,4,9,24,2,1,10]
[2,5,1,3,4]
[[0,1],[0,2],[0,3],[1,2],[1,3]]
cables
ethernet
[[0,1],[0,2],[0,3],[1,2]]
cable.
computers,
cables.
cable
skiplist()
[cc
artyom
red-black
[30,40,50,60,70,90]
situation.
wikimedia
["skiplist",
erase.
idea
commons
fine.
skiplist.erase(1);
skiplist:
skiplist.add(1);
layers
skiplists
skiplist,
skiplist.add(2);
skiplist();
comparatively
erase(int
3.0],
skiplist.erase(0);
"erase",
https://en.wikipedia.org/wiki/skip_list
performance,
treap
kalinin
by-sa
skiplist.add(4);
o(n).
skiplist.search(0);
skiplist.
skiplist.add(3);
skiplist.search(1);
[[1,10],[3,3]],
arrival.
[2,2,1]
poeple
flowers[i].length
[1,2,2,2]
[3,3,2]
poeple[i]
[[1,6],[3,7],[9,12],[4,13]],
[2,3,7,11]
bloomday,
x]
_
bloomday
bouquet.
_,
[1,10,3,10,2],
_]
bouquets.
[7,7,7,7,12,7,7],
bouquet,
bloomday[i]
bloomday.length
bloomed.
flower.
bouquet
obvious
(recursive
["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"]
executing,
"1:end:2"
"{function_id}:{"start"
cpu,
starts,
logs,
["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]
resumes
ended,
"end"}:{timestamp}".
(initial
["0:start:0","1:start:2","1:end:5","0:end:6"]
"0:start:3"
call)
"start"
spends
"end"
executing.
popped
stack:
log.
cargo
[1,2,3,1,1],
(8),
conveyor
belt
weights[i].
weights).
(9),
shipped
[3,2,2,4,1,4],
[3,4,5,2]
3*4
(nums[i]-1)*(nums[j]-1).
(5-1)*(5-1)
(nums[1]-1)*(nums[2]-1)
j=3
(4-1)*(5-1)
[1,5,4,5]
[3,7]
j=2
additionalrocks,
[10,2,2].
[10,2,2],
[2,3,4,4].
rocks.length
capacity.length
rocks[i]
additionalrocks
capacity[i]
rocks.
[1,2,4,4],
[2,2,0],
ycenter)
ycenter
xcenter
(1,0).
y2),
xcenter,
(radius,
"0011".
"5525",
"0011"
"5121"
"74",
"2050".
"3951".
"24".
"2555"
"5323"
"47"
"6345".
"2353"
"5525"
"2151"
"0190"
post
add:
"5222"
"3456"
"0158"
rotate:
"2454"
cycled
start:
"2050"
"74"
"leetcodeleetcode"
"bcabca"
"cabcab".
"leetcodeleetcode".
overflow
"112358"
integers?
03
"199100199"
02,
90-degree
[[0,1],[1,1]],
[[1,1,1],[0,1,0],[0,0,0]]
increments,
[[0,0,0],[0,1,0],[1,1,1]],
target[i][j]
target[i].length
"lovely"
"here"
"a.",
paragraph
"!?',;.".
paragraph.length
non-banned
ball,
"bob
does),
paragraph.
banned[i].length
"hit"
"ball,"),
["hit"]
punctuation
flew
case-insensitive
hit.",
"ball"
[1,-2,-3,4]
[0,1,-2,-3,-4]
[-1,-2]
[-2,-3].
[-1,-2,-3,0,1]
that'll
[1,3,9]
arr[lefti]
[4,8,2,10],
0100
[2,7,14,8]
[8,0,4,4]
[[2,3],[1,3],[0,0],[0,3]]
arr[righti]
arr[lefti
[[0,1],[1,2],[0,3],[3,3]]
max(i,j),
forts.length
captured,
fort
forts.
[0,0,1,-1]
forts[k]
forts,
forts[i]
min(i,j)
captured.
army,
[1,0,0,-1,0,0,0,0,1]
[even,
odd].
10001.
[3,1,5,8]
1*3*8
167
balloons.
3*5*8
balloon,
wisely.
3*1*5
bursting
balloons,
1*8*1
[3,5,8]
"fifa"
["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]
["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]
["pes","fifa","gta","pes(2019)"]
"avalon"
["gta","gta(1)","gta","avalon"]
["gta","gta(1)","gta(2)","avalon"]
creates
"pes(2019)"
"onepiece(4)".
names:
"gta(2)"
(k),
"gta(1)"
"gta"
"pes"
names[i].
where,
[2,1,3,4,5,2]
[2,1,3,4,5,2].
left-most
marked.
[2,3,5,1,3,2]
[2,3,5,1,3,2].
2019-06-25
2019-07-20
session
'end_session',
2019-07-27
'scroll_down',
('open_session',
end_session
active_users
users.
open_session
+---------+------------+---------------+---------------+
send_message
session_id
'send_message').
activity_date
scroll_down
tleft
"abcabcababcc"
tright,
"aabcbc"
tright.
tright
f(1)
f(0)
f(n
f(n).
f(n)
commonly
f(2)
f(4)
1960.
deathi
[[1993,1999],[2000,2010]]
birthi
1970.
1960
2050
[birthi,
1950
die.
[[1950,1961],[1960,1971],[1970,1981]]
population.
deathi]
alive
50].
splicing
[1,1,2,3,4,4]
1248
1/4
1/22
-100.0
2.00000,
xn).
2.10000,
2-2
raised
1024.00000
231-1
9.26100
"ap",
"lp",
"la",
10101
award:
183236316
"pa",
"al",
"pp",
"pl",
devices
bank[i].length
bank.length
r1
bank[i]
beam.
--
bank[2][1]
bank[i][j]
bank[3][2]
r2,
activated
beam
devices,
["000","111","000"]
while'1'
["011001","000000","010100","001000"]
device
bank[0][5]
bank,
r2.
bank[0][1]
bank[0][2]
bank[2][3]
independent,
beams:
dispenser
dispense
warm,
cup,
cold,
amount[i]
cold
cup.
[5,4,4]
warm
amount[2]
[5,0,0]
cups.
hot
amount[1],
amount[0],
[9,9,6].
hours[i]
tiring
hours.length
[9,9,6,0,6,6,9]
[6,6,6]
(strictly)
non-tiring
(1/4
2.5
(5/2))
wait.
marks.
letting
((1/4
hoursbefore,
shortened
kilometers.
km/h)
hoursbefore
(3/4
((7/2
1.4
1/2)
mark,
[7,3,5,5],
(5/2
meeting,
3/4)
(3/2
((5/2
(5/2)
rests.
11.5
rest.
(7/2
rests,
1/4)
(2/4)
skipping
barcodes[i]
barcodes.length
barcode
[2,1,2,1,2,1]
[1,3,1,3,1,2,1,2]
[1,1,1,1,2,2,3,3]
barcodes,
[1,1,1,2,2,2]
barcodes[i].
sunday,
20th
tuesday
$2.
monday.
putting
monday,
[3,6].
"eeee",
[[3,5],[6,9],[12,14]]
[[3,6]]
identified
end],
"abbxxxxzzy"
"yy".
"abbxxxxzyy"
"abcdddeeeeaabbbcd"
"xxxx",
[1,2,3,2].
[2,2,3,4].
[2,2,3,2],
[2,10,8]
[4,1,5,20,3]
[4,2,5,5,3],
8-3
15-3
5.5
[[],[10,"leyton",3],[10,"paradise",8],["leyton","paradise"],[5,"leyton",10],[5,"paradise",16],["leyton","paradise"],[2,"leyton",21],[2,"paradise",30],["leyton","paradise"]]
["undergroundsystem","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime"]
undergroundsystem.checkin(27,
16-10
undergroundsystem.checkout(5,
"cambridge",
t2.
undergroundsystem.checkin(5,
startstation.length,
14.00000.
undergroundsystem.checkout(10,
undergroundsystem.checkout(45,
stationname,
undergroundsystem();
undergroundsystem.checkin(10,
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
5.50000,
checkin
20-10
startstation.
endstation.
"cambridge");
"cambridge"
30-21
getaveragetime(string
railway
6.66667
undergroundsystem.getaveragetime("paradise",
startstation
22);
11.00000.
38);
endstation
undergroundsystem.checkin(32,
22-8
t2,
"paradise"
"paradise");
undergroundsystem.getaveragetime("leyton",
21);
chronological
checkout
5.00000,
checkin(int
[[],[45,"leyton",3],[32,"paradise",8],[27,"leyton",10],[45,"waterloo",15],[27,"waterloo",20],[32,"cambridge",22],["paradise","cambridge"],["leyton","waterloo"],[10,"leyton",24],["leyton","waterloo"],[10,"waterloo",38],["leyton","waterloo"]]
checkout(int
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
undergroundsystem.checkin(45,
undergroundsystem.checkin(2,
12.00000.
stationname
undergroundsystem.checkout(32,
undergroundsystem.checkout(27,
checkin,
"paradise",
6.66667,
"leyton"
"waterloo"
endstation)
["undergroundsystem","checkin","checkin","checkin","checkout","checkout","checkout","getaveragetime","getaveragetime","checkin","getaveragetime","checkout","getaveragetime"]
24);
t)
checkout,
"leyton",
undergroundsystem
startstation,
"waterloo",
undergroundsystem.checkout(2,
38-24
endstation.length
stationname.length,
getaveragetime
"waterloo");
11.00000
getaveragetime.
(14)
capitalization
word"
title.length
capitalized
"capitalize
"of"
uppercase,
title"
title.
tic-tac-toe:
"x".
o","xox"]
["xox","
["xox","o
"]
["o
2i
[[2,1],[4,1]]
restrictions,
[0,1,2,1,2],
restrictions[i]
[0,1,2,3,3,4,4,5,4,3],
[[5,3],[2,5],[7,4],[10,3]]
buildings:
restrictions.length
maxheighti
maxheighti.
restrictions.
maxheighti]
building.
("6"
(12).
"226"
"bz"
"bbf"
26),
zero(s).
"06").
"vf"
(22
[3,9,20,15,7]
14.5,
11].
[3.00000,14.50000,11.00000]
rounds.length
rounds[i]
[2,1,2,1,2,1,2,1,2]
rounds[0]
circulate
track,
marathon
sectors
(end
sectors.
marathon)
rounds[i].
rounds[1]
rounds[i
[[1,0,0],[1,1,0],[1,1,0]]
8-directionally
[[0,0,0],[1,1,0],[1,1,0]]
corner).
wang
allen
+----------+----------+-----------+
lastname
personid
addressid
firstname
california
personid.
+-----------+----------+---------------+----------+
+-----------+----------+---------------+------------+
[1,3,3,3].
min(0,
[1,2,3,4,5,6].
[1,2,3,3,5].
[1,2,3,5,6].
[1,3,3,3,2,4,2,1,2]
[1,2,2,3,3,3,4].
[1,2,3,6].
instructions[i].
[1,5,6,2]
(elements
[1,5,6].
[1,1,2,2,2,3,3,3,4].
[1,2,3,3,3,4].
[1,1,2,2,3,3,3,4].
[1,2,3,6,5,4]
[1,2,5,6].
hidden[i
are.
[4,-7,2],
differences[i]
sequences,
hidden[i].
[1,-3,4],
contain.
[3,-4,5,1,-2],
differences.length
[6,6,7,8,5].
[1,4,7,8,5]
[4,2,8,1,3]
cost[i].
[2,3,1,14]
[1,3,5,2],
263
taken:
"h".
"hahahaha".
"leet2code3",
"o".
tape
"a2345678999999999999999",
tape,
"leetleetcodeleetleetcodeleetleetcode".
"ha22",
tape.
8301530446056247680
nums1.length,nums2.length
queries:
[[2,0,0],[3,0,0]]
r.
[[1,1,1],[2,1,0],[3,0,0]]
r].
(010,110,111,101,100,000,001,011).
p[2^n
p[i]
[3,1,0,2]
-1)
(11,10,00,01).
p[i+1]
(0,1,2.....,2^n
p[0]
[2,6,7,5,4,0,1,3]
+---------+-------+
[11,13,15,17]
[4,5,6,7,0,1,2]
glue
cubes,
irregular
cubes.
queries[3]:
righti,
ki].
"abcda",
queries[2]:
queries[0]:
palidrome.
palidrome
s[lefti...righti]
[true,false,false,true,true]
"lyb",
[[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
replacement,
queries[4]:
queries[1]:
[[0,1,0],[2,2,1]]
"abcba"
[3,8,48].
[3,1,5,11,13]
nice.
[1,3,8,48,10]
obtained,
[19,17,16,15],
rowscount
[10,1,14,4],
[3,2,12,20],
iterating
[7,5,18,11],
continues,
colscount
[9,8,6,13]
covered.
[19,
organised
snail(rowscount,
colscount)
|s[i]
"acde",
"bcdf",
maxcost
t[i]|
maxcost.
"bcd".
"cdef",
characters).
fronts[i],
backs
backs[i]
obtainable
fronts
backs.length
[1,2,4,4,7],
fronts.length
[1,3,4,1,3]
[1,2,4,1,3].
zero).
[1,3,4,4,7]
fronts[i]
given)
[10,5,2,1,5,2]
[1,9,2,5,1]
lines:
(non-horizontal)
line).
[2,5,1,2,5],
nums2[1]=2.
nums2[j],
nums1[2]=2
[1,3,7,1,7,5],
arr2[j].
[4,3,1]
[1,3,2,4]
[1,6,3,3]
[1,5,3,6,7],
"-13",
-55
-132},
"999"
-123,
"-123"
-255.
{-213,
n's
-123.
".
&apos;
quote:
mark:
&quot;
"&amp;
<.
&amp;
ampersand:
&frasl;
entities
\"...\""
parser.
"and
"&
sign:
&.
&quot;...&quot;"
not."
&lt;
/.
slash:
parser,
&ambassador;
&gt;
floor(nums[i]
floor(5
floor()
floor(9
floor(2
[2,5,9]
candidates.
[62,12,24,14]
[16,17,62,24]
[8,8]
[16,17,71,62,12,24,14]
[2,3,2,4]
rj
[[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
o(n)?
yj)
[[1,3],[3,3],[5,3],[2,2]],
[[2,3,1],[4,3,1],[1,1,2]]
purple.
rj.
queries[j],
yj,
[[1,1],[2,2],[3,3],[4,4],[5,5]],
rj]
xj,
queries[i]=2,
[7,5,5,8,3],
i=queries.length-1)
[6,5,0,7,5]
p=[2,1,3,4,5].
p=[1,2,3,4,5].
i=3:
p=[1,2,3,...,m].
[4,1,2,2],
p=[1,2,3,4,5],
i=1:
queries[i]=1,
p=[2,1,3,4,5],
p=[3,1,2,4,5],
i=0:
[2,1,2,1].
p=[1,3,2,4,5].
i=2:
p=[3,1,2,4,5].
p=[1,3,2,4,5],
(indexing
queries[i]=3,
[3,1,2,1],
[2,5,1,3,3,1,1].
[1,3,5,2,1,3,1]
[2,3,4,1].
permuting
choosing.
average(b).
average(arr)
[1,4,5,8]
average(a)
4.5.
"abyzz",
"bbbccc".
"babacc",
querycharacters
querycharacters.length
queryindices[i]
"abazz".
[3,3,4]
"bbbb"
queryindices.length
querycharacters[i].
"bbbbcc".
lengths[i]
queryindices
[3,3,4].
"aaazz".
"bbbacc".
particular
subset's
(3-2)
[5,3,3,6,3,3],
[6,3,8,1,3,1,2,2],
[1,2,1,4],
(8-6)
(2-1)
[6,8],
incompatibilities
rolling
[4,2,1,2,3,3,2,4,1],
[1,1,3,2,2,2,3,3],
rolls[i]
rolls[i].
rolls,
rolls.length
sided
[1,1,2,2]
[4,6].
[[3],[]]
[[1,3],[4,6]]
nums1[3],
truncating
"are",
"you"].
"chopper
"this",
"solution"].
contestant",
"solution",
"contestant"].
"problem"].
"how"
punctuation).
tanuki"
"to",
solution".
s].
tanuki",
"you",
"how",
["what",
you".
image)
stampwidth.
[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],
stampheight
stampwidth
[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]],
stampheight,
(occupied).
[1,1,1,2,3]
[1,2,3,3,4,4,5]
fruits[i]
fruits.
[[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]],
fruits.length
[[0,3],[6,4],[8,5]],
disappear
amounti]
reach,
[[2,8],[6,3],[8,6]],
fruits[i].length
positioni-1
positioni.
startpos.
harvest.
harvest
startpos,
border,
[[1,1,0,0]]
ryan
modified.
"withdraw",
withdraw
denominations:
$50
[0,0,1,0,1].
banknotescount.length
$100,
[0,1,0,0,1]]
$100
$200,
atm.withdraw(550);
$50,
[0,1,0,0,1].
banknote,
$500
[550]]
atm.withdraw(600);
[0,1,0,3,1].
[0,0,0,2,0].
deposit.
case).
atm.deposit([0,0,1,2,1]);
deposits
$20,
$600
deposit
$500,
banknote
banknotes.
atm.deposit([0,1,0,1,1]);
banknotes,
withdrawing.
rejected,
withdraw(int
deposit(int[]
[[0,1,0,1,1]],
banknotes
["atm",
atm();
rejected.
atm()
$300
"withdraw"]
banknotescount)
[600],
banknote.
$200
[0,0,1,0,1],
banknotescount[i]
$500.
withdrawing,
"deposit",
(do
[[0,0,1,2,1]],
handed
prioritizes
[1,null,8],
[2,1,4],
[1,1,8,8]
[0,1,1,2,3,4]
["acca","bbbb","caca"],
("baab")
("baab"),
("bbbb"),
["abba","baab"],
words[j][k].
("acca")
unusuable
("abba"),
("caca")
("abba")
("acca"),
("caca"),
(60
+-------------+-----------------------+------------------+
2020-02-05
laptop
2020-02-27
+--------------+--------------+----------+
2020-02-24
2020-01-18
2020-03-04
(50
70)
130.
+--------------------+---------+
2020-02-10
kit
order_date.
stringology
product_category
list1's
[0,1,2,3,4,5,6],
[1000000,1000001,1000002,1000003,1000004]
lists:
bth
[1000000,1000001,1000002]
[0,1,2,1000000,1000001,1000002,5]
list1.length
[0,1,1000000,1000001,1000002,1000003,1000004,6]
ath
[["java"],["nodejs"],["nodejs","reactjs"]]
skills
["java","nodejs","reactjs"],
team:
["algorithms","math","java","reactjs","csharp","aws"],
people[0],
req_skills,
people[i][j].length
[["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
people[i][j]
people[1],
req_skills.
req_skills
people[i].length
skill
req_skills[i]
skill.
people[3].
req_skills.length
req_skills[i].length
inventory.
min(sum(inventory[i]),
109)
own.
customer).
inventory,
wants.
weirdly
inventory.length
balls,
inventory[i]
inventory
[3,5],
[[2,4,3],[6,5,2]]
[[1,2,1],[1,2,1]]
streets.
[[1,1,2]]
upper-left
numbers.length
index2]
numbers.length.
[index1,
numbers[index2]
index2,
numbers[i]
numbers[index1]
220)
sum(nums1)
[7,11,13],
max(140,
[10,60,10].
[50,20,50,40,20]
[11,12,13,14,15]
80)
[1,12,13,4,5]
220.
max(210,
[20,40,20,40,20]
max(sum(nums1),
[60,60,60],
[60,90,60]
[20,40,20,70,30],
[11,2,3,14,15].
sum(nums2))
nums2[left...right].
sum(arr)
sum(nums2),
[50,20,50,70,30].
[10,90,10]
nums1[left...right]
max(31,
[2,3,4,5].
unreserve,
unreserve(int
"unreserve"]
seatnumber)
[3,4,5],
seatmanager
unreserve.
seatmanager.unreserve(2);
[4,5],
reserves
smallest-numbered
"reserve",
fetches
seatmanager(int
seatnumber.
unreserve
manage
seatmanager(5);
unreserved
seatnumber
seatmanager.reserve();
reserve
unreserves
seatmanager.unreserve(5);
reserve,
[5]]
reserve()
["seatmanager",
null]
"unreserve",
checkifinstanceof(new
subclass
undefined.
checkifinstanceof(date,
accesses
definition,
class's
"instanceof"
animal.
dog(),
animal
"tofixed()".
date)
extends
date(),
checkifinstance(new
animal);
checkifinstanceof(5,
superclass.
methods.
-=1
arr[x]
arr[y]
2/5.
1/5,
[1,7]
2/3.
1/3,
(arr.length
1/2,
3/5,
2/5,
0b1111
0b1001
toggling
moves).
[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
"00010"
"00001"
binary.length
y's
"000110"
"10010"
"110101"
"110011"
"000101"
"111011"
"100101"
"10".
"aaa".
explode.
[5,10,-5]
(positive
collisions.
-5
meet,
exploding
[8,-8]
[10,2,-5]
meet.
-5.
results.
https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/
1081:
"qqwe"
"er".
"qqqw"
"qwer"
"qrwe")
"qq"
"rqwe"
'q',
[0,1,9,16,100].
sorting,
squaring
approach?
[16,1,0,9,100].
[-7,-3,2,3,11]
[0,1,9,16,100]
squaring,
[-4,-1,0,3,10]
[4,9,9,49,121]
87655
parities.
3412.
3412
85675.
87655.
3214.
65875
(-1
[-1,2,1,-4],
});
sleeps
millis
sleep(100).then(()
millis,
console.log(date.now()
t);
[4,3,2,5,1].
connects.
(2,4)
[[0,3],[2,4],[1,3]]
[2,4,5,3,1].
spaces.length
[0,1,2,3,4,5,6]
learn"
"enjoy
coffee".
helps
"leetcodehelpsmelearn".
[1,5,7,9]
py
spaces[i]
"spacing",
thon"
[8,13,15]
"icodeinpython",
"leetcodehelpsmelearn",
"enjoyyourcoffee"
"icodeinpython".
g"
[1,5,0,10,14]
[5,3,3,3].
[5,3,3,4].
[3,100,20]
[1,0,0,0,1].
[4,7,7].
[5,3,2,4]
[1,0,0,0,14].
[1,0,0,10,14].
[4,7,20].
[7,7,7].
[3,3,3,3].
[["+","+",".","+"],[".",".",".","+"],["+","+","+","."]],
exit.
maze[i][j]
[[".","+"]],
maze[i].length
entrancecol]
entrancecol
'.')
exit,
maze.length
maze.
'+').
entrancerow
maze,
[["+","+","+"],[".",".","."],["+","+","+"]],
entrance.
[entrancerow,
entrance.length
"baabb"
entirety
contiguous.
[1,3,5,4],
nums2[3].
[0,3,5,8,9],
[1,2,3,8],
[2,1,4,6,9]
[5,6,7,8].
[5,6,7,4],
-6,
-10,
"love"
words[i]]
log(k))
["i","love","leetcode","i","love","coding"],
["i","love"]
["the","is","sunny","day"]
"sunny"
["the","day","is","sunny","the","the","the","sunny","is","is"],
[[1,2,3,4],[5,6,7,8],[9,10,11,12]]
[1,2,3,4,8,12,11,10,9,5,6,7]
[1,2,3,6,9,8,7,4,5]
"(1)+((2))+(((3)))"
depth(c)
")".
"(1+(2*3)+((8)/4))+1"
"new
paulo"]]
"london"
loop,
york"],["new
paulo".
clearly
york","lima"],["lima","sao
york"
[["b","c"],["d","b"],["c","a"]]
cityai.length,
citybi.
"sao
[["london","new
"lima"
citybi
paulo"
cityai
[["a","z"]]
[cityai,
citybi.length
citybi]
"babad"
["23:59","00:00"]
format,
time-points
timepoints[i]
timepoints.length
timepoints
["00:00","23:59","00:00"]
[2,4,1,2].
basket1.length
[3,2,5,1]
min(basket1[i],basket2[j]).
baskets.
[2,3,4,1],
basket2,
bakste2.length
[1,4,1,2]
basket1[i],basket2[i]
[4,1,2,2]
basket2
basket2.
[4,2,2,2],
basket1
transformations
standard
"-...",
"-.-..--...",
"msg"
"--...-."
"--...--.".
"-...".
transformations:
["gin","zen","gig","msg"]
"zen"
"gig"
dashes,
".-",
"--...--."
[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
"-.-.",
"gin"
"10-01",
arrivealice
arrivebob
"12-31"
rome
[31,
leavealice,
august
leavebob.
"08-16",
"mm-dd".
"11-01",
business
(inclusive),
leap
31].
16th,
leavealice
17th,
5-character
"10-31",
non-leap
"08-15",
18th,
arrivebob,
"08-18",
"08-19"
leavebob
arrivealice,
"mm-dd",
f(2,
f(x,
interface
y=3
public:
i.e.:
y);
implementations
customfunction
f(5,
y=1
x=3,
x=1,
f(int
[[1,4],[2,3],[3,2],[4,1]]
y=5
x=2,
f(1,
y=2
callable
x=4,
f(x
f(3,
f(x,y)
f(4,
monotonically
customfunction,
y=4
[[1,5],[5,1]]
with),
findsolution
7236
9973
2736
[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
[4,3,null,1,2]
negatives.
[-4,-2,-5]
[4,5,6,5],
[8,9,10,1]
[1,3,5,10,15],
younger
age.
player,
conflicts.
scores.length,
teams.
ages,
<![cdata[<div>]>]]>]]>>]</div>"
"<a>
tags,
"<div>]>"
plain
<tag_name>
<![cdata[<div>]]></div>"
valid)
"<b>"
cdata.
'[',
unbalanced
wrapped
tag.
cdata
]]>.
end_tag
'>',
tag_name
</tag_name>
forbid
"<div>>>
'<',
"<div>>>"
[1,9].
tag_content
"</div>"
tags
valid).
tag_name,
start_tag
unbalanced.
">>
</b>"
</div>.
text1|cdata|text2.
tag,
</a>
<,
unmatched
tag_name.
"<a>"
snippet,
nested.
"<![cdata[<div>]>]]>",
"<div>"
unmatched,
![cdata[]]
<tag_name>tag_content</tag_name>.
start_tag|tag_content|end_tag.
invalid),
"]]>>]"
snippet
<![cdata[
<div>
<b>
issue
"<div>this
note1)
reason
<![cdata[cdata_content]]>.
</,
"<![cdata[<div>]>]]>]]>"
cdata_content
cdata_content,
bound.
bound,
[2,4,6,8,10,14]
[2,3,4,5,7,9,10]
mink
mink.
[1,3,5,2].
maxk.
[1,3,5,2,7,5],
maxk
fixed-bound
mink,
49,999.
degree:
[1,2,2,3,1,4,2]
50,000.
[1,2,2,3,1]
[2,2,3,1,4,2]
[2,9,2,5,6],
[2,1,4,3],
[1,1,1,0,0,0,1,1,1,1,0],
[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1],
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
[1,1,1,0,0,1,1,1,1,1,1]
michael
kannon
3800
+-------------+---------+--------+
7700
7400
6100
addilyn
juan
vals[0].
4.)
vals[2]
[[0,1],[1,2],[2,3],[2,4]]
[1,3,2,1,3],
[[0,1],[0,2],[2,3],[2,4]]
students,
biology
(student,
class)
enrolled.
+---------+----------+
(90-degree
[0,12]
p4,
p3.length
p1.length
p3
p2,
angles).
p2.length
p1,
p4.length
p4
[0,-1]
[1,3,5,6],
found.
not,
[0,0,1,1],
rec1[i],
[0,0,2,2],
rec2
touch
rec2,
y2],
rec1
rec2.length
rec2[i]
[2,2,3,3]
rec1.length
("aba",
"computation"
"bb")
'e'/'a',
character:
portions
"computer"
"baba")
"jane"
"eating
sentence2.length
sentence1
now",
sentence1.length,
now"
jane"
"right
haley",
sentence2
"my"
sentence2.
"eating"
sentence2,
"haley".
is"
"my
"name
haley"
[2,5,3]
odd-length
[1,4,2,5,3]
66
vals[i].
[-1000]
"adaa",
chars,
[-1,-1,-1]
timei.
k),
[1,1,0,0]
users'
[0,2,0,0,0]
id=2
leetcode,
id=0
[[0,5],[1,2],[0,2],[0,5],[1,3]],
uam
id=1
(uam)
(minute
[the
leetcode.
[[1,1],[2,2],[2,3]],
consecutivenums
autoincrement
"abpcplea",
["ale","apple","monkey","plea"]
hi.
rectangles.length,
points[j]
[[1,3],[1,1]]
hi).
[[1,1],[2,2],[3,3]],
[[1,2],[2,3],[2,5]],
hi,
[[2,1],[1,4]]
yj).
count[j]
points[j].length
(li,
all)
[3,4,4,5]
[3,5].
070
02
043
[181,292,707,818,929]
[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
[[0,1,1,0],[0,1,1,0],[0,0,0,0]]
(1)
grid[0][2]
[[0,0]]),
([[1,1]]
vertical)
"ccjjc"
'j'.
"he"
'j'),
"aabb"
wonderful,
"yx"
"xx",
"yy"
"yx",
s1[1]
s1[i]
s2[0],
s1[0]
"yy",
means:
'y'.
"xy",
"yx".
s2[j].
s2[1],
["d1/","d2/","./","d3/","../","d31/"]
folder).
"../"
exist).
["d1/","../","../","../"]
"x/"
["d1/","d2/","../","d21/","./"]
"./"
"aabbcc"
"rat"
"abccbaabccba"
"abccbaabc"
re-ordering
"aaaabbbbcccc"
"art"
[2,6,4,8,10,9,15]
jump.
[7,6,9,6,9,6,9,7]
[100,-23,-23,404,100,23,23,23,3,404]
"abacba"
["aba","aabb","abcd","bac","aabc"]
words[4]
["nba","cba","dba"]
"bcfd"
words[3]
["aabb","ab","ba"]
"io",
"ou"
"iu",
"ua".
"ae",
"oi",
'i'.
"ea",
"ia",
"ie",
"another".
english,
"aadsfasf
"an"
rattled
battery"
replacement.
successors
cadsfafs"
successor.
absbs
bbab
cattle
bat"
["cat","bat","rat"],
"other",
rat
c"
1000]
frequency:
assume:
one-line
pipes?
sunny
ties,
following,
words.txt
sake,
words.txt.
[-1,0,3,5,9,12],
f2
fn-2
fn-1
f1
[[-1,-1,2],[-1,0,1]]
[-1,-1,2].
nums[k]]
[-1,0,1,2,-1,-4]
[4]),
[2,4]),
([1,2,3],
([2,4],
([6],
[1,4]),
[1,3])
[6]).
([1,3],
([4],
([1,4],
[2,3]),
[3,3,3],
[1,2,3]).
[6])
([2,3],
[6,6],
"google".
usage
"usa"
holds:
"usa".
capitals
capitals,
"flag"
[2,10,2019]
[1,3,0,0,2,0,0,4]
[0,0,0,2,0,0]
[1000000,1000000,1000000],
[9,12,3,7,15,8,0,3,7,0,0,3,0,0,0].
999999.
[l,r]
[1,2,4,8,16],
|func(arr,
target|.
999999
1000000,
[[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]],
[9,12,3,7,15],
target|
func.
("ab","a","ca","ba").
"ssssss"
("s","s","s","s","s","s").
("a","ba","cab","a")
"abcabcabc".
[-2,-1]
[-2,0,-1]
[2,3,-2,4]
saves
["12:01","12:00","18:00","21:00","21:20","21:30","23:00"]
keytime.length
keyname[i]
("21:00","21:20",
keyname.length
["10:00","10:40","11:00","09:00","11:00","13:00","15:00"]
keyname
"23:52"
"23:51"
keytime[i]]
[keyname[i],
["daniel"]
keycard
key-card,
one-hour
use.
alphabetically.
"22:51"
["bob"]
("10:00","10:40",
"21:30").
doors.
"10:00"
["alice","alice","alice","bob","bob","bob","bob"],
"11:00"
emits
key-cards
keytime
keytime[i]
period,
keyname.length,
"daniel"
"09:49".
["daniel","daniel","daniel","luis","luis","luis","luis"],
"11:00").
worker's
keyname[i].length
[[1,1,1],[1,1,0],[1,0,1]],
image[sr][sc].
[[2,2,2],[2,2,0],[2,0,1]]
pixels)
pixel
[[0,0,0],[0,0,0]]
pixel.
(sr,
sc,
image[i].length
image.length
image[i][j],
sr,
sc)
[[0,0,0],[0,0,0]],
sr
image[i][j]
sc
color),
pixel,
pixel),
node.val.
node.left
node.left,
tree),
node.right
traverses
[8,5,1,7,10,12]
node.right.
[8,5,10,1,7,null,12]
{3
calculator.
8}.
display.
startvalue,
{2
double,
{5
10}.
date.length
date[4]
date[7]
31th,
1900
gregorian
date[i]'s
"2019-01-09"
"2019-02-10"
0s,
[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
sea
[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
enclosed
(4-directionally)
[16,16]
age[x]
&&
age[y]
[20,30,100,110,120]
sends
[16,17,18]
110,
"cbca".
["step","steps","stripe","stepple"]
"stepple"
"steps"
"stripe"
(uppercase
pst",
"stew",
licenseplate.
licenseplate
"caaacab",
licenseplate.length
"show"
"pest",
"1s3
licenseplate,
"abccdef",
456",
["looks","pest","stew","show"]
"step"
12c",
"pest"
insensitive.
,0
ratesh
fooditemi
"beef
waffles".
burrito"],["melissa","2","soda"]]
,1
[["laura","2","bean
burrito".
numerically
burrito,ceviche,fried
james,
"fried
waffles"]]
chicken,water
chicken"],["ratesh","12","fried
carla
“table”,
waffles"],["brianna","1","canadian
header
chicken"],["amadeus","12","fried
burrito"],["david","3","fried
"water"
chicken"],["carla","5","water"],["carla","5","ceviche"],["rous","3","ceviche"]]
chicken"],["adam","1","canadian
specifically
amadeus
corina
[["table","canadian
fooditemi.length
[["david","3","ceviche"],["corina","10","beef
chicken",
“display
chicken"],["1","2","0"],["12","0","3"]]
tablenumberi
[["james","12","fried
burrito","ceviche","fried
chicken","water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]]
[["table","beef
at,
brianna
chicken".
"ceviche".
waffles","fried
burrito"],["jhon","2","beef
customernamei.length,
adam
rous
orders[i]=[customernamei,tablenumberi,fooditemi]
,2
burrito","beef
table”
burrito","soda"],["2","1","1","1"]]
table”.
customernamei
"canadian
table,beef
restaurant's
[["table","bean
displaying
"ceviche"
space:
34".
"34",
"a123bc34d8ef34"
"a1b01c001"
"34".
"34"
"leet1234code234"
stashed
nums[3])
homes,
houses:
1)/2
homes.
refuses
nums[2])
robbed.
houses.
[2,3,5,9],
steals
(nums.length
[2,7,9,3,1],
robber,
steal
max(nums[1],
capability
nums[4])
max(nums[0],
[3,-6]
(2*3
[2,-6,7]
[2,1,-2,5],
[2,-2]
(ie,
[3,-2],
(-2)*(-6))
[-1,-1],
(3*7)
[1,5,3]
[3,0,-6]
news).
headid
news.
headid.
informtime.length
manager.length
subordination
urgent
[0,0,1,0,0,0]
manager[i]
informed.
manager[headid]
informtime[i]
informtime
subordinates,
[2,2,-1,2,2,2],
[8,15,10,20,8],
[6,1]
max(7,7,7)
[8,15,8]
max(31,30)
distribution.
cookies.
cookies,
cookies[i]
unfairness
cookies.length
[6,1,3,2,2,4,1,2],
[6,1],
boxtypes[i]
[numberofboxesi,
trucksize
boxtypes.length
numberofboxesi
trucksize,
91
numberofunitsperboxi
trucksize.
truck.
boxtypes
[[5,10],[2,5],[4,7],[3,9]],
[[1,3],[2,2],[3,1]],
numberofunitsperboxi]:
numberofboxesi,
boxtypes,
corridor.length
dividers.
divider
"ssppsps"
sections,
corridor,
corridor.
dividers
corridor[i]
installed.
"ppspsp"
decorative
practice
perfect"
"practice
gifts[i]
choose,
gifts.
gift
[5,8,9,4,3],
behind.
gifts.length
[25,64,9,4,100],
any.
gifts,
["time",
"time",
indices[0]
indices[1]
"bell",
"bell"]
["t"]
"t#"
indices[2]
"me",
"time#bell#"
[0,2,1,-6,6,-7,9,1,2,0,1]
(arr[0]
[0,2,1,-6,6,7,9,-1,2,0,1]
[3,3,6,5,-2,2,5,1,-9,4]
[4,13],
[3,12],
[1,10],
13:
[2,11],
70,
6]}]
135ms.
300,
125,
dlog(2),
settimeout(()
debounce(log,
[{"t":
console.log([date.now()
75,
30ms,
{"t":
35ms,
150ms.
450,
debounced
100ms
[1]},
calls.length
120ms.
dlog
50ms,
4]},
log(...inputs)
6]}
])
dlog(1),
50ms
450ms.
60ms,
parameters.
calls[i].t
calls[i].inputs.length
150ms
[1,2]},
[2]}]
recieve
95ms,
[2]}
2]},
cancelled
125ms.
ran
75);
_.debounce()
70ms.
[1,2,4,4,4,4],
[1,2,1,2,1,1,1,3],
(consecutive
[1,2,1,2,1,3],
sub-sequence)
(4)
repetitions.
row2i
col1i
mat[x][y]
col2i],
[[1,1,2,2],[0,0,1,1]]
col1i)
(row1i,
col2i.
row2i,
col1i,
(row2i,
col2i).
[row1i,
query[i]
col2i
[[1,1,0],[1,2,1],[0,1,1]]
row1i
[[0,0,1,1]]
"bacdfeg"
excluded
underlined:
"l|*e*et|c**o|*de|"
"yo|uar|e**|b|e***au|tifu|l".
forth.
"l|*e*et|c**o|*de|".
"iamprogrammer"
"yo|uar|e**|b|e***au|tifu|l"
powers[j]
[1,2,4,8].
[2,4,64]
powers[2]
[[0,1],[2,2],[0,3]]
powers.length
powers[0]
powers[3]
powers,
powers[1]
effectively
currying
curriedsum(1)(2)(3)
curriedlife()
sum(1,
curriedsum(1,
sum(a,
[[1,2],[3]]
curriedsum
life()
[[1],[2],[3]]
csum(1,2,3).
csum(1)(2)(3),
curry(fn);
[[],[],[1,2,3]]
csum(1,2)(3),
6;
2)(3)
curriedsum()()(1,
explicitly
fn.length
sum(1,2,3),
practical
csum(1)(2,3),
curried
obeys
requirement:
[|a1
|an-1
[a1,
a3|,
|a2
a2|,
a3,
an],
an|]
|a3
a4|,
integer:
39:
58:
lefttorighti
side,
river
31:
pickoldi,
lefttorightj
efficient
11:
bridge.
50:
(new
[[1,9,1,8],[10,10,10,10]]
river.
putnewi
righttolefti,
30:
regulate
warehouses
lefttorighti,
(old
righttolefti
river,
putnewi].
pickoldi
time[i].length
warehouse.
warehouse)
[lefttorighti,
40:
righttoleftj
49:
bridge,
[[1,1,2,1],[1,1,3,1],[1,1,4,1]]
20:
"zaz".
counted.
"aababcabc"
"xyz",
"xyz".
"xyzzaz"
"yzz",
"zza",
"aababb",
"babbb".
"aabab",
"aaba",
"aababbb",
variances
"babb".
"ababbb",
"aababbb"
"abbb",
"ababb",
2019-08-13
2019-08-12
scheduled.
immediate_percentage
it).
+----------------------+
customer_pref_delivery_date
delivery_id
immediate;
2019-08-24
2019-08-21
immediate.
+-------------+-------------+------------+-----------------------------+
(on
2019-08-22
2019-08-11
+-----------------------------+---------+
50.00
2019-08-09
precisely
"gold
athlete.
"silver
4th].
medal","4"]
athlete,
athlete's
[1st,
medal","silver
["gold
"x").
medal","bronze
medal","4","5"]
athletes
athlete
medal","5","bronze
rank:
medal".
5th].
placements
[10,3,8,9,4]
"bronze
[0,1,1,2,1,2]
__builtin_popcount
c++)?
1"
restricted
[4,1,8,7]
(8-4)
"-1
(7-1)
['+',
24,
'/']
"12
12"
"9534330"
[10,2]
[3,30,34,5,9]
https://leetcode.com/problems/find-the-middle-index-in-array/
[1,7,3,6,5,6]
1991:
[2,1,-1]
index's
[-10,8,6,7,-2,-3]
[-1,2,-3,3]
-k
[-1,10,6,7,-7,1]
clickc
[clickr,
[["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]
[["e","e","e","e","e"],["e","e","m","e","e"],["e","e","e","e","e"],["e","e","e","e","e"]],
mine,
revealed,
(wikipedia,
mine
[["b","1","e","1","b"],["b","1","x","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]
revealed.
click.length
'e').
clickr
click
('m'
'8')
clickc]
diagonals),
'8'.
revealing
char
mine.
unrevealed
game)!
board[clickr][clickc]
revealed
[["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]],
[0,2,3]
[0,3].
[0,1,2,5].
[[0,1],[0,2],[2,5],[3,4],[4,2]]
min(10^5,
[[0,1],[2,1],[3,1],[1,4],[2,4]]
[3,4,2,5].
"ddddd",
idkey
"eeeee"].
"bbbbb"),
orderedstream(5);
"aaaaa"],
concatentating
os.insert(2,
stream,
"bbbbb");
"ccccc",
os.insert(4,
["aaaaa"]
"ccccc"),
"aaaaa");
orderedstream(int
"bbbbb",
returned:
["aaaaa"],
"eeeee"]]
"ccccc");
"eeeee"]
["orderedstream",
(idkey,
"eeeee"],
"ccccc"]
insert(int
insert.
"ddddd");
os.insert(5,
"eeeee"),
"ccccc"],
"bbbbb"],
["aaaaa",
os
"insert"]
"ddddd"]]
"ddddd"),
["ddddd",
"eeeee");
"ccccc"].
["bbbbb",
os.insert(1,
"aaaaa"),
["aaaaa"].
os.insert(3,
orderedstream
idkey,
1x1)
(squares
(square
integer-sided
2x2)
"ab(c)d"
"lee(t(c)ode)"
"lee(t(c)o)de"
"lee(t(c)o)de)"
"lee(t(co)de)"
"))(("
either'('
"a)b(c)d"
("ba").
"eidboaoo"
s1's
"eidbaooo"
3999].
'm').
('i',
v=
lands,
landing
[100,100]
brushes
[2,5,5]
dropped,
moved.
[100,
left/right
(negative
[[100,100],[200,100]]
direction)
sidelengthi
[[1,2],[2,3],[6,1]]
freezes
brushing
sidelengthi]
drop,
landed
sheet.
columnnumber,
columnnumber
[1,3,3],
[4,-2,-3,4,1]
"dd",
"abcbdd"
"bcbddxy"
fine
["bar","foo","the"]
"acdbef"
["bar","the","foo"]
"barfoothefoobarman",
["foo","bar","the"]
concatenated.
"cdefab",
"abefcd",
"barfoo".
["the","foo","bar"]
["word","good","best","word"]
["bar","foo"]
"efcdab"
[6,9,12]
"wordgoodgoodgoodbestword",
"efabcd",
"cdabef",
"barthefoo".
"barfoofoobarthefoobarman",
[0,9]
["ab","cd","ef"],
"thefoobar".
[9,0]
"foobarthe".
"abcdef",
"foobar".
["foo","bar"]
[[0,1,10],[0,2,1],[1,2,2]],
graph")
subdivisions
[[0,1,4],[1,2,6],[0,2,8],[1,3,1]],
[xcnti,
maxmoves,
cnti]
104)
vi],
x2],
[xcnti-1,
"original
subdivide
x1],
(cnti
x3],
vi].
maxmoves
cnti
[[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]],
xcnti,
yellow.
[x2,
xcnti],
numbercontainers
nc.change(1,
fills
nc
"find",
nc.change(3,
change(int
nc.change(2,
["numbercontainers",
nc.change(5,
nc.find(10);
find.
numbercontainers()
[10]]
numbercontainers();
"find"]
"change",
10:16:13
2021-01-22
+---------+---------------------+-----------+
confirmed.
1.00
signups
14:00:00
confirmation_rate
signup
23:59:59
'confirmed'
2021-07-14
0.5.
('timeout').
confirmed
03:30:46
2020-01-04
timeout
expired
2021-06-12
23:09:44
2020-07-29
out.
2021-02-28
+---------+-------------------+
0.50
timed
('confirmed')
confirming
2021-06-14
2021-06-13
13:57:59
'timeout')
13:59:27
0.00
12:58:28
00:00:00
messages.
('confirmed',
2020-03-21
10:39:37
11:57:29
confirmations
perm2[i].
perm1[i]
[1,17,8]
perm1
[1,8,17]
perm2
squareful.
[17,8,1]
pairs),
[[-14,-10],[19,23],[23,27]]
[3,8,-10,23,19,-4,-14,27]
[1,3,6,10,15]
order(with
"tie"
"alice"
[1,2,3,-9]
src,
[[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]],
src
[[0,1,100],[1,2,100],[0,2,500]],
flights[i]
flights.
cheaper
700
dst,
flights.length
dst
flights[i].length
route,
((1
nums[k]).
xoring
(1,0,1)
beauties
(1,0,0)
[15,45,20,2,34,35,5,44,32,30]
(1,1,1)
((nums[i]
(0,0,1)
(1,1,0)
(0,1,0)
(0,0,0)
(0,1,1)
[1,1,1,2,2,3],
algorithm's
array].
pawn,
rook's
bishop.
attacking
bishops
rook.
pawns.
b5,
pawn
blocking
[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","b","p","p",".","."],[".","p","b","r","b","p",".","."],[".","p","p","b","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
capture
pawns
stop,
f5.
[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","r",".","p","b","."],[".",".",".",".",".",".",".","."],[".",".",".","b",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","r",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
d6,
west),
attacking.
"?a"
"cb",
sequence).
(s)
(p),
numones,
numnegones
0}.
numzeros
numnegones,
numones
-1s
numzeros,
contains:
numzeroes
[1,100,1,1,1,100,1,1,100,1]
[10,15,20]
9969
6669.
9666.
9996
9969.
9699.
9669
3999
numeral.
nums3
nums3,
[10,2,5,0]
nums3.
nums2[1].
xors
nums2[1],
nums2[0],
[2,5,1,6].
[8,0,7,2,11,3,4,1,9,1,6,3].
-3],
[4,5,0,-2,-3,1],
encoding[i]
exhausted
[3,8,2,5].
[2,8,1,8,2,5]
rleiterator.next(1);
rleiterator([3,
rleiterator(int[]
[8,8,8,5,5].
[8,8,8,5,5]
rleiterator
encoding[i
encoding.length
encoded)
["rleiterator",
exhausts
"next"]
rle)
encoded.
exhaust,
next(int
rleiterator.next(2);
[3,8,0,9,2,5]
[[[3,
"pcxbc",
wordk]
"pcxbcf"].
["abcd","dbqca"]
"cxbc",
chains
"bcad".
chains.
trivial
wordb.
["a","ba","bda","bdca"].
["xb",
wordb
["xbc","pcxbcf","xb","cxbc","pcxbc"]
"xbc",
[word1,
word3,
predecessor
["a","b","ba","bca","bda","bdca"]
worda
2/1
mark.
2.7
hour)
1/1
kilometers)
depart.
2.66667
2/3
trains
3/3
commute
depart
0.33333
1.9
"111111"
"0110111"
530:
https://leetcode.com/problems/minimum-absolute-difference-in-bst/
type-1:
type-2
"100011".
"101010".
type-2:
drives.
fueli
fueli]
[[10,100]]
liters
fuel),
mile
expending
startfuel
tank
refuel,
(expending
station,
arrived.
transferring
refuel
liter
gas.
gas,
[[10,60],[20,30],[30,30],[60,40]]
gas
positioni+1
refueling.
station).
straight-forward.
[2,1,4,null,null,3]
pretty
swapped
mistake.
[3,1,4,null,null,2]
[3,1,null,null,2]
"cdc"
"cdc".
reversed1
reversed2.
625,
625
1800
reversed2
526
12300
81
2021
81,
retained.
526,
reversed1,
[-1,-2,-3]
-121
121-.
-121.
string?
[1,12,-5,-6,50,3],
12.75
12.75000
a@b.com
c@d.com
i=1,
s="abc",
s="aaaba".
s="acb".
j=4.
i=2,
s="cab".
j=2.
s="abc".
s="bca".
s="bac",
j=1.
s="aaaab",
s="aaaab".
s="bac".
i=4,
i=3,
s="cab",
copies
"code".
"aaaaa",
"abbaccaddaeea",
"code",
"abcba",
"ecod"
"ilovecodingonleetcode",
hour).
bumper
driving
fleets
fleet,
[2,4,1,1,3]
slow
(speed
fleet.
catches
position).
car's
one-lane
[10,8,0,5,3],
[0,2,4],
slower
"fghij"
word2[j].
"abcc",
unmarked.
nums[1].
[9,2,5,4]
[3,5,2,4]
[[1,2,2],[2,3,2]],
[[1,3,3],[2,3,3]]
[[1,1],[1,2]],
[[1,1,1],[1,1,1],[1,1,1]],
component,
[[3,3],[3,2]]
col,
endtime[i].
wasn't
querytime.
[starttime[i],
[3,2,7],
querytime
lays
endtime[i]]
[2,1,4,5],
[1,3,2,4],
positions:
source.
[2,1,3,4]
[1,5,4,2,3],
[[0,1],[2,3]]
allowedswaps[i]
[[0,4],[4,2],[1,3],[1,4]]
allowedswaps[i].length
[5,1,2,4,3],
allowedswaps
allowedswaps.length
source[i],
heights:
[1,1,1,2,3,4]
expected[i].
[5,1,2,3,4]
annual
expected[i]
expected:
[1,1,4,2,1,3]
0-height
contour
increased.
prism.
[[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
city's
changing.
building).
blocks,
gridnew
skylines
affecting
[1,2,1,2,3],
[1,2,1,3],
[1,2,3,1,2]
[2,1,2],
[1,2,1,3,4],
[6,4,14,6,8,13,9,7,10,6,12],
jumping.
min(i,
[3,3,3,3,3],
indicies.
[7,6,5,4,3,2,1],
max(i,
j)).
we",
maxwidth
symbols.
"acknowledgment
art
"text",
explain
"justification."],
"everything
well",
left-justified,
["this",
to",
maxwidth.
"an",
"do
left-justified
"example",
pack
"understand
["what","must","be","acknowledgment","shall","be"],
greedy
"enough
be",
pad
"science
is",
an",
"shall
approach;
"justification.
maxwidth,
["science","is","what","we","understand","well","enough","to","explain","to","a","computer.","art","is","everything","else","we","do"],
text",
fully-justified.
justified.
forest.length
tallest.
forest[i][j]
matrix:
[[2,3,4],[0,0,5],[8,7,6]]
accessed
[[1,2,3],[0,0,4],[7,6,5]]
[[1,2,3],[0,0,0],[7,6,5]]
forest[i].length
(1+1+1+2).
(1+2+5+9)
division's
[44,22,33,11,1],
10/2
7/3
(1+1+2+3)
[1,2,5,9],
[2,4,5,4,5,4]
[1,4,5,4,5,4]
findsumpairs.add(0,
[2,5,5,4,5,4]
findsumpairs.count(4);
count(int
(5,1),
findsumpairs.add(1,
tot
(2,1),
tot.
(3,1),
8;
findsumpairs([1,
findsumpairs(int[]
findsumpairs.count(7);
["findsumpairs",
nums2.length).
11;
nums2[index]
findsumpairs.count(8);
(5,5)
findsumpairs
findsumpairs.add(3,
(5,0)
(3,2),
tot)
(5,2),
(4,2),
(4,1),
nums2[index],
"cdba",
outputs.
previously.
"cbad"
property.
permuted
"dcba",
"cbafg",
"cbda"
cost2
cost1
cost1,
pencils.
utensils.
pens,
utensil.
pen
pen,
190
lengthi
stacked
95
[widthi,
lengthj
cuboids.
53x37
[[50,45,20],[95,37,53],[45,23,12]]
dimension.
cuboids[i]
widthj
cuboids.length
11x7
102.
23x12
cuboids,
heightj.
76
lengthi,
widthi,
45x20
widthi
cuboid.
cuboid's
35x3
[[38,25,45],[76,35,3]]
cuboid
[[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
trust.length
trust[i].length
secretly
judge)
[[1,3],[2,3]]
town,
trust[i]
trust
trusts
judge.
[[1,3],[2,3],[3,1]]
nobody.
rumor
identified,
shelf.
[thicknessi,
[[1,3],[2,4],[3,2]],
bookshelf
thicknessi
thickness
shelfwidth
shelfwidth.
books,
shelf,
shelfwidth,
shelf
books[i]
[[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]],
books.length
books.
heights[i][j]
col).
route.
heights,
heights[i].length
hope
hiker
[[1,2,3],[3,8,4],[5,3,5]]
hike.
[[1,2,2],[3,8,2],[5,3,5]]
[[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
heights[row][col]
[1,3,5,3,5].
[1,2,2,2,5],
[1,3,5,3,5]
(rows-1,
effort.
route's
columns-1)
groupsizes[4]
[2,1,3,3,3,2]
groupsizes[i].
[[2,1,6],[5],[0,4,3]]
[0,1,2].
[[5],[0,6,2],[4,3,1]].
groupsizes.length
groupsizes[0]
groupsizes[5]
groupsizes,
[[1],[0,5],[2,3,4]]
groupsizes[3]
[3,3,3,3,3,1,3]
groupsizes[6]
groupsizes[i]
[3,4,6].
groupsizes
[[5],[0,1,2],[3,4,6]]
groupsizes[1]
groupsizes[2]
[4,5,6]
decomposition:
concatenation.
"()()()".
"()(())"
nonempty
"(()(()))"
"(()())(())"
"(())()",
"()()()()(())"
"(()())(())(()(()))"
nonempty,
"(()(()))".
"(())".
pk,
"(()())(())",
"()()()"
"(()())(())(()(()))",
"()()()()(())".
tweet_id
app.
america
biden
again!
tweet.
tweets.
+----------+----------------------------------+
[[1,1],[0,0]]
odd-valued
ci.
[[0,0,0],[0,0,0]].
[[1,3,1],[1,3,1]],
[[1,2,1],[0,1,0]].
[[2,2],[2,2]].
ri.
indices.length)
4294967293,
(00111001011110000010100101000000)
00111001011110000010100101000000.
10111111111111111111111111111111.
3221225471
964176192
00000010100101000001111010011100
-1073741825.
(10111111111111111111111111111111)
43261596,
[10,14,2].
[4,1,3]
[10,12,4].
[2,14,10]
[1,4,3].
similiar
[8,12,6],
moves].
[taking
parent.
[3,0,0]
"xi!=yi".here,
one-letter
'='
forms:
equations[i].length
equations[i]
equations[i][2]
equations,
equations[i][1]
'!'.
["a==b","b!=a"]
["b==a","a==b"]
equations[i][3]
equations.length
equations.
different)
equations[i][0]
"xi==yi"
rooms[i][j]
rooms[i].length
sum(rooms[i].length)
unlocks,
unlocks
[[1,3],[3,0,1],[2],[0]]
[[1],[2],[3],[]]
[100,100,100]
[37,12,28,9,100,56,80,5,12]
[40,10,20,30]
[5,3,4,2,8,6,7,1,3]
["a","b","c","ab","ac","bc","abc"]
["ad","bd","aaab","baa","badab"]
["cc","acd","b","ba","bac","bad","ac","d"]
allowed.length
numarray.update(1,
numarray([1,
"update",
update(int
sticker
"basicbasic"
["notice","possible"],
sticker.
stickers.length
stickers[i]
stickers.
stickers,
"example"
["with","example","science"],
"with"
stickers[i].length
"thehat".
"thehat"
cheating
possible..
[".","#"]]
[".",".","#",".","."],
["#","."],
classroom.
cheat
him.
["#",".","#","#",".","#"]]
[".","#","#","#","#","."],
seats[i].length
[[".","#"],
[["#",".",".",".","#"],
and'#'.
[["#",".","#","#",".","#"],
["#",".",".",".","#"]]
[".","#",".","#","."],
"!@#$%^&*()-+".
"ilovele3tcode!"
requirement.
violates
"me+you--ismydream"
password.length
"1ab!"
password,
on].
bulbs,
off].
toggle
bulb.
(turning
"yzs",
"zzs".
"?zs"
"ubv?w"
modification
conversions
"ubvaw"
"ubvww".
"azs"
"w"
"ubvvw"
{2,7}
[7,7,7,7,7,7]
[5,5,5,2,2]
{7}.
[3,3,3,3,5,5,5,2,2,7]
{3,5},{3,2},{5,2}.
[3,3,3,3,5,5,5]
{3,7}
4;
stone),
s(i,
[-2,5,-1],
[2,3,3,2],
[3,3,2,2],
[2,3,3,2,2],
[3,3,2],
[2,3,3,2,2]
[5,7,5,7,4].
freqstack.push(7);
pop.
freqstack
frequent.
[5,7,5,7]
freqstack()
[5,7,5,7,4,5]
stack-like
freqstack.push(5);
freqstack.push(4);
["freqstack",
[5,7,5,4].
freqstack();
[5,7,4].
stack's
frequent,
freqstack.pop();
[5,7,5,7,4]
[5,7].
fourth,
fifth,...),
labelling
[1,2,6,10,26]
(second,
label.
[1,3,4,14]
(ie.,
sixth,...),
adjacentpairs.length
[[2,1],[3,4],[3,2]]
[100000,-100000]
adjacentpairs[i]
[-3,1,4,-2],
[[4,-2],[1,4],[-3,1]]
adjacentpairs[i].length
nums[i]].
forgotten
[-2,4,1,-3]
[nums[i+1],
nums[i+1]]
adjacentpairs
adjacentpairs,
adjacentpairs.
[[100000,-100000]]
progression.
[3,5,1]
0-diff
[1,3,1,5,4],
nums[j]),
2-diff
1-diff
[3,1,4,1,5],
(nums[i],
countintervals.add(7,
countintervals.count();
countintervals.add(2,
countintervals()
countintervals
countintervals();
["countintervals",
countintervals.add(5,
[10,2,-10,5,20],
[-1,-2,-3],
[10,-2,-10,-5,20],
20].
wanted
were.
row-traversing
matlab,
reshaped
data.
legal,
[[1,2,3,4]]
[[1,2],[3,4]],
matrix;
handy
mirrored),
degrees,
alone.
rotating.
themselves,
robots
moment.
[[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
#2,
#2
#1,
cherries:
[[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
cherries.
#1
you:
"00110011"
0's:
"1100",
1's)
occur.
nums[2*i+1]]
[freq,
decompressed
[4,4,4]
encoding.
[2,4,4,4]
sublists
sublist.
[2,4,4,4].
[nums[2*i],
nums[nums[k]],
{nums[0],
subjected
s[k].
nums[2]}
nums[6],
nums[6]
{5,
{nums[k],
0}
nums[nums[nums[k]]],
[5,4,0,3,1,6,2]
s[k]:
"000111",
"01000111"
"51"
"551".
"12".
"231".
"1231",
"51".
"551",
[1,2,3,4,7],
force.
1000000000.
baskets,
earth
invented
c-137,
rick
999999999
[5,4,3,2,1,1000000000],
discovered
universe
morty
stated
position[i],
candiescount
candiescount.length
candiescount[i]
[false,true,true,false,false]
[[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
favoritedayi,
dailycapi
[7,4,5,3,8],
[[0,2,2],[4,2,4],[2,13,1000000000]]
[favoritetypei,
favoritedayi
dailycapi].
[5,2,6,4,1],
favoritetypei
guesses
v]
[[0,1],[1,2],[1,3],[4,2]],
vj.
[u,
guesses.length
[[0,1],[1,2],[2,3],[3,4]],
reply
guess.
guess,
guesses[j]
lazy,
says
[[1,3],[0,1],[1,0],[2,4]],
[[1,0],[3,4],[2,1],[3,2]],
edges[i][0],
edges[i][1]
component.
delete,
[6,2,2,2,6],
[[0,2],[1,3]]
swim.
everywhere
[[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
5+5+2
sums:
1+4+7
5+4+3
6+3+3
[[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
5+1+6
2+7+3
[[5,1,3,1],[9,3,3,1],[1,3,3,8]]
6+4+2
bounds.
[3,0,4,null,2,null,null,1],
[3,2,null,1]
depending
descendant).
[1,0,2],
high].
[2,0,3,1,4].
[1,0,0,0,0],
[0,2,3,1].
civilians.
[2,0,3]
[1,1,0,0,0],
weaker
civilians).
[1,0,0,0],
[1,0,0,0]],
[[1,1,0,0,0],
strongest.
[1,1,1,1,0],
soldiers)
[1,1,1,1,1]],
"fizz"
fizz()
d:
number()
"fizzbuzz".
"fizzbuzz"
printfizzbuzz
[1,2,"fizz",4,"buzz"]
"buzz".
printbuzz
fizzbuzz(printfizzbuzz)
console,
"buzz"
printfizz
[1,2,"fizz",4,"buzz","fizz",7,8,"fizz","buzz",11,"fizz",13,14,"fizzbuzz"]
fizz,
fizz(printfizz)
buzz()
buzz,
fizzbuzz
...]
buzz(printbuzz)
number(printnumber)
"fizz".
"fizz",
token
fizzbuzz()
fizzbuzz(int
"buzz",
[1,9];
clips.
lasted
[6,9].
clips
[2,8]
clips[i]
[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]],
[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]],
sporting
clips.length
[8,9].
[4,7],
[8,10]
[8,10],
time].
clip
freely.
[1,9]
2015-01-03
+----+------------+-------------+
2015-01-04
dates'
+----+
weather
(20
30).
2015-01-02,
2015-01-02
recorddate
(yesterday).
2015-01-04,
2015-01-01
overridden
"sum"]
prefix)
["ap"]]
prefix.length
sum(string
pairs'
["app",
mapsum.insert("apple",
(apple
mapsum.sum("ap");
"sum",
insert(string
existed,
mapsum.insert("app",
["apple",
mapsum();
["ap"],
key-val
mapsum
["mapsum",
mapsum()
[[1],[2]]
[3
[[1,1],[3,4]]
[5,6]
[3,4,5,6,7,8]
480.
480
[2,5,6]
[5,1,6]
[1,2,2,6,6,6,6,7,10]
pointsi
brainpoweri].
questions[i].length
questions.length
pointsi,
question.
5]]:
brainpoweri
earned:
exam,
[[3,2],[4,3],[4,4],[2,5]]
[pointsi,
questions[i]
(7,8).
[[-2,0],[2,0],[0,2],[0,-2]],
dartboard.
darts.length
(0,4)
dart
threw
throwing
[[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]],
darts[i].length
darts[i]
[0,0,0,0,0].
[3,2,1,4,7]
[1,2,3,2,1],
[3,1,4,5,2]
bst:
[3,1,2,4,5]
[3,4,1,5,2]
[3,4,1,2,5]
[3,1,4,2,5]
,'z'
"cx"
["a","a","c","d","d","d","g","o","o"],
"dog"
[0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
["z","a","b","c","x","x","x"],
c=9,
o=2
a=1,
(might
["l","e","t","c","o","d"],
(5+1+5)
(4+5)
["xxxz","ax","bx","cx"],
c=4,
score[25]
d=5,
"bx"
"dad"
"ax"
score[1],
[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
(words[i]
"xxxz"
repeating)
letters[i].length
b=4,
a=4,
["dog","cat","dad","good"],
g=3,
[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
z=10
score[0],
(3+2+2+5)
(4+5),
odds.
[5,7,23]
[1,2,34,3,4,5,7,23,12]
[2,6,4,1]
30-day
365.
dollars,
costs[0]
[1,4,6,7,8,20],
1-day
costs[2]
$17
7-day
plan:
[1,2,3,4,5,6,7,8,9,10,30,31],
[2,7,15]
$7,
365
costs[1]
planned
hats:
hats[i][j]
hats.length
(1,5)
hats[i]
(1,2,3,4)
[[3,5,1],[3,5]]
hats[i].length
[[3,4],[4,5],[5]]
[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
hat
hats,
[[3,7,8],[9,11,13],[15,16,17]]
[[1,10,4,2],[9,3,8,7],[15,16,17,12]]
105.
[12]
[[7,8],[1,2]]
1110
bits,
prime)
binary.
10101,
1011
1111
1001
1101
inputs)
fn().
[[{},{}],[{},{}],[{},{}]]
memoized(...arr);
[[o,o],[o,o],[o,o]];
[[2,2],[2,2],[1,2]]
memoize(fn);
getinputs
[{"val":{},"calls":1},{"val":{},"calls":2},{"val":{},"calls":3}]
[{"val":{},"calls":1},{"val":{},"calls":1},{"val":{},"calls":1}]
accepts.
nan
({...a,
(const
fn()
cache-hit.
[{"val":4,"calls":1},{"val":4,"calls":1},{"val":3,"calls":2}]
...b});
cache-hits,
getinputs();
node;
[1,1,1,null,1,null,null,1,1,null,1]
[1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]
(right
"1(2(4)())(3()())",
originally,
"1(2()(4))(3)"
omit
one-to-one
"1(2(4))(3)"
almost
[[1,2,[5]],[5,-3,[]]],
employees.length
indirect
leader
employees[i].id
subordinates:
subordinates'
information,
employees[i].subordinates
employees[i].importance
[[1,5,[2,3]],[2,3,[]],[3,3,[]]],
32-bits
(111)
root-to-leaf
01101
[1,0,1,0,1,0,1]
(110)
[-2,-1,0,1,2]
etc).
counter()
call.
["call","call","call","call","call"]
["call","call","call"]
sebsequent
(1,3).
grid[2][3]
grid[1][2]
grid[row][col].
grid[1][3]
[[0,1,3,2],[5,1,2,5],[4,3,8,6]]
grid[0][1]
[[0,2,4],[3,2,1],[1,0,4]]
https://leetcode.com/problems/convert-bst-to-greater-tree/
538:
[[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
yi.
[[1,2],[2,3],[3,1]]
[10,10000]
seconds).
[60,60]
[70,129],
analysis.
"hour",
"minute",
[0,210]
tweetcounts.gettweetcountsperfrequency("minute",
recordtweet(string
(86400-second
59);
[2];
gettweetcountsperfrequency(string
recordtweet
[4];
120);
tweetname,
time)
[10,69],
site
[3610,7209],
freq.
[9970,10000]
tweetname
chunks):
gettweetcountsperfrequency.
[130,189],
(3600-second
"tweet3",
"tweet3"
tweetcounts.gettweetcountsperfrequency("hour",
["tweetcounts","recordtweet","recordtweet","recordtweet","gettweetcountsperfrequency","gettweetcountsperfrequency","recordtweet","gettweetcountsperfrequency"]
[0,59]
tweetcounts();
endtime]
recorded
[10,3609],
tweetcounts
frequencies:
frequency's
210);
freq,
[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]
[2,1];
analyzing
tweetcounts()
tweetcounts.recordtweet("tweet3",
tweets,
10000]
[7210,10000]
(60-second
[null,null,null,null,[2],[2,1],null,[4]]
traversed
[[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
likewise,
edges:
(typei,
typei
[[3,2,3],[1,1,2],[2,3,4]]
[[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
[typei,
traversable.
216.
modulo.
[6,3,3,2],
2011.
2008.
2009.
conclude
+--------------+-------+-------+
product_name,
["ab","a"]
words[2],
["abc","aabc","bc"]
332
299
12...
10...
13...
109].
{"x":1,"y":2}
json.stringify(o1).length
json.stringify(o2).length
o2
o2,
json.
_.isequal()
exactly.
{"y":2,"x":1},
check.
o1
{"x":null,"l":["1","2","3"]}
{"x":1,"y":2},
json.parse.
{"x":null,"l":[1,2,3]},
0%,
percent.
"foobar",
"jjjj",
33%
3s.
[5,5,4],
[4,3,1,1,3,3,2],
[2,9]
u)
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
o,
66045
["a","e","i","o","u"].
[1,4,7,3,2]
[2,1,4,7,3,2,5]
mountain.
[10,10,4,4,2,7].
|7-4|
|5-3|)
[9,3,5,1,7,4]
|10-3|
[1,10,4,4,2,7],
[1,10,4,4,2,7]
[2,4,6,8,10]
|1-2|
[1,7,5]
(|1-3|
[1,5,5].
|nums1[i]
|4-1|
nums2[i]|
[1,1,5],
[1,7,5],
[2,11,7,15]
[1,10,4,11]
[13,25,32,11]
[24,32,8,12]
[12,24,8,32],
there).
[["#","#","#","#","#","#"],
["#","t",".",".","#","#"],
["#",".",".",".","s","#"],
["#",".",".","b",".","#"],
["#","#","#","#",".","#"],
storekeeper
["#",".","#","b",".","#"],
["#","t","#","#","#","#"],
["#","#","#","#","#","#"]]
["#",".",".",".",".","#"],
(impossible
push.
["#",".","#","#",".","#"],
floors,
relaxation
relaxation.
designated
floors.
(7,
[x,x,2].
dist[i],
monsters.
charged
charge.the
thrid
lose,
loss,
[x,2,3].
[1,1,2,3].
monster
[1,1,2,3],
[x,0,2],
monster.
weapon.
[x,0,1,2],
eliminated.
weapon
[1,3,4],
charged,
defending
"acefg",
r(e1)
','or
r("{a,b,c}")
(notice
r("w")
"abefh",
r(expr)
["ac","ad","ae","bc","bd","be"]
"acefh"}
r({e1,
comma-delimited
∪
{"ac","ad","bc","bd"}
grammar,
r(x)
{"a"}
cartesian
examples:
singleton
r("{{a,b},{b,c}}")
{"a","b","c"}
"{a,b}{c,{d,e}}"
once)
{"abdfg",
concatenation,
ek
{"w"}
understood
["a","ab","ac","z"]
r(e1
"{{a,z},a{b,c},{ab,z}}"
r(e2)
"acdfg",
grammar:
r("a")
...})
{x}.
"acdfh",
"abdfh",
e2)
r("{a,b}{c,d}")
r("a{b,c}{d,e}f{g,h}")
r(e2)},
represents.
"abefg",
bar()
foo()
bar().
"foobarfoobar"
print("bar");
print("foo");
foo(),
|c1
[0,1,1,2,2,3]
[[0,1],[1,1],[0,0],[1,0]]
ccenter
c2|.
ccenter.
[0,1,1,2]
ccenter)
|r1
[[0,1],[0,0],[1,1],[1,0]]
(r2,
[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
(r1,
correct,
(rcenter,
r2|
rcenter,
[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
ccenter).
rcenter
maxmove,
boundary).
startcolumn].
startcolumn,
startrow
startcolumn
maxmove
swap,
'a'),
"aaabaaa"
[[1,2],[2,3],[5],[0],[5],[],[]]
terminal
node).
[[1,2,3,4],[1,2],[3,4],[0,4],[]]
[2,4,5,6]
graph[i].
"leaf":
p_id
"root":
attributes.
+----+------+
"inner":
[1,0,0,0].
[5,2,3].
ans[2]
ans[3]
[1,0,0].
[1,2,0].
candies)
gift).
[1,2,3,0].
[1,2,3,1].
num_people
[1,2,0,0].
croaks
yelling
yell
"crcoakroak".
printing
croakoffrogs
croakoffrogs.length
frogs,
croakoffrogs,
"croak"
croak
"croakcrook"
'k'.
"crcoakroak"
frogs.
"croakcroak"
croak.
mixed.
[[1,3],[1,4],[2,5],[3,5]]
[[1,3],[3,7],[8,9]]
[3,7],
[8,9]],
[1,2,4,7,8,9]
[2,3,4,8,9]
[[1,2],[2,3],[2,4],[4,5]]
[[1,3],
sets.
sum(word1[i].length),
"cb"],
word2[i].length
"c"],
"bc"]
["abcddefg"]
sum(word2[i].length)
"defg"],
["ab",
word2[i]
word1[i].length,
[-1,-4,-5]
satisfaction
0*2
dish,
[4,3,2]
dish
prepared.
14).
satisfaction.length
satisfaction[i]
[-1,-8,0,5,-9]
(2*1
satisfaction[i].
cook
dishes.
discard
(-1*1
prepared
3*2
4*3
preparation.
like-time
[3,2,3,2,2].
[1,3,2,1,3,2,2]
formed,
[2,2,2].
"()()".
(well-formed)
")()())"
(highest
col]
[row,
[[2,1],[2,0]]
highest-ranked
(lower
[[1,2,0,1],[1,3,0,1],[0,2,5,1]],
range).
(2,2).
pricing.length
(2,0).
[[0,1],[1,1],[2,1]]
(2,0)
rank).
[[1,1,1],[0,0,1],[2,3,4]],
[[1,2,0,1],[1,3,3,1],[0,2,5,1]],
pricing
(smaller
[[2,1],[1,2]]
(shorter
[[1,0,1,0,1]]
[[0,0,1],[1,1,1],[1,0,1]]
[[1,1,0],[1,0,1]]
reordering
bold,
dominoes[j]
dominoes.length,
d),
dominoes[j].
[[1,2],[1,2],[1,1],[1,2],[2,2]]
dominoes[i][j]
[[1,2],[2,1],[3,4],[5,6]]
dominoes[i].length
abs(nums[i]
[1,2,2,1]
[3,2,3,2,2,2]
"artro"
"are"
"u"
"mu"
"aeo"
"ooo"
["hey","aeo","mu","ooo","artro"],
["are","amy","u"],
"amy"
[nums[l],
nums[l
nums[r
subarray).
(l
nums[r]]
"aazz"
[6,-1,-1,6],
82
[4,-1,3],
commands[i]
0):
[4,-1,4,-2,4],
-y
+y
commands:
commands.length
degrees.
+x
xy-plane
[[2,4]]
|13
21|)
21|,
min(|1
min(|13
3|)
[7,7,7,7],
[13,5,21].
min(8,
[13,5,1,8,21,2],
sells
min(2)
5|,
"azbzaz",
"az"
"ca",
sn).
s6
"babab"
"babab",
"azbazbzaz"
prepending
si,
"az",
"azb"
s5
s9
si.
"azbazbzaz",
[2,3,2,1,3]
|j
[0,1,9,0]
i|.
[3,1,2,3,2]
[5,3,1,4,3,5,2,4,2]
a[j],
constraints,
[0,1,5,6]
builddict
magicdictionary.search("hello");
"leetcode"]],
magicdictionary
searchword)
"leetcode"]);
magicdictionary.search("leetcoded");
structure,
["hhllo"],
builddict(string[]
["hell"],
[["hello",
["hello"],
magicdictionary.builddict(["hello",
magicdictionary();
magicdictionary.search("hell");
magicdictionary()
["leetcoded"]]
magicdictionary.search("hhllo");
"builddict",
["magicdictionary",
search(string
[3,0,1,1,9,7],
(3,0,1),
triplets:
arr[j],
arr[k])
(3,1,1),
arr[j]|
(arr[i],
(0,1,1)].
arr[k]|
[(3,0,1),
abs
"aaab",
[3,2,1,0,1,0,0,1,2,2,1,0]
[3,2,1,0]
abs(8
"loveleetcode",
relevant
arms
mines[i]
grid[xi][yi]
mines.length
none,
[[4,2]]
(-2)1
(-2)0
(-2)2
both.
method).
"abcczz"
master.guess
(value
(other
master.guess("abcczz")
master.guess(word)
"ccbazz"
"you
master.guess,
word."
correctly.
master.guess("ccbazz")
master.
correctly."
"acckzz",
master.guess("aaaaaa")
"acckzz"
allowedguesses.
["hamada","khaled"],
["acckzz","ccbazz","eiowzz","abcczz"],
reasonable
helper
position)
six-letter-long
master.guess(word).
master.guess("acckzz")
master.guess("eiowzz")
"hamada",
"either
get:
bruteforce
allowedguesses
"eiowzz"
voyage,
voyage
pre-order
flipped.
effect:
voyage.length
voyage.
voyage[i]
arr1[j]|
[-1,4,5,6]
40000
arr2[j]|
|arr2[i]
[1,-2,-5,0,10],
arr1.length.
|arr1[i]
[0,-2,-1,-7,-4]
rods[i]
rods.length
{1,2,3}
weld
sum(rods[i])
{6},
welded
supported,
{2,3,5}
{4,6},
steel
installation.
supports,
billboard,
[1,null,2,3,4,null,null,5,6]
6.their
(11*10)
(15*6)
16|
[1,15,6,3]
|25
[i,j].
[[10,20,15],[21,30,14],[7,16,32]]
log(m))
log(n))
[[1,4],[3,2]]
[4,2,4,5,6]
[5,2,1]
[1,2,5].
(l,r).
[5,2,1,2,5,2,1,2,5]
[2,4,5,6].
a[l],a[l+1],...,a[r]
fair.
[6,1,7,4].
[6,1,7,4,1]:
[2,1,6]
[6,1,4,1].
[2,1,4]
removal,
[1,6,4]
removal.
[2,1,6,4]
[2,6,4]
[6,7,4,1].
[[1,3],[2,0],[5,10],[6,-10]],
x-values,
[[0,0],[3,0],[9,2]],
points.length.
["bbb","cc"],
f("cbd")
f(s)
f("cc").
f("aaaa")
["zaaaz"]
f("zaaaz").
f("aaa")
queries[i][j],
["cbd"],
queries[i].length,
f(w)
"dcce"
words[i][j]
f(queries[i])
f("zaaaz")
f("bbb")
f("aaaa").
["shogun"]
["shogun","tapioca
["happy","sad","good"],
list2[j]
torrey
list2[i]
express","burger
pines","hungry
king","kfc"],
king"]
list1[i]
["piatti","the
list1[i].length,
"happy".
list2,
list2[i].length
["sad","happy","good"]
steakhouse","shogun"]
grill
hunter
"shogun"
["kfc","shogun","burger
list1.length,
["sad","happy"]
"shogun".
[3,6,5,1,8]
(maximum
[1,2,3,4,4]
1.550
machine.
2.500))
machine_id
'end').
0.550
2.500
'start'
+------------+-----------------+
process_id)
4.512
('start',
4.100)
(machine_id,
4.100
((1.520
5.000
0.712
+------------+------------+---------------+-----------+
run.
1.520
process_id,
0.430))
machine_id.
processing_time
3.140))
3.140
processes.
'end'
0.995
activity_type)
0.430
processing_time,
0.712)
1.420
1.456
(4.120
((1.550
0.550)
0.894
((4.512
(5.000
4.120
process_id
(1.420
nums2[i1],
(nums1[i0]
min(nums2[i0]
nums1[i1]
min(2,1,3)
i0,
n-1}
+...+
min(2,1,4)
(1+3+3)
min(1,3,4)
(3+3+2)
[2,1,3,4],
[1,3,3,2],
min(2,3,4)
,nums2[ik
nums1[ik
[4,2,3,1,1],
optimal:
[7,5,10,9,6],
ik
(1+3+2)
i1,
nums2].
[11,13]
[nums1,
[17,19].
[2,1,5]
[7,0,5,5,0]
[5,5,0]
[2,7,4,3,5]
extrovertscount
introvertscount
(introvert
30)
introvertscount,
extrovert
neighbor)
live
neighbors)
260.
happiness.
min(m
extrovert).
light
happiness:
introvert
happiness)
introverts
extroverts.
living
extrovertscount.
260
extroverts
people:
240
2018-12-19
["approved",
trans_total_amount
2018-12
approved
+------+---------+----------+--------+------------+
124
incoming
"declined"].
approved_total_amount
declined
trans_count
2019-01
+----------+---------+-------------+----------------+--------------------+-----------------------+
2018-12-18
approved_count
trans_date
de
differently.
alicevalues[i]
alice.
alicevalues[i],
alicevalues
alicevalues.length
bobvalues
stone's
draw.
plays,
[1,6,7]
bobvalues.length
bobvalues[i]
bobvalues.
other's
https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/
1123:
"aabbc",
converting,
(base
[[2],[2,4],[2,4,6],[4],[4,6],[6]]
[2,6,12,4,10,6].
[[1],[1,3],[1,3,5],[3],[3,5],[5]]
[1,4,9,3,8,5].
[1,9,3,5]
[[1,0],[1,2],[1,3]]
[[3,0],[3,1],[3,2],[3,4],[5,4]]
mht.
(mhts).
labels.
mhts'
min(h))
[2,7,1,8,1]
[31,26,33,21,40]
sequences:
l.length
nums[l[i]],
[4,6,5].
[0,0,2],
[4,6,5,9,3,7],
r.length
[4,6,5,9].
[-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10],
nums[r[i]]
[l[i],
arithmetic:
l[i]
[4,4,9,7,9,10]
nums[l[i]+1],
[3,5,7,9],
[5,9,3,7].
r[i]
[false,true,false,false,true,true]
r[i]].
[0,1,6,4,8,7],
[6,5,4],
colorings
580986
[3,4,3].
[2,3,2,4,3],
numsdivide
numsdivide.length
[4,3,6],
[2,3,2,4,3]
numsdivide.
numsdivide[i]
[8,2,6,10]
[9,6,9,3,15]
"iiii",
➝
#1:
"(9)(9)(9)(9)"
26).
"12552031545"
262124
"zbax",
"(26)(2)(1)(24)"
12552031545
"(12)(5)(5)(20)(3)(15)(4)(5)"
convert:
"9999"
"262124"
"iiii"
#2:
"zbax"
|8-1|=7
|5-9|=4
|5-10|=5
|8-8|=0
[-5,-2,10,-3,7],
d=2
|5-1|=4
arr2[j]
|8-9|=1
|5-8|=3
[2,1,100,3],
arr1[0]=4
|4-10|=6
[-4,-3,6,10,20,30],
|8-10|=2
[10,9,1,8],
have:
|4-9|=5
|4-1|=3
arr1[2]=8
[4,5,8],
arr1[1]=5
|4-8|=4
|arr1[i]-arr2[j]|
[9,1,2,3,9],
20.00000
worse.
20.50000
10-6
library's
one-pass
[0,0,1,1,2,2]
[2,0,2,1,1,0]
cursor,
cursor.
min(10,
texteditor.cursorleft(8);
cursorright.
["texteditor",
"leet|practice".
o(k)
"etpractice",
addtext(string
cursorleft
"practi"
currenttext.length
addtext,
cursor
"etpractice"
"leet|".
texteditor.deletetext(10);
key).
"cursorleft",
cursor)
deletetext,
"|practice".
"cursorright",
texteditor.cursorright(3);
"leetpractice|".
text)
deletetext(int
texteditor.addtext("practice");
"practi"]
[6]]
"addtext",
"deletetext",
text.length,
["practice"],
texteditor
texteditor()
"cursorright"]
texteditor.cursorleft(2);
call?
"|".
texteditor();
texteditor.addtext("leetcode");
len)
cursor.position
cursorright(int
"practi|ce".
texteditor.cursorright(6);
"leetcode|".
(simulating
texteditor.deletetext(4);
cursorleft(int
[3,2,1,0,4]
what.
[5,1,4,null,null,3,6]
child's
x2)2
[[1,3],[-2,2]],
sqrt(10),
y2)2).
sqrt(8)
[[3,3],[5,-1],[-2,4]],
[[-2,2]]
[[3,3],[-2,4]]
[[-2,2]].
(y1
sqrt(10).
[[-2,4],[3,3]]
âˆš(x1
sqrt(8).
(-2,
in).
[2,2,2,1,2,2,1,2,2,2],
[1,1,2,1,1],
[1,1,2,1]
[1,2,1,1].
decided.
declared
paired.
advance
tournament:
played,
potential
[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
[[1,0],[1,0]]
make,
answers.length
rabbit.
rabbits.
didn't.
you?"
didn't
inconsistent.
rabbit
[10,10,10]
[['mary',
[["ethan","ethan0@m.co","ethan4@m.co","ethan5@m.co"],["gabe","gabe0@m.co","gabe1@m.co","gabe3@m.co"],["hanzo","hanzo0@m.co","hanzo1@m.co","hanzo3@m.co"],["kevin","kevin0@m.co","kevin3@m.co","kevin5@m.co"],["fern","fern0@m.co","fern1@m.co","fern5@m.co"]]
accounts[i]
'john_newyork@mail.com',
'john00@mail.com',
['john',
'mary@mail.com'],
"johnsmith@mail.com".
'johnsmith@mail.com']]
accounts[i][j].length
[["john","johnsmith@mail.com","john_newyork@mail.com"],["john","johnsmith@mail.com","john00@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]
john's
[["john","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]
'johnnybravo@mail.com'],
accounts[i][0]
[["gabe","gabe0@m.co","gabe3@m.co","gabe1@m.co"],["kevin","kevin3@m.co","kevin5@m.co","kevin0@m.co"],["ethan","ethan5@m.co","ethan4@m.co","ethan0@m.co"],["hanzo","hanzo3@m.co","hanzo1@m.co","hanzo0@m.co"],["fern","fern5@m.co","fern1@m.co","fern0@m.co"]]
accounts,
[3,5,10,6,9],
[1-3]+[3-6]
[20,20,100,70,60]
you're
profit[i].
[3,4,5,6],
[1,2,3,4,6],
endtime[i],
[50,10,40,70]
mar
dec_revenue
+------+---------+-------+
+------+-------------+-------------+-------------+-----+-------------+
apr
jan_revenue
feb_revenue
month)
revenue
["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"].
mar_revenue
feb
months).
supervisor
thomas
brad
+-------+-------+
empid
+-------+--------+------------+--------+
+------+-------+
[["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]],
"see"
neighboring.
"abcb"
"abcced"
board?
(second
calls.
function:
[4,2,5](nums).
operations).
element):
[4,2,4]
(initial)[0,0,0]
[5,3,6,2,4,null,7],
"0111"
substring).
"01110"
"011101"
"101",
"1111"
infrastructure
roads,
[[0,1],[0,3],[1,2],[1,3]]
[[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
infrastructure.
[[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
"anbna"
"annabelle",
"anellena"
constructions
"true",
"anna"
"elle",
"elble",
[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
[[0,0],[1,1],[1,1],[1,1],[1,0]]
topright;
val:
isleaf
2x
quadtree2
bottomright;
1*1.
bottomleft;
input/output
matrixes
sub-grids
wiki.
[[0,1],[1,1],[1,1],[1,0],[1,0]]
isleaf:
quadtree1
recurse
terminator
quadtree2.
isleaf;
quad-tree,
illustration,
besides,
0's)
1*1
sub-grid.
val;
quad-tree
topleft;
[isleaf,
quad-tree.
val].
[1,2,3,3,2,2]
10-letter-long
identify
dna.
"aaaaaaaaaaaaa"
["aaaaaccccc","cccccaaaaa"]
["aaaaaaaaaa"]
studying
(substrings)
nucleotides
dna,
"acgaattccg"
useful
"aaaaacccccaaaaaccccccaaaaagggttt"
"$6",
'$'.
"there
"$1.00".
shop"
"$9".
$1.00
$10$"
preceded
"$2".
"$2"
"$0.50",
"$0.00".
"$5",
$0.50
"$1".
"$",
"$6"
5$
$10$",
$0.00
"$1"
"$0.50".
"$1e5"
8$
"$100",
"$23",
shop",
"$3",
discount%
[1,2,3,null,5,null,4]
yourself
"fl"
["dog","racecar","car"]
["flower","flow","flight"]
(row2,
sumregion.
"sumregion",
rectangle)
nummatrix.sumregion(2,
col2)
col2).
sumregion(int
nummatrix(int[][]
["nummatrix",
[[[[3,
nummatrix.sumregion(1,
nummatrix([[3,
"sumregion"]
col1)
nummatrix
(row1,
sumregion
google.mail.com",
intel.mail.com","951
discussed
cpdomain.length
discuss.leetcode.com
mail.com","50
subdomains.
"com",
"intel.mail.com"
["9001
["900
leetcode.com","9001
cpdomain[i]
"com"
["901
yahoo.com","900
wiki.org","5
cpdomains,
"discuss.leetcode.com"
d1i.d2i"
wiki.org"]
rep
google.mail.com","5
d3i
"repi
"50
implicitly.
d1.d2.d3
951
"yahoo.com"
repi
discuss.leetcode.com"
"discuss.leetcode.com",
yahoo.com",
discuss.leetcode.com","9001
d1i,
d1.d2"
"google.mail.com"
discuss.leetcode.com"]
cpdomain[i].length
"5
com"]
900
9001
domain:
count-paired
d1i.d2i.d3i"
"wiki.org"
d1.d2.d3"
"mail.com"
d2i,
domains
"discuss.leetcode.com".
subdomains,
org","1
"9001
901
"org"
cpdomains
formats
"rep
intel.mail.com",
[18,6,6,6,1,-1]
[400]
[17,18,5,4,6,1]
(6).
(18).
[8,4,6,2,3]
prices[3]=2,
[10,1,1,6]
[9,0,1,6]
price[0]=8
[4,2,4,2,3]
prices[1]=4,
price[2]=6
prices[j]
price[1]=4
[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]],
1][0].
[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
[[9,1,2],[3,4,5],[6,7,8]]
grid[0][0].
grid[i][n
(go
"hhvvh"
destination:
"hhvhv"
providing
"hhvhv",
destination.length
'h',
"hvhhv",
ncr(row
["hhhvv",
"vvhhh"].
1-indexed.
"hhvvh",
"hvhvh"
"hvhvh",
"vhhhv",
"vhhvh",
ncr(a,
"hvvhh",
"vhvhh",
"hhhvv"
041
reverse,
reversed,
172
443
271
"balloon"
"nlaebolko"
"loonbalxballpoon"
1e-5.
[[0,1],[1,2],[0,2]],
0.2
succprob.length
succprob[i].
2*10^4
succprob[i]
[0.5,0.5,0.2],
[0.5],
0.30000
[0.5,0.5,0.3],
succprob
[4,3,1,2,4].
[4,3,1,2,4]
[1,10,4]
retrieving
[null,null,null,null,-3,null,0,-2]
minstack();
minstack.pop();
minstack.push(0);
top()
minstack.push(-2);
minstack.getmin();
minstack.push(-3);
[[],[-2],[0],[-3],[],[],[],[]]
minstack()
getmin()
["minstack","push","push","push","getmin","pop","top","getmin"]
getmin
getmin.
minstack
minstack.top();
18000
[[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]
[[4,3,2],[7,6,1],[8,8,8]]
exclusively
one),
"123-456".
6"
"123-456-78".
"123
digits:
formatting.
"123-45-67".
"1234567".
"1-23-45
4-567"
"123-45-67"
"123-456"
reformatting
"78".
"123456".
"123-456-78"
firstly,
joining
4-5678"
dashes.
"67".
"456".
"45"
"12345678".
{'a',
s2:
"ba".
k-similar.
'f'}.
1-similar
s1.
"bca".
2-similar
https://leetcode.com/problems/minimum-distance-between-bst-nodes/
783:
"eleetminicoworoep"
vowels:
"bcbcbc"
"leetminicowor"
"leetcodeisgreat"
"leetc"
e's.
[7,4,5,1,8,12,4,7],
[4,2,1,4,3,4,5,8,15],
[1,3,4,5,8,15]
[1,3,4,5,8].
[4,5,8,12].
numsr-1,
numsr]
numsr-1
abs(5)
abs(-8)
-x.
abs(-5+1-4)
numsr).
[-5,1,-4]
[numsl,
numsl+1
[2,-5,1,-4,3,-2]
abs(2+3)
numsl+1,
[1,-3,2,3,-4]
abs(numsl
shuffling,
"codeleet"
shuffling.
"codeleet",
[4,5,6,7,0,2,1,3]
"c"].
["xc","yb","za"]
strs[2]).
strs[n
["ca","bb","ac"]
strs[2]
["zyx","wvu","tsr"]
even-odd
even-odd.
[5,9,1,3,5,7]
even-odd,
[5,4,2,3,3,7]
[1,10,4,3,null,7,9,12,8,6,null,null,2]
[10,4]
[3,7,9]
[12,8,6,2]
continuous)
[[2,3,1],[4,5,1],[1,5,2]]
[[1,3,2],[2,5,3],[5,6,2]]
durationi]
tasks[i].length
version2,
"1.0.0"
revision
"1.1"
"1.01",
version2.
1.0
revisions
version2.length
"1.001"
version1.length,
1.1
version1's
version2
"0.1",
0.1
version2's
version1
2.5.33
001
depth,
[4,2,6,3,1,5],
[4,1,1,2,null,null,6,3,1,5]
cur
[4,2,null,3,1],
cur's
root's
[4,2,null,1,1,3,null,null,1]
cstart
[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
boundary,
(rstart,
grid's
eventually,
whenever
southeast
[[0,0],[0,1],[0,2],[0,3]]
later.).
northwest
cstart)
rstart
[[1,2],[3,4],[5,6]],
[[1,10],[10,20]],
covered:
"cbad"],
"xyzz"
"zzyx".
these.
equivalent,
"xzzy"
"xyzz".
["abc","acb","bac","bca","cab","cba"]
"zzxy"]
group).
["xyzz",
["abcd","cdab","cbad","xyzz","zzxy","zzyx"]
["zzyx"].
"zzxy"
"cdab",
"tcode"
"bab"].
"act",
startwords,
targetwords[2]
startwords
targetwords[0]
targetwords[j].length
"tack".
targetwords,
"bacd",
startwords.length,
"act"
startwords.
targetwords[1]
startwords[0]
startwords[1]
"actk"
["ant","act","tack"],
["abc","abcd"]
["ab","a"],
"tack",
targetwords.
"acti"
"act".
"acti",
startwords[i].length,
["tack","act","acti"]
targetwords.length
targetwords
snap_id:
snapshotarr.snap();
array-like
snapshotarray(int
snapshotarr.get(0,0);
[[3],[0,5],[],[0,6],[0,0]]
snap,
[null,null,0,null,5]
snap_id)
snapshotarr.set(0,5);
snapshotarray(3);
snap())
array[0]
snap_id
get(index,
["snapshotarray","set","snap","set","get"]
snapshot,
snap()
set(index,
snapshotarray
snapshotarr
snapshotarr.set(0,6);
imprisoned
rightward
upon
demons
threats
dungeon.
right->
dungeon.length
power-ups,
quickly
imprisoned.
integers).
orbs
princess.
fight
princess
dungeon[i].length
laid
rescue
dungeon[i][j]
integers),
health
decides
valiant
rooms;
[[-2,-3,3],[-5,-10,1],[10,30,-5]]
loc
"free"]
[_,_,3,4,4,4,_,_,_,_].
block's
[1,2,3,_,_,_,_,_,_,_].
loc.free(2);
blocks.
free(int
[1,_,3,4,4,4,_,_,_,_].
"free",
3,_,_,_,_,_,_,_].
loc.free(7);
[1,_,_,_,_,_,_,_,_,_].
"allocate",
mid)
loc.allocate(10,
[1,1,3,4,4,4,_,_,_,_].
loc.allocate(1,
functionalities:
loc.free(1);
allocate(int
[1,2,_,_,_,_,_,_,_,_].
freed.
["allocator",
allocator(10);
[1,1,3,4,4,4,1,_,_,_].
mid.
allocator(int
loc.allocate(3,
[1,_,
efficiency=4)
72
engineers'
speed=5
engineers.
efficiency[i]
[5,4,3,9,7,2],
speed=10
[2,10,3,1,5,8],
performance.
engineers
speeds
min(4,
efficiency=7).
efficiency.length
"1/2".
["1/2","1/3","1/4","2/3","3/4"]
less-than-or-equal-to
"1/2"
"2/4"
(exclusive)
["1/2","1/3","2/3"]
["1/2"]
grumpy[i]
satisfied
grumpy,
[1,0,1,2,1,1,7,5],
technique
grumpy.
grumpy.length
[0,1,0,1,0,1,0,1],
[1,2,3,6,2,3,4,7,8],
hand.length
1296:
https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/
hand[i]
groupsize
[1,2,3],[2,3,4],[6,7,8]
groupsize,
mass:
38
destroys
[3,9,19,5,21]
67
destroy
[4,9,23,4]
destroyed
[9,19,5,3,21]:
planet.
destroyed.
planet
asteroids,
asteroid.
[1,13,10,12,31,1,31,1,21,13].
[1,13,10,12,31]
31).
[2,2,2,2,2,2].
policyholder's
pid
policyholders
tiv_2016
lat
who:
(lat,
holder's
policyholder
policy
records,
latitude
lon)
investment
insurance
lon
tiv_2016,
unique).
45.00
policyholders,
2016.
2015
criteria.
+-----+----------+----------+-----+-----+
tiv_2015
fail,
longitude
[enqueuetimei,
[[7,10],[7,12],[7,5],[7,4],[7,2]]
act
processingtimei
instantly.
enqueuetimei,
enqueuetimei
{0,1,2,3,4}.
stopping.
{0,1,2,3}.
processing
{0,1,2}.
[4,3,2,0,1]
{0}.
{0,1}.
{}.
processingtimei]
{1}.
started,
processing.
[[1,2],[2,4],[3,2],[4,1]]
roll.
36-2
rollmax[i]
rollmax
introduced
[1,1,1,1,1,1]
die,
rollmax.length
simulator
consecutively,
...;
equaling
[0,1,4,0,3,_,_,_]
sort(nums,
[0,1,2,2,3,0,4,2],
val);
[2,2,_,_]
actuallength;
[3,2,2,3],
k);
removeelement(nums,
in-place.
[0,2,1,0]
o(log(arr.length))
[0,10,5,2]
[winneri,
[1,2,10]
matches[i].length
[4,5,7,8].
matches.length
[[1,2,10],[4,5,7,8]]
winneri
loseri]
[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
winneri,
outcome.
[[1,2,5,6],[]]
[1,2,5,6]
matches[i]
loseri
[[2,3],[1,3],[5,4],[6,4]]
defeated
[[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]
hourglass.
entirely
[0,3,1,4]
[0,1,3]
[0,1,2,3],
[[2,3],[3]]
5000]
subtrees,
[[2,4],[4]]
[1,2,3,4,null,2,4,null,null,4]
[2,2,2,3,null,3,null]
brings
repeat.
friend.
wraps
"abcdefghij",
"def",
into,
["abc","def","ghi"]
"ghi"
"ghi",
"ghi".
"abcdefghi",
"jxx".
["abc","def","ghi","jxx"]
[[],[1],[1,2],[1,2,2],[2],[2,2]]
[1,2,2]
productofnumbers.getproduct(2);
productofnumbers();
[null,null,null,null,null,null,20,40,0,null,32]
productofnumbers.add(3);
productofnumbers.add(0);
productofnumbers()
getproduct.
[3,0,2,5]
productofnumbers.add(8);
[3,0,2,5,4,8]
productofnumbers
overflowing.
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
["productofnumbers","add","add","add","add","add","getproduct","getproduct","getproduct","add","getproduct"]
productofnumbers.getproduct(3);
getproduct(int
productofnumbers.add(5);
productofnumbers.add(4);
productofnumbers.add(2);
[3,0,2,5,4]
[3,0,2]
productofnumbers.getproduct(4);
[[0,1,1],[1,1,0],[1,1,0]]
[[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
(2,5)
[1,2,3,1,1,3]
[-1,-2,-3,-4,3,2,1]
signfunc(x)
signfunc(-1)
signfunc(144)
[-1,1,-1,1,-1]
signfunc(product).
144,
[1,5,0,2,-3]
signfunc(0)
"101".
"10110".
distances,
"1000".
"10110"
"9,3,4,#,#,1,#,#,2,#,6,#,#",
sentinel
"1,#"
encounter
"1,,3".
"9,#,#,1"
serialize
"9,3,4,#,#,1,#,#,2,#,6,#,#"
commas
⌊n
2⌋
[2,2,1,1,1,2,2]
[6,5,7,9,2,2]
sold,
candy,
buys
passingfees,
passingfees[j]
cities).
maxtime,
[[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]],
maxtime
loops.
$48
passingfees
fees
fees.
[5,1,2,20,20,3]
journey,
passingfees.length
(1*1=1
points)
(3*3=9
---->
(2*2=4
[1,3,2,2,2,3,4,3,1]
deletelast,
mycirculardeque.getfront();
mycirculardeque.insertfront(3);
deque.
mycirculardeque.getrear();
successful,
getfront()
rear
mycirculardeque.insertfront(4);
insertlast()
"insertlast",
"insertfront",
double-ended
"deletelast",
"getfront"]
mycirculardeque.deletelast();
mycirculardeque
deletefront,
mycirculardeque(3);
mycirculardeque.isfull();
insertlast,
deletefront()
mycirculardeque.insertlast(2);
["mycirculardeque",
mycirculardeque.insertlast(1);
insertfront()
(deque).
getfront,
mycirculardeque(int
insertfront,
getrear,
"getrear",
getrear()
deletelast()
[3,2,2,2,3].
[1,3,2,2,5,2,3,7]
("abc")
"aaabaab"
("aab")
"aab".
"abcabcdabc"
"aabaab".
"abcdabc".
("a")
"xrlxxrrlx"
"rx"
xrlxrxrxl
"rxxlrxrxl",
xrlxxrrlx
xrlxxrrxl
"xr".
rxxlrxrxl
xrxlrxrxl
end.length
"lx",
"xl"
[[1,3,1],[1,5,1],[4,2,1]]
wood.
[[1,4,2],[2,2,7],[2,1,3]]
[[3,2,10],[1,4,2],[4,1,3]]
(hi,
wi,
grain
obtains
wi)
shape,
[hi,
wood,
prices[i].length
["()"]
["((()))","(()())","(())()","()(())","()()()"]
well-formed
[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
in-place,
(clockwise).
[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
[[7,4,1],[8,5,2],[9,6,3]]
a's)
aacabb
bbcbaa
aecdb
abcde
"caabbb"
close,
"cabbba"
"baaccc"
"cabbba",
"abbccc"
b's,
lower-case),
the"
"world
hello"
"blue
sky
(upper-case
a"
blue"
example"
compile
+----+------------------+
script,
bob@example.com
john@example.com
emails,
driver
[4,3,2,2,4]
[3,1,4,3,2,2,4],
[1,4,3,2,2,4]
[3,1,4,3,2,2]
[3,1,4,3,2,2,4]
"and"
cool"
"is
calm
not"
"on"
"keep"
space-separated
"calm"
"on
code"
cool
"cool"
on"
"keep
(5,10).
and(3,4).
[1,2,3,4,5,10,6,7,8,9],
(1,9),(2,8),(3,7),(4,6)
(1,6),(2,5)
[14,10]
[20]
[2,9,6,3],
[1,1,1,8].
[5,5,6,8].
[5,5,5,8].
[5,1,6,8].
[5,5,5,5].
[3,1,6,8],
[1,1,6,8].
[[2,6],[5,1],[73,660]]
[1,6],
[6,1].
[1,2,3,10,5]
1050734917
[5,1]:
[2,6]:
[ni,
[73,660]:
ki],
[4,1,50734910]
ni,
ki.
ni
50734910.
mountainarray.get
mountainarray
wrong
submissions
mountainarray.length()
circumvent
index=5.
[0,1,2,4,2,1],
disqualification.
interactive
mountain_arr.length()
mountain_arr.get(index)
problem.)
mountainarr.get(index)
mountainarr,
mountainarray.get(k)
[1,2,3,4,5,3,1],
2.65000
income.
income,
0%
taxed
bracket,
brackets.length).
[[3,50],[7,10],[12,25]],
[upperi,
upper1
upper2
upperi-1
10%,
$2.65
percent1.
upperi
$0
bracket.
percenti.
percenti
tax,
[[2,50]],
[[1,0],[4,25],[5,50]],
25%,
brackets.length
taxes.
tax
brackets[i]
upper0
percent0.
percent2.
50%,
percenti]
10%
$0.25
pref[0]
pref[2]
pref[3]
[5,7,2,3,2]
pref[i]
pref.length
pref[4]
pref[1]
[5,2,0,3,1]
satisfies:
[13]
output[0].next
output[0]
output[4]
[[1],[2],[3],[],[]]
later.
[[1,2,3,4],[5,6,7],[8,9,10]]
possible:
output[0].val
(assume
recursion
count).
mode,
mode(s)
[1,null,2,2]
"82734"
112
"32"
deci-binary,
"27346209830709182346"
3001
["3z4","3z4"]
["a1b2","a1b2","a1b2","a1b2"]
"a1b2"
"3z4"
"abacbc"
"aaabb"
frequency).
shadow,
[[2]]
projections
yz,
3-dimensional
projections.
[[1,0],[0,2]]
zx
xy,
planes.
("shadows")
"shadow"
[0,1,4,2,3]
graph[a]
[1,0,2,0,3]
undirected,
[[1,2,3],[0],[0],[0]]
[[1],[0,2,4],[1,3,4],[2],[1,2]]
graph[b]
revisit
[[2,2,2,2],[2,3,3],[3,5]]
candidate,
[[2,2,3],[7]]
candidates,
stockprices.length
stockprices[i].length
(6,3),
dayi
stockprices
[[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]
chart:
(7,2),
chart.
(5,4).
(5,4),
green)
plotting
(8,1).
(8,1)
[[3,4],[1,2],[7,8],[2,3]]
stockprices[i]
[dayi,
(2,6),
dayi,
events.length
attend.
[startdayi,
endtimei.
events=
startdayi
starttimei
enddayi].
events[i].length
enddayi.
enddayi
events[i]
[[1,2],[2,3],[3,4],[1,2]]
"101010"
swapped,
"11100"
"001101",
[0,3,4]
official,
inspection.
"001101"
variety,
n=0.
sub-array.
maxdepth
unflattened
n=0
15]]
flattened.
flattening
array.flat
mentors[j][k]
mentor
students[i][k]
[[1,1,0],[1,0,1],[0,0,1]],
mentor.
(yes).
[[1,0,0],[0,0,1],[1,1,0]]
[[0,0],[0,0],[0,0]],
student-mentor
mentors,
mentors.length
question's
(no)
mentor,
mentor's
student's
students[i].length
survey
[[1,1],[1,1],[1,1]]
mentors[j].length
mentors[j]
mentors
3,2],
uniformly
sum(balls)
[1,2
balls.length
3,1],
2,3],
1,1]
[a]
random,
1/12):
[1,3
hard
[2,3
(please
8/12
(),
[3,1
2,1],
1,3],
balls[i]
[b]
[3,2
1,2],
equally:
(b)
1,1],
[2,1
[1,1
carefully).
shuffles
2/2
subject_name.
subjects.
subject
physics
+------------+--------------+--------------+----------------+
school.
subject_name
attended_exams
subjects
student_name
arr1.
[22,28,8,6]
[2,3,1,3,2,4,6,7,9,2,19],
[28,6,22,8,44,17],
[2,1,4,3,9,6]
[2,2,2,1,4,3,3,9,6,7,19]
[22,28,8,6,17,44]
image).
bj.
x3
[[0,1],[0,2],[2,3],[3,4]]
aj
bj]
xk
aj,
[aj,
edges[j]
bj
shift.
"abced"
"cdeab"
"bcdea"
+---------+-----------+
(contest_id,
contests
207
register
((1/3)
208
66.67%
208,
contest_id
user_name
+------------+---------+
209,
33.33%
66.67
registered
((2/3)
decimals.
209
[["e","3"],["t","7"],["t","8"],["d","b"],["p","b"]]
[["o","0"]]
"f00l",
"fool33tbar",
[["e","3"],["t","7"],["t","8"]]
"leetd",
"f00l"
sub.
newi
"l3e7"
newi]
"l33tb"
"fooleetbar",
sub.length
"fool3e7bar",
mappings
mappings[i].length
[oldi,
oldi
mappings[i]
newi.
mappings.
mappings.length
[1,6,1],
forbidden
home.
forbidden[i],
[14,4,18,1,15],
forbidden.
[8,3,16,6,12,20],
bug
forbidden.length
forbidden,
[1,6,2,14,5,17,4],
bug's
forbidden[i]
(10,2,4,5)
(2,10,5,4)
(6,2,3,4)
(2,10,4,5)
[1,2,4,5,10]
(4,5,2,10)
(5,4,2,10)
(10,2,5,4)
(4,3,6,2)
(1,10,5,2)
(5,4,10,2)
tuples:
(2,6,4,3)
(10,1,2,5)
(1,10,2,5)
(2,5,1,10)
(6,2,4,3)
(3,4,6,2)
(3,4,2,6)
(2,5,10,1)
(2,6,3,4)
(5,2,10,1)
(10,1,5,2)
(4,3,2,6)
(4,5,10,2)
(5,2,1,10)
[2,3,4,6]
[[1,4,7],[2,5,8],[3,6,9]]
diagonal,
switching
[2,4,1,1,6,5]
non-equal
hill
valley.
hill.
valley,
valley
[6,6,5,5,4,1]
["abcde",
"z"],
board[0][0].
board;
"klmno",
"pqrst",
"ddr!uurrr!!ddd!"
board[r][c]
them.)
"rr!ddrr!uul!r!"
'!'
"fghij",
"uvwxy",
top?
79
rev(nums[j])
rev(11)
rev(nums[i])
[42,11,1,97]
rev(42)
321,
121.
rev(97)
rev(120)
97
[13,10,35,24,76]
rev(123)
rev(1)
rev(x)
to_delete,
to_delete.length
[1,2,4,null,3],
to_delete
[[1,2,4]]
[[1,2,null,4],[6],[7]]
trees).
"etco"
"ea".
exempted
[8,6,7,7]
â‰
[8,6]
period:
periods:
[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
4.77778
[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
5%
"a","b","c","ab","bc"
countuniquechars(t)
"l",
countuniquechars("aba")
"t",
countuniquechars(s)
"bzaa"
"cde",
"cde"
"aec"
"abacaba",
otherwise:
|10-16|
3;
[4,2,9,3,5,null,7]
|(3+5+2)-(9+7)|
tilt.
children)
|0-0|
|0-7|
[21,7,14,1,1,2,2,3,3]
[4,3,2,1,0]]
[[0,1,2,3,4],
subpaths
[4,0,1,2,3]]
[[0],[1],[2]]
friend,
paths[i].
paths[i][j]
friend's
[2,1,2,6]
[2,4,-2,-4].
[-2,-4]
arr[2
[3,1,3,6]
[4,-2,2,-4]
len(arr)
[-2,-4,2,4]
-$447.
boards,
-$177.
$92
$37.
$37
$28.
gondola.
gondola
boardingcost,
[8,3],
arrive,
-$89.
$40.
$122.
$20.
gondola,
gondolas
ground
runningcost
-$357.
waiting),
[10,9,6],
$60.
$120.
-$269.
wait,
profit.
[3,4,0,5,1],
gondolas,
$80.
$122
wheel,
safely.
rotates.
$14.
boardingcost
waiting,
waits,
"arrazfif"
"abcdefghijk"
uppercase.
second().
imply
second()
mainly
print("third");
tests'
first(),
comprehensiveness.
third()
third().
first()
print("first");
print("second");
second(),
third(),
"firstsecondthird"
mechanism
[[0,0,0],[0,0,1],[1,1,0]]
versa).
kids,
extracandies,
[true,false,false,false,false]
has,
[4,2,1,1,2],
[12,1,12],
kids.
[2,3,5,1,3],
kid
[true,true,true,false,true]
extracandies
[2,4,1,3]
target:
[2,4,1],
[1,2,4,3]
[1,4,2,3]
[3,7,9],
reverses.
[0,1,0],
nums[4],nums[5],nums[6]:
[0,0,0,1,0,1,1,0],
nums[5],nums[6],nums[7]:
[1,1,1,1,1,1,1,1]
[1,1,1,1,0,1,1,0]
[1,1,1,1,1,0,0,0]
k-bit
nums[0],nums[1],nums[2]:
47,
[1,2,3,4,5,6,7,8,9,11,12,15,22]
[48,55,66,77]
128
self-dividing
provinces.
isconnected.length
isconnected
province
isconnected[i][i]
isconnected[i].length
isconnected[j][i]
[[1,1,0],[1,1,0],[0,0,1]]
isconnected[i][j]
land,
|y0
x1|
[[1,0,0],[0,0,0],[0,0,0]]
y1|.
maximized,
y0)
distance:
|x0
(x0,
nums[n-1-i]
changed).
[2,2,2,2].
complementary.
[1,2,1,2],
[1,2,4,3],
"312"
listing
"321"
labeling
"2314"
"213"
[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
trees),
[1,2,3,4,5,90],
1441,
151,
191,
141,
1331,
90th
1001,
intlength
1111,
queries[i]th
backwards
101,
1221,
forwards.
[101,111,121,131,141,999]
181,
[1111,1331,1551]
131,
171,
intlength,
161,
[4,5,1,2,3]
[0,1,2],
(i=1,
k=0)
k=1)
triples:
k=2)
(i=2,
(i=0,
j=2,
bitwise-and
triples.
(only
[2,4,6,8,9],
[2,4,6,8,10].
[4,6,8,10]
nums1)
[1,3,5,100].
[1,3,5,7,9],
[2,4,5,8,9],
[4,5,8,9],
[3,5,100]
index-0).
uniques
[2,4,5,8,10],
[6,7,8,9,10].
[4,5,8,10],
[4,6,8,9],
[4,6,8,9]
"4206"
"52".
"35427"
"4206".
largest-valued
"52"
grid[1][0]
lamps
lamp
grid[4][4].
ans[j]
lamps[i]
grid[rowj][colj].
colj].
[[0,0],[4,4]],
illuminated,
rowj,
lamps[i].length
grid[rowj][colj]
[[0,4],[0,1],[1,4]]
illuminates
[[0,0],[0,4]],
grid[rowi][coli]
lamps.length
lamps,
ans,
illuminated
square).
20000
ipv4
defanged
address,
(ipv4)
"255.100.50.0"
"[.]".
"255[.]100[.]50[.]0"
"1[.]1[.]1[.]1"
"1.1.1.1"
["leetcode","et","code"]
["mass","as","hero","superhero"]
"hero"
["blue","green","bu"]
"superhero".
["as","hero"]
["et","code"]
["hero","as"]
"mass"
"et",
"as"
datastream(int
["datastream",
datastream(4,
[3]]
consec(int
[4,4,3].
datastream.consec(4);
"consec"]
parsed,
"consec",
//value
datastream.consec(3);
parsed.
consec.
datastream
'n'->6,
'w'->'3',
'n'->2,
'o'->0,
(words)
"point"
(result).
'e'->8,
'y'->'2'
'v'->7,
'r'->8,
["send","more"],
"twenty"
'e'->5,
'm'->1,
solvable
"six"
9567
"send"
's'->
650
138214
"money"
'y'->4
't'->1,
10652
'x'->0,
["six","seven","seven"],
["leet","code"],
result.length
solvable,
'd'->7,
1085
"more"
"seven"
68782
'i'->5,
"ababab",
"t
s"
str2.
[25,1,3,1,3,0,2]
"aba".
"dba"
25]
"adz"
[0,1,2,3,4,3,4]
8500].
[2,2,1,null,1,0,null,0]
"1110".
s[j]).
(s[0]
(s[i]
"0110".
s[j])
"0110"
"0010".
trees)
camera
[0,0,null,0,0]
configurations
[0,0,null,0,null,0,null,null,0]
placement.
[1,null,5,null,7]
[5,3,6,2,4,null,8,1,null,null,null,7,9]
[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
[5,1,7]
mat[1][2]
(rows
[[1,0,0],[0,0,1],[1,0,0]]
[2,1,3,4,4]
"ab##",
"ad#c"
"a#c",
"c#d#"
"ab#c",
editors.
backspacing
[10,6,8,5,11,9]
heights[j])
[4,1,1,1,0]
heights[j-1]).
[5,1,2,3,10]
min(heights[i],
max(heights[i+1],
heights[i+2],
[3,1,2,1,1,0]
"adefadda",
"ef",
["d","bb","cc"]
s[x..y],
we'd
"adefaddaccc"
"ef"
"abbaccd"
s[i..j]
["e","f","ccc"]
["d","abba","cc"]
[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
matrix[1][0],
matrix[row][col].
rank(q)
matrix[0][1]
answer[row][col]
[[7,7],[7,7]]
matrix[0][0]
rank(p)
matrix[row][col]
[[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
matrix[0][1],
matrix[1][1]
matrix[1][0]
"shortestpath"]
edgecost
"shortestpath",
g.shortestpath(0,
edge.length
node2.
shortestpath(int
["graph",
edge)
edgecost].
edges)
edgecosti.
[from,
edgecosti]
graph(4,
addedge(int[]
self-loops
"addedge",
edgecosti,
g.shortestpath(3,
node1
node1,
addedge.
graph(int
node2)
3]]],
3]]);
shortestpath.
node2
g.addedge([1,
(when
randomly.
ticket
seat).
[[2,8,7],[7,1,3],[1,9,5]]
[[1,5],[7,3],[3,5]]
wealth.
[[1,2,3],[3,2,1]]
first_login
2016-05-02
+-----------+-------------+
"23:50"
hh:mm,
"2?:?0"
"1?:22"
"19:22"
"09:39"
"0?:3?"
inclusively
?).
"00132"
"5489355412"
"5489355241".
"11211"
8:
"5489355421"
"00132".
"00123",
"5489355142",
"21111"
"5489355214".
smallest-valued
"00123"
"11121"
"5489355142":
"11112",
"5489355421".
"11112"
"12111"
"21111".
"5489355142"
"5489355412".
ty)
sx
sy
tx
(sx,
(tx,
ty,
sy)
[[1,2],[3],[3],[]]
[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
[[4,3,1],[3,2,4],[3],[4],[]]
self-loops).
(dag)
graph[i][j]).
[[0,1,3],[0,2,3]]
dag.
wizard
min([6])
sum([1,3])
min([5,4])
strength,
sum([3,1])
min([3,1,2])
sum([6])
min([3,1])
strength[i]
min([1,3,1,2])
sum([5])
sum([3,1,2])
sum([3])
kingdom,
sum([5,4,6])
wizards.
min([4])
sum([4,6])
sum([5,4])
min([1,2])
strength.length
min([3])
min([5])
[5,4,6]
sum([4])
sum([1,2])
sum([1])
[5,4]
ruler
wizards'
sum([1,3,1,2])
wizards:
sum([2])
213
strength),
213.
min([1,3,1])
min([1,3])
min([1])
wizard.
min([2])
min([5,4,6])
min([4,6])
sum([1,3,1])
[[1,1,-1],[1,-1,1],[-1,1,1]]
cherry,
(cells
grid[n
[[0,1,-1],[0,0,-1],[0,0,0]].
went
cherry.
[[0,1,-1],[1,0,-1],[1,1,1]]
thorn
collected.
[[1,0],[0,3]],
ytarget
independently
still.
ghosts[i].length
ytarget]
ghost
escape.
ghosts.length
ghosts,
[[2,0]],
ghost.
xtarget,
ghosts[i]
[xtarget,
ghost,
pac-man
[1,2],[2,1],[1,0],[0,1],
[[0,1],[2,1],[1,1],[1,0],[2,0]]
[[1,2],[2,1],[1,0],[0,1]]
[[0,3],[1,2],[3,1],[1,3],[2,1]]
rectangle,
[1,0],[1,1],[2,1],[2,0],
maxvalue,
[1,1,3,3,3],
[1,1,1,1,2],
[1,2,2,2,2]
[3,3,3,3,3]
[1,1,1,2,2],
array):
[1,1,1,1,3],
[1,1,1,3,3],
maxvalue
[1,3,3,3,3]
arrays):
[1,1,2,2,2],
moves[i].length
"draw".
[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
toe.
[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
tic-tac-toe),
b).
"pending".
[[0,0],[2,0],[1,1],[2,1],[2,2]]
"draw"
grid[rowi][coli].
|b
x|
x|,
|a
+------------+--------------+------------+
sale_date
2019-01-21
1400
g4
2019-05-13
2019-06-02
2800
800
spring
s8
+-----------+------------+----------+------------+----------+-------+
iphone
unit_price
mycircularqueue(3);
rear()
buffer".
front()
"rear"]
normal
mycircularqueue.enqueue(2);
"dequeue",
"enqueue",
out)
principle,
benefits
enqueue,
"rear",
"ring
fifo
mycircularqueue.rear();
dequeue,
mycircularqueue.isfull();
mycircularqueue.enqueue(4);
mycircularqueue.enqueue(1);
dequeue()
mycircularqueue.dequeue();
mycircularqueue.enqueue(3);
mycircularqueue(k)
rear,
(first
["mycircularqueue",
enqueue(int
mycircularqueue
min(nums[2
max(nums[2
[1,5,4,2]
repeatedly.
[1,3,5,2,4,8,2,2]
i],
mapping.
"acz"
"jkab"
'9')
"10#11#12"
'26#')
"11#"
"1326#"
"10#"
'i')
('10#'
('j'
"j"
[[1,1,1],[1,0,0],[1,1,1]]
[[2,1]]
rededges[i].length
blueedges.length
rededges[i]
rededges
blueedges[j].length
blueedges[j]
blueedges
[0,1,-1]
rededges.length,
change_date)
2019-08-16
2019-08-14
+------------+-------+
2019-08-16.
change_date
new_price
2019-08-17
2019-08-18
2019-08-15
+------------+-----------+-------------+
distance[2]
distance[0]
meters
distance[1]
counter-clockwise.
distance[3]
[1,1,1,2,1]
"1"],
"1"].
"050043"
["00",
["0090",
"01"],
"9080701"
"1234"
"089"]
"004",
"0090089"
["0",
[90,89].
["05",
"3"]
[0,0,1]
