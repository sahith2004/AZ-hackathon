example
1:
the
=
output:
input:
constraints:
of
<=
return
2:
1
is
and
a
explanation:
in
are
to
that
an
given
2
if
0
number
3
be
you
array
integer
all
it
can
with
3:
each
for
there
two
where
any
or
4
n
one
==
at
not
from
only
we
have
as
-
5
105
+
by
no
so
will
has
this
such
string
1,
2,
104
1.
which
following
on
same
integers
after
first
100
6
1000
than
length
answer
note
<
109
*
nums
3,
may
example,
nums.length
possible
x
i
value
then
maximum
minimum
consists
english
nums[i]
k
2.
ith
10
7
sum
0.
order.
lowercase
some
also
equal
3.
since
every
its
contains
should
letters.
between
elements
more
both
4,
s
must
true
binary
most
range
other
false
cannot
either
values
8
5,
valid
total
9
second
they
0,
represents
[1,
because
make
does
find
characters
s.length
0-indexed
left
into
n,
but
exactly
nodes
4.
element
their
result
three
positive
least
different
index
do
order
strings
7.
m
new
right
list
-1
choose
when
your
int
array.
multiple
need
numbers
time
size
input
letters
unique.
last
tree
2d
contain
them
sequence
representing
get
guaranteed
n.
row
less
5.
k.
character
node
above
empty
sorted
-1.
another
indices
query
it.
output
column
j
write
smallest
shown
nums.
m,
root
type
starting
6.
format
consist
key
matrix
string.
could
adjacent
these
6,
arr
without
(i.e.,
node.val
unique
position
arrays
using
distinct
single
k,
20
name
1)
largest
non-empty
->
!=
move
b
grid
consisting
50
table
within
//
path
greater
before
digits
exists
nums,
way
500
represented
becomes
returns
calls
times
next
made
modulo
arr[i]
considered
even
start
pair
|
otherwise.
s.
7,
already
third
want
form
12
would
contiguous
implement
set
take
arr.length
them.
example.
15
1]
[0,
substring
primary
operations
end
106
sql
table:
schema
s,
always
indicates
table.
target
use
notice
integer.
operation
containing
defined
follow
note:
large,
four
remove
original
words
11
otherwise,
follows:
was
while
>
class:
false.
pairs
subarray
once
remaining
longest
30
2)
called
cell
integers.
times.
initializes
explanation
id
until
strictly
ways
consecutive
up
words,
means
tree.
/
add
[]
respectively.
tree,
initially
letter
word
starts
reach
generated
2nd
grid.length
[1]
case
difference
200
numbered
function
however,
are:
object
solution
denotes
1st
leading
[null,
many
change
characters.
grid[i].length
up:
[1],
order,
9.
replace
[2,
final
digit
resulting
now
cells
edges
smaller
...
grid.
grid[i][j]
current
how
that:
3)
10,
shows
where:
value.
i,
solve
moves
point
formed
still
impossible
non-negative
13
'a'
10.
top
8,
3rd
left,
once.
digits.
test
[1,2]
points
product
score
-104
0)
s[i]
perform
allowed
very
distance
positions
space
group
represent
appear
labeled
varchar
thus,
(1,
edge
[1,2,3]
1],
therefore,
number.
assume
16
steps
obtain
needed
optimal
amount
step
subsequence
pick
c
takes
time.
connected
lower
whose
ascending
among
alice
about
is:
y
part
void
used
(0,
integers,
who
deleting
8.
rows
queries
changing
delete
only.
9,
returned
>=
distinct.
were
[2],
operation,
"a"
answer[i]
absolute
through
14
accepted.
corresponding
split
ends
231
words.length
increasing
bob
elements.
true.
"abc"
cases
permutation
day
exist
square
out
substrings
swap
answers
x.
num
'0'
(0-indexed).
""
count
person
appears
call
let
target.
rules:
[3,
being
right,
present
(1
become
104].
words[i].length
words[i]
arr,
subarrays
place
task
game
good
search
previous
fourth
separated
uppercase
null,
operations.
(2,
right.
like
'b'
is,
occurs
lexicographically
moving
above.
just
2],
i.
(i.e.
been
on.
answer.
words.
2000
formally,
removing
equals
required
initial
divide
people
information
queries.length
target,
[0]
[ai,
ai
consider
satisfies
[1,2,3,4]
b,
too
[],
highest
repeated
graph
data
report
odd
jth
array,
problem
values.
letters,
bi
[3],
'a',
(2
1).
3],
ordered
shortest
decimal
n)
1's
cost
price
non-decreasing
apply
red
nums2
nums1
following:
figure
(i,
5000
b.
32-bit
-1000
digits,
valid.
placed
2]
applying
initially,
(possibly
algorithm
+-------------+---------+
equal.
(0-indexed)
bi]
edges.length
types
x,
node.
returned.
those
common
height
t
infinite
...,
nums2.length
4:
17
possible.
other.
[2]
300
[5,
[1,2,3],
val
25
it's
-109
down
move,
row,
date
never
kth
duplicate
complete
line
d
divisible
whether
zero
code
over
linked
obtained
5)
then,
[4,
proven
nums[0]
arr.
time,
edges[i]
-100
itself.
zeros.
'b',
structure
[1,2],
choosing
(the
go
undirected
24
process
representation
put
back
sort
according
query.
conditions:
performing
results
added
define
character.
'1'.
diagram
-105
[1,2,3,4],
1].
numbers.
otherwise
"a",
blue
ai,
prefix
20.
fit
see
[xi,
yi
(in
extra
nums1[i],
nums[1]
null
row.
string,
"abc",
first,
empty.
4)
3]
(n
average
boolean
days
coordinates
longer
concatenation
create
city
upper
bottom
groups
reverse
occurrences
paths
'
xi,
list.
wants
case,
4th
chosen
occur
except
length.
head
a,
also,
correct
queries[i]
exists.
j)
insert
satisfy
color
side
13.
conditions
inclusive
points.
he
0th
during
if:
cell.
26
108
matrix.
needs
(0
written
[0,1]
along
larger
'c'
[1,2,3,4,5]
area
trailing
occurrence
pass
trees
check
class
determine
corner
interval
calculate
board
sums
large
[1,1]
space.
nums[2]
[[],
edges[i].length
even.
grid,
outside
left.
necessarily
node,
5]
:
2).
times,
actual
[4],
not.
select
special
level
children
per
convert
subtree
p
invalid
customer
21
element.
nums2[i]
11,
connecting
[1,1,1]
under
1),
conditions.
%
unit
know
example:
thus
first.
{
(not
"ab"
spaces.
entire
node's
turn,
operations:
-231
-->
game,
player
"aa"
five
nums[i],
index.
'1'
32
letter.
hence,
11.
text
squares
stones
rearrange
spaces
parentheses
negative
user
keep
rotate
visited
xor
107
12,
null.
same.
signed
true,
one.
path.
child
strings,
o(1)
gets
}
step,
[3]
it,
(3
leftmost
0).
exists,
value,
"ab",
"b"
-1,
players
making
employee
lengths
visit
goal
adding
60
inside
best
based
play
keys
palindrome
frequency
direction
,
nums[j]
green
40
that,
day,
'e',
what
repeat
18
can't
describes
word.
0's
mat
described
root.
[2,3]
y,
said
5:
100].
target.length
times:
counted
fewer
standing
prices
scores
names
include
map
subset
image
12.
plus
bitwise
flip
relative
directly
27
5],
4],
j,
(a
currently
bi.
his
19
number,
4]
[].
[3,4]
c.
subarray.
makes
6)
please
way:
answers,
edges.
rounded
[]]
"1"
day.
10-5
several
remains
+---------------+---------+
replacing
stone
bit
lowest
depth
traversal
maximize
location
colored
long
-2
student
full
vertical
system
rectangle
bits
closest
1s
water
did
nth
10^9
though
none)
group.
nums1.length
k)
answer,
false,
possible,
sequence.
operation.
nodes.
mat[i][j]
strings.
us
additional
o(n)
[1,2,3,4,5],
filled
round
"b",
built-in
0),
5].
2);
design
units
match
colors
together
rearranging
buy
bst
14.
employees
minutes
swaps
concatenated
leaf
box
money
zeros
front
subsequences
certain
'.
13,
yi]
higher
2),
nums[3]
b)
endi
starti
second,
person.
matrix.length
element,
exceed
[1,3]
digit.
below
respectively,
mentioned
mat.length
shown.
question
matrix[i][j]
graph.
[2,1]
modify
parent
bottom-right
turns
(including
assigned
twice.
leave
ans
removes
list,
matrix,
"c"
"leetcode"
arranged
travel
23
rest
'c',
c,
columns
build
swapping
prime
width
expression
merge
17.
items
sentence
middle
alphabet
sequences
transform
found
twice
removed
similar
ones
num,
elements,
including
position.
ids
arrays.
therefore
she
complexity?
[starti,
denoting
replaced
3000
'.',
going
10^5
key.
below:
[5]
[0],
underlined
score.
(5
integer,
90
cover
[1].
mat[i].length
"".
modified
')'.
line.
moves.
sum.
top-left
located
achieve
20,
them,
together.
pairs.
"aa",
index,
adds
beginning
taken
'd'
numbers,
needed.
turn
none
able
our
up,
equal,
[5],
finish
construct
customers
users
differ
increase
version
jump
power
max
16.
subtract
open
building
pile
separate
2n
available
heights
[2,2]
points,
denote
nums2.
nums1.length,
foreign
matter
nums2,
num.
5th
followed
ending
walk
'.'
'e'
nums[i
rules
cells.
immediately
function.
4-directionally
give
characters,
22
share
optimally.
costs
matrix[i].length
'('
derived
playing
(3,
so,
r
ans[i]
"aba"
operation:
places.
'c'.
assign
done
rightmost
here
val)
empty,
[2,3],
item
space?
cities
24.
limit
lead
salary
satisfying
period
students
leetcode
double
concatenating
weight
partition
intervals
increment
state
road
lists
room
seats
continuous
stack
circular
matches
seat
winner
nearest
hence
points.length
direction.
now,
arr[1]
arr[0]
[a,
num.length
allowed.
'r',
point.
15,
object.
[10,
meaning
doesn't
passed
column.
sequence,
'o',
150
7)
"abc".
follows
begin
]
[
s2
s1
way.
instead
[1,3],
due
increasing.
exist,
-3
nodes,
28
move.
t,
'b'.
receive
xi
int[]
arr[j]
trees.
input.
clockwise
continue
zero.
comes
(inclusive).
[4]
(with
2].
down,
suppose
above,
answer[0]
reaches
placing
played
file
pattern
splitting
friends
win
lexicographical
boxes
rotated
friend
say
sign
overlapping
candies
mapping
leaves
subsets
earliest
coordinate
vi
greatest
palindromic
record
company
vertices
repeating
wall
directed
permutations
stops
orders
doing
non-overlapping
[2,1,3]
[2,4]
regardless
total.
calculated
runs
employee.
connected.
have.
nums.length,
duplicates.
east,
south,
meet
program
arr[i
created
total,
path,
"0"
again.
beginning,
nor
17,
"abcd"
reads
'a'.
floor
children.
complexity
1's.
nums[1],
(1-indexed)
(4
(m
true:
9)
game.
word.length
asked
t.
n).
made.
user_id
+-------------+------+
0:
ones.
(i
"aaa"
stones.
const
values,
solutions
had
val.
sorted.
3);
column,
onto
30.
21.
rotation
off
identical
rotating
19.
running
half
piles
belong
1000.
divisor
products
stream
subtrees
events
decrease
coins
sell
instance
maximal
condition
addition
ascii
rank
rounds
"
points[i]
text.length
included
nums1[i]
inclusive.
uses
name,
+--------------+---------+
nums2[j]
much
might
other,
minutes.
square.
'.'.
remain
deleted
ui
provided
child.
'i',
s[0]
fn
=>
y.
'z'
similarly,
1000].
process.
city.
returning
query,
operations,
to.
(if
representation.
j.
again
steps:
achieve.
divided
pair.
better
-1]
[0,0]
yields
started
[1,0]
substring.
once,
simultaneously
z
even,
whole
fits
minute
simultaneously.
36
stones.length
water.
get.
yield
constant
meets
complexity.
gives
1);
"aab"
word,
answer[1]
decided
nums[4]
queries[i].length
step.
table,
4].
pay
different.
sorting
robot
year
speed
ranges
update
reconstruct
reorder
waiting
island
vertically
combinations
latest
leads
sold
matching
judge
distribute
destination
jumps
obstacle
taking
encoded
descending
probability
profit
moment
places
diagonal
suffix
sets
stay
pieces
15.
print
having
vowel
balanced
transactions
v
calling
id,
7],
group,
her
[1,3,5]
affect
endi]
same,
read
(or
invalid.
problem,
"e"
edges,
contained
append
let's
recursive
letter,
6].
'#'
board[i].length
board.length
root,
[10],
m.
34
[7],
"leetcode",
changed
4),
pile.
o(log
d.
arbitrary
(row,
characters:
rules.
'(',
come
non-zero
100,
substring,
goes
(can
result.
(of
14,
impossible.
^
assuming
ordering
maximized.
1][n
moves,
s.length,
"abcd",
'r'
"1",
randomly
decide
s2.length
6:
holds
[5].
["a",
-2,
leaving
in.
odd,
"c",
type.
0s
n]
score,
tie,
stop
series
red,
0]
cell,
north,
free
mark
show
visits
(from
indexed
'd'.
rule
rearranged
[1,3,2]
3].
exist.
product.
covered
factor
network
push
frequent
evaluate
divisors
collect
event
eat
seconds
22.
intersection
parts
27.
random
arrive
preorder
queue
triplet
equivalent
alternating
dictionary
distances
earn
reachable
card
message
candy
closed
100.
piece
house
cut
division
marked
boundary
store
built
horizontal
ball
degrees
flips
tasks
[3,3]
123
if,
x-y
format.
divides
be:
[1,1,1,1,1]
name.
groups.
[[1,
[6,
accepted
runtime
directions
fifth
earlier
"00"
(starting
neither
6th
'l',
increases
itself
103
18,
date.
end.
real
start,
[1,1,1],
anywhere
box.
try
10^4
30,
alice's
key,
alphabet.
in-place
modifying
b]
101
inputs
(a,
gain
400
run
around
'x'
performed
s2,
cols
42
ensure
properties:
0's.
[1,2,3].
ui,
answer.length
queries,
zero,
ab
character,
8]
3),
grid[m
plane,
either:
however
length,
|x|
can:
t.length
is.
range.
3).
concatenate
n-1.
beyond
0;
l
bidirectional
queries.
[3,2,1]
conditions,
"aba",
[0,2]
forward
y)
finally,
trying
"add",
[lefti,
bst.
i.e.,
scenario
request
nums[0],
10].
initially.
[1,1,2]
rooted
correct.
31
word1
word2
each.
specific
top,
maps
[7]
forms
'f'
indices.
target[i]
plane
associated
stones[i]
"000"
anything.
candies.
[3,1,2]
[3].
9].
(xi,
center
minute,
named
days.
vice
[1,2].
x-axis.
'd',
(inclusive)
false]
follow-up:
(1,1)
indices,
checks
round,
and/or
'l'
good.
forming
wait
[[0,1],[1,0]]
c)
grouped
[[1,2,3],[4,5,6],[7,8,9]]
end,
[left,
pushes
0-indexed.
[2].
120
seconds.
seats.
allocate
parallel
deletion
dates
non-increasing
50.
fully
arrange
label
fraction
tile
cards
houses
describe
selling
arrangement
combination
distribution
block
sales
stock
video
base
source
triplets
activity
decode
reduce
parenthesis
execution
threshold
circle
work
requests
happy
fill
missing
31.
capacity
display
neighbors
rectangles
team
zeroes
anagram
decoded
symbol
tie
method
units.
points[i].length
plane.
indicate
wall.
opposite
cost.length
[8,
[1,1],
3|
respectively
happen
recall
10);
20);
cause
names.
6).
'-',
[ui,
50,
color.
function,
alex
treat
else
finally
board[i][j]
solution.
7]
swaps.
"cba",
size,
8)
intervals[i]
ri
"aaa",
applied
'*',
structure.
intersect
merging
rows,
area.
')',
country
stored
-106
edge.
positions.
high
[8]
[1,2,1]
received
overlap.
arr[i],
corresponds
nums.length.
wins
player's
horizontally
16,
nothing
weights
pairs,
0],
denoted
implementation
stays
[1,4]
(and
a.
sit
"abab"
[-1]
fromi
[fromi,
toi
"d",
"01",
prices.length
prices[i]
enter
word2.length
'h'
[0,1,2]
"ccc"
john
arrays,
"",
choice
possibly
1's,
"hello"
bob's
sum,
"01"
enough
0.5
216
p.
[2,3].
[3,1]
[2,1].
integers:
grid[0][0]
to:
zeros,
supports
instead.
(x,
')'
blue.
6]
initialize
minutes,
changes
"bb"
inserted
inserting
"this
(no
roots
105].
'o'
as:
subsequent
rows.
help
fn,
45
-10
inserts
length)
lefti
finished
logs
case.
[1,3].
[2,3,4],
"2"
'u'
"d"
mat,
winston
right)
individually
composed
conversion
custom
hand
excluding
deletions
42.
overlap
unable
course
duplicates
factors
job
perfect
rating
sub-arrays
counts
counting
alphabetical
vowels
unoccupied
eating
cross
login
memory
varying
flipping
labels
cycles
segments
instructions
flower
percentage
nice
dot
hour
drop
32.
fall
obstacles
60.
car
weighted
white
anagrams
minimize
strange
generate
transaction
regular
spell
decreasing
food
roads
domino
lines
resultant
beautiful
reversing
23.
serialization
multiply
ranks
origin
rooms
18.
container
puzzle
garden
bank
chunks
queries[j]
id.
abs(x)
heights.length
east
location.
facing
text.
[1,1,1,1,1],
obtain.
linear
care
garden.
removed.
multiplied
[0,0,0]
arr[2]
overall
unless
walls
used.
43
second.
memory.
's'
arr[arr.length
kind
20],
10],
happens
format:
minimal
zero)
constraints
x2,
(x1,
[1,2,1,2]
(both
'+',
vertex
additionally,
keys.
social
vi]
city,
n),
(10
small
order:
impossible,
printable
child,
10]
existing
'u'.
s[1]
piles.length
piles[i]
coins.
picked
intervals.length
[li,
li
intervals[i].length
'p'
processed
singly
"0000"
s1,
rectangular
rectangle.
col)
yellow
'+'.
number:
converted
evaluates
'*'
low
palindrome.
operator.
graph,
difference.
lose
chooses
of:
etc.
corner,
side.
"aab",
nothing.
access
future
again,
strategy
f
[2,5]
belongs
[2,5],
empty)
4).
dollars.
trip
constraints.
passes
cities.
user.
there.
asks
expression.length
outer
[-1,
[-1,-1]
[0,0,0,0]
(1).
world
[[1,1,1],[1,0,1],[1,1,1]]
+----------------+---------+
proved
r,
[[1]]
'9'.
non-empty.
"code"
33
bit.
arrival
handle
nums[j].
completely
surrounded
method.
"5"
10000
digit,
[1,2,3,4,5,6]
250
task.
tasks[i]
tasks.
overlap,
arr1
arr2
"010"
"11"
"001"
quantity
kinds
wins.
or,
19,
top-right
49
(6
[7,
(4,
yi)
circle.
west
[1,2,4]
alphabetically
converts
stone.
(i.e
21,
copy
[[3,
previously
bi,
size.
[0,0],
[[1,2],[3,4]]
optimally,
ended
draw
"acb"
distance.
num2
num1
price.
amongst
[1,0],
"()"
accepts
own
steps.
(x
(1,2)
testcases
[2,3,5]
sentence.
minimized.
occupied
chose
i)
correspond
sum:
differ,
below.
"bab"
although
col
strs[i].length
strs[i]
strs.length
strs
stack.
enum
exact
-4
simple
year.
product_id
add(int
solution?
constructed
[3,2],
"a".
o(n
positioned
58
six
capital
jobs
great
getting
shift
title
fixed
levels
difficulty
close
catch
cycle
department
balls
big
immediate
far
labelled
allocated
components
limited
border
connect
reports
hidden
dominoes
summation
teams
transformation
spiral
promise
tiles
component
manager
meeting
pairings
trips
flowers
triangle
online
address
ancestor
calendar
folder
balance
ranked
floors
roll
connection
exam
log
.
encoding
straight
bus
simplified
01
workers
secret
offers
equation
replacement
decrypt
submatrices
booking
arithmetic
paint
tower
courses
direct
multiplication
land
chessboard
buildings
mountain
generator
break
sizes
difference,
spaces,
&
chosen.
heights[i]
support
point,
rotation.
field
position,
changed.
[idi,
idi
turned
[10]
+----+-------+
2]]
3]]
cost.
full,
full.
valid,
distinct,
2|
arr[4]
|2
arr[3]
|3
duplicates,
cells,
cardinal
date,
month
50)
causing
level,
treated
erasing
x1
y2)
x2
minus
vertex.
nums[5]
box,
keys,
candies,
line,
addition,
bob,
people.
[2]]
appends
pairs[i]
resolve
()
"ba"
cards.
"0",
"2",
[c,
[3,6]
'u',
'y'
'/',
'-'
hold
completed
'2'
o(m
printed
pieces.
h
w
formatted
ignored.
evaluation
i.e.
"10"
lists.
includes
nums[i][j]
values[i]
values.length
falls
lands
1000,
110
vi,
ranking
whereas
automatically
subsequence,
"abcde",
connects
connected,
(a),
b),
paths.
(see
expression,
etc.).
('a',
1]).
corner.
sides
'i'
'o'.
dropped
ways:
dollars
repeatedly
queue.
respective
order).
paired
seven
expected
g
n-1
media
+=
limit.
dictionary,
dictionary.
intermediate
variable
examples
"101"
[[0,0]]
endpoints
(bst),
substrings.
s1.length
algorithm:
nums[i].
blocked
round.
significant
(5)
others.
7:
logged
num)
set.
values:
[1,3,4]
don't
preceding
finishes
available,
fromi,
output.
'-'.
actually
well
(for
"3"
office
entries
optimize
word1.length,
word2,
b.length
"bbb"
islands.
objects
inputs.
disjoint
similarly
'x'.
isn't
"z"
array's
min(n
odd.
[1,3,2],
bottom-left
[2,2],
imagine
radius
formed.
[1,1,1,1]
sitting
applies
segment
allow
'9'
unlock
"leet"
"bab",
evaluated
paths.length
paths[i]
system.
[1,5]
price,
6],
tasked
tasks.length
require
29
balanced.
covers
"ab".
various
y1)
exam.
"123",
occurring
direction,
"ac",
"bc"
price[i]
price.length
(0-indexed),
axis-aligned
pop
nums:
64
positive.
right).
i-th
lost
'*'.
binary,
considering
"get"]
"get",
"111"
representations
"o"
"cba"
210.
'g',
"i
easy
sentence.length
1])
solution,
[0,1,1]
games
answers.
thread
-x
board.
board,
condition.
[3,3],
[1,1,1,1],
person,
palindromes
99
===
5);
500.
problem.
way,
shape
listed
collection
bool
all.
righti
's',
logs.length
logs[i]
"a
80
s1.length,
down.
directions:
reversed
[1,2,3,4,5,6,7],
n].
zeroes.
specified
achieved
1.00000
across
continues
1-indexed
[2,1],
keeping
37
[0,1],
year,
flipped
passing
specifically,
pop()
(left
stack,
push(int
orders,
top.
[1,2,5],
website.
root1
root2
requires
prove
s[i
"cab",
arr2.length
lower-case
$5
"10",
state.
[1,2,3,4,5,6,7]
dictionary[i]
dictionary[i].length
dictionary.length
ways,
[6],
compute
columns,
interval.
seat.
destination.
executed
't'
necessary
',
away.
two.
(1,3)
traveling
up.
text,
complement
questions
away
flights
cutting
tournament
assigning
×
expansion
deepest
account
59.
rain
fibonacci
chain
configuration
periods
differences
falling
cat
recover
34.
walking
trimmed
active
jewels
trim
nesting
cousins
median
run-length
postorder
coin
topmost
staying
ingredients
safe
bracket
collision
pivot
emails
cars
gap
40.
gray
removals
track
restaurant
stick
painting
broken
key-value
rolls
password
uncommon
sentences
averages
forest
reaching
islands
others
bricks
combine
n-ary
checking
queens
phone
frog
magic
connections
tallest
submatrix
subtraction
bags
filling
folders
degree
fair
discount
rotations
machine
accounts
mean
movies
fractions
25.
flight
visible
shifting
importance
shop
daily
delivery
lucky
mouse
attack
servers
window
3n
perimeter
iterator
assignment
numeric
nested
worked
bars
bought
64.
movie
28.
zigzag
compare
force
sticks
arrangements
reformat
buying
room,
answer[j]
smaller.
"hello
"world"
999
area,
integral
vali
47
henry
joe
sam
plant
flowers.
planted
1010
triplets.
nums1[0]
|i
nums[2].
|0
diagram.
duration
domino.
collide
towards
infinitely
speed.
money.
coins,
amount.
hours,
mm
'?'
years
15);
book.
true]
triple
[start,
-107
paths:
over.
system,
subsequence.
coming
unchanged.
candy.
opening
collected
vi.
languages,
[[1,2],[1,3],[2,3]]
language.
vi)
content:
there's
considered.
lowest.
[4,5]
(labeled
string[]
"c".
"cab"
subsequences.
val,
"bca"
pairs.length
divisors:
throws
100ms.
b;
optimal.
picking
cards,
ri]
d)
num[i]
1234
[[1,1],[1,1]]
[[1,0],[0,1]]
1s,
prefix.
steps,
moment,
intersect.
locations
(note
judge:
104.
s3
vertically.
requirements:
(empty
huge
[1,2,4],
105)
email
form:
domain
2.00000
merged
nums[i].length
items.
[[0]]
mat.
piles,
nums[2],
trivially
2;
(0,1)
negative.
nums2[2]
"ace"
"abba"
words[1]
selecting
words[0]
words[2]
graph.length
{0,
partitioned
u
independent
property
produce
formula
parentheses,
start.
nodes'
traversal.
trivial,
(6,
operator
writing
'u')
subarray,
109.
later
yi].
ten
route
less.
"bbb",
f.
reuse
(where
worker
5).
receives
street.
main
boxes,
sixth
bag
explantion:
friends,
because:
i++)
code:
(int
[[1,2]]
user,
"aa".
[3,2,1].
threshold.
5000].
simultaneously,
created,
"ll"
create.
palindrome,
selected
"apple"
details
expression.
expressions
terms
"11",
righti]
set,
got
s2.
recursively
added.
neighboring
reference
provide
5|
station
d,
[2,7,4]
1-indexed).
interpreted
"123"
"l"
itself).
net
toi,
pieces,
ways.
appeared
and:
55
differs
internal
2's
server.
server
each,
a.length,
(land)
totally
threshold,
"()()",
[9,
head.
themselves
upper-case
tasks,
idle.
"x"
"hello",
giving
taken.
intervals,
one,
(-1)
here,
at.
100)
25,
refer
(as
"11".
"011"
erase
itself,
x).
underlined.
bottom.
balls.
b2
2-d
drawn
x-axis
parents.
neighbor
perm[i]
perm
height.
200,
11]
coordinates.
lie
computed
grow
works
120,
"111000"
ends,
freely
result:
"leet",
once).
right),
lexicographic
lexicographically.
12]
separating
brackets
that's
"b".
deleted.
paths[i].length
matter.
q
vice-versa.
unknown
8].
customers.
customers,
customer.
requirements
2]],
pricei]
pricei
pricei.
functions:
shop.
swap.
"ba",
people,
[0,1].
chessboard.
j),
left-to-right
[2,2,2]
24-hour
win,
half.
"aaaa"
required.
[2,3,1]
days,
calculates
distance,
(x2,
euclidean
59
place.
banned.
directly.
"6"
turn.
nums[3],
7),
(2,3),
computer
minute.
splits
j]
[i,
reset
'0'.
knows
(to
rounds.
arr.length.
sub-array
unit.
matrices
team.
allows
public
old
[1]]
[1,1,1].
numerical
converting
"acb",
210
"231"
picks
indices[i]
indices.length
left).
'r'.
keeps
space,
customer_id
order_date
remove.
[5,4,3,2,1]
non-decreasing.
'k'
level.
nums[j],
queries[i].
"bbb".
timestamp
in,
device.
1/3
games.
someday
too.
4000
nums[k]
forward.
backward
threads
methods
threads:
(r,
permutations.
path:
e,
4);
hold:
diagonals
well.
newarray
plusone(n)
fn(arr[i],
downward
shortest.
hours
happened
events.
[2,3,4]
[2,3,5],
process,
lies
player.
compared
obtaining
car.
right].
error
'5'
upper,
(2,3).
"abb"
"aabaa"
apple
|5
-3,
[5,5]
float
division.
begins
"0".
cost[i]
condition,
strs,
[3,4].
not).
more.
street
dist
crosses
west,
visited.
you.
employee,
+------+
salary,
(binary
discount.
o
command.
floor,
turns,
wall,
9000
6),
called.
42;
executed.
1;
"the
movement
stream.
scores.
(except
|nums[i]
+------------+--------------+
sale
product_name
+-------------+-------+
'0's
nums)
below,
jonathan
i]
indicating
age
39
initialized
ki
queries[i],
[3,0]
arr[i].
[0].
students.
plan
'e'.
"i"
(there
pass?
[[1,2,3],[4,5,6]]
68
(2).
ones,
"baa"
"bca",
arr1.length,
arr2[i]
particular,
"leetcode".
"s"
10^6
activities
$4
want.
$2
items,
$3
decrypted
diagonal.
preorder.length
word1[i]
"abccba"
smallest.
black
[4].
insertion.
0);
image,
consecutively.
nums2[i].
16)
orders.
adjacent.
blank
starttime
endtime
desired
shorter
grid[row][col]
(5,
[x,
him
subtrees.
(0,1),
(bst)
pairwise
satisfied.
requirements.
instances
grid[r][c]
another.
j).
disconnected
35
$1
l,
arr1[i],
yj
moved
100%
consecutively
so.
[8],
population
entrance
criteria
45.
subpath
furthest
wonderful
solving
angle
non
bookings
ugly
videos
addresses
short
49.
computers
owner
cooldown
wheel
project
majority
king
25%
flatten
e-mails
diff
traverse
robber
asterisks
diameter
knight
keyboard
local
dice
pow(x,
pizza
flood
rational
tag
laser
backspace
egg
encode
strongest
gcd
attendance
polygon
partners
browser
insertion
weakest
ip
sequential
tickets
trail
ice
grandparent
eliminate
clock
recipes
captures
composition
favorite
partitions
communicate
wizards
filter
75.
rods
supplies
peak
tweet
gardens
truncate
hit
shapes
43.
history
chalkboard
factorial
critical
ii
increments
stacks
90.
cheapest
73.
exit
quality
altitude
54.
temperature
powers
ship
squared
printer
halves
baseball
compete
view
n-queens
cups
spreading
bonus
sudoku
tweets
29.
disconnect
crossing
functions
routes
bomb
fruits
marking
roman
exchange
bloom
iii
diagonally
monotone
defuse
divisibility
transpose
k-increasing
36.
cheese
logical
handling
service
spanning
lock
spent
cinema
eggs
rate
asteroid
apples
temperatures
eaten
categories
slices
balloons
iv
cpu
unsorted
900.
super
hamming
1d
contaminated
single-threaded
encrypt
excel
conflict
planting
tic-tac-toe
min
ages
insertions
avoid
widths
brick
strength
3d
removal
parser
ant
outermost
contest
basket
asteroids
packages
inorder
33.
machines
bsts
salaries
sub
operators
world"
non-space
enhances
bar
wide
coordinate.
ids.
status
on,
button
pressing
non-overlapping.
arrows
earns
hand,
competition.
nobody
section
70000
80000
90000
60000
[[2,
cost[i].length
cost[i][j]
plant.
partial
8).
nums1[j]
[-1,0,1]
j|
0|
a[1],
[rowi,
rowi,
coli]
free.
meeting.
room.
held
done,
figure.
string)
seconds)
memory,
's'.
road.
coin.
coins.length
coins[i]
hh
"hh:mm".
bob.
31,
successfully
60);
half-open
calendar.
event.
book(int
end)
15],
"book",
implementing
"book"]
square,
path.length
'/'
'/'.
solutions,
x1,
y1
y1,
[1,1,2,2],
10^3
["abc",
(either
'+'
n-1,
spend
[1,2,2,3]
candies.length
arrays:
keys[i]
closed,
candies[i]
keys.length
tuples
language
z,
yielding
(ui,
z.
10th
lines,
file.txt
script
filters
painted
constructor.
x's
children,
"bob",
class.
constructor
parent,
directions.
'#',
3x3
sequence:
[13,
generates
34,
"iii"
"bacd"
"bac"
palindromes.
primes.
throw
(n)
asyncronous
error.
settimeout(res,
promise(res
reached.
inputs.length
8),
[2,4,5]
card.
"6",
intervals.
181
[1,0,2,1]
alphabet,
shifts
(wrapping
1s.
[[1,1],[1,0]]
daniel
"xy"
usual
transactions.
program.
'8'
skip
[3,2,4],
"10101"
parts.
necessary.
allowed).
cuts.
(an
horizontally,
direction:
mask
nums1.
triangle.
lengths.
[2,1,2]
non-leaf
non-empty,
swapped.
22,
d]
subset.
values[i],
third,
[1,1,2,2,3],
[5,4,3,2,1],
[[0,0],[0,1]]
stones'
positions,
stone,
clockwise,
[low,
pile,
[1,3,3].
nums[i+1]
nums[nums.length
costs.length
costs[i]
digits.length
digits[i]
(0,0)
[false,true]
queries[j].length
student_id
decreases
higher.
duplicated
(contiguous)
substrings:
(12
rob
part.
toward
-2.
environment
divisor,
multiplication,
"abcde".
"baba"
performed.
"cd"
{1,
values).
3}.
v,
store,
ever
[1,1,1,1,1].
tree)
descendant
200].
[1,2,3,4].
9]
[1,null,3,2,4,null,5,6]
[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
iteratively?
nary-tree
maximized
pairing
bi)
elements)
unary
'a's
floor.
have,
7th
remember
99,
break,
dropping
drops
ranges.length
ranges[i]
[4,8]
overlapping.
profit.length
profit[i]
[2,4,6,8,10],
job,
pays
separately.
everyone
aforementioned
security
constraint
[1,2,3,1]
effect
(n,
similar,
can.
queue,
boxes.length
distributing
[1,2,2,1],
ingredients.
[[0,
preferred
assertions
assert
(hence
expectednums[i];
expectednums
slots
[...];
pass,
underscores).
expectednums.length;
rows:
(you
this:
[[1,2],[2,3]]
(user_id,
vowel.
limit,
protected
question,
calculations
variables
checked
[firsti,
firsti
reminder,
cycles.
subtree.
boundary.
walls.
installing
install
throughout
[1,0,1]
sent
from.
kn
+----------------+----------+
user_id.
february
2020.
components.
removals.
[2,2].
n2
alternate
pick,
individual
statement
supply
eat.
(excluding
suffix.
requests[i]
requests[i].length
requests.length
buildings.
toi]
weighti]
cities,
calculation
denominator
"1101"
"bb",
"bc",
"abb",
"ca"
"o",
zeroes,
done.
(that
yi],
outgoing
day).
again).
engage
41
entered
bits.
known
-3.
it?
permitted
load
handles
available.
(i+1)th
+-------------+-------------+
employee_id
project,
working
54
(all
grid[0].length
"acd",
"5",
"021"
")("
"(()"
b:
only,
"("
trees[i]
trees.length
xth
(ie.
0.50000
e
00
"f"
[2,6]
(-2)
stones,
0.25
75
causes
lose.
arr[5]
arr[k]
few
xn
wi
stuck
against
shaped
"v"
remove,
odd-indexed
even-indexed
minimizes
5]);
5]],
equally
container.
(nums[i]
[1
dimensions
height,
14].
yi,
enters
seats,
sits
words[i],
words)
0's,
through.
reached
wrap
turning
position[i]
step:
position.length
'a':
chars
words[i].length,
highlighted
'p',
[-231,
printed.
"1
chunk
term
clear
"00",
"0110",
[2,7,4,1,8,1]
[2,1,1,1]
smash
destroyed,
eats
hour,
hour.
hours.
"aeb",
strings:
[nums[k],
i).
jobs,
versa.
company.
timei
customers.length
customers[i]
arrives
arrives,
stops.
result,
[1,2,0]
shop,
"search"]
res
"search",
tiles.
[1,4],
[0,1,2,3]
(indexed
coordinates,
"good"
attain
searchword
typing
searchword.length
products.
[9]
task,
root.val
north
squares,
source.length
south
endpoints.
replaces
outcome
respect
puzzle.
satisfied:
(even
(red
'('.
parenthesis.
balanced,
[2,1,2,1]
forever.
segments.
anything
"abacaba"
"abcde"
+-----------+
reachable.
maximum.
score.length
banned,
banned.length
banned
num2,
0001
next()
"next",
hasnext()
"ac"
combination.
[[0,1],[1,2]],
unrooted
times).
digits).
increasing,
picture.
1018
(109
(2,2),
interested
has.
back.
front,
split.
divisors.
[2,0]
'|'
precedence
wordlist
"f",
'x',
minimum.
shown,
vote
p,
match.
p.length
"burger"
2):
judged
image.
rule.
place,
participating
"count",
"count"]
"1010"
(1,7)
"r"
signifies
present.
criteria:
231.
"210"
'j'
(index
node.val,
repeats
into.
further.
['a',
sentence,
(minimum
love
website
2019.
samsung
2019-08-01
321
word's
[0,1,2,3,4],
"100"
"00111"
frequency.
'b's
modifications
structurally
[1,2,1],
[1,0,1],
occupied.
whitespace
boundaries
2016-03-01
2018-07-03
device_id
player_id
logging
event_date
event_date)
players.
(player_id,
games_played
2016-03-02
+-----------+-----------+------------+--------------+
2017-06-25
amount,
[2,3,3]
[2,1,1]
do.
uj
[[1,0]],
[uj,
vj
abs(1
[4,2,1,3]
[5,2,1,3].
[5,6,4]
three.
[3,5]
(1-indexed).
[1,1,0]
shares
loses
hh:mm.
tournament.
words[j]
[[[1,
[2,4,6]
[3,3].
[20,
10;
accept
defines
lodash's
a2
[3,4,5]
[[1,0]]
two-dimensional
seen
worth
type:
libraries.
product,
make.
righti].
water,
messages
press
reading
code,
operations.length
travels
|1
arr[j].
incorrect
sn
subgrid
string).
p1
[[1,2],[2,3],[3,4]]
righti.
p2
disturbing
[4,6]
(9
|10
1|
|2-3|
words[i].
(2,3)
climb
[2,1,3].
(2,2)
'w',
subarrays.
(2)
endi].
[[0,1]]
[1,2,3,4,5,6],
2000].
themself.
manager.
i=0
j=0,
j=1,
i=1
treenode.val
accounts.
64-bit
prices.
50%
customer,
next.
index)
appended
ci]
down).
'#'.
upcoming
val2
val1
ring's
ring
ring.
colors.
green,
resolves
used:
100);
goal,
align
('a'
key.length
message,
transformed
4th,
1st,
groups,
nums[j])
62
46
9).
shuffled
partitions.
movements
anticlockwise
counter-clockwise
lengths,
placed.
result[i]
root)
-4,
"4"
ops
record,
t1
reversed.
traversal,
query:
good,
[xj,
minimal.
inclusive,
match,
s[2]
")",
2]);
add.
[9],
"11111",
reserved
trimming
capacity.
"push",
"pop",
pop,
stacks.
"pop"]
push,
44
in-order
6|
[[0,1]],
stand
[4,2,5]
sign.
111
[5,6,7,8,9],
a[i]
[4,4]
formally
1.5
reduced
similar.
0.00000
candidates[i]
combinations.
[1,2,2],
candidates
candidates.length
connections[i]
connections.length
indirectly
[0,5]
0].
nine
abs(i
(more
mapped
(11
"e",
20)
sure
entering
typed
password.
colsum
colsum[i]
colsum.length
emails.
case),
david
period.
overlapped
larger.
[0,2,4]
sum(nums[i].length)
keyword
aligned
[6,7,8,9,10]
description.
to,
(because
"zz"
sensitive,
"z",
count.
"aca",
"c"]
9th
"bcb",
arr1[i]
(such
endpoint
play,
play.
positions).
say,
bad
-10^6
+------------+------------+
pencil
basketball
t-shirt
shapes.
advances
round:
given,
$2,
[3,2]
special.length
item,
$9
special[i]
$10
want,
code.length
2+3,
pushed.
dominoes.length
dominoes[i]
pushed
preorder[i]
"ei",
process:
"cbda",
word1.length
["abcd",
"acbd",
dictionary)
word1,
objective
"abcc"
m)
members
book
from,
value)
string:
vertices,
immediately.
fall.
target)
updates
"1010",
28,
blue,
orange
actions
acyclic
relationship
flattened
14)
10:
restaurant.
2019-01-01
'3'
execute
met:
executing
executes
start.length
starttime,
attend
lines.
-5,
["a","b","c"]
consistent.
persons
people[i]
people.length
"12"
world",
white.
units,
devise
acceptable
"abcabc",
timestamp.
stores
brackets.
[1,4,2],
fired
asynchronously.
(representing
(horizontal
-108
0-indexed).
parsed
determines
evenly
[2,4,6],
3rd,
[2,3,1,1,4]
pair,
(3,5),
[1,2,3,3],
same:
73
bitwise-xor
len
500].
n.length
+----------+
country,
four.
versa,
valued
rolls.
pi
(3,4),
(1,1),
follow:
't',
time[i]
180
behind
faster
(10)
"0011",
symbols:
lowercase.
ignored
algorithm.
list2
list1
121
0.25000
bank.
dist[i]
roads.
dist.length
[1,2,3,5],
min(5,
further
nums1[1]
7].
arr2,
9],
[1,3,3]
"is",
hello
70
[2,7,11,15],
tests
o(n2)
(represented
-6
baskets
basket.
grid[1][1]
(2,1)
"abab",
instead,
simply
(100)
[2,1,3],
[2,2,2,2,2]
email.
"aaaaa"
speed[i]
speed.length
column).
off.
types:
right]
[true,false,true]
graph[i]
deletes
blocks
differing
managers
shopping
x-matrix
holding
rearrangements
200.
companies
town
rental
removable
hands
calculator
1551.
beams
wealth
underground
harmonious
76.
maze
captured
sample
philosophers
profitable
songs
genetic
allocation
naming
compatibility
boats
variance
skips
entity
strong
enemy
gcds
complex
dartboard
rle
quadruplets
elimination
pancake
views
histogram
cake
tic
wasted
competition
burgers
wood
growth
darts
kids
turbulent
dna
home
subgraph
mysterious
senate
harvested
546.
truck
mailboxes
repair
halve
deeply
chips
ants
tinyurl
chair
dota2
k-diff
blacklist
squareful
paid
cream
classes
statistics
monotonic
sub-folders
decomposition
fix
visiting
alert
dividing
pillow
competitive
fewest
unhappy
energy
k-similar
rungs
grumpy
190.
unguarded
lcp
corridor
confirmation
mutable
cookies
sufficient
spellchecker
ors
326.
bridge
my
counter
99.
followers
sequentially
parse
coprime
inverse
mode
fee
valleys
763.
tastiness
votes
plank
cherry
min-product
frequencies
sector
inheritance
meals
1202.
700.
snapshot
detect
hills
fingers
gifts
unreachable
gain/loss
article
array-form
climbing
47.
projection
debounce
26.
fence
guess
tracker
pool
storage
transfer
807.
schedule
module
prefixes
199.
inform
market
plants
champagne
rocks
xored
invited
airplane
codes
respecting
morse
alike
96.
890.
alternately
oranges
rabbits
hourglass
well-performing
allocator
ipo
patients
possibilities
tromino
redundant
attended
deviation
burst
pencils
monsters
checker
37.
save
prefix-aligned
skyline
bookcase
examinations
shelves
bouquets
escape
dungeon
snail
square-free
cornered
beauty
goat
biggest
incompatibility
k-beauty
reshape
triangular
2016
descent
equality
latin
koko
hire
bookstore
watched
interpretation
41.
insufficient
999.
80.
inversions
verifying
carpet
lattice
ideal
leaf-similar
delay
simulation
ports
chart
70.
widest
atm
donuts
grammar
soup
achievable
editor
spells
boomerang
scramble
monkeys
consistent
mice
centennial
appeal
homework
74.
html
express
covering
fleet
billboard
awesome
lunch
cache
greatness
reservation
wildcard
exclusive
personal
fresh
56.
2020
tilt
673.
watering
artifacts
completing
mutating
sleep
parking
washing
fancy
a's
35.
finding
marbles
compression
taps
sightseeing
95.
smooth
bottles
hashset
1011.
capitalize
tenth
frogs
magical
carpets
triples
cancellable
collisions
no-zero
archery
forts
68.
sub-tree
twin
restaurants
complementary
equations
concert
b's
additive
minesweeper
effort
skiplist
tribonacci
validator
remapping
monthly
progression
boring
magnetic
pangram
44.
pseudo-critical
prison
alien
powerful
erasure
json
cuts
key-card
chalk
totals
deci-binary
schemes
184.
reordered
hats
pruning
surface
pens
special-equivalent
rhombus
dishes
subdomain
golf
ramp
interleaving
stickers
week
separator
ghosts
comments
cyclically
tac
richest
sliding
pseudo-palindromic
triangulation
performance
pickup
deque
slashes
happiness
lemonade
lonely
cameras
poker
waste
virus
parity
foobar
bulb
hashmap
delivering
bounds
cuboids
subrectangle
smoother
refueling
redistribute
uploaded
rook
rings
teach
itinerary
operating
barcodes
advantage
clumsy
successful
global
even-valued
bananas
streak
swim
self
cooperated
couples
potions
backlog
traversable
xor-beauty
wear
uncrossed
rope
596.
handled
stadium
quad-trees
fire
[2,3]:
rooms[i]
[2,5]:
rooms.length
abs(2
rooms.
me
fly
element:
angles
location,
region
counterclockwise.
90,
idi,
evenly.
off,
[on,
presses
bulbs
[off,
[4,2],
arrows.
ranging
(6,9)
department.
departments.
+------------+----------+--------+
departmentid
+----+-------+--------+--------------+
1--a
size1,
8]]
[36,
96],
size2.
[[15,
3--a
2--b
size2
2--c
size1
gardens,
determined
flowers[i]
flowers.length
(type
(42
(0,1,2),
nums2[0]
nums2[1]
[3,5,2,6],
[5,7]
a[n-2]].
-5000
[a[0],
become:
why?
a[n-1]]
a[0],
[a[n-1],
a[2],
(north,
colj
guarded
guards
[rowj,
meetings.
rooms,
half-closed
manner:
finish.
finishes.
delayed
dominoes,
"24"
240.
[3,1,0]
car,
stationary
collides
[1,3,1]
[1,2,5]
denominations
?
choices.
"23"
names.length
mary
names[i]
names[i].length
2019
1971
2100.
1993
booking.
event,
end),
60],
55)
40);
55]]
40],
[50,
booked,
events.).
[25,
55);
booked
directory
unix
"/"
directories
directory,
'_'.
included.
[10,8]
y2
matrix[0].length
y2.
different:
lowercase),
formats:
(0-9),
numbers:
"."
vertices.
apple.
beautiful.
shifted
[1,1,2,2,3,3]
[1,2,3,5]
closed.
most.
guarantee
possibilities.
file.txt,
simplicity
pricei,
true)
lowest).
[3,1,5]
summer
houses.length
[0,0,0,0,0],
houses[i]
birth
successor
dies
name.length
older
alice,
dead
death
'@'
lock,
str2.length
str1
str2,
str2
"abac",
"abac"
str1.length,
"ac".
reverses
["o","l","l","e","h"]
["h","e","l","l","o"]
["h","a","n","n","a","h"]
1-9
sub-boxes
[5,3,1]
nodes:
api
20]
14]
26,
"ode"
12321
108].
reject
t=50ms
n;
50ms.
100));
milliseconds
[5,10]
resolved
choice,
[9,8,7,6,5,1,2,3,4]
consecutive).
[2,4,1,2,7,8]
cards.length
cards[i]
[4,2,3,4]
1015
"8".
7).
"4",
twice,
1200
215
'a').
applied.
[3,5,9]
transactions[i]
transactions,
transaction,
transactions.length
[3,2,4].
ahead
heads
all,
linked-lists
[1,5],
(2nd
[1,5].
lists,
[[]]
s3.
"1001"
you"
"how
"to
be"
[[0,0,0]]
k-1
code.
symbol.
separation
"xxxx"
symbols
address.
time?
illustrates
and.
evaluating
2.5.
"1100"
[1,3,3,3,2],
["#","#"],
rests
obstacle,
high]
bottom,
[1,1,2].
[1,2,2].
[1,5,2,4,1]
planning
"cbacdcbc"
"bcabc"
"acdb"
unnecessary
type,
(1,0)
student_id,
report[i].
report.length
positive_feedback[i].length,
negative_feedback[j].length
negative_feedback.
report[i]
feedback,
positive_feedback.length,
student_id.length
positive_feedback
negative_feedback[j]
negative_feedback,
smart"],
3-1=2
reports,
negative_feedback
["not"],
negative_feedback.length
["smart","brilliant","studious"],
report[i].length
positive_feedback[i]
student_id[i]
feedback
["this
studious","the
"banana"
+1
police.
alerting
contact
smart
police
house.
night.
mod
division,
fractional
-231,
text2
text1
"def"
phrase
v.
u.
2}
self-edges
().
[0,3,0]
[1,1,0,1]
formula.
2}.
chalkboard.
[0,1,0]
examples)
min(1,
min(2,
min(3,
5),
(ignoring
subtraction.
anywhere.
subtraction,
corner:
grid[0][0]).
tries
visits.
unit,
sqrt(2)
placement
width,
boxes.
fuel.
fuel
'n'
breaks,
break.
certainty
unbroken
breaks
55,
inclusive)
[10,20]
them:
ranges.
jobs.
attempt
profit,
ability
systems
[[0,0,1],[1,1,0],[1,0,0]]
[[1,0,0],[1,1,0],[1,1,1]]
[[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
"ddd",
"ccc",
ship.
given.
port
violating
boxes[i]
trips.
rearrangement
distributions.
bag.
weights.length
weights[i]
bags.
[4,9]
intersection.
[9,4]
[9,4,9,8,4]
[4,9,5],
cheese.
[1,6]
slice.
remaining.
prefers
xi.
0]]
happy.
friends.
1]],
kept
k;
removeduplicates(nums);
[1,1,1,2,2,3]
line:
upper-case),
(lower-case
[3,-1,0,2],
-nums[i].
[2,-3,-1,5,-4],
[4,2,3],
[4,-2,3].
[2,3,-1,5,4].
[3,1,0,2].
{1}
app
will,
instruction
commands
"e".
queries.length,
[6,5]
[3,4,3]
intersecting
"gg"
backward.
"xx".
"cc",
[2,3,4,7,11],
[5,6,7,...].
[1,5,6,8,9,10,12,13,...].
variable,
sequentially.
e2,
tokens
context
legal
concept
"let",
expressions,
convenience,
follows.
e1
e1,
lefti.
[0,0].
[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
[1,null,1]
[0,null,1]
[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
unfortunately,
loss
error,
originally
decision
stop.
existed.
descendants.
shared
tie.
spreads
built.
installed
(101)
+----+-----+
case?
request,
stations[i]
10|
stations.
|7
stations.length
stations
leaves.
coloured
[3,5,1,6,2,0,8,null,null,7,4]
[0,1,3,null,2]
die
faces
time_stamp
datetime
+---------+---------------------+
time_stamp)
2020-02-01
2021-01-06
[1,4,3,2,5]
[[0,1],[1,2],[1,3],[3,4]]
want:
before,
"2".
"16",
assumed
think
forever
put,
"zy"
aa
701
empty:
[-1,-1,-1,-1]
requests.
employees.
toi.
employee's
reside
toi)
(fromi,
concatenations
positive,
numerator
cases.
important
accepted,
things:
[0,-4,-7,-9,-10,-6,-3,-1].
altitudes
trip.
[0,-5,-4,1,1,-6].
gain[i]
[-4,-3,-2,-1,4,3,2]
biker
gain.length
[-5,1,5,0,-7]
altitudes.
seq
seq[i]
ranks.length
ranks[i]
rank,
rank.
hand.
"high
fibonacci-like
parents
times)
stock,
office.
exits
office,
2020-12-09
integer's
unsigned
implementation,
11111111111111111111111111111101
unsigned.
java,
(also
notation.
compiler
word2.
arrives.
necessary).
"eee".
goal.
+------------------+---------+
2.50
experience
khaled
[[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
[1,1,1,1,1,1,1]]
[1,0,1,1,1,0,1],
1s).
grid.length,
[[1,1,1,1,1,1,1],
<=1
bottom)
(water).
[[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
[1,0,1,0,1,0,1],
[1,0,0,0,0,0,1],
(group
s:
alphanumeric
primitive
preserved.
"1":
0-9
"132"
|2-2|
[4,7]
|2-7|
depth(s)
"()(()())"
depth("")
a.length
depth(b)),
depth(a),
vps
vps's,
depth("("
depths
vps's.
(denoted
max(depth(a),
vps.
"(()())"
")")
vps's
vps)
depth(a
'z'.
s[5]
s[3]
h.
last,
center,
[1,1,1,2]
[1,1,1,1].
procedure
[2,1,4,3]
list's
largest.
idle
do,
bit,
[0,2,3,1]
[0,1,3,2]
letters.length
letters[i]
'f'.
beginning.
take,
[2,2,2],
[1,6].
(-6)
(-5)
[13].
natural
arr2.
photo
wooden
rod
"110"
0.25.
serve
volume
success
[5,1,3],
successful.
[3,1,2],
strengths
[2,0,2]
j:
incrementing
callcount
rectangles.
rectangles.length
li,
rectangles[i].length
rectangles[i]
[2,3,1],
visible.
hits
corners
photo.
spans
[5,2],
ie.
solution(int
["solution",
likely
pick.
min(105,
[[7,
height[i]
(blue
height.length
store.
section)
[4,3,5]
num[3]
[1,2,3,null,4],
neighbors.
encoded[i]
encoded.length
perm.
perm[i
category
35,
mass,
either.
mass
hi]
[16,
hi
circles
green.
[2,1,1,2]
[0,0,0,0,0]
n!
3!
leave.
[[10],
maximizes
pref
longer,
"110100010"
1000000000
situated
'1',
"0102"
'0',
invalid,
displays
'3',
[2,2,2,3,3]
51
chars.
chars.length
(each
"bba"
proper
ordering.
ties
coefficient
ignoring
["e"],
1}
heaviest
[2,4,1,1,1]
deletion,
subfolder
identical,
identical.
"two",
"/a"
folders.
folder.
paths,
subfolders
likes
q,
"100",
4321
[3,1,2,0]
scores[i]
scores.length
[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
order)
x[i]
"abe",
y[i]
"cad",
"bae",
nums.length)
[0,1,2,4,5,6,7]
nums[k-1]]
nums[k+1],
nums[n-1],
rotated.
valid:
selections.
arrivali
chef
waits
5.00000
[arrivali,
preparing
distance.length
distance[i]
85
mathematical
5]]],
5]]);
carries
rented
int[][]
search(int
movie,
finds
movies.
list<integer>
movie.
search,
1]]
[1,1,5]
permutation.
188
tiles[i]
tiles.length
tiles,
index=2
black.
white,
coordinates.length
"first
"alice
rock
[1,2,3,3,3].
products.length
products[i]
will:
quotation
key's
[1,0].
123.
like.
finishing
leftover
4421
234
holds.
y).
sx,
tx,
sy,
blocked.
ty
yi).
squares.
[[0,1],[1,0]],
million
self-loops.
disconnected.
"hh:mm"
00:00,
23:59.
"hh:mm",
23,
'2'.
half:
'?'.
win.
'7'.
"aaaa",
"abcdefg",
obstacles.length
jumps.
obstacles[i]
obstacles,
[0,1,2,3,0]
"())",
matching.
")()",
'))',
"))())("
"())"
closing
"())(())))"
"(())())))"
"(())))"
"(()))"
'))'
"()))"
'))'.
bloomed
[1,2,3,2],
[1,4,3],
grows
huge,
compressed
anymore.
piles.
videos,
prefix,
definition.
function).
signal
diagram,
student,
matrix)
exams.
shouldn't
banned[i]
library
2-dimensional
commas,
"1.0",
anti-clockwise
"hasnext",
"hasnext"]
red)
[7].
lying
choice.
incurred
blue)
rooting
nums[5],
[2,3,2]
processes
computer.
[0,2,1,3]
middle,
parts:
calculation.
(bitwise
'|'.
[1,-2,-3]
iteration,
iteration
)
startvalue
(one
"query"]
"xyz"
"query",
positions[i]
4.00000
map,
positions.length
triangles
[2,2,3,4]
(using
group.length
group[i]
relations
procedure.
party
right:
skipped
party,
partial).
appearance
soldiers
[["yeast","flour"]],
["bread"],
[["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]],
[["yeast","flour"],["bread","meat"]],
["yeast","flour","corn"]
"bread"
supplies.length
supplies[k]
recipes[i].length,
["yeast","flour","meat"]
["bread"]
ingredients[i].length,
recipes,
"flour".
supplies[k].length
ingredients[i].
combined
ingredients.length
ingredients[i][j].length,
recipes.
ingredient
["bread","sandwich","burger"],
ingredients[i]
["bread","sandwich","burger"]
"sandwich"
"sandwich".
["bread","sandwich"],
"meat"
"bread".
recipes.length
ingredients[i][j],
["bread","sandwich"]
"yeast"
recipes[i],
recipe
3):
arr.length).
flips.
4):
[3,2,1,4]
[3,2,1],
erased.
images.
ranking.
resolved.
t=200,
"set",
40,
requested
t=0,
methods:
milliseconds.
count()
[1,1,3].
base-10.
"xy".
part,
x)
x-coordinate
"foobar"
pattern,
"t"
"oo"
late,
absent
late.
eligible
award.
late
('l')
absent,
'p'.
award
'l':
'p':
absent.
absences
('a')
targetword
secondword,
targetword.length
firstword.length,
firstword
letter's
secondword
secondword.length,
targetword,
"021".
firstword,
"cdb"
option
replacements
"eee",
occur,
[1,3,null,null,2]
3000].
performs
west.
east.
instructions[i]
stands
instructions.length
position:
north.
instructions,
y-axis.
departs
departure
substrings,
problem",
+-------------+
order_id
hp
seller_id
lenovo
join
info
buyer_id
decreasing,
[5,4,3,2]
infinity.
factory
ball's
count:
"ababc",
layout
"happy"
distinct).
[3,3,7]
4-queens
"00000".
"000".
journey
ladder.
ladder
bricks.
wordlist.
"eabaab".
ignored).
"aaabcc".
"aaabbbcc"
"aaabbc".
"ceabaacb"
'c's
[5,4,3].
[3,2].
rearrangement.
[1,null,2]
01,
[1,0,0]
[1,1,1,0]
"aaabbb"
above).
day:
permutation,
[i
(underlined
("ab",
s)
[""]
0.33
including)
comma-separated
transaction.
exceeds
[2,3,3],
[3,2,3]
present,
threads.
worry
molecule.
three,
words:
prerequisites
independent.
prerequisite
c1)
c2)
[2,3,4,5]
"ll",
[2,4,3],
forgot
supposed
procedure:
loops/recursion?
63
[3,5,6]
subsequences,
look
[1,1,0],
parent[0]
cycles)
parent.length
parent[i]
secret,
winning
[4,2,1]
00:00
seventh
cases,
arr[left...right]
[1,3,2,5,3,null,9]
non-null
extending
199
records
visit.
[3,7,11]
unique,
[1,1,3,3]
filtering
fn);
[-2,0,1,2]
[20,30]
filter(arr,
truthy
firstindex(n,
30]
falsey
array.filter
filtered
[-2,-1,0,1,2],
greaterthan10(n)
[0,10,20,30],
[[0,0,0],[0,1,0],[0,0,0]]
callback
(list)
there're
grid[i][j
grid[i
+--------------+
user_id)
2020-02-11
+-------------+--------------+
maria
2020-03-01
+-------------+--------------+--------------+-------------+
james
2020-02-17
2020-02-25
33.33
200))
((5
dog
"cbbd"
"bb".
teacher
diagonals.
cached
memoized
[8,1]
before.
vertex,
uncolored
purple
centered
shifts.
answering
questions.
[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
"acb".
contains.
hash
remove(key)
add,
"remove",
folder,
min(200,
(ai,
weight,
abbreviated
[2,2,2,2,2],
groups:
plants.
1)th
pressed
'7'
logs[i].length
employees,
[5,3,2]
index1
index2
c++
clear,
implicit
","
quote
testing
",
c;
source[i]
(here,
effective
interfere
bolded
(1,3),
(0,3),
(0,4),
pairs:
buses
-8
single-space
sentences,
plots
11],
|arr[i]
[-3,
((4
[5,1]
|arr[j]
m|
[2,5].
83
cases:
possibilities,
[3,1,2].
sign,
si
s4
1))
"1".
[1,2,3,4,5,6,7,8]
xi+1
there?
[[1,2,3],[4,5,6],[7,8,9]],
"aebdc",
"aebdc"
210].
solved,
4|
|4
|10-9|
|3-3|
|5-3|
odd-numbered
song
"abcd".
["abcd"]
answer[2]
sums.
diagrams
cycle.
problem:
(empty)
(0,2)
walk.
obstacles.
"nesww"
'n',
'w'.
"nes"
path[i]
subarrays:
(0)
[4,10,5,3,2,1]
requests[0]
[11].
nums[starti]
nums[endi
[3,5,4,2,1]
[19,18,10].
[2,1,3,4,5]
requests[1]
[6,5,4,3,2,1]
nums[starti
[[1,3],[0,1]]
nums[endi].
[[0,2],[1,3],[1,1]]
[1,2,3,4,5,10],
[4,1,2]
arr[0].
comprise
102
managerid
dan
amy
+----+--------+
trees[j]
trees[1].
trees[0]
trees[0],
trees[1],
property:
trees[1]
[[2,1],[3,2,5],[5,4]]
[[3,2,5,1,null,4]].
[[5,3,8,2,6]].
bst,
[[5,4],[3]]
j=1
[[5,3,8],[3,2,6]]
[3,2,5,1,null,4]
trees[0].
trees[j].
bsts.
grandchildren.
[[3,2,5,1],[5,4]].
performed,
account.
income
-99
[1,2]:
[1,2,3,2]
[3,2,5]
amount.length
purchased
prices,
bill
sale.
((100
bought.
amount)
(price
prices[i].
insertion,
get,
attributes:
attribute
get(int
["a"]
"g",
"()",
command,
100]
solution"
'='.
equation,
extract
[ri,
describing
ci
333
parentheses.
mouse.
'm',
cols,
occupies
'f',
walked
bash
[[0,1],[0,2],[1,2]]
8000
(10000
7000
10)
card,
plays
draw,
0.60000
gains
drawing
val2.
[1,4,3]
distributed
('0'
colors:
resolve,
function's
50);
wish
promises
increment.
rejected
cancelled,
thrown
};
'z')
brown
quick
'f').
fox
lazy
serving
batch
2nd,
high,
"ee"
96
[1,0,0,1,0,1],
[1,0,0,0,1,1]
newly
sentence"
-200
collide.
convex
3/1
obj
[5,5,5].
street,
placed,
result[1]
result[0]
|5-5|
|3-5|
[4,1]
descendants
300].
record.
"+"
["1","c"]
"-2"
["5","-2","4","c","d","9","+","+"]
15].
operations[i]
-4].
["5","2","c","d","+"]
invalidate
"9"
-2].
[-3
104,
"+",
"sad"
element)
t2
depth.
answered
(3,4,5)
(3)
|xi
|val|
xj|
yj]
manhattan
used,
creating
largest,
"333".
"2300019"
"6777133339"
"42352338"
"777"
"777".
[15]
100th
continuously
course,
durationi
times.length
send
times[i]
times[i].length
6000
nokia
sold.
2009
sale_id
2008
2011
+---------+------------+------+----------+-------+
quantity,
(sale_id,
year)
locked
'1's.
unchanged
s[4]
queen
'q'
[4]]
kthlargest(3,
kthlargest
"add"]
kthlargest(int
kthlargest.add(10);
["kthlargest",
kthlargest.add(3);
kthlargest.add(9);
kthlargest.add(4);
kthlargest.add(5);
capital,
sequences.
listnode
meir
(id,
"00100",
"1101",
[4,1,2,3]
100000
rounding
+-------------+----------+
hercy
employee_id.
1024
bookings[i]
bookings.length
[10,25]
lasti,
[10,55,45,25,25]
reserved:
seatsi]
bookings,
[[1,2,10],[2,3,20],[2,5,25]],
seats:
labels:
bookings[i].length
seatsi
lasti
[[1,2,10],[2,2,15]],
[[2,1],[2,2]]
["4","7","6","4"].
251
trimi].
["102","473","251","814"],
[[1,1],[2,3],[4,2],[1,2]]
[2,2,1,0]
["02","73","51","14"].
remain.
["24","37","96","04"],
["2","3","1","4"].
[ki,
"02"
radix
trimi
kith
problem?
uniquely
num1,
0011
d.push(21);
dinnerplates(int
d.pop()
now:
"popatstack",
popatstack.
popatstack(int
[[2],
[21],
capacity)
dinnerplates
d.push(4);
d.popatstack(2);
d.push(1);
d.push(2);
﹈
d.push(5);
[20],
dinnerplates(2);
d.push(20);
d.popatstack(0);
["dinnerplates",
d.push(3);
30);
|6
orders:
starti,
trip,
2x2.
[[0,1,1,0],[0,1,1,1],[1,1,1,0]]
2x1.
3x2.
1x2.
1x3.
[[1,0,1],[1,1,0],[1,1,0]]
3x1.
1x1.
school
[0,1,0,1]
students[i]
[1,1,1,0,0,1],
students.length
→
[2,4,2]
elements),
[4,2,3,7,2,1,4]
elements'
goal.length
modifies
[1,4,2,3],
directly,
subsets.
[[],[0]]
set).
solutions:
[4,4,4].
together,
cup
quarter
33,
(which
equally,
[1,7],
[1,1,6],
f(3)
connections.
network.
[[1,3]]
garden,
[7,1]
[4,2]
abs(4
abs(0
[1,2,3,null,4]
"11106"
"aajf"
represent.
"*"
decoding
mapping:
a-z
ways).
"kjf"
"06"
06)
grouping
"06".
"26"
"8",
into:
"h",
(a)
"(())"
"()()"
rule:
cousin
[0,0,0,7,7,null,11]
cousins'
[5,4,9,1,10,null,7]
-1].
[5,7,7,8,8,10],
"11001"
"234",
password:
recent
incorrect.
"345"
"012",
"01100"
peculiar
unlocks.
"345",
4096
"10011",
"012345":
safe.
[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
[[1,1,0],[0,0,1]]
[[1,0,1],[0,1,0]],
[2,2,1,1]
1-st(lower)
colsum.
lower.
0-th(upper)
upper.
[[0,1,1],[1,0,0]]
[2,1,2,0,1,0,1,2,0,1]
column(0-indexed)
colsum[i],
mail
quarz#2020@leetcode.com
marwan
shapiro
sally
underscore
(upper
david69@gmail.com
'_',
bella-@leetcode.com
#
dash
+---------+-----------+-------------------------+
winston@leetcode.com
.shapo@leetcode.com
e-mail
'@leetcode.com'.
jonathanisgreat
sally.come@leetcode.com
domain.
annabelle
root2.
[1,3,2,5],
[2,1,3,null,4,null,7]
[3,4,5,5,4,null,7]
floor(nums.length
[0,3,5]
[1,2,1,2,6,7,5,1],
[1,2,1,2,1,2,1,2,1],
dashes
[3,4,5,6]
[3,1,2,4,5],
[[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
"road
"ddinggo".
keyword.
"freedom
spelled,
ring.length,
quest
pressing,
engraved
fallout
key[i]:
spelled
metal
button.
key[i].
ring"
(next
stage).
"12:00"
purpose
spelling.
key[i]
"gd"
freedom"
stage
"godding"
spell,
dial
"godding",
door.
arr[i-2]
k-increasing,
[4,1,5,4,6,5].
arr[3]).
arr[1])
arr[i-k]
[2,2,3,4,4].
[4,1,5,2,6,2],
suboptimal
arr[i-3]
["0","0","0","0","0"]
["1","1","0","0","0"],
["1","1","1","1","0"],
["0","0","0","1","1"]
(water),
["0","0","1","0","0"],
["1","1","0","1","0"],
'1's
returnedarray[i]
array.map
plusone);
constant()
plusi(n,
map(arr,
[10,20,30],
resides
[42,42,42]
i;
notes:
[1,-2,1],
[-1,-2],
jewels.
jewels.length,
"aaabbbb"
jewels,
[[0,0,0],[0,1,1]]
selected.
[[0,0],[1,1],[0,0]]
work.
url
url.length
"cbc"].
"cac",
"bac",
"abcbabcbcb"
'c'].
"ababbc"
(string
["aba",
[-2,-1,3,6],
[2,-1,3,4],
[8,6,2,4]
nums[indexi]
[[1,0],[-3,1],[-4,0],[2,3]]
[vali,
indexi].
vali,
[[4,0]]
[-2,-1,3,4],
[2,2,3,4],
indexi
rounds,
[2,2,3,3,2,4,4,4,4,4]
[6,5,4,3,10]
[7,4,9]
illegal
[["1"]]
[["0"]]
[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
"abbacc"
"cc"
"leeeetcode"
"aacc"
scenarios,
1+1,
[3,1,2,10,1]
1+1+1,
1+1+1+1,
[1,3,6,10]
runningsum[i]
1+2+3+4].
sum(nums[0]â€¦nums[i]).
1+2+3,
1+1+1+1+1].
[3,4,6,16,17]
1+2,
2020-06-02,
basketball,
+------------+----------+------------------------------+
comma.
2020-06-01,
activities:
t-shirt),
(mask),
bible),
basketball,headphone,t-shirt
2020-06-01
bible
2020-05-30,
sell_date
2020-06-02
market.
bible,pencil
(headphone,
sell_date.
num_sold
2020-05-30
(pencil,
headphone
[1,5,10],
patch.
add/patch
patches
participating.
competes
firstplayer,
(player
winners
firstplayer
over,
lined
(ascending
secondplayer
secondplayer,
price[i],
special[i][n]
1b
special[i][j]
needs[i]
offer
needs.length
sell.
[[3,0,5],[1,2,10]],
[[1,1,0,4],[2,2,1,9]],
1c.
buy.
#1),
offer.
special[i].length
2b,
offers.
2b.
1b,
2a
3a
,2b
1a
#2),
(special
2b
2a.
0b
offers,
1c,
array)
15|,|10
[15,11,3,0].
leftsum[i]
[|0
[0,10,14,22]
3|,|22
[15,1,11,22].
0|]
11|,|14
rightsum[i]
[15,1,11,22]
rightsum
rightsum[i]|.
leftsum
|leftsum[i]
[10,4,8,3]
[2,4,9,3],
[7+1+4,
[12,5,6,13]
1+4+5,
code[n-1].
4+2,
[3+9,
defuse,
-(n
negative,
code[0],
bomb!
5+7+1].
around.
code[i]
9+4].
code[0]
[5,7,1,4],
4+5+7,
out!
circular,
informer
code[n-1]
[12,10,16,13]
118505380540.
505379714
"11011",
"1101110010111011110001001101010111100".
505379714.
movecost[i][j]
[[5,3],[4,0],[2,1]],
[[5,1,2],[4,0,3]],
movecost[i].length
movecost.length
[[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
[[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
movecost
expends
fallen
purposes
"rr.l"
"ll.rr.llrrll.."
upright.
forces.
sides,
".l.r...lr..l.."
[1,2,4,5,3,6,7],
postorder[i]
[4,5,2,6,7,3,1]
postorder.length
"ccbccacc"
"ccaccbcc"
"am"],
"zf"
"abad"]],
"eizfeiam".
encrypted
word2)
encryption
"am".
"cadb",
"abad"
"adbc",
"encrypt",
"zf",
"eizfeiam",
decrypt(string
"abad",
["abcd"],
encrypts
"ei"
"decrypt"]
dictionary[i],
decryption.
'd'],
["ei",
encrypter.decrypt("eizfeiam");
["encrypter",
decryption
encrypter([['a',
encrypter
["eizfeiam"]]
"am"
encrypter.encrypt("abcd");
word1)
[[['a',
"cbad",
values[i].length
out,
carried
"dacb",
"abad"]);
"cbcd".
encrypter(char[]
encrypt(string
"badc",
piles[i].
"abacba".
"aaccba",
palindrome.length
"zbccba",
"aaccba"
matrix's
locations.
tracks
added,
called,
divisors,
distinct)
chessboard,
occurrences.
(0).
viewed
2019-08-02
2019-07-21
origin.
origin,
moves.length
moves[i]
elevation
capacity,
why
bus.
bus,
passengers
passenger
660.
122
[1,4].
deletions,
["bef",
3},
strs[0][1]
on).
answer.length.
(strs[0][0]
strs[1]
"vyz"].
strs[0]
["abcdef","uvwxyz"]
overlaps
[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
member
books
picky.
layer
layers,
map.
[[1,1]]
game:
arr[1],
"11101",
[1,0,3]
[0,2]:
[1,3,4,8],
queries[3]
|4-5|
queries[1]
[0,5]:
queries[2]
queries[0]
[4,3],
find(int
col2
looks
row1,
row2
col1,
row2,
like:
col1
row1
maxsum
maxsum.
balloon
colors[i]
color,
colors.length
[1,1,2,3]
types,
types.
(since
'm'
2500
'm'.
package
[0,1,2,3,4]
indexes
decrement
maxsize
maxnestingdepth
iterates
multi-dimensional
mid,
mid
painted.
endi,
12)
12],
factors.
"1010".
"99",
+-----------------+
140
elvis
2019-01-07
130
[1,1,2,2,2,3]
[startrow,
"u".
startrow,
left),
execute.
startpos
array).
newnums.
newnums
nums[i+1])
depicts
newnums[i]
moves:
endtime)
[starttime,
pointer.
reserved,
[3,8]
reserved.
adjacent,
spots
"abcdefghijklmnopqrstuvwxyz"
pixels
"sumrange"]
["numarray",
"sumrange",
numarray.sumrange(0,
sumrange(int
nums[right]).
nums[left
-3]
5]]
sumrange.
numarray
numarray(int[]
nums[left]
nums[2
[3,2,0,1]
definitely
answer[x]
logically
floating-point
256
partitions),
chunks,
chunk.
$15
change,
broken,
+----+---------+
one's
non-negative.
pattern.length
carpetlen
230
15)
2019-02-17
periods.
(product_id,
115
2019-03-31
o(log(n))
a2,
[5,2,3]
[5,7,5]
[[1,0,1],[0,0,0],[1,0,1]]
contents
202,
operation).
).
(
functions.
400ms.
met.
job.
"abcab",
"abcabc"
scenario.
16],
16);
order.length
language,
company's
"bcb"
lot
key.length,
foo
value.length
stamps
"111",
1/6
knight's
eight
updated
change.
root2,
prints
a:
console.
c:
printnumber
parameter
255
[[0,0,0],[0,0,0],[0,0,0]]
(1,2),
(0,0),
(1,0),
(0,2),
picture
[4,2,7,1,3],
words"
123,
"42"
non-digit
ignore
dates.
special,
5th,
jumping
...)
minimized
optimally
ordered.
via
differences,
|8
y],
y]
[[1,4],[2,5],[3,6]]
["hello",
arr[j
probability.
seat,
seats.length
ride
ride.
traveled
salary.
"sea",
"sea"
"eat"
this.
["a","aa","aaa","aaaa"]
xy
brick,
"leetcode.com"
y-axis
width.
(1,7),
220
grid[i][j],
floor:
orderings
col),
-2:
[3,9,20,null,null,15,7]
-1:
(row
days[i]
days.length
sub-arrays.
(16
stonevalue.
[7,7,7,7,7,7,7]
stonevalue.length
stonevalue[i]
lets
row),
dots
["a","b","c"],
{a
amounti
orders.length
else,
orders[i].length
"abc
600
exceeding
nums[0].
nums[n
month.
yyyy-mm-dd,
8],
fee.
sum(paths[i].length)
content.
files
content
scores,
island.
island,
29,
5*3
bi-directional
(0,1).
(2,4),
(1,1).
(4,4).
connections[i].length
(this
50000
york
counterclockwise,
[[1,0,0,0],
exists)
inner
'!',
expression[i]
'|',
','.
time.length
s[j]
'{',
']',
'}',
comparing
search.
arrive.
flowers,
12:
days:
function_id
recursively.
[1,2,3,4,5,6,7,8,9,10],
[2,3,4,5],
"abcabcabc"
arr.length,
[0,3]
army
elements:
unmarked
it:
inclusively.
activity_type
list2.
100.0
[1,4,2]
0))
speed,
0.6
warehouse,
puts
8);
leetcode"
(non-empty)
[0,1,2,3,4,5],
restrictions
[1,3,1,2]
example).
[1,3,5,7]
instructions.
hidden,
[-2,
upper]
[lower,
nums[j]|
"h"
[0,0,0],
[3,4,5,1,2]
[[2,2,2],[2,1,2],[2,2,2]]
cubes
face
"baab"
48
15]
!==
4]]
traversing
transforms
arr1.length
>.
[3,2,2]
(xj,
inside.
circle,
permute
[2,3,6,7],
(4-1)
(3-1)
nums1,
nums1[2]
nums1[3]
"is"
"what
sentences.
"the",
grid[r].length
positioni
[positioni,
fruit
x-axis,
[-1],
[-1].
$100.
list2.length
ball.
[-1,0],
manages
[[5],
{};
number)
func
0's).
"01".
asteroids.length
asteroid,
asteroids[i]
200ms.
date.now();
roads.length
country.
(0,3)
roads[i].length
roads[i]
"leetcode
[0,2],
"ababa"
[1,2,3,7]
"day"
x=5,
engineer
inputs:
(bst).
tournament,
ages[i]
ages.length
bound
bonus.
vals.length
vals[i]
vals
path).
+---------+
math
[x1,
"of",
"aaab"
[10,11,12]
action
timei]
xj
"y"
statement.
index:
"abca"
[nums[i],
partition.
r)
person's
"bob"
fill.
fill,
preorder,
[1,null,3]
dec
jan
't'.
subordinates
subordinates.
relationships
[3,2,2],
(but
indices[i],
[9].
occurred
2k
original.
answers[i]
inputs[i][j]
terms,
inputs.flat().length
parameters
efficiency
warehouse
free,
"bab".
specify
customer's
score[i]
('1'
mines.
mines
arriving
constructs
"insert",
cm
xii,
'v',
xxvii,
"mcmxciv"
numeral
900,
principle
(1000)
iv.
usually
xc
iiii.
"lviii"
numerals
(50)
(500)
ix.
ii.
1994
nine,
numeral,
xx
[1,2,3,6]
-9
staircase.
cost,
9999
(every
tells
train
0.66667
kilometers
[1,0,48,null,null,12,49]
[4,2,6,1,3]
alternating.
alternating,
"1110"
"0100"
miles
destination,
drive
[1,3,5,4,7]
s[k]
[7,6,8]
endtime.length
endtime[i]
starttime[i]
starttime.length
viewing
increased
red.
[1,3,4].
"example
trees,
cell).
tree's
through,
(5,4)
(5,3),
[7]]
nums2)
4]],
4]);
(4,4)
quantities
heighti]
heighti
properties
everybody
then:
manner.
"()".
[[0,1],[1,1]]
satisfied,
nums[index]
distributions
input,
cherries
cherries,
111,
val]
freq
selection
"123".
number.length
|x
y|.
3-
1-
2-
vj]
uj,
guesses,
guessed
guesses.
[0,4],
endi.
25).
[6]
[[1,1],[2,2],[3,3],[4,4],[5,5]]
earned
["leetcode"],
$11
advance.
travel.
1100
seem
leaf.
(0,0).
(1,2).
monitor
words[j].
"k"
s[i+1]
"ea"
third:
second:
first:
union
"aaaaaa"
graph[i].length
graph[i][j]
ans[1]
ans[0]
range,
(2,1).
9:
65
[1,3,1],
achieved.
"abaca",
took
long.
returns:
matches.
(3,1)
wins,
expressed
[2,0,1]
closer
winner.
forest.
accounts.length
accounts[i][j]
accounts[i].length
scheduled
serialized
$6
dollar
retrieves
joined
remaining,
unlimited
interface:
looking
isfull()
isempty()
[[3],
isempty,
"isfull",
isfull.
"x",
earned.
frequently
axes.
programming
home,
121,
92
[[1,0,0],[0,1,0],[0,0,1]]
bst's
coli
[[4,
155.
509.
2102.
1575.
867.
1741.
953.
896.
2119.
1402.
1621.
845.
1855.
states
1884.
2574.
1889.
81.
1253.
575.
1174.
1370.
regions
640.
662.
1331.
negabinary
1926.
2527.
2257.
2349.
thousand
1521.
1854.
1041.
1247.
818.
958.
1004.
2419.
1226.
2260.
2116.
722.
1928.
874.
1078.
646.
520.
51.
1745.
304.
1115.
2523.
1397.
1395.
2413.
1090.
780.
additions
2-bit
789.
1896.
2645.
2208.
2236.
829.
648.
331.
1075.
626.
1139.
1725.
2606.
2306.
1003.
2566.
967.
1071.
1456.
1373.
1632.
508.
2612.
97.
675.
1610.
corporate
91.
2274.
1105.
1640.
1898.
556.
2515.
1218.
752.
875.
718.
1903.
2597.
1608.
682.
883.
2617.
2267.
66.
2605.
677.
610.
1922.
977.
slowest
1413.
2269.
2251.
880.
similarity
losses
2512.
637.
1438.
547.
2525.
2441.
650.
sender
2276.
1124.
1416.
1278.
71.
2150.
92.
1033.
2598.
2649.
1563.
585.
2233.
983.
1079.
988.
2650.
categorize
1263.
1432.
1453.
2446.
834.
761.
1806.
898.
779.
1530.
152.
2622.
188.
786.
851.
wiggle
1204.
621.
2501.
2283.
777.
312.
961.
844.
1703.
1252.
1-bit
1805.
zero-filled
321.
1289.
1189.
scheduler
65.
698.
2449.
736.
1937.
1032.
192.
1465.
831.
868.
2101.
1718.
1357.
619.
1380.
832.
1260.
1109.
1040.
2630.
1583.
1249.
2111.
1541.
2644.
1096.
82.
1534.
955.
984.
2295.
328.
1050.
537.
669.
1162.
1342.
1012.
2106.
1305.
validate
893.
1484.
1291.
1556.
2338.
1642.
colorful
865.
1155.
1743.
prototype
aware
1206.
1178.
1493.
306.
598.
2299.
1016.
2429.
1061.
962.
975.
976.
1254.
2531.
brace
748.
1497.
67.
1895.
1192.
2561.
810.
1625.
2115.
840.
330.
1839.
1300.
1834.
350.
1615.
eventual
2227.
solver
2343.
1509.
1938.
1420.
657.
buddy
1492.
2401.
1104.
actors
gold
tables
1478.
2427.
606.
1366.
stacking
1436.
2592.
194.
2259.
2139.
525.
2625.
2270.
2140.
1616.
2223.
594.
2148.
341.
1034.
85.
doubled
2336.
1122.
2121.
699.
1648.
2537.
1110.
633.
1705.
1378.
1582.
1051.
864.
1505.
1590.
1290.
589.
reducing
1339.
787.
1909.
1595.
2435.
1807.
bbb
2311.
1801.
1527.
basic
2516.
aaa
970.
2608.
667.
1531.
1848.
838.
78.
806.
2350.
2337.
952.
2587.
1866.
2415.
1675.
powered
515.
?'s
2442.
2147.
86.
676.
848.
ordinal
2448.
1560.
1731.
1008.
1929.
857.
1483.
542.
pooling
inequality
2601.
1318.
2559.
1934.
315.
781.
1039.
2404.
679.
1044.
1157.
viii
1408.
1417.
2624.
153.
1208.
2541.
1523.
rotting
servings
brainpower
1856.
2521.
2132.
670.
980.
1128.
839.
destroying
2134.
2289.
2109.
2310.
lisp
1562.
comparisons
754.
1129.
1912.
1704.
1191.
765.
595.
862.
1022.
1510.
1006.
leak
1656.
48.
2607.
1888.
2131.
1870.
1819.
2266.
2569.
1735.
173.
989.
2423.
1544.
1685.
1348.
1116.
347.
diminishing-valued
1411.
2294.
1388.
2610.
1742.
1310.
2565.
mismatch
1678.
1568.
1023.
2255.
1217.
1661.
2507.
1026.
1710.
998.
93.
2602.
4sum
croaking
2571.
540.
throne
k-concatenation
1717.
684.
1169.
303.
1496.
960.
2215.
2209.
2290.
2312.
1470.
1404.
712.
2411.
1619.
1340.
1418.
1029.
2506.
607.
negations
cracking
986.
1466.
1307.
785.
1604.
tuple
directors
335.
2544.
1818.
1539.
2580.
1739.
87.
1629.
1172.
1631.
757.
1592.
1409.
46.
supersequence
2130.
2514.
1679.
1106.
1140.
2433.
2334.
traffic
1387.
1830.
1815.
1103.
1400.
1659.
1477.
2406.
521.
313.
1130.
576.
masking
mutated
1295.
181.
human
2447.
1319.
611.
1304.
1542.
2207.
1117.
buzz
63.
1900.
2327.
completeness
841.
630.
1600.
1328.
1446.
expressive
1537.
1306.
1486.
861.
1664.
partitioning
1299.
1463.
plate
746.
1673.
771.
2347.
1368.
797.
tour
1344.
1863.
transition
2222.
2536.
563.
319.
1141.
taxes
706.
668.
2309.
528.
1637.
1647.
609.
deep
1707.
888.
1365.
1037.
2284.
2648.
1668.
1736.
1476.
1277.
805.
2632.
2635.
2575.
1164.
1941.
1148.
1431.
886.
1145.
conflicts
885.
1609.
1042.
887.
517.
1461.
1733.
1381.
2405.
518.
645.
1641.
316.
564.
1838.
parsing
1156.
formation
1904.
2348.
1457.
825.
1410.
1471.
337.
690.
695.
1620.
1175.
826.
608.
1356.
2437.
197.
2145.
1343.
1337.
191.
1187.
1579.
846.
2331.
trapping
951.
783.
1346.
513.
856.
2629.
1701.
2552.
1927.
2273.
1223.
1108.
963.
632.
spliced
chunked
1526.
1690.
1327.
639.
summary
1081.
560.
1352.
2634.
1930.
196.
1850.
1203.
1567.
2241.
1711.
2335.
1316.
1382.
1844.
674.
1499.
1536.
2213.
1638.
322.
1847.
61.
853.
1043.
881.
802.
687.
820.
172.
89.
833.
2108.
792.
2239.
1360.
appearing
1200.
1017.
665.
1528.
559.
1372.
1670.
324.
622.
824.
1727.
581.
1464.
1671.
2412.
997.
566.
1455.
539.
1221.
2278.
1261.
1654.
816.
166.
1726.
769.
2555.
1433.
899.
1833.
2315.
503.
2344.
stamping
741.
equalize
centre
1425.
1321.
1883.
732.
dependencies
1143.
durations
reinitialize
743.
1862.
795.
572.
1828.
2104.
1018.
stairs
2517.
2293.
bipartite?
1074.
697.
837.
601.
1749.
1945.
2591.
2410.
1518.
1262.
557.
1376.
1311.
858.
1154.
1375.
1639.
895.
decompress
1588.
1694.
836.
1716.
2642.
sideway
2235.
803.
tiling
1861.
1276.
553.
1574.
multithreaded
2103.
171.
sqrt(x)
791.
2545.
53.
815.
scheduling
1019.
1227.
1434.
2318.
866.
1869.
1519.
1552.
671.
1748.
1859.
724.
628.
1893.
1190.
reversal
1302.
1201.
2414.
1546.
enclaves
echo
62.
860.
310.
1238.
504.
1329.
1406.
523.
1669.
reduction
973.
1210.
1491.
842.
2120.
892.
1123.
2560.
1860.
2240.
728.
2611.
1901.
1734.
length-3
1030.
1458.
2440.
2620.
2124.
2528.
2615.
2217.
2114.
1255.
2619.
83.
1449.
1598.
753.
2342.
2549.
1845.
summing
55.
1-bordered
991.
grids
641.
1111.
1401.
1361.
rising
(atoi)
1052.
1009.
2628.
1880.
2439.
2325.
1680.
1224.
178.
1163.
2600.
1846.
1005.
reward
1424.
514.
connectivity
1658.
721.
memoize
1691.
623.
1864.
811.
1068.
773.
1503.
617.
526.
794.
1719.
1617.
1498.
1209.
sheet
1444.
1293.
1944.
956.
1633.
filesystem
2509.
1614.
1138.
680.
2407.
1073.
2614.
2640.
897.
2127.
691.
764.
661.
2402.
586.
1248.
561.
1887.
2304.
535.
2287.
1559.
1925.
reorganize
2305.
1146.
1219.
1712.
floored
1502.
1946.
1325.
1504.
1315.
justification
1577.
336.
1326.
restore
1744.
854.
344.
1601.
2646.
verbal
558.
1657.
2138.
1407.
796.
689.
2430.
1558.
1092.
1851.
1584.
2633.
budget
1472.
2567.
710.
1738.
2326.
2621.
1881.
1422.
1882.
1921.
1170.
1014.
847.
2426.
1525.
texts
1284.
522.
812.
1817.
954.
2616.
substitutions
1545.
1824.
1688.
1890.
1687.
2639.
2581.
1948.
k-subarray
345.
2444.
1475.
1653.
1894.
1514.
843.
dining
1309.
1392.
1362.
859.
602.
982.
1239.
1235.
715.
686.
349.
1667.
1681.
2572.
immutable
1932.
1683.
959.
1297.
1242.
1179.
872.
1553.
patching
307.
1589.
1721.
729.
877.
1587.
2503.
toe
1317.
1665.
pyramid
1857.
1942.
814.
778.
879.
vegan-friendly,
atoms
1576.
957.
1287.
travellers
2149.
1160.
1007.
889.
straights
2202.
2220.
599.
2261.
167.
fizz
1508.
1467.
1025.
747.
2300.
733.
981.
1693.
1849.
freedom
696.
2258.
1399.
972.
2511.
analysis
2502.
52.
762.
ambiguous
1591.
2234.
2522.
1915.
1144.
1038.
1572.
2341.
web
1054.
2595.
2144.
1048.
1517.
2609.
detonate
1452.
1386.
162.
1622.
964.
lr
1371.
2570.
1865.
974.
bigram
1131.
658.
1447.
652.
2296.
bombs
1480.
orderly
1080.
distant
72.
1652.
erect
odds
judgement
1084.
2146.
1335.
2584.
2328.
1507.
1832.
1093.
defanging
2563.
n-th
1829.
1233.
979.
k-group
782.
894.
1578.
1405.
649.
1013.
ii:
2203.
1036.
343.
1423.
1827.
884.
satisfiability
1593.
illumination
1330.
2135.
151.
2623.
2546.
2538.
2279.
1594.
871.
195.
2133.
725.
1547.
2265.
2416.
2245.
770.
550.
2558.
appropriate
638.
739.
preimage
1835.
1234.
1451.
2244.
1094.
1606.
1341.
abbreviating
1333.
verify
1557.
1489.
packaging
1494.
toeplitz
univalue
502.
583.
2576.
1353.
1072.
1923.
2250.
827.
2508.
160.
1573.
mk
175.
1879.
1338.
h2o
referee
2529.
551.
1268.
2578.
552.
1250.
1389.
stitching
provinces
2281.
1158.
2535.
541.
1267.
2532.
2518.
182.
2585.
2568.
1488.
655.
707.
567.
2212.
2224.
1473.
720.
1728.
1298.
1403.
2438.
1288.
798.
701.
1706.
176.
1320.
1913.
189.
switcher
2303.
2221.
1359.
transformable
1720.
countries
1020.
1947.
2117.
1626.
1686.
2125.
2577.
538.
2-row
672.
784.
966.
colony
516.
58.
1312.
1812.
852.
969.
1878.
2264.
2593.
177.
1722.
1695.
2579.
849.
2211.
univalued
1611.
1332.
664.
636.
2316.
1266.
506.
793.
1010.
1296.
1920.
1702.
2288.
180.
existence
1047.
591.
1663.
1814.
1630.
584.
2129.
745.
2631.
965.
1363.
1655.
653.
1383.
1873.
2596.
1732.
835.
654.
2110.
2248.
69.
678.
2443.
2285.
1599.
2432.
735.
2275.
1046.
1906.
183.
2225.
1605.
1907.
57.
1437.
past
2286.
2210.
2526.
342.
828.
2280.
1393.
2626.
2594.
1280.
993.
2246.
1313.
1649.
592.
2424.
bipartition
reflection
332.
164.
curry
863.
1275.
1823.
2226.
1439.
1700.
1808.
1737.
2556.
84.
187.
174.
1385.
301.
2122.
2553.
1374.
1045.
775.
2271.
94.
1513.
2141.
830.
1696.
1512.
1358.
713.
1585.
790.
532.
309.
519.
2583.
1137.
2520.
590.
1540.
1237.
968.
2513.
79.
529.
2530.
1024.
3-same-digit
1876.
971.
1535.
185.
1125.
splitted
2425.
2322.
2550.
1646.
1520.
1049.
1674.
749.
race
2302.
731.
756.
804.
1114.
1935.
817.
740.
1301.
2618.
1672.
1251.
2256.
1482.
2321.
3sum
1015.
1220.
600.
k-th
329.
shuffle
154.
891.
1379.
801.
1186.
808.
38.
intersections
1283.
1354.
1750.
1377.
bounded
2409.
vii
1627.
1581.
198.
850.
703.
1027.
1171.
1877.
507.
685.
2562.
1177.
1905.
1460.
1314.
2262.
554.
992.
1569.
edit
2643.
873.
2603.
2554.
2641.
1911.
334.
2136.
2218.
1001.
659.
1448.
constrained
705.
1561.
2319.
1349.
511.
1222.
501.
1414.
1822.
543.
1193.
570.
1282.
823.
1899.
2588.
2301.
1095.
1910.
577.
1515.
996.
1487.
813.
1943.
2564.
709.
2317.
1323.
2589.
1396.
788.
1390.
dinner
2543.
338.
744.
2586.
2542.
2573.
1028.
809.
mirror
726.
clone
730.
1232.
1419.
1391.
1481.
2418.
2243.
2540.
1603.
1813.
subdivided
1031.
1035.
990.
985.
1550.
2332.
714.
2242.
1529.
88.
1334.
crawler
77.
1070.
2547.
1729.
1347.
1281.
recurring
n-repeated
1816.
2333.
2637.
1524.
1713.
766.
1636.
1684.
2231.
821.
693.
1566.
1802.
719.
suggestions
168.
767.
1886.
earning
1450.
318.
179.
1723.
1053.
69
2320.
692.
identifier
rich
878.
1292.
1207.
1872.
2232.
1443.
1936.
39.
1643.
98.
647.
193.
1286.
629.
1916.
978.
1871.
1185.
1367.
1462.
1442.
717.
2636.
530.
1089.
882.
1184.
1002.
1091.
2434.
2272.
605.
1240.
1825.
1931.
995.
coloring
1394.
627.
day?
k-sum
simplify
2249.
1689.
165.
593.
1624.
1662.
incremental
704.
1415.
investments
2201.
1345.
688.
169.
1351.
1803.
2582.
camelcase
1021.
738.
327.
2551.
2206.
822.
1324.
1914.
1897.
994.
2126.
987.
1840.
565.
768.
1269.
options
855.
819.
1195.
2420.
876.
trainers
643.
2421.
1441.
1697.
524.
2428.
587.
620.
1147.
loud
extracted
870.
2627.
869.
2105.
2216.
1837.
799.
1211.
1161.
preferredj
minsizej
[5,2]:
[preferredj,
[[2,2],[1,2],[3,2]],
[3,3]:
sizei,
sizei.
[roomidi,
roomidi,
minsizej,
[[3,1],[3,3],[5,2]]
[3,-1,3]
[[2,3],[2,4],[2,5]]
preferredj)
abs(3
minimized,
sizei]
roomidi
hotel
minsizej].
abs(id
[3,1]:
[2,4]:
[[1,4],[2,3],[3,5],[4,1],[5,2]],
"moon"
"luffy
joyboy"
moon
"joyboy"
[5,25]
[40,25]
array.last()
nums.last()
histogram's
histogram.
[2,1,5,6,2,3]
[[2,1],[2,2],[3,4],[1,1]],
sight.
vision
obstruct
determining
posy]
posy,
posx
[[2,1],[2,2],[3,3]],
[posx,
posx,
angle,
angle/2].
angle/2,
view.
rotate.
location.length
[[1,0],[2,1]],
360
posy
see.
view,
shaded
[d
subtexti
"(merchant)".
"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".
"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)".
(subtext1,
"merchant"
"ghiabcdefhelloadamhelloabcdefghi"
subtext2,
subtextk
text).
k).
subtextk)
subtext2
"antaprezatepzapreanta"
subtext1
nums1[i].length
[[1,4],[3,2],[4,1]]
vali]
[[1,3],[4,3]]
vali.
[[2,4],[3,6],[5,5]],
ids,
[[1,6],[2,3],[3,2],[4,6]]
nums2[j].length
[[1,2],[2,3],[4,5]],
[[1,3],[2,4],[3,6],[4,3],[5,5]]
gcds.
[2,5,10]
[5,15,40,5,6]
[4,6,16]
[1,2,1,2,4,1,5,10].
[6,10,3]
functionality
press,
off]
presses,
...).
[on]
on]
press.
buttons
3k
presses.
[off]
bulbs.
statuses
([5,1],
[3,5,1,4,2,-9])
[-1,3,5,1,4,2,-9],
target(2).
section,
[0,0,0,0,0,0,0,0,1,1,1,0]
alicearrows[i],
alicearrows.length
sections
bobarrows.length
numarrows.
[0,0,0,0,1,1,0,0,1,2,3,1]
bk
bk,
alicearrows
bobarrows
[1,1,0,1,0,0,2,1,0,1,2,0]
scored.
sum(alicearrows[i])
shot
numarrows
bobarrows[i]
ak
[0,0,1,0,0,0,0,0,0,0,0,2]
11),
shoots
scoring
opponents
[3,6,9,1]
form.
[1,3,6,9],
(3,6)
successive
jim
gardens.
flowers[i],
newflowers,
[3,6,2,2].
partial.
[2,4,5,3],
incomplete
newflowers
[5,4,5,5].
caretaker
[1,3,1,1],
additionally
complete.
beauty.
(1,0,2),
nums2[k].
nums1[1]2
nums2[i]2
nums1[3]2
nums1[1].
nums2.length.
[7,4],
nums1.length.
nums2[3]2
(3,0,2).
nums1[k]
(1,1,2).
[5,2,8,9]
(1,0,1),
(0,0,1),
(2,0,1).
[1,2,9,7]
[7,7,8,3],
nums1[k].
nums1[i]2
nums2[2].
nums2[k]
(3,0,1).
(0,0,2),
[-7,-1,1,3,4]
[-5,-1,1,2,3]
[-3,-1,2,-2,4].
[4,1,3],
[3,1,7]
nums[3].
[0,5,3]
[5,0,3,4,0]
[1,3,1,1,2]
[2,2,2,0,1]
[4,5,6,7,0,1,4]
[0,1,4,4,5,6,7]
[[0,1],[2,2],[1,4]]
rowj
coli,
[[0,1],[1,0],[2,1],[1,2]]
walls.length
obstructed
guard
guards[i]
guards.length,
colj]
[[0,0],[1,1],[2,3]],
[[1,1]],
guarded.
west)
guards[i].length
walls[j].length
guard.
guards.length
walls[j]
meetings.length
[[1,20],[2,10],[3,5],[4,9],[6,8]]
meetings[i]
[[0,10],[1,5],[2,7],[3,4]]
meetings
meetings[i].length
[10,12).
unused,
[5,10).
[10,11).
unused
meetings,
endi).
delayed.
[5,2,6,2,3,2]
bottoms.length
rotations.
indicated
[3,5,1,2,3],
tops[i],
tops[i]
domino,
tops.length
tops
[2,1,2,4,2,2],
bottoms
[3,6,3,3,4]
bottoms[i]
bottoms:
tile.)
"40"
k:
"240":
430043,
"430043":
240,
"43"
"30"
430043.
(taking
"04"
memory1crash
sticks.
memory2crash],
crashtime
faulty
[crashtime,
memory2crash
memory).
memory2
memory1crash,
memory1
memory1,
crashed
[6,0,4]
crashes.
consumes
stationary,
"rlrsll"
collision,
"llrr"
involved
collided.
directions.length
directions,
directions[i]
motion.
[2,1,1,5,6,2,3,1]
[1,5,6,3,1].
5=2+2+1
5=2+1+1+1
amount:
5=5
5=1+1+1+1+1
1440
"15:00".
digital
choices
producing
"59"
unknown,
"05:00"
"?5:00"
"23:59".
"25:00"
"0?:0?"
"??:??"
"00:00"
tallest,
["mary","john","emma"],
heights.
["bob","alice","bob"]
names,
john.
[180,165,170]
people's
[155,185,150]
emma
["mary","emma","john"]
["alice","bob","bob"],
"sunday"
"wednesday",
{"sunday",
"thursday",
1999
"monday",
"friday",
"saturday"}.
"saturday"
"tuesday",
mycalendartwo.book(10,
mycalendartwo();
mycalendartwo.book(25,
booked.
[40,
mycalendartwo()
["mycalendartwo",
mycalendartwo.book(50,
mycalendartwo
mycalendartwo.book(5,
40)
(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
(0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
4-directional
[[0,1],[2,0]]
(0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
walks
[[1,0,0,0],[0,0,0,0],[0,0,0,2]]
non-obstacle
'//')
"/../"
'..')
go.
'/')
no-op,
"/home//foo/"
'...'
slash
'..'
"/home/foo"
refers
"/home"
"/home/"
unix-style
file/directory
canonical
[4,3,10,9,8]
[10,9]
(14
[7,6,7]
[7,7]
[4,4,7,6,7]
[7,7,6]
matrix[x][y]
[[0,1,0],[1,1,1],[0,1,0]],
[[1,-1],[-1,1]],
submatrix.
-10^8
2x1
(x1',
1x1
2x2
submatrices,
y2')
10^8
x2',
matrix[i]
y1',
1x2
[[904]],
x1'.
y1=3,
[1,4,2,3,3,2,4,1]
x2=5,
[2,5,1,3,4,7],
[2,3,5,4,1,7].
x1=2,
[x1,y1,x2,y2,...,xn,yn].
x3=1,
y3=7
[1,2,3,4,4,3,2,1],
[x1,x2,...,xn,y1,y2,...,yn].
[2,3,5,4,1,7]
y2=4,
"99e2.5",
"-0.1",
"1e",
"-.9",
"--6",
order):
["2",
"3e+7",
"-90e3",
"0089",
(optional)
"-123.456e789"],
"1a",
"53.5e93",
"+3.14",
"+6e-1",
"2e10",
"e3",
"4.",
'-').
"95a54e53"].
"-+3",
[false,false,false,false,false,false,false]
hasapple.length
apple;
[[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]],
hasapple,
hasapple
[false,false,true,false,true,true,false]
hasapple[i]
[false,false,true,false,false,true,false]
[1,1,2,3,5]
[7,5,4,100],
[[1,2],[3],[],[]],
containedboxes[i][j]
status,
containedboxes
[1,0,1,0],
initialboxes[i]
[1,0,0,0,0,0],
[[],[],[1],[]],
keys[i].length
initialboxes.length
status[i]
containedboxes[i].length
keys[i][j]
1,2,3,4
containedboxes[i]
[[1,2,3,4,5],[],[],[],[],[]],
status.length
[1,1,1,1,1,1],
containedboxes.length
initialboxes
languages[i]
friendship
languages
[[2],[1,3],[1,2],[3]],
transitive,
friendships
teach.
languages[i].length
friendships[i]
[[1,4],[1,2],[3,4],[2,3]]
knows,
languages.length
users,
friendships.length
languages[i][j]
[[1],[2],[1,2]],
output?
explore
solutions.
file.
distance=4]
distancei].
filters.
price=30,
[id=5,
veganfriendly=1,
(ordered
veganfriendly=0,
[id=3,
distance=10]
restaurant).
[id=1,
distancei
rating=8,
ratingi,
rating=10,
distance=3]
maxdistance
price=40,
[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]],
veganfriendly
rating=1,
rating=4,
[id=4,
maxprice,
veganfriendlyi,
rating,
restaurants[i]
price=50,
price=15,
restaurants[i].length
(meaning
[id=2,
filtering,
maxprice
distance=1]
price=10,
veganfriendlyi
restaurants.length
[4,3,2,1,5]
distance=5]
houses,
{1,1}].
[1,2,2,1,1]
cost[i][j]:
neighborhood
houses[i]:
neighborhoods
[2,2,1,2,2]
[3,1,2,3],
[{2,2},
{1},
[0,2,1,2,0],
neighborhoods,
[1,2,2,3,3,2,1,1]
[[1,1,1],[1,1,1],[1,1,1],[1,1,1]],
[{3},{1},{2},{3}]
{2,2}].
{2},
{2,2},
{3,3},
[{1},
[[1,10],[10,1],[10,1],[1,10],[5,1]],
painted,
yet.
neighborhoods.
successor(x,
successor(king,
childname.
throneinheritance(string
"asha",
"matthew"],
["king",
successor(bob,
"getinheritanceorder"]
son
throneinheritance
throneinheritance("king");
matthew
childname,
curorder):
t=
(alice
"andy",
kingname.length,
someone
bob),
parentname.length,
t.birth("bob",
"catherine");
curorder)
successor(alice,
"matthew");
"alex");
who's
jack.
dead.
[null],
[["king"],
death(string
catherine
"andy"],
birth(parentname,
parentname
t.getinheritanceorder();
["king"].
childname.length,
curorder
member.
successor(x's
"alex"],
curorder:
["andy",
king,
"birth",
name)
"jack",
far,
[null]]
arguments
gave
["bob"],
"asha");
"bob");
childname)
parentname,
"bob"].
childname),
alive.
andy
kingdom
"andy");
"jack"].
t.birth("king",
death.
curorder),
asha
["bob",
well-defined
["throneinheritance",
"getinheritanceorder",
"catherine"],
getinheritanceorder()
"alice",
"alex",
"matthew",
birth(string
"catherine"]
"bob"],
born.
while,
grandchildren,
t.death("bob");
"death",
successor(jack,
"catherine"]]
t.birth("andy",
kingname,
oldest
kingname)
jack,
family
"asha"],
kingname
"alice"].
childname
inheritance.
getinheritanceorder.
acquire
["@.a..","###.#","b.a.b"]
locks.
lock.
["@..aa","..b#.","....b"]
locks
'@'.
key;
["@aa"]
properties.
"aaaaaaaa"
"cabac"
"aaaaaaaa",
[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
[10,4,6]
[2+3]
inc,
fancy.append(10);
"getindex"]
[13*2,
append(val)
7*2]
fancy.append(7);
fancy()
"getindex",
fancy();
idx
"append",
fancy.getindex(2);
fancy.multall(2);
[10+3,
17]
14+3]
addall(inc)
fancy.addall(3);
multall
["fancy",
fancy.append(2);
fancy.getindex(0);
multiplies
getindex.
getindex(idx)
10*2]
multall,
multall(m)
fancy.getindex(1);
inc.
append,
[26,
"addall",
"multall",
addall,
17*2,
[5*2,
"abciiidef",
"eet"
"lee",
vowels.
"aeiou",
[[0,3],[1,2],[0,2]]
indices(0-indexed)
"dcab",
"acbd"
pairs[i][0],
[[0,1],[1,2]]
explaination:
s[2],
[[0,3],[1,2]]
"bcad"
pairs[i][1]
s[1],
s[3],
t=120ms.
exceeded","time":50}
{"rejected":"time
async
fullfill.
milliseconds,
"error";
{"resolved":15,"time":120}
{"resolved":25,"time":100}
rejects
120));
"time
{"rejected":"error","time":0}
exceeded".
t=100ms.
await
"cdbcbbaaabab",
"cdbcba".
"cxbae".
"cdbcbbaa".
"aabbaaxybbaabb",
"cdbcbbaa"
"cdbcbbaaab".
"cdbcbbaaabab".
"cabxbae"
"cdbcba"
"cdbc"
"cdbcbbaaab"
"cabxe".
[3,4,2,3,4,7]
[3,4,2,3]
[1,0,5,3]
prime.
"3245"
"2582"
564908303
[1,1,2,3,3,4,4,8,8]
[3,3,7,7,10,11,11]
[2,8],
[[1,4],[3,6],[2,8]]
ri),
[[1,4],[2,3]]
274
[2,1,5],
[4,5,5]
[1,3,2,1].
806
1321,
[1,2,0,0],
1021
[2,7,4],
455
"gfd"
shift('z')
shifts[i]
"rpl"
"dbc".
shift()
shift('a')
"rpl",
"igc".
shift('t')
shifts.length
bigger,
hospital.
patient_id,
alain
diabetes
diab100
diab1
myop
yfev
diabetes.
diab201
+------------+--------------+--------------+
cough
patient_name
acne
'conditions'
george
patient_id
diab1.
"ur".
"pppz"
multiples
"holasss"
"ohhh"
"ag"
"love".
factorial(10)
clumsy(10)
arithmetic.
[[3,0],[0,3]]
cashbacki.
fail
cashbacki].
[[0,3],[3,0]],
[[2,1],[5,0],[4,2]]
transactions[i].length
cashbacki
costi,
[costi,
costi
[[3,0],[0,3]],
inputs):
[2,6,4].
[5,6,1,8,4,5],
intersectval
retain
[2,6,4],
lista
skipa
(3rd
[5,6,1,8,4,5].
lista[skipa]
[4,1,8,4,5],
intersect,
intersected
headb,
heads,
c1:
intersect).
(your
head)
heada
occurs.
[1,9,1,2,4].
correctly
listb[skipb]
listb
skipb
headb
[1,9,1,2,4],
a;
references.
returns.
memory?
[4,1,8,4,5].
1->4->5,
lists.length
1->3->4,
1->1->2->3->4->4->5->6
[[1,4,5],[1,3,4],[2,6]]
list:
lists[i][j]
[1,1,2,3,4,4,5,6]
lists[i].length
2->6
linked-list
lists[i]
"1|010|1"
"1|01|01"
"0|00|0"
"0|0|00"
"10|1|01"
"10|10|1"
"00|0|0"
"tbontb"
"hay"
coming"
n","s
g","t"]
m","t
"contest
"oerooe"
t"
"oro"
["cic","oso","n
(trailing
["tbontb","oerooe","
"weu"
t"]
i","e
["hay","oro","weu"]
[[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
targetgrid[i].length
[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
[[1,2,1],[2,1,2],[1,2,1]]
solid
targetgrid
targetgrid.length
turns.
targetgrid[row][col]
targetgrid,
[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
vertically,
apple)
pizza.length
cell)
["a..","a..","..."],
pizza.
["a..","aa.","..."],
horizontal,
["a..","aaa","..."],
pizza[i].length
two,
[23,2,4,6,7],
[23,
sum(nums[i])
[23,2,6,4,7],
horizontalcuts.length
[3,1],
horizontalcuts
cake.
h,
verticalcuts
cut.
verticalcuts[j]
verticalcuts.
horizontalcuts[i]
verticalcuts.length
min(h
cake,
verticalcuts[i]
min(w
"l*****e@leetcode.com"
letters)
"+***-***-***-xxxx"
"+*-***-***-xxxx"
"*****".
"***-***-xxxx"
'}
10-13
masked
asterisks.
"a*****b@qq.com"
"1(234)567-890"
"***-***-7890".
"***-***-7890"
somewhere
symbol,
email:
lowercase,
0-3
"+**-***-***-xxxx"
"ab@qq.com"
middle.
character).
"leetcode@leetcode.com"
{'+',
address:
this,
[1,2,3,0,0,0],
accommodate
[2,5,6],
[1,2,2,3,5,6]
[2,5,6].
merged,
lengths:
[1,2,1,10]
evaluations.
children's
[2,1,3,null,null,0,1]
(m+n)).
2.50000
"11100100"
s[1]]
[at
[occuring
s[3]]
consecutive,
"11011000"
[[1,2,3],[1,2,3],[1,2,3]]
30],
[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
[20,24]
[20,24].
3500
24,26],
labels[i]
numwanted
numwanted.
uselimit.
uselimit
[9,8,8,7,6],
labels.length
numwanted,
[0,0,0,1,1],
cannot.
(flip
[[1,0,0],[1,0,0]]
[[".","#","#"],
box[i][j]
gravity
["#"],
["#","#","*","."]]
obstacles'
[["#",".","#"]]
[["#","#","*",".","*","."],
["#","#","*"],
gravity.
["#",".","*"],
[".","#","#"],
side-view
inertia
["#","*","."],
box's
["#","#","#",".","#","."]]
["*","*"],
[["#",".","*","."],
[["#","."],
box[i].length
["#",".","."]]
[".","."]]
["#","#","#","*",".","."],
box.length
["#"]]
[["."],
[123,234]
13000
[1234,2345,3456,4567,5678,6789,12345]
"24241"
"24142"
"3242415"
"12345678"
"213123"
"231132"
sum(piles[i].length)
piles[i][j]
wallet.
[[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]],
denominations.
706
101.
[[1,100,3],[7,8,9]],
wallet
assorted
[2,-1,2]
circularly,
traversing-order
circularly
[2,3,4,-1,4]
nums[0]),
[1,2,3,4,3]
bcosti
interview
bcosti],
[[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
bcosti.
[acosti,
acosti,
1859
interviewing
[[10,20],[30,200],[400,50],[30,20]]
[[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
flying
3086
https://leetcode.com/problems/remove-duplicate-letters/
316:
[8,6,7,1,0]
"981"
"8760"
[8,1,9]
[[5,2],[1,6]],
edgelist.length,
qj
edgelist
disi]
pj,
[[0,1,2],[0,2,5]]
edgelist[i]
limitj],
edgelist,
[pj,
disi.
[[0,1,10],[1,2,5],[2,3,9],[3,4,13]],
pj
[[0,1,2],[1,2,4],[2,0,8],[1,0,16]],
disi,
limitj
[true,false]
[[0,4,14],[1,4,13]]
edgelist[i].length
qj,
"ana"
8)2
20)2
10)2
[5,8,6,9],
5)2
[2,10,20,19],
nums2[i])2
[1,4,10,12],
k2
579
579.
2)2
k1
(nums1[i]
k2.
k1,
19)2
7)2
9)2
directly-linked
tour,
himself
realized
[3,2,3,null,3,null,1]
thief
[3,4,5,1,3,null,1]
thievery
besides
-2.33333..
-2.7335
quotient
dividend,
truncated
losing
divisor.
3.33333..
range:
10/3
dividend
−
dealing
-231.
8.345
[−231,
7/-3
[1,2,3,4,null,5,6,null,null,7]
text2,
text1.length,
text2.length
["abba","cd","cd"].
words[1].
"dacb"
["a","b","c","d","e"]
["abba","cd"].
["abba","baba","cd","cd"].
["abba","cd"]
words[2].
["abba","baba","bbaa","cd","cd"]
"abdc".
anagrams,
"bbaa"
words[i
[[1,2,3],[0,2],[0,1,3],[0,2]]
u).
bipartite
(graph[u]
graph[u].length
graph[u][i]
sets:
graph[v]
graph[u],
undirected).
bipartite.
[[1,3],[0,2],[1,3],[0,2]]
graph[u]
boy
[10,6,8,7,7,8],
bars.
0,1,2,4
[1,6,3,1,2,5],
spend,
sweltering
[1,3,2,4,1],
sort.
afford
")((".
[[")",")"],["(","("]]
"()(())".
[["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
"))("
"((()))".
[0,2,0]
<--
machines.length
move:
[1,0,5]
dresses
dresses.
machines,
machines[i]
dress
[0,1,1,1,0,1,1,0,1]
[0,1,1,1,1,1,0,1]
[1,1,0,1,1,0,1,0]
"every
[1,1,0,1,1,null,1]
[1,0,1,0,0,0,1]
[1,null,1,null,1]
[1,null,0,0,1]
[1,null,0,null,1]
1".
's':
'mg':
order),
"mg(oh)2"
1}.
{'k':
formulas
"k4n2o14s4"
"(h2o2)3"
(optionally
'n':
formula.length
chemical
added)
formulas.
"h2mgo2"
"k4(on(so3)2)2"
"h2o2he3mg4"
atom.
4}.
"(h2o2)"
formula,
"h2o2"
"h1o2"
follow.
element's
"h2o"
{'h':
'o':
atomic
[1,3,5,7],
[7,5,3,1].
[1,5,7,8,5,3,4,2,1],
"^"
0])
[1,3,5,6,2,4]
[1,2,3,6,7,11,14,4,8,12,5,9,13,10]
min(ai,
[1,4,3,2]
b2),
[6,2,6,5,1,2]
(a1,
b1),
min(6,
(a2,
(an,
bn)
adhere
op1,
(op3)
(+,
negation.
conventions:
"x
x"
(-).
"-x
501
-,
(/)
(op2)
/).
op2,
(op1)
negation
100000000
*,
"aaaeeeooo"
'e's,
'e's
"uaeio",
"aaaaaaeiiiioou"
"aeeeiiiioooauuuaeiou"
"aaaaeiiiiouuu"
"aeiou"
vowels,
'i's,
"aeoiu",
"aeiaaioaaaaeiiiiouuuooaauuaeiu"
beautiful,
-7
"-10"
"202"
[2,-1,2],
points[i][0],
[-1,0]
[[3,2],[-2,2]]
[[1,1],[3,4],[-1,0]]
second).
points[i][1]
touching
cube
storeroom
boxes:
cubic
routes,
locations.length
[5,2,1],
fuel:
locations[j]|.
[2,3,6,8,4],
|locations[i]
routes:
reduces
locations[i]
finish).
[4,3,1],
"input",
"bcd",
27th
"ouput",
97,
79,
survive,
outcome,
64,
94,
72,
didn't,
85,
45,
drops.
[[1,3],[10,20],[2,5],[4,8]]
ranges[i].length
overlapping,
[[6,10],[5,15]]
workers.
worker[j]).
difficulty,
[24,66,99],
$1,
[4,4,6,6]
worker[j]
[4,5,6,7]
worker[i]
worker.length
difficulty[i],
[85,47,57],
$3.
[40,25,25]
difficulty.length
profit[i],
difficulty[i]
[20,20,30,30]
[10,20,30,40,50],
$0.
[5,4,5,1,1,null,5]
[1,4,5,4,4,null,5]
distributed.
money,
dollar.
dollars)
stopping
stashed,
tonight
(money
[2,7,9,3,1]
house,
professional
robbing
"ddbbbdaa"
"eee"
"dddaa"
"pbbcggttciiippooaais",
delete.
"deeedbbcccbdaa",
"ps"
maxboxes,
needed,
[[1,1],[2,1],[1,1]],
maxweight.
portscount,
weightsi
maxweight
[portsi,
[[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]],
portscount
delivered
portsi
limits
delivered.
loaded
maxboxes
[[1,2],[3,3],[3,1],[3,1],[2,4]],
ports.
weighti],
carry.
storage.
deliver
box).
port,
[2,3,1,-1,-3,0,-3].
[2,5,6,5,2,2,-1],
[2,-1,0,1,-3,3,-3]
[-2,-3,0]
prefix[i]
"1.234"
(".")
987
thousands
"987"
[1,3,5,1],
[1,3],[5,1],
bag,
(1+3)
weights[j].
[1],[3,5,1]
marble.
(5+1)
(1+1)
(3+1)
marble
inclusively,
[1],[3].
tomatoslices
burger
[total_jumbo,
tomatoslices,
2*6
tomato
cheeseslices
burger:
jumbo
cheeseslices.
burgers.
4*1
total_small]
[[1],
unhappy.
preference.
0]],
n/2
preferences.length
preferences
preferences[i].length
preferences[i]
but:
pairs[i].length
[0]],
preferences[i][j]
[1,1,2,2,3,_]
[0,0,1,1,1,1,2,3,3]
[0,0,1,1,2,3,3,_,_]
font
numrows
numrows);
"pahnaplsiigyir"
convert(string
"paypalishiring"
"pinalsigyahrpi"
','
"paypalishiring",
legibility)
dth
[3,4,0]
{1,2,3,4}
{2,4}
{2,3}
[[1,2],[2,3],[2,4]]
subset,
{1,2,4},
{1,2,3},
{2,3,4}
{1,2},
+---------+----------------+
{0}
followers_count|
+---------+-------------+
follower_id
follower
followers.
follower_id)
{0,1}
drives
(reverse):
"aar",
(accelerate)
"aaara".
*=
sum(words[i].length)
"ece",
["aba","bcb","ece","aa","e"],
[2,3,0].
["a","e","i"],
[[0,2],[1,4],[1,1]]
[[0,2],[0,1],[2,2]]
[2,3,0]
"ece").
"e").
(strings
[6,5,6],
3.5.
[6,5,6,5],
[6,5,6,5,8],
[6,5,6,5,8]
[1,3,4,3,1],
[1,null,-3,4]
[5,4,8,11,null,17,4,7,null,null,null,5]
[1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14],
[5,4,8,11,null,17,4,7,1,null,null,5,3],
[1,2,-3,-5,null,4,null],
[1,2,3,4,null,null,7,8,9,null,14]
"yt"
"cl"
"ty"
"lcyttycl"
["lc","cl","gg"]
"lc"
"lcggcl",
created.
["ab","ty","yt","lc","cl","ab"]
["cc","ll","xx"]
"tylcclyt",
"clgglc"
["a","banana","app","appl","ap","apply","apple"]
"apply"
"worl".
["w","wo","wor","worl","world"]
"apply".
"w",
"wor",
"wo",
[10,2,5,3]
[3,1,7,11]
-103
e2.
of.
parentheses)
statements
"(add
variable.
"(let
"mult",
mult
evaluation,
syntax
scope
(add
en
expr)",
(let
"(mult
scope.
y))"
3+2
scopes
evaluate.
evaluated,
sequentially;
legal.
v1
e2
e2)"
v2
y),
"mult"
(mult
lisp-like
x)"
innermost
vn
negative.)
y))))"
expr.
[[0,2],[2,3]]
firsti.
"0101",
[[-1,-1]]
[[0,5],[1,2]]
[0,2].
secondi.
secondi
firsti,
[[12,8]]
"101101",
[[4,5]]
secondi].
https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/
1038:
[1,2,2,4]
repetition
recursively,
e/
led
a/t"
"gr/eat"
e/at"
"rgeat"
scrambled
"at"
"r/g
"caebd"
"great",
"a/t".
"g/r
"great"
[[1,2],[2,3],[3,4],[1,4],[1,5]]
[6,5,4,8]
[2,1,0,3]
[4,0,1,1,3]
nums[1]=1
nums[4]=3
nums[0]=8
nums[3]=2
nums[2]=2
j's
[7,7,7,7]
[8,1,2,2,3]
[4,8,5,0,1,null,6]
(continuous
virus.
resources
quarantine
isinfected,
isinfected
threatens
uncontaminated
night).
infected
isinfected[i][j]
[[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]
night,
wall)
infect
limited.
[[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]
modeled
infected,
builds
contained.
cells)
isinfected[i].length
affected
rapidly,
viral
saved,
regions.
uninfected
isinfected.length
singly-linked
2016/06/09
(requester_id,
requester_id
+--------------+-------------+-------------+
2016/06/08
requestaccepted
accepter_id
2016/06/03
accepter_id)
world,
accept_date
sanctioned
power,
[4,4,4,4],
[1,4,4,5,0].
government
stations,
[1,2,4,5,0],
pre-existing
https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/
leaf-nodes
865:
lca
2+5,
(out
face-up
dice,
222616187
1+6,
3+4,
faces.
ways)
5+2,
4+3,
6+1.
2019-07-14
logins
09:00:00
(december)
2020,
2020-12-30
14:06:06
00:46:50
07:59:08
last_stamp
15:06:07
05:10:53
11:59:59
00:18:15
2020-01-16
02:49:50
2019-08-25
2020-06-30
2019-03-07
december.
2021-04-21
"addback",
"popsmallest"]
popsmallest()
addback.
smallestinfiniteset()
smallestinfiniteset();
["smallestinfiniteset",
"popsmallest",
smallestinfiniteset
addback(int
smallestinfiniteset.addback(1);
popsmallest
...].
smallestinfiniteset.popsmallest();
smallestinfiniteset.addback(2);
[7,9,6,6,7,8,3,0,9,5],
[7,9,6,6,8,7,3,0,9,5]
[3,3,3].
[1,9],
defined:
[1,5,5,4,11],
[5,5,2,4,4,2],
[5,4,11].
[[0,1],[1,2],[5,2],[4,3],[1,3]]
[4,5,7],
[4,4].
[5,5].
[[1,2,3],[8,9,4],[7,6,5]]
[1,9,6,10].
[4,9,6,10]
[6,8,11,12]
havenâ€™t
[5,8,3]
[1,2,6,10].
"54",
"165462",
"238182",
forks.
starve;
eating,
discipline
{1
pickleftfork,
putrightfork
bowls
(three
wikipedia.org
amounts
philosophers.
philosopher.
thinking,
demand
number).
spaghetti.
putleftfork
philosophers'
eat}.
algorithm)
fork
assumed.
integers)
pickrightfork
threads,
thinking
philosopher,
wantstoeat(philosopher,
ends.
stomach
putleftfork,
space;
c]
right}.
pickleftfork
fork:
silent
output[i]
concurrent
pickrightfork,
spaghetti
forks
behaviour
[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
simulate
philosopher
asking
eat,
think.
putrightfork)
controlling
specifies
"fxshrxw"].
columntitle
sheet,
columntitle.length
"ababab"
"leve"),
("l",
"evel").
"el",
"l".
"level"
"le",
"vel",
"lev",
"zza"
t="ba".
p="",
p="addb",
s="c",
p="azz",
t="c".
p="ab",
s="zza",
"bdda"
t="bdda".
t="zza".
s="bdda",
robot.
p="abc",
"addb"
t="".
"azz"
paper.
s="",
optionally
[1,-2,0,3]
(contiguous
[1,-2,-2,3]
deletion.
season,
building,
[[0,0],[1,2],[2,1]]
requests:
[[0,3],[3,1],[1,2],[2,0]]
[[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
transfers
[1,1,1,1,1,null,1]
uni-valued,
uni-valued
[2,2,2,5,2]
distancethreshold,
[[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]],
[[0,1,3],[1,2,1],[1,3,4],[2,3,1]],
edges'
distancethreshold.
[city
weighti,
distancethreshold
"ue"
("un"
"acters"
"un"
("cha"
arr[i].length
("iq"
"ue")
["abcdefghijklmnopqrstuvwxyz"]
["cha","r","act","ers"]
"iq")
"ique"
("act"
"iq"
"chaers"
["un","iq","ue"]
"ers")
"uniq"
"ers").
"1/3-1/2"
2/1.
irreducible
omitted.
(input
â±numerator/denominator.
"-1/6"
"1/3"
'9',
output)
fraction.
"0/1"
fractions,
"-1/2+1/2+1/3"
"-1/2+1/2"
int.
corressponds
[0,0,1,1,1,2,2,3,3,4]
[1,2,_]
[0,1,2,3,4,_,_,_,_,_]
[9,4,7,2,10]
[4,7,10].
[20,1,15,3,10,5,8]
[3,6,9,12]
seq[i
seq.length
[20,15,10,5].
"abbca"
"bbc",
"code":
"od",
"co",
"cod",
"de"
"abbca":
"bbca"
"abbc",
[13,2,3,1,9],
card":
suits[i].
["d","a","a","b","c"]
[10,10,2,12,9],
kind"
case-sensitive.
suits.
["a","a","a","a","a"]
kind".
"flush":
"flush".
"three
suit
suits[i]
worst:
["a","b","c","a","d"]
kind":
"pair":
suits.length
"pair".
[4,4,2,4,4],
"pair"
suit.
"flush"
suits
suit,
579].
allowed,
[110,
231,
"112358130"
f[i
f[i]
[11,0,11,11]
456,
"1101111"
type),
[123,
f.length
"123456579".
"0123"
111]
[[1,2],[2,3],[2,4],[1,5]]
return:
figures.
ancestors.
[[1,2],[2,3],[1,3]]
oriented
[1,2,3,0,2]
sell,
[buy,
restrictions:
cooldown,
buy,
sell]
in_time.
total_time
(74
entry
74
47)
173
+--------+------------+---------+----------+
(32
(emp_id,
in_time)
event_day
out_time.
1440.
in_time
2020-12-03
event_day,
2020-11-28
happened,
emp_id
employees'
173,
+------------+--------+------------+
events:
(200
out_time
(33
[2,1,3,null,null,null,4]
[3,1,4,null,2]
[1,null,2,null,3,null,4,null,null]
weight).
00000000000000000000000000001011
00000000000000000000000010000000
thirty
exection
rose
(replace
"ros"
"horse",
(insert
rorse
(remove
intention
word:
'x')
"execution"
exention
inention
enention
'e')
"intention",
'c')
't')
horse
'r')
ros
dropped.
busiest.
busy,
(i+2)th
complete).
all).
server(s).
arrival[i]
[5,2,3,3,3]
busiest
requests,
[10,12,11]
arrival.length,
load.length
load[i]
arrival.length
load,
arrival[i],
computational
server,
servers.
k)th
"dabadd",
"caa"
"cda"
+-------------+---------------+
ali
project_id.
2.00
+-------------+--------+------------------+
experience_years
average_years
project_id
doe
employee_id)
(project_id,
[10,12,19,14]
[18,43,36,13,7]
"ace".
["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
"dsahjpjauf",
["a","bb","acd","ace"]
booleans,
{"key":{"a":1,"b":[{},null,"hello"]}}
maxnestinglevel
object,
inludes
{"a":"str","b":-12,"c":true,"d":null}
objects,
json.stringify
object.keys().
{"y":1,"x":2}
primitives
json.stringify(object).length
[[1,1,1],[1,2,3],[1,2,3]]
[[1,2,3],[3,1,2],[2,3,1]]
[9,1,2,5,8,3],
[6,7,6,0,4]
[9,8,9]
[6,0,4],
[8,9],
[3,9],
[3,4,6,5],
[9,8,6,5,3]
[6,7],
"021",
change[d]
"021":
change[num[i]]).
0-9.
change[1]
change[0]
[9,4,3,5,7,2,1,9,0,6]
[1,4,7,5,3,2,5,6,9,4]
"934"
"832".
to)
change[2]
change[d].
change.length
mutate
"132",
"934".
"832"
[9,8,5,0,3,6,4,2,6,8]
|4-4|
[8,2,4,7]
|8-8|
[8,2,4,7],
[4,2,2,2,4,4,2,2],
[2,4,7]
|7-7|
[10,1,2,4,7,2],
[2,4,7,2]
|8-2|
[8,2,4]
[8,2]
|2-4|
|4-7|
[[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]],
[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]],
side-length
depth(b))
seq,
[0,0,0,1,1,0,1,1]
seq.length).
seq.length)
encodes
"()(())()"
seq.size
")"
[0,1,1,1,1,0]
[[4,2],[2,2],[1,2]]
trees[i].length
perimeter.
rope,
fence.
expensive.
[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
[[1,1],[2,0],[4,2],[3,3],[2,4]]
[[1,2],[2,2],[4,2]]
well-fenced
enclosed.
shift(s[i-1],
shift('e',1)
s[i]).
shift('x',
shift('c',3)
s[7]
shift('a',
x),
shift('c',1)
"a1c1e1"
"a1b2c3d4e"
s[i])
shift('b',2)
"abcdef"
"abbdcfdhe"
shift(c,
shift('d',4)
shift('a',1)
6})
{2,
node-values
filled,
3}),
({4,
2h
[1,2,3,4,5,null,7]
[[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
[[1,0],[1,1]]
[9,3,5]
[8,5]
changed.)
counts[i]
[2,1,1,0]
[5,2,6,1]
[[0,0],[0,1],[1,0],[0,2],[2,0]]
-50
[[1,0],[0,0],[0,1]]
["a","a","a","b","b","b"],
task.length
["a","b","a","b","a","b"]
["b","b","b","a","a","a"]
["a","a","a","b","b","b"]
["a","a","a","a","a","a","b","c","d","e","f","g"],
array),
[00,01,11,10].
n-bit
[00,10,11,01].
letters[0].
["x","x","y","y"],
["c","f","j"],
["a","b","leetcode"],
["i","eat","leetcode"],
"ate",
["hello","i","am","leetcode","hello"],
startindex
n],
"ate"
words[(i
startindex,
[1,2,3,4,5,6,1],
cardpoints.length
cardpoints.
cardpoints
cardpoints[i]
[9,7,7,9,7,7,9],
[[1,4],[4,5]]
[[1,3],[2,6],[8,10],[15,18]]
endi],
[[1,6],[8,10],[15,18]]
[[1,5]]
(-3)
[2,-5].
[-22].
[-10,-12]
(-12)
[-1,2,-3,4,-5]
-22
(-22)
[7,-6,5,10,5,-2,-6]
-22.
score).
[-3].
(alice's
(-10)
uniquecnt1,
[2,6].
uniquecnt1
divisor1.
uniquecnt2
divisor1,
divisor2.
divisor2
[2,3,4].
divisor1
divisor2,
uniquecnt2,
[1,3,5,7,9,11,13,15],
stick,
[5,6,1,4,2]
cut),
explanation.
16).
cut).
cuts.length
cut,
scenario:
wish.
[1,3,4,5]
cuts[i]
(i-2)th
"110".
(i-1)th
(0th)
[0,1,2,2,4,4,1]
[4,4,4,9,2,4]
these,
[29,47,21,41,13,37,25,7]
soup:
ml
0.62500
ml's
someone,
0.71875
soup.
0.625.
becoming
soup,
wants,
erases
chalkboard,
loses.
choices:
potions.length
potion
[4,0,3]
potions[j]
[3,6,9,12,15].
[8,5,8],
[24,15,24].
spells[i]
spell.
spells[i],
spells.length
spell:
[1,2,3,4,5].
[8,5,8]
potions[i]
success.
potions,
[16,10,16].
[5,10,15,20,25].
potion.
[8,5,8].
[4,8,12,16]
comparison
arr[k
[100]
arr[j]]
[arr[i],
[9,4,2,10,7,8,8,1,9]
maxdoubles
maxdoubles,
xn-1
relation
gen.next().value;
[0,1,1,2,3]
xn-2.
gen
fibgenerator();
gen.next()
outputted
[[2,3],[3,7],[4,3],[3,7]]
[5,3,5,5].
maxlen.
wi.
maxlen
wi]
[4,6],
[[5,8],[3,9],[5,12],[16,5]]
[1,3,2,5,4],
arrangements.
(mod
uniquely-sized
647427950
b3
redirect
[[-1]]
b4
redirects
[[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
[0,1,2,3,4,-1]
[[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
[1,-1,-1,-1,-1]
b1
b0
sides.
boards
[6,3]
[6,3,5,2],
[3,1,4,2],
a[4]
a[1]
[9,6,1,6,2]
a[3]
a[2]
a[0]
1/4).
"pick"]
blacklist.
ok.
"pick",
blacklisted
solution.pick();
blacklist.length
solution(7,
blacklist)
blacklist[i]
[0,1,4,6]
pick()
height[i]).
[1,8,6,2,5,4,8,3,7]
container,
slant
[1,8,6,2,5,4,8,3,7].
candies[i].
1012
unused.
[5,8,6],
candies[2]
candies[1]
[2,2,4,5],
[3,6,1,2,5],
[6,5].
[2,1,4,3,5],
[3,2,4,6]
xor.
[1,2,3,9,2]
cousins,
[1,2,3,null,4,null,5],
[1,2,1,3,5,6,4]
nums[-1]
peaks,
nums[n]
peaks.
-âˆž.
2,2
[2,4,1,5,3]
[6,5,4,6]
"bulky",
"heavy"
"heavy",
800,
"neither"
categorized
"heavy".
24500000
"neither".
"bulky".
categories,
"bulky"
700,
"both".
(lo
[12,13,14,15].
lo,
hi)
lo
[lo,
[[2,2,2],[3,4,1]]
circles[i]
[[2,2,1]]
circles[i].length
min(xi,
circles.length
circumference
circles.
search_cost
satisify
[3,1,2,2,2]
[3,1,3,3,2]
[3,1,4,4,2]
[3,1,1,2]
[1,2,2,2,1]
[3,1,5,4,2].
[3,1,5,4,2]
[3,1,1,1,1]
[1,2,3,2,1]
[2,1,1,1,1]
initial.
logarithmic
5!
n!.
p)
simulates
examroom(10);
"leave",
"seat"]
"seat",
examroom.leave(4);
examroom.seat();
["examroom",
leave(int
seat()
examroom
examroom(int
suff
f(string
["wordfilter",
"f"]
wordfilter(string[]
suff.
suff)
wordfilter
searches
[[["apple"]],
suff.length
pref.length,
"e"]]
"e");
pref,
wordfilter.f("a",
wordfilter(["apple"]);
grass
safehouse
safehouse.
touching).
[[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]
grass,
former
field.
latter
spread
[[0,0,0,0],[0,1,2,0],[0,2,0,0]]
[[0,0,0],[2,2,0],[1,2,0]]
fire,
stayed,
safely
[5,2,-3]
[2,-3,4]
[5,2,-5]
"0001"
'0000',
wheels
'2',
["0201","0101","0102","1212","2002"],
"1202"
'8',
deadends.length
deadends
stuck.
wheels.
"1200"
"0102".
deadends[i]
"0009".
'7',
'6',
"8888"
"0202".
slots:
"0202"
'5',
"1201"
'4',
"1000"
"0009"
deadends[i].length
around:
codes,
deadends.
["8888"],
["8887","8889","8878","8898","8788","8988","7888","9888"],
slot.
"0002"
position[i].
[1,1000000000]
chip
chips,
"ca","cc","cd",...,"cz"
"leetgoes",
"gz",
"gx",
'c':
"da",
evil
evil.length
evil,
"da".
"aa","ac","ad",...,"az".
'd':
"hat"
"cat"
["hello","world","leetcode"],
"atach"
["cat","bt","hat","tree"],
"welldonehoneyr"
[["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]]
[["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]]
(up,
[["a","b","b"],["b","z","b"],["b","b","a"]]
"anagram",
"anagram"
"mangaar"
same)
anagrams.
"practice"
pressure",
"-6"].
["e",
"b*a*c",
8)",
[1]),
"e
["1*e*e","-64"]
multiplied,
coefficient,
"a*b*c".
"3*a*a*b",
evalvars[i].length
(given
["7"].
multiplicity.
"4*a",
evalvars
digits.)
asterisk
(e
"-x".
"(e
{"e":
"temperature"],
alternates
breaking
5",
["-1*pressure","5"]
"5*c",
["-2*a*a*a",
term.
"3*b*b",
5"
evalints[i]
["-1*a","14"]
evalvars[i]
["e"]
evalints.length
3"
evalvars.length
evalints
terms)
well-formatted
exist.)
symbols,
"2x"
"a*a*b*c"
"00110110",
[["c"],["c","d"],["a"],["a","b"]]
[["a","b"],["c","d"],["c"],["a"]]
path[i][j]
[["d"],["d","a"]]
paths[i][j].length
bug,
"/b/x"
sum(paths[i][j].length)
marked,
[["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]]
/b/x/y
/a
underlying
level)
"three"]
"/a/x"
"/one/two/three".
[["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]]
/a/z
subfolders.
subfolders)
/b/x
"/c"
/b
/a/x/y
"/w"
/a/x
beforehand.
"/b/w",
"y".
marked:
["one",
[["c"],["c","b"],["a"],["a","b"]]
/b/z
"/b"
"/a/b/x"
bananas,
gone
return.
slowly
bananas-per-hour
bananas.
loves
[30,11,23,4,20],
[3,6,7,11],
receptor
receptors
southwest
receptor.
mirrors
ray
reflected
eventually.
corners,
"4321",
"1342"
ok
"36789",
"36789"
[0,1,2,3].
[0,3,2,4]
[9,20,6,4,11,12],
[1,0,2,3]
[5,2,9,8,4],
[[0,3],[5,3],[2,4],[1,3]]
"bea",
s1="abe"
s1="abc".
"dca".
s2="acd"
"acd"
"dac"
"eba"
"eab"
"ayx"
"xya"
"interview"
"leetcodee",
s2="xya"
"cda",
"adc",
prior
[4,5,6,7,0,1,2].
[4,5,6,7,0,1,2],
schedule.
jobdifficulty[i].
jobdifficulty
jobdifficulty.length
dependent
difficulties
[6,5,4,3,2,1],
[9,9,9],
jobdifficulty[i]
[1,3,5,3]
[10,6,5,8]
[1,4,1,3],
circular.
[5,5,5,5]
[2,5,5,7],
[1,3,1,3]
"time"):
("donuts",
tonuts".
selections:
"dime
("coffee",
ideab
"donuts"):
"conuts
conuts".
doffee".
"tonuts
["lack","back"]
ideaa
space)
dime".
ideas.length
ideas[i]
("toffee",
selections
ideab,
("time",
ideas[i].length
ideas,
ideas
["coffee","donuts","time","toffee"]
"doffee
"coffee"):
"toffee"):
"toffee"
ideab.
arrivali+1
3.25.
3.25000
till
prepares
chef.
timei]:
[[5,2],[5,4],[10,3],[20,1]]
prepare
[[1,2],[2,5],[4,3]]
arrivali,
"12+34"
<num2>
170.
"(999+999)"
<num1>
"2(47+38)"
1998.
170
38)
"999+999"
"2(4)7+38"
"1(2+3)4"
"<num1>+<num2>"
"247+38"
(47
inversion
inversion.
[1,0,2]
inversions.
entries)
movierentingsystem.rent(0,
report()
report:
res[j]
moviei
list<list<integer>>
moviej
search:
["movierentingsystem",
movierentingsystem
drop(int
moviej]
drop:
for,
"rent",
2]].
movie)
cheapest,
rent:
entries.
movierentingsystem.drop(1,
id)
booking,
moviei.
copy,
entries.length
[shopj,
shops
renting
rents
shops,
[shopi,
movies,
shopi
movierentingsystem.rent(1,
"report",
movierentingsystem.search(2);
rent
rent,
shops.
entries[i]
movierentingsystem.search(1);
movierentingsystem.report();
searching
shopj
shopj.
"drop",
report.
cheapest;
rent(int
movierentingsystem(3,
generating
moviei,
movierentingsystem(int
unrented
rented,
[1,7,4,6,9]
exchanges
distinct),
[1,9,4,6,7]
"aaabbc"
"baa".
[[1,2],[1,3],[2,4]]
dislikes.length
dislikes[i]
dislikes[i].length
dislike
dislikes
companies.
favoritecompanies[3]=["google"]
[["leetcode","google","facebook"],["leetcode","amazon"],["facebook","google"]]
[["leetcode"],["google"],["facebook"],["amazon"]]
favoritecompanies[0]=["leetcode","google","facebook"]
favorites
favoritecompanies
index=3
favoritecompanies[2]=["google","facebook"]
favoritecompanies[1]=["google","microsoft"].
[0,1,4].
favoritecompanies[i].length
[["leetcode","google","facebook"],["google","microsoft"],["google","facebook"],["google"],["amazon"]]
favoritecompanies[2]=["facebook","google"]
favoritecompanies.length
favoritecompanies[0]=["leetcode","google","facebook"],
favoritecompanies[i]
favoritecompanies[i][j].length
favoritecompanies[j].
[0,1,4]
black,
"h3"
coordinates[0]
"a1"
"c7"
coordinates[1]
reference.
"will"
second.length
student",
"we
["we","rock"]
girl
["girl","student"]
third",
first.length,
third".
"we",
you",
ceil(nums[i]
ceiling
[1,10,3,3,3],
ceil(val)
[1,4,3,3,3].
[10,10,10,10,10],
[1,1,1,3,3].
mous
["mouse","mousepad"].
searchword.
["mobile","moneypot","monitor","mouse","mousepad"].
"havana"
mou,
[["mobile","moneypot","monitor"],["mobile","moneypot","monitor"],["mouse","mousepad"],["mouse","mousepad"],["mouse","mousepad"]]
["mobile","moneypot","monitor"].
[["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
suggested
products[i].length
typed.
mo
["havana"],
["mobile","mouse","moneypot","monitor","mousepad"],
sum(products[i].length)
minimums
"mouse"
suggests
"?".
knowledge.length
valuei]
"yes",
"bobistwoyearsold"
"(a)(a)(a)aaa",
"(name)"
"name",
"age".
"bob".
[["a","b"]]
keyi
"age"
"name"
"hi?"
knowledge[i].length
"yes".
[["name","bob"],["age","two"]]
"hi(name)",
"(a)"
"two".
[keyi,
valuei.
[["a","yes"]]
keyi.length,
"?"
valuei
evaluated.
"a"s
knowledge
knowledge.
marks).
(without
"yesyesyesaaa"
valuei.length
"(age)"
knowledge[i]
"(name)is(age)yearsold",
keyi,
(downward
cells:
movement),
(k,
[[2,1,0],[1,0,0]]
(rightward
[[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]
[[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]
movement).
[4,3,2,2].
4322.
4321.
[4,3,2,2]
[4,3,2,1]
124.
[1,2,4].
minimumi]:
energy,
actuali
[actuali,
[[1,2],[2,4],[4,8]]
minimumi
[[1,3],[2,4],[10,11],[10,12],[8,9]]
[[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
sub-nodes.
sub-nodes,
sub-node.
root.right.val)
25].
min(root.left.val,
[2,2,5,null,null,5,7]
[tx,
ty]
inaccessible
blocked[i]
[sx,
xy-plane,
[999999,999999]
blocked[i].length
sy]
blocked.length
prizepositions
segments).
prizes
prizepositions.length
prizepositions[i]
prize.
prize
[1,1,2,2,3,3,5],
prizes.
[[1,2],[1,3],[1,4]]
[[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]
"04:35".
"02:30",
"04:35"
current,
"11:00",
current.
"11:01"
"03:30".
"04:30".
"25??"
2+4+3
8+0+1.
"?3295???"
'?'s
"932959??".
"243803",
"9329592?".
"93295927".
"93295???".
8+0+3.
num:
"5023"
"243801",
"actresz"
"absoryz"
["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
"baggage",
puzzles
["aaaa","asas","able","ability","actt","actor","access"],
[0,1,3,2,0]
puzzles.length
[1,1,3,2,4,0]
"access"
"beefed"
puzzles[i].length
"actt",
puzzle).
["aelwxyz","aelpxyz","aelpsxy","saelpxy","xaelpsy"]
"aboveyz"
"able"
"cabbage",
(includes
'g'.
"abslute"
"faced",
(does
puzzles[i]
"gaswxyz"
"abrodyz"
puzzles[i].
"asas"
["apple","pleas","please"],
"asas",
"based"
'a')
adjacent)
lanes
(ranging
obstacles[0]
arrows).
[0,2,1,0,3,0]
obstacles[2]
lane.
obstacles[n]
[0,1,1,3,3,0]
lane
seed.
growth,
growtime[i]
seeds
planttime[i],
growtime.length
planttime[i]
blooms
grayed
planttime.length
each:
blooms.
blooming.
pots
growtime
bloom.
seeds.
grow,
planttime
growtime,
growing
planted.
seed
n-1)
796297179.
{(0,2)},
796297179
{(1,2),(2,3)},
{(0,1),(1,2)}.
{(0,1),(2,3)},
{(0,1)},
{(0,1),(1,3)},
3796297200.
{(0,2),(2,3)},
1-d
{(1,2)}.
"c3".
(repeated
"aabccc"
"a3bc3d"
"a3c3"
compress
"abcccd"
"aabbaa",
abc3d.
"aaaaaaaaaaa",
run).
"a2bc3".
(length
"a11"
"aaabcccd",
compressing
"a2"
"a4"
[3,-1],
diff.
[-2,2],
[3,2,5],
[2,2,1],
[17].
[3,2,4,1],
[3,5,1,2,6],
[10].
"za"
"abcdefghijklmnopqrstuvwxyz".
customerid
+----+------------+
videos.
[[4],
luprefix
"longest"]
upload(int
"upload"
server.upload(2);
"upload",
"longest",
upload
uploads
luprefix(int
["luprefix",
server.upload(1);
luprefix(4);
longest.
server.longest();
server.upload(3);
longest()
yet,
video)
[cx,
qualities
sqrt(1)⌋
towers
sqrt(2)⌋
cy)
towers,
sqrt(0)⌋
[[1,2,13],[2,1,7],[0,1,9]],
⌊2.07⌋
towers[i].length
[[1,2,5],[2,1,7],[3,1,9]],
cy]
⌊4.5⌋
quality,
⌊5
qi]
d)⌋,
⌊7⌋
towers.length
quality.
qi.
⌊9
tower,
[[23,11,21]],
radius.
towers.
⌊7
tower's
garbled,
⌊qi
[23,11]
towers[i]
qi
(cx,
⌊val⌋
degrees)
165
7.5
score[i][j]
[[10,6,9,1],[7,5,11,2],[4,8,3,15]],
scored
[[3,4],[5,6]],
score[i].length
[[5,6],[3,4]]
[[7,5,11,2],[10,6,9,1],[4,8,3,15]]
bring
[-1,-1,0,-1]
happen.
[0,-1,-1,1]
i's.
arr[banned[i]]
[0,1,3],
perform,
[2,4],
[0,-1,-1,-1,-1]
num1.length,
"456"
"56088"
num2.length
biginteger
".1".
["(0,
0.5)"
s[s.length
"0.0",
23)","(0.12,
comma.)
23)","(1.2,
extraneous
"(00011)"
"(2,
(occurring
"(205)".
3)"
123)","(0.1,
"001",
"(1,
1)"]
been.
2.3)","(1,
3)"]
"(0123)"
"0.00",
"(13)"
3)","(12,
1.23)","(0,
"(123)"
0.0,
["(1,
"00.01",
00,
0.5)".
0.011)","(0.001,
2.3)","(0.1,
12.3)","(0,
00.01
slices[i]
slice
pizzas.
slices.length
[8,9,8,6,1,1]
itr
combinationlength
[["abc",
combinationiterator("abc",
["combinationiterator",
combinationlength)
hasnext.
combinationiterator(string
itr.next();
characters.length
combinationiterator
itr.hasnext();
arguments.
[0,1,2]:
[9,8,7,6,10,5]
[2,1,3,4]:
(colored
[[0,1],[1,2],[1,3],[3,4],[3,5]],
[7,8,6,10],
"cabaabac"
"aabccabba"
"cca".
"abaaba".
"bccabb".
"baab".
(odd
7896
[555,901,482,1771]
345
1771
[12,345,2,6,7896]
nums[4]]
[nums[nums[0]],
zero-based
[nums[5],
[nums[0],
nums[nums[1]],
memory)?
nums[nums[2]],
nums[nums[3]],
[4,5,0,1,2,3]
[0,1,2,4,5,3]
nums[nums[4]],
[0,2,1,5,3,4]
nums[nums[5]]]
nums[nums[i]]
[5,0,1,2,3,4]
[1,2,10,5,7]
[1,1].
nums.length).
[1,2,5,7].
[2,3,1,2]
[1,2,5,7]
xi1
[xi1,
yi2
yi1
yi2)
(xi1,
yi1)
[[0,0,1000000000,1000000000]]
xi2,
yi2]
[[0,0,2,2],[1,0,2,3],[1,0,3,1]]
illustrated
rectangles,
xi1,
yi1,
rectangle[i]
rectanges[i].length
xi2
(xi2,
recharged.
running.
drained,
drained
computers.
batteries.
batteries[i]
batteries.length
battery
batteries
[3,3,3]
alicesizes.length,
bobsizes[j]
exchange.
alicesizes[i]
bobsizes
exchange,
alicesizes
bobsizes.length
alicesizes[i],
i:
perm[n
popfront()
frontmiddleback
"popfront"]
["frontmiddlebackqueue",
popback.
frontmost
popmiddle()
frontmiddlebackqueue
q.pushback(2);
"pushfront",
"popback",
q.popback();
pushmiddle,
q.pushmiddle(4);
"pushback",
"popmiddle",
pushfront,
frontmiddlebackqueue();
q.popfront();
popback()
choices,
popfront,
popping
pushfront(int
frontmiddleback()
pushback(int
pushmiddle(int
q.pushmiddle(3);
pushing
popmiddle,
"pushmiddle",
pushback,
"popfront",
q.popmiddle();
q.pushfront(1);
[10,4,-8,7]
[10,4,-8],
[4,-8,7],
[10,4],
[2,3,1,0]
[-8,7],
[21,4,7]
[21,21]
"flip",
solution(3,
"flip"]
flip.
reset.
returned,
solution.reset();
reset()
resets
solution.flip();
"reset",
flip()
"(((1))|(0))",
operator),'(',
"()1|1"
"(0|(1|0&1))"
matched.
1|1|0&1
operator),'|'
"(0|(0|0&1))"
expression).
"(0&0)&(0&0&0)"
properly
1|0&1
'&'.
"1&(0&1)"
(i.e:
"1|(0&(1))"
1&1
"1&(0|1)"
1|1|(0&0)&1
'&'
"1|1|(0&0)&1",
'1','0','&'
"(1)&()"
expressions.
'1','0','&','|','(',
"(0|1)|(0&0&0)"
+2
+4
[-3,2,-3,4,2]
startvalue.
["j"],
streamchecker.query("e");
[[["cd",
streamchecker.query("d");
streamchecker.query("g");
["b"],
query(char
streamchecker.query("l");
'kl'
streamchecker.query("b");
streamchecker.query("a");
"kl"]);
["g"],
streamchecker.query("k");
streamchecker.query("j");
letter)
"kl"]],
["streamchecker",
streamchecker
"xyz"]
streamchecker.query("c");
["a"],
'y',
streamchecker.query("i");
["c"],
["f"],
'z',
streamchecker.query("f");
one)
["k"],
["h"],
"axyz"
'cd'
["i"],
streamchecker(["cd",
["l"]]
streamchecker(string[]
["d"],
streamchecker.query("h");
2.82843
ycentre]
minimized:
[[1,1],[3,3]]
2d-map
positions[i].length
[xcentre,
[[0,1],[1,0],[1,2],[2,1]]
2,3,4
2,2,3
[[],[6],[5],[6],[3,6],[],[],[]]
beforeitems[i][j]
indexed.
beforeitems[i]
[[],[6],[5],[6],[3],[],[4],[]]
belonging
[-1,-1,1,0,0,1,0,-1],
beforeitems.length
beforeitems[i].length
item).
beforeitems
[6,3,4,1,5,2,0,7]
victory:
"rd"
belonging.
parties.
senators
predict
senators,
senator
"dire".
exercise
round-based
dire
radiant
voting
dota2,
"dire"
senate[i]
party.
parties:
announce
anymore
vote.
victory
ban
"radiant"
senate.length
dire.
"rdd"
senator's
rights
guy
rights:
voting.
".*"
"zero
(*)
(.)".
"a*"
(5,4,1),
(soldiers
[2,5,3,4,1]
rating[k]).
(2,3,4),
rating[j],
soldier
teams).
(rating[i]
rating[k])
rating[j]
rating.length
(5,3,1).
rating[i]
(rating[i],
state:
sorts
[3,2,4,1]
(k
[4,2,4,3]
flips,
arr[0...k-1]
sorted,
k-values
(shown
img1.length
[[1,1,0],[0,1,0],[0,1,0]],
images
translation
images,
translated
img2.length
img1[i][j]
img1[i].length
img2[i].length
[[0,0,0],[0,1,1],[0,0,1]]
red).
img2,
borders
img2[i][j]
img2
[[0]],
img1
[[1]],
translate
votes[i]
voter,
tie-breaking
votes[0]
team,
voters.
"zmnaguedsjylbophrqicwfxtvk"
votes[i][j]
votes.
votes.length.
voters
votes[j].length
votes.length
voted
third.
tied
["abc","acb","abc","acb","acb"]
votes[j]
systems.
votes[i].length
position-one
["zmnaguedsjylbophrqicwfxtvk"]
["wxyz","xyzw"]
conflict,
voter
"xwyz"
setting
["timelimitedcache",
elapsed,
42,
42)
duration):
250]
overwritten.
overwritten
t=120,
t=50,
150]
existed
get(key):
inaccessible.
50],
expires.
non-expired
expiration
100],
get(1)
t=150,
key=1
(1:
constructed.
t=40,
t=140,
t=250,
cache.
count():
t=100,
un-expired
set(key,
nextlargest
[1,1,2,2,3]
[1,1,1,2,2].
[1,1,2,2,2].
equal:
[5,1,3]
[1,1,1,1,2].
[3,1,3].
nextlargest.
476:
https://leetcode.com/problems/number-complement/
"0101"
complement.
"axxxyyyb".
"dab"
part.length
"axxxxyyyyb",
"axxxyyyb",
done:
"daabcbaabcbc",
"dabaabcbc",
"dab".
"axxyyb",
"axyb",
"dababc",
"dabaabcbc".
"axyb".
"axxyyb".
removed:
"dababc".
targetx,
targetx
y-coordinate
finite
(1,8)
(4,7).
(targetx,
(1,4)
points:
targety
(2,7)
targety)
disobeys
(two
representations:
ones)
[true,false,true,true,false]
"football"
"rame"
["foobar","foobartest","football","framebuffer","forcefeedback"],
"framebuffer"
"oot"
"foobartest"
"r".
"ar".
[false,true,false,false,false]
"est".
"fo"
"fobat"
"fb"
"uffer".
"foba"
"all".
"ll".
[true,false,true,false,false]
"ot"
pattern.length,
"ppallp"
"ppalll"
award,
3]);
["solution","pickindex","pickindex","pickindex","pickindex","pickindex"]
pickindex
solution([1,
solution([1]);
w.
[null,1,1,1,0,1]
25%),
[null,1,0,1,0,0]
[[[1,3]],[],[],[],[],[]]
correct:
[null,1,1,1,1,1]
solution.pickindex();
["solution","pickindex"]
sum(w).
pickindex(),
[null,0]
3/4.
[null,1,1,1,0,0]
......
0.75
outputs
[[[1]],[]]
w[i]
75%).
1/4.
randomization
w.length
[null,1,1,1,1,0]
sources[i]
"ffff"]
"ec"
"eeebffff"
sources.length
targets[i].length
indexing
sources[i].length,
"eeecd".
targets[i]
sources
["ab","ec"],
testcase
["ab","bc"]
sources,
targets,
"eeecd"
targets[i].
indexes[i]
["eee","ffff"]
["eee",
targets
"cd"],
targets.length
"ffff".
[1,null,3,null,4]
(picture
removing,
[1,2,null,2,null,2],
cannot).
[1,2,3,2,null,2,4],
center).
(target
primes.length
[1,2,4,7,8,13,14,16,19,26,28,32]
primes,
factors,
[2,3,5].
[2,7,13,19].
[2,7,13,19]
primes[i]
primes
[2,6,14,11,7,3,12,8,4,13,9,10,5,1]
[5,6,3,2,4,1]
instructions:
anti-clockwise.
direction).
"g":
"l":
south.
(-1,
"gl"
"ggllgg"
advancing
cycle:
"r":
"jfk",
airports
lexical
"lga"]
"jfk".
["jfk","muc","lhr","sfo","sjc"]
tickets.length
["jfk",
itinerary.
itineraries,
[["jfk","sfo"],["jfk","atl"],["sfo","atl"],["atl","jfk"],["atl","sfo"]]
["jfk","atl","jfk","sfo","atl","sfo"]
reconstruction
toi.length
tickets[i]
[["muc","lhr"],["jfk","muc"],["sfo","sjc"],["lhr","sfo"]]
fromi.length
tickets[i].length
"lgb"].
flight.
airline
["jfk","sfo","atl","jfk","atl","sfo"]
man
'cc'].
"ababccc"
'ba'].
'ab',
'cc']
maximally
tired",
index).
am
"you"
burger",
searchword,
"burg"
"problem"
"pro"
product_key
2018-01-01
2019-08-05
item_brand
orders_in_2019
+----------+------------+---------+----------+-----------+
2019-08-03
favorite_brand
2018-01-19
buyer
2018-02-09
2018-08-02
2018-08-04
item_id
+---------+------------+
+-----------+------------+----------------+
+---------+------------+----------------+
lg
join_date
2018-05-21
[1,2,3,10,4,2,3,5]
[3,10,4].
[1,2,3,3,5]
[10,4,2]
[4,3,2,1].
lowlimit
highlimit
highlimit,
k-repeating
"ababc".
sequence.length
finger
|x1
fingers.
x2|
|y1
fingers,
"cake"
y2|.
[1,2,null,3],
[5,8,9,2,1,3,7,4,6],
[15,-1,5]
xi)
[5,2,4,6,6,3],
mi
mi,
mi.
[[3,1],[1,3],[5,6]]
mi].
max(nums[j]
[[12,4],[8,1],[6,3]]
"00000"
"11000"
"10111"
[4,2,7,6,9,14,12],
h[i])
i+1
bricks,
ladders
(h[i+1]
[14,3,19,3],
ladders.
building's
[4,12,2,7,3,18,20,3,19],
buildings,
errors,
wordlist,
"yollow":
["kite","kite","kite","hare","hare","","","kite","","kite"]
capitlization,
"yeellow":
errors:
(case-sensitive),
"yellow"
mistakes:
(case-insensitive),
["yellow"]
["kite","kite","kite","hare","hare","hear","hear","keti","keet","keto"]
capitalization:
individually,
"yellow":
["kite","kite","hare","hare"],
["yellow"],
wordlist[i]
wordlist[i].length,
operates
match)
"yllw":
wordlist.length,
spelling
[5,3,4]
nums2[0])
[1,0,3],
(nums1[n
(nums1[1]
(nums1[0]
nums2[1])
nums2[n
fixed-length
[1,0,0,2,3,0,0,4]
written.
[1,0,2,3,0,4,5,0]
[-2,1,-3,4,-1,2,1,-5,4]
approach,
conquer
subtle.
[5,4,-1,7,8]
figured
coding
[4,-1,2,1]
nums[0..i]
[true,false,false]
booleans
011;
most-significant-bit
least-significant-bit).
x0
[false,false,false]
two-bit
one-bit
11).
bits.length
bits[i]
[1,0,0,1,0,0,1,0],
cells.length
vacant.
[0,1,0,1,1,0,0,1],
summarizes
[0,0,1,1,1,1,1,0]
cells[i]
vacant
vacant,
[0,0,1,1,0,0,0,0]
actor_id
+-------------+-------------+-------------+
director_id)
actordirector
director_id
(actor_id,
director
provides
actor
edocteel
tsetnoc"
"dog
ekat
preserving
"god
contest"
gnid"
"let's
ding"
"s'tel
682289015
it.)
[5,2,3,4,1]
(recall
[1,2,5,4,3]
(1-indexed.)
[1,-1,4,3]
[10,4,3]
[1,-5,-20,4,-1,3,-6,-3],
[10,-5,-2,4,0,3],
k)]
[1,-1,-2,4,-7,3],
"a")
("a",
("aaca",
"acaba")
"ba")
"aacaba"
(good
split).
"caba")
sright
("aac",
("aacab",
"aba")
("aa",
sleft
"cd").
["(())()","()()()"]
["(a())()","(a)()()"]
"()())()"
"(a)())()"
{amount}
"{name},{time},{amount},{city}"
["alice,20,800,mtv","alice,50,1200,mtv"]
["alice,50,1200,mtv"]
["alice,20,800,mtv","bob,50,1200,mtv"]
2000.
{name}
{city}
{time}
minutes),
["alice,20,800,mtv","alice,50,100,beijing"]
["bob,50,1200,mtv"]
or;
$1000,
quadruplet
quadruplets,
[1,3,2,4,5]
nums[k],
l)
quadruplets.
nums[l].
"mdbabdm".
"leetcodocteel".
insertions.
"mbdadbm"
"zzazz"
"mbadm"
'a's,
(palindrome)
(palindrome).
[2,3,1,3,1,null,1]
[2,3,1].
[2,1,3,1],
[2,1,1,1,3,null,null,null,null,null,1]
[2,1,1],
molecules.
releasehydrogen
barrier
"ohhhho",
bond
"hho"
"ohh"
oxygen
"hhohoh",
"oohhhh"
molecule
water[i]
"ohhhoh",
"ohhohh"
"hoh"
"hhoohh",
water.length
"hohohh"
hydrogen.
synchronization
hydrogen
releaseoxygen
thread.
"hohhoh",
barrier.
sets;
"hhohho"
barriers
molecules
enforces
"hohhho",
explicitly;
with.
examine
bind
(numcourses
indirect.
prerequisites[i].length
[false,false]
[true,true]
[[1,2],[1,0],[2,0]],
[[1,0],[1,2]]
vj].
prerequisites.length
numcourses
prerequisites[i]
prerequisites,
(r
[[1,2,3],[1,5,1],[3,1,1]]
abs(c1
points[r].length
[[1,5],[2,3],[4,2]]
points[r][c]
smallest,
[1,2,3,6],
"rrll",
"rrrllrll",
"llllrrrr"
"lr",
"rlrrllrlrl"
"llllrrrr".
"rlrrrllrll"
"rl",
"rr",
342
[9,9,9,9,9,9,9],
465
[7,0,8]
[8,9,9,9,0,0,0,1]
l1
l2
[9,9,9,9]
[1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
"1317",
"1000",
k]
whitespaces
[1000]
elapsed.
billion
3x
(-1).
3x.
([6,7],
61
[2,3,3,4,6,7],
(nums
[7]).
[3,3,6,8],
numbers).
[3,5,6,7],
(63
[3,3,6]
61).
0110.
"a0b1c2"
"a0b1c2",
"1229857369"
"0a1b2c",
"0a1b2c"
(alphanumeric
reformatted
"0a1b2c".
"0c2a1b"
arr[i][j]
[0,1,1,1]
[0,1,1,1],
arr[0].length
[2,3,6,7,1,5,4]
[1,3,5,2,4]
[2,1,3,5,6,4,7]
[-1,0,0,0],
[-1,0,0,1,1,2],
"abacbe"
"aabc"
secret.
afterwards.
person)
people)
discovering
discovers
forget,
delay,
forget
forgets
he/she
(0-based)
[4,2,3]
logintime
"09:31",
09:45
01:30.
logouttime
09:31
midnight
10:00.
chess
10:00
began.
"03:00"
ended.
09:30
10:14
00:15,
03:00.
clock.
logout
00:45,
10:15
"10:14"
21:30
logouttime.
"21:30",
starts.
23:45.
logintime,
"leotcede"
"holle"
["bat","tab","cat"]
["a",""]
words.length,
["battab","tabbat"]
["abcd","dcba","lls","s","sssll"]
["a","a"]
strings)
[[0,1],[1,0],[3,2],[2,4]]
["abcddcba","dcbaabcd","slls","llssssll"]
majoritychecker
query(int
majoritychecker.query(2,
efficiently
majoritychecker(int[]
arr)
majoritychecker.query(0,
["majoritychecker",
threshold)
majoritychecker([1,
1]);
[1,3,2,5,null,null,9,6,null,7]
nodes),
end-nodes
[1,3,2,5]
(3,2).
(6,null,null,null,null,null,7).
levels.
(5,3,null,9).
[[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]
(diagonals)
non-zero.
[[5,7,0],[0,3,1],[0,5,0]]
x-matrix.
145
+------+------------+-----------+
2017-01-09
2017-01-01
visit_date,
2017-01-03
1455
visit_date
attended.
2017-01-07
2017-01-04
2017-01-02
increases,
2017-01-06
2017-01-05
id's,
215.
higher[i]
[4,8,12].
[5,7,9]
[5,435]
[2,6,10]
[2,10,6,4,8,12]
[1,1,3,3],
[8,10,12].
[435].
possibility
remembers
[220]
higher,
combining
lower[i]
[2,6,10,4,8,12],
belonged
2500].
[4,2,8],
[1,4,2,6],
downwards.
[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
[1,4,2,6,8],
obstaclegrid
obstacle.
[[0,1],[0,0]]
obstaclegrid[i].length
obstaclegrid.length
obstaclegrid[i][j]
fn(arr[i])
array.groupby(fn).
"2"}]
"false":
{"id":
array.length
],
string(list[0]);
{"id":"1"},
array.groupby(fn)
"id"
acceptable.
"1"}],
"true":
"1"},
"2":
{"id":"2"}
_.groupby
string(n
item.id;
(item)
9]]
selector
[{"id":
[[1,1,3],[3,2,2],[1,1,4]]
[[1,2],[4,3]]
pointing
arrow
signs
1][j])
[[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
frozen
3.5
2"
joker
monica
user's
review
2020-01-01
review.
movie_id
"joker")
2020-02-12
avengers
created_at
2020-01-12
movierating
("avengers",
"frozen
rated
2020-02-22
(movie_id,
["01:15","02:00"],
["01:20","03:00"]
event2
["01:00","02:00"],
hh:mm
["02:00","03:00"]
event1
starttime2
events).
event2[i].length
starttime1
event2,
endtime1]
endtime1
[starttime1,
[starttime2,
["10:00","11:00"],
2:00.
02:00.
evnet1.length
01:20
["14:00","15:00"]
event1[i].length
endtime2
event2.length
endtime2].
[3,2,1,2,3,4,3,4,5,9,10,11],
[1,2,3,3,4,4,5,6],
846:
https://leetcode.com/problems/hand-of-straights/
[3,4,5,6].
[9,10,11].
[[0,1],[0,2],[2,3],[2,4],[2,5]]
[8,12,6,10,10,10]
dist(0,1)
dist(0,5)
dist(0,2)
dist(0,3)
dist(0,4)
11361
[60864,25176,27249,21296,20204],
56803
[4,9,3],
neccesarilly
difference)
query_name
query_percentage
mule
golden
7))
ratio
query_name,
+------------+---------+-----------------------+
poor_query_percentage.
siamese
poor
shirazi
poor_query_percentage
sphynx
poor_
retriever
database.
+------------+-------------------+----------+--------+
german
0.66
shepherd
((2
"bbbab"
"bbbb".
subsequence's
restart
chalk,
chalk[i]
[5,1,5],
chalk.
solve,
chalk.length
[3,4,1,2],
chalk[i],
diagonals,
4*106
numsi.length
[[1,2,3],[5,6,7],[9,10,11]]
[[1,2,3],[5,17,7],[9,11,10]]
[3,5,7].
prime,
[1,5,9]
nums[i][i]
nums[i][nums.length
memoizedsum(2,
memoizedsum(1,
fib
fib(5)
memoizedsum
fib(n
"fib"
[[5],[]]
["call","call","getcallcount","call","getcallcount"]
memofactorial
"sum"
["call","getcallcount"]
[4,4,1,3,2]
[[2,2],[2,2],[],[1,2],[]]
1));
"factorial"
memofactorial(3);
memofactorial(2);
attempts
memoize(sum);
sum()
[2,6,2,2,6,2]
fib,
factorial.
["call","call","call","getcallcount","call","getcallcount"]
factorial(n
memoize(factorial);
[[2],[3],[2],[],[3],[]]
[1,0,0,0,0,1],
[[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]
[0,0,0,1,1,0,0,1],
presence
[[0,1],[1,2],[2,3],[3,4],[4,5]]
if)
node.)
[1,2,3,4,5,6,7,8,9,10,11],
disk,
once?
algorithm?
nums2's
size?
sorted?
better?
nums1's
[20,9,8]
green:
[[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
[228,216,211]
blue:
red:
corner)
middle)
[[7,7,7]]
228
depicted
(area
211
nums[k
points],
nums[k-1]].
[2,4,1,3,0],
[4,0,2,3,1],
[1,3,0,2,4].
[no
[2,3,1,4,0]
[3,1,4,0,2],
[2,3,1,4,0],
point].
[1,4,0,2,3],
[1,3,0,2,4]
[one
point],
afterward,
[0,2,3,1,4],
questions,
types[i].length
indistinguishable.
counti
marksi]
types[i]
[[6,1],[3,2],[2,3]]
[[50,1],[50,2],[50,5]]
[counti,
counti,
marksi
types.length
[[1,1,2],
[2,1,1]]
"aacab".
"aaabc"
"aaabc".
"baaca",
string..
"bac".
add(key)
["myhashset",
contains(key)
myhashset.contains(3);
myhashset();
found)
myhashset.contains(2);
hashset.
(already
myhashset
myhashset.add(2);
"contains",
"contains"]
myhashset.add(1);
myhashset.remove(2);
hashset,
myhashset.contains(1);
removed)
[5,5,2,5].
comprising
[4,6,2,5].
must:
[4,6,1,6].
[3,7,1,6]
[10,1]
"azxxzy"
"aaca",
"ay"
"abbaca"
"ca".
folder.length
["/a","/a/b","/c/d","/c/d/e","/c/f"]
["/a"]
"/a/b/c"
filesystem.
"/a/b"
folder[i].length
"/leetcode"
folder[i]
["/a","/c/d","/c/f"]
"/leetcode/problems"
"/c/d"
"/c/d/e"
sub-folder
["/a","/a/b/c","/a/b/d"]
folder[j],
"/a".
"/a/b/d"
["/a/b/c","/a/b/ca","/a/b/d"]
[4,2,3,1],
mechanics.
cars.
repaired
mechanic
mechanic.
repaired.
mechanics
[5,1,8],
ranksi
garage
bottle
drink.
numexchange,
drinking
drink:
numbottles
numexchange
bottle.
weight.
msts:
[[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
mst.
msts,
[[],[0,1,2,3]]
observe
msts
(mst)
weighti
mst
[[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
(mst).
pseudo-critical.
graph's
[[0,1],[2,3,4,5]]
leftchild[i],
leftchild
rightchild[i]
rightchild.length
[2,-1,-1,-1]
rightchild
[1,-1,3,-1],
rightchild[i],
leftchild[i]
[2,3,-1,-1]
leftchild.length
375
12345678987600000
7219856259000.
"e0".
1234567
"24e0"
39916800.
1234567654321
"24e0".
abbreviation
<suf>
1234567.
12345...54321,
"7219856259e3"
371,
399168.
abbreviate
"e2".
"399168e2"
<pre>...<suf>
"399168e2".
"<pre>...<suf>ec".
<pre>
"12345...89876e5".
letter;
[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]
[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]
[[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]
"aaca"
lcp.length
word[3,...,3]
word[i,n-1]
lcp.
lcp[3][3]
"abab".
"aaaa".
word[j,n-1].
lcp,
lcp[i][j]
"aabd"
lcp[i].length
nums[a]
nums[c],
[1,0,-1,0,-2,2],
nums[d]
nums[b],
nums[b]
[nums[a],
nums[c]
nums[d]]
[[2,2,2,2]]
[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
[[5,10],[6,8],[1,5],[2,3],[1,10]]
[[1,3],[5,6],[8,10],[11,13]]
capacities
plants,
plants[i]
his/her
cans
refill
max(plants[i])
refills
alice/bob
(instantaneously)
waters
needs.
can,
plant,
capacitya,
capacityb
cans.
[2,2,3,3],
plants.length
needs,
capacitya
phone.
pressedkeys.length
"222222222222222222222222222222222222"
"ce".
sent.
"abdd",
"badd",
"aaae",
texting
"22233"
82876089
2082876103
pressedkeys
82876089.
transmission,
"2266622".
"aaadd",
"cdd",
'k',
messages,
idi+1
leavetimei
[[0,10],[1,20]]
[[0,3],[2,5],[0,9],[1,15]]
[[1,1],[3,7],[2,12],[7,17]]
leavetimei]
nums[indexk]
expressible
indexk
expressible,
expressible.
nums[index1]
nums[index2]
["int
["ab"]
*/",
source[i].length
"*/"
c;","}"]
"/*"
comments.
double-quote
deleted,
main()",
yet
"/*/"
"}"]
test",
"int
"{
main()
declaration
quote,
delimited
/*test
["/*test
c;","a
*/
comment.
c++,
comment,
comment
details.
"line",
"string
6-9.
single-quote
*/";"
","int
["a/*comment",
/*
c;",
comments,
macros
"more_comment*/b"]
control
newline
["ab"].
(non-overlapping)
'\n'.
main()","{
program,
"//"
right.)
visualized
multiline
"/*
eventually
"a/*comment\nline\nmore_comment*/b",
(1,4),
(0,5),
[1,7,9,2,5],
(1,5).
[0,1,7,4,4,5],
pair:
operations[i][1].
[[1,3],[2,1],[3,2]]
[3,2,4,6].
[3,2,7,6].
[3,1].
operations[i][1]
[1,2,4,6],
operations[i].length
[3,2,7,1]
operations[i][0],
[3,2,7,1].
operations[i][0]
[[1,3],[4,7],[6,1]]
routes[0]
sum(routes[i].length)
routes[i].length
source,
routes.length
routes[i][j]
initially),
[[1,2,7],[3,6,7]],
[[7,12],[4,5,15],[6],[15,19],[9,12,13]],
routes[i]
'bbb'
'aaa'
maximal.
[989,null,10250,98693,-89388,null,null,null,-32127]
[1,7,0,7,-8,null,null]
apple",
sour"
["sweet","sour"]
"apple
["banana"]
sweet",
flowerbed
flowerbed.
flowerbed[i]
planted,
plots.
no-adjacent-flowers
[1,0,0,0,1],
flowerbed.length
m|,
((n
[5,5,1,1,3].
arr[m]
[1,1,3,5,5],
[-7,
[11,8,6,6,7]
[5,1,4,2,3].
[6,7,11,7,6,8],
[11,8,6,6,7,7].
stronger
22]
17,â€‰3],
77
[13,25,83,77]
[1,3,2,5,8,3,7,7].
[7,1,3,9]
[1,3,2,5,8,3,7,7]
[7,7].
separations
10921,
[7,1,3,9].
[1,0,9,2,1].
[8,3].
2.667
"2/3/4".
"1000/((100/10)/2)"
8/3
"1000/(100/10/2)".
bold
1000/100/10/2
priority.
(2/(3/4))
1000/((100/10)/2)
1000/(100/10/2)
priority
"1000/(100/10/2)"
1000/(100/(10/2))
[1000,100,10,2]
"2/(3/4)"
1000/(100/10)/2
influence
1000/100/(10/2)
[[9,9,4],[6,6,8],[2,1,1]]
wrap-around
[[3,4,5],[3,2,6],[2,2,1]]
[3,-2,1,-5,2,-4]
[-2,-5,-4].
[3,1,2,-2,-5,-4],
|nums[i]|
[3,1,-2,-5,2,-4]
[-2,3,-5,1,-4,2]
[1,-1]
[3,-2,1,-5,2,-4].
[1,-2,2,-5,3,-4],
signs.
[-1,1]
[1,-1].
inverts
"011100110110001".
sn.
"011100110110001"
"0111001"
reverse(invert(si
11th
"0111001".
reverse(x)
invert(x)
[4,3,2,5,6,7,2,5,5],
2*3+
[2,4,6,2,4,6,4,4,4],
"7772"
"977",
cost[i],
cost("7772")
[7,6,5,5,5,6,8,7,8],
cost("85")
3*1
"85"
[3,11,14]
xi+2
[1,3,7,11,12,14,18]
[1,2,3,5,8].
fibonacci-like:
[7,11,18].
[1,11,12],
[2,1,2,5,3,2]
[5,1,5,2,5,3,5,4]
[1,2,3,3]
odd;
even;
square"
"magic
square:
[[4,3,8,4],[9,5,1,9],[2,7,6,2]]
[[8]]
not:
contiguous).
subgrids
[[45,45,45],[45,45,45],[45,45,45]]
mat[r][c]
for:
answer[i][j]
[[12,21,16],[27,45,33],[24,39,28]]
["aaa","aaa","aa"]
["aba","cdc","eae"]
[0,1,2,4,8,3,5,6,7]
[1024,512,256,128,64,32,16,8,4,2,1]
[1,2,4,8,16,32,64,128,256,512,1024]
[0,1,2,3,4,5,6,7,8]
[1,2,4,8]
representation,
fashion.
[7,8].
[[1,2],[7,8],[4,5]]
subsequences:
[1,2,3,3,4,5]
[1,2,3,4,4,5]
[1,2,3,3,4,4,5,5]
integer).
ther
[7,1,4,6,null,5,3,null,null,null,null,null,2],
[6,7]
[[1,2,3],[4,5,0]]
[[1,2,3],[5,4,0]]
solved.
solved
solves
[[1,2,3],[4,5,0]].
[[1,0,2],[4,5,3]]
[[4,1,2],[0,5,3]]
[[1,2,0],[4,5,3]]
[[4,1,2],[5,0,3]]
[[1,2,3],[4,0,5]]
[[0,1,2],[4,5,3]]
"push":
["push","push"]
top)
["push","push","pop","push"]
["push","push","push"]
"pop":
[2,5,3,9,5,3]
|27
(integer
division)
|(2
|19
|24
[6,5,4,4]
decreasing.
monotonic,
[2,3,5,12,18],
[1,4,8,10,20],
|9-8|
|3-1|
mailbox.
|20-20|
|18-14|
|4-3|
|12-14|
+----+------------+-------------+--------+
war
rating.
irish
"boring".
description
9.1
6.2
genre,
science
8.9
ids:
fantacy
fiction
8.6
8.5
interesting
"cab"],
prefix:
prefixes:
"bc".
["abc","ab","bc","b"]
answer[3]
(5),
[4,3,2,3,5,2,1],
"00101001",
decimal.
decimal,
"00101"
"00100"
"00010",
"1001010",
"000001"
rung)
rungs.length
rungs.
[1,3,5,7,8,10].
climbed
[3,4,6,7],
rung
rungs[i]
[3,6,8,10],
rung.
dist.
ground.
[1,3,5,10],
[1,3,4,6,7].
[[5,3],[4,7],[2,3]]
bi].
[4,2,1,3,7].
[4,5,3]
[[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]],
(4,2).
(3,2)
eliminating
[[0,1,1],[1,1,1],[1,0,0]],
(obstacle).
trimmed(subarray)
[1,2,1,2,1,3,3],
[3,3,3,4,4].the
trimmed([1,2,3,3,3,4,4])
[1,2,1,3,3]
[1,2,1,2,1],
[3,4,3,4].
subarray:
splits.
[1,2,1,2,1]
[1,2,1,3,3].
[1,2,3,3,3,4,4],
[1,2,1].
[1,2,1,2,1].
trimmed([3,1,2,4,3,4])
trimmed(subarray).length.
matrix[i][j],
o(log(m
n))
[[1,3,5,7],[10,11,16,20],[23,30,34,60]],
subroot,
subroot
[3,4,5,1,2],
[3,4,5,1,2,null,null,null,null,0],
subroot.val
[6,2,7,3],
[4,2,0,7,4]
[1,0,2,1],
["a","a"],
["a","b","c","ab","bc","abc"],
["c"]
figure)
figure):
watchedvideos.length
watchedvideos[i]
["d"]
["b","c"]
friends[i][j]
(green
friends[i]
greatest.
[[1,2],[0,3],[0,3],[1,2]],
friends[j]
[["a","b"],["c"],["b","c"],["d"]],
watchedvideos[i][j].length
general,
friends[i].length
figure).
watchedvideos
friends.length
watchedvideos[i].length
(increasing).
(yellow
partner_id's.
2020-12-7
dailysales
lead_id's
toyota
partner
+-----------+-----------+---------+------------+
make_name,
2020-12-8
unique_leads
date_id
make_name
2020-12-8,
lead_id
+-----------+-----------+--------------+-----------------+
2020-12-7,
honda
partner_id
unique_partners
ron
reports.
department,
+-----+-------+------------+-----------+
anne
+---------------------+
secondhighestsalary
"average
87709
[$20000,
108939
$20000.
category.
accounts_count
salary:
$50000.
account_id
+----------------+----------------+
$50000].
91796
category,
+------------+--------+
"low
12747
categories.
salary":
[1,6,7],
[3,4,9],
[2,6,7],
[2,4,9],
[3,4,8],
[2,6,8],
[1,5,9],
[1,6,8],
[3,5,7],
[2,4,8],
[1,5,7],
[[7]]
[2,1]:
construct.
perm[i].
perm[1]
perm[2]
[3,4,2]
4's
afterwards,
[2,2,3,3,3,4]
consequently,
"defegde",
"eccbbbbdec"
"ababcbaca",
"ababcbacadefegde",
incorrect,
"hijhklij"
[9,7,8]
"hijhklij".
"ababcbacadefegdehijhklij"
getnthhighestsalary(2)
+------------------------+
(3+3)
[2,3,3,1,2]
(2+3+2)
(3+2+5)
(5+6+4)
[3,1,5,6,4,2]
amount[j]
any).
14700
subtotal
1600
2500.0.
cashier.getbill([1,2],[1,2]);
groceries
paying,
cashier
products,
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
product[j]
discount)
7350.
product[j],
percent
cashier.getbill([4],[10]);
getbill.
bill,
supermarket
discount,
product.length
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
cashier(int
7350.0.
cashier.getbill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);
getbill(int[]
prices)
4000.
100).
cashier.getbill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]);
cashier.getbill([3,7],[10,10]);
800.0.
product).
["cashier","getbill","getbill","getbill","getbill","getbill","getbill","getbill"]
paying
frequented
14700,
cashier.getbill([2,3,5],[5,3,2]);
4000.0.
cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
800.
subtotal.
cashier.getbill([7,3],[10,10]);
500.0.
indexth
linkedlist
1->2->3
addatindex(int
mylinkedlist.deleteatindex(1);
addattail(int
"addattail",
mylinkedlist.addathead(1);
library.
mylinkedlist.get(1);
mylinkedlist.addattail(3);
"addathead",
mylinkedlist()
deleteatindex(int
inserted.
["mylinkedlist",
1->3
pointer/reference
"deleteatindex",
prev
addatindex
addathead(int
mylinkedlist.addatindex(1,
addathead,
doubly
deleteatindex.
"addatindex",
addattail,
mylinkedlist
mylinkedlist();
["eat","tea","tan","ate","nat","bat"]
[["a"]]
[["bat"],["nat","tan"],["ate","eat","tea"]]
phrase,
typically
[[""]]
"g"
(al)
"algaloog"
"g()()()()(al)"
"goal".
"(al)g(al)()()g"
command.length
interpret
al
command
parser's
"g()(al)"
"goal"
"gooooal"
"al".
interprets
"(al)"
"x+5-3+x=6+x-2"
coefficient.
"2x=x"
equation.length
"x=2"
"x=x"
"no
"x=0"
"x=#value".
"infinite
equation.
solutions"
dig[i]
underneath,
c2i
uncovered
artifacts[i].length
artifacts[i]
r2i,
r2i
c2i]
c1i,
(r1i,
r1i,
(ri,
artifacts.
[r1i,
artifact.
ci),
c1i)
(r2i,
dig.length
buried
mud
ri,
extracted,
dig
artifact
c2i,
uncovered,
extract.
[[0,0],[0,1],[1,1]]
excavated
c1i
excavate
artifacts.length,
'd')
r1i
c2i)
uncovered.
namely
dig[i].length
[[0,0,0,0],[0,1,1,1]],
min(n2,
"0.5"
repeating,
numerator,
"0.(012)"
fraction,
enclose
mousejump
'c'(cat),'m'(mouse).
(cat,
food.
mousejump,
mouse),
catjump,
["m.c...f"],
["####f","#c...","m...."],
mouse,
catjump
cat.
(left,
7890
line),
xxx-xxxx
one-liner
456
digit)
456-7890
(xxx)
987-123-4567
xxx-xxx-xxxx.
(123)
[1,null,2,3]
[[0,2],[0,5],[2,4],[1,6],[5,4]]
other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
'buy')
30000$
(stock_name,
stock.
stock_name
7000$.
capital_gain_loss
1000$
-23000$.
(1010
10$
'sell')
stocks
9000$.
gains/losses
30000
9500$.
'sell'
9500
('sell',
'buy'
operation_day
-23000
+---------------+-------------------+
('buy'
handbags
masks
8000$.
+---------------+-----------+---------------+--------+
1000)
corona
500$.
operation_day)
10000$.
(500
1010$.
draws
0.73278
probabilities.
"21".
outcomes
loosely
maxpts
maxpts],
max(bik)
bij
[1,0,2].
[1,0,2,1,3]
[3,3,2,2,1].
[3,3,2,2,1]
nums[i...j].
sized
[0,2,1].
or.
coprime.
validly
[4,7,8,15,3,5]
coprime,
val2)
gcd(val1,
[4,7,15,8,3,5]
[1,2,3,4]:
3's,
[3,1,3,4,3]:
[3,1,3,4,3],
3-0
[2,4,1]
[3,2,6,5,0,3]
transactions:
4-2
6-2
"r3g2b1"
color-position
rings,
'b').
rods.
rings.length
"g4"
"b0b6g0r6r0r6g9"
"b0r0g0r9r0b0g0"
rings:
rings[i]
'9').
('r',
promise.then(console.log);
result;
hasn't
promise.catch(console.log);
${msg}`;
{"resolved":
cancellable(generator);
res("hello"));
catch(e)
2));
yielded
settimeout(cancel,
caught,
t=0ms
hello"}
`error:
generator.
completes.
"success";
msg
"error:
rejects.
settimeout(resolve,
promise]
promise((resolve,
rejected"));
cancelled.
rejects,
{"rejected":
200ms,
caught.
object).
cancel
cancellable(tasks());
resolving
res(1));
"cancelled"}
"cancelled"
yielded.
uncaught,
reject("promise
cancel()
function*
promise(resolve
200));
generatorfunction
usual.
tasks()
t=100ms,
resolve(2));
function*()
promises.
reject)
resolve(2
[cancel,
t=150ms,
promise.
cancelling
4}
42}
responsibility
cancelledat
generatorfunction();
caught
secret"
quickly"
lqantp
ycgk
bs
"zwx
cipher
substitution
message.length
boy"
dog".
mnoeius
"eljuxhpwnyrdgtqkviszcfmabo",
suepuv"
themselves.
hnfx
"happy
('h'
alphabet),
dog",
"eljuxhpwnyrdgtqkviszcfmabo".
boxing
(actual
message.
"vkbs
vcnjrdb"
substituted
groups[i]
batches
served
bakes
donuts.
donut
batchsize
donut.
[6,2,4,5,1,3].
batch.
batchsize.
[1,3,2,5,2,2,1,6]
groups.length
1):
[9,8,4,2,1],
high.
[1,4,2,7],
"abbcccddddeeeeedcba"
"eeeee"
count_no_trans
910
see,
+----------+-------------+
transaction_id
visit_id.
mall.
mall
310
+-------------+----------------+
+----------------+----------+--------+
visit_id
970
[1,1,0,1],
[0,0,0,0,0,1,1,1].
[1,0,0,0,0,0,1,1],
sum(nums)
comprises
releasetimes.length
releasetimes[i]
keypad
keypresses,
released.
releasetimes[i
designed
test,
50).
[9,29,49,50],
keyspressed
"cbcd"
keyspressed.length
29).
releasetimes
(pressed
releasetimes[0].
keypresses.
tested,
releasetimes[i+1]
[12,23,36,46,62],
49).
"spuda"
keyspressed[i]
released
tester
duration.
keypresses
release
keypress
releasetimes,
"sentence4
is2
i4
and3"
i"
myself
a3
me1
a3".
sentence4",
sentence4
a3"
this1
appending
"me
i4",
this1"
"me1
"myself2
"this1
"is2
and3
myself2
preserve
[1,2,2,4,3,5]
[1,4,3,2,5,2],
collision.
happens.
direction;
monkey.
movements.
monkey
addelement
calculatemkaverage()
"calculatemkaverage",
["mkaverage",
mkaverage(int
[3,1,10,5]
obj.addelement(1);
"addelement",
mkaverage
[3,1,10,5,5,5]
k*2
obj.addelement(3);
obj.calculatemkaverage();
5/1
obj.addelement(5);
[3,1,10]
[3,1,10,5,5]
[3,1,10].
addelement(int
"calculatemkaverage"]
mkaverage(3,
obj.addelement(10);
calculatemkaverage.
alike.
"text"
"bo"
'u').
"ok".
"textbook"
"book"
"book".
plot
plot,
plots,
arrangements:
[1,4,6,8,10]
sum(|nums[i]-nums[j]|)
0-indexed,
[24,15,13,15,21]
|2-5|
|5-2|
|3-2|
result[2]
[[1,2],[2,3],[3,4],[4,1],[1,5]]
2d-array
2d-array.
num[1]
num[0]
'3'.
"1210"
"1210",
num[2]
"030"
violate
yes
+----+----+----+----------+
z)
+----+----+----+
[1,1,2,3,3]
haystack
haystack.
needle
needle.length
"leeto"
haystack.length,
"sadbutsad",
haystack,
[2,3,5,6,7]
[2,4,16].
[4,16,2].
[4,16,2]
[4,3,6,16,8,2]
streak.
max(|nums[1]
nums[4]|,
nums[j]|,
|nums[2]
max(0,
nums[5]|)
(nums.length)/2
[10,1,2,7,1,3],
[4,2,1,2],
attain.
t0
tn+1
2^31
tn
tn+2
tn.
1389537
t_3
t_4
tn+3
(signed
-123
unsigned).
-321
examples).
farthest
[4,3,6,4,6,7]
[5,2,6,5]
[0,1,1],
[0,1,2,2,5,7],
maximumbit.
2maximumbit
nums[nums.length-1]
maximumbit
[0,1,1,3],
[0,3,2,3]
[2,3,4,7],
[-10^4,
10^5].
10^4].
[3,1,4,3,null,1,5]
(3,1,3)
[3,3,null,4,2]
(3,4)
2d-plane,
|yi
yj|,
[[0,0],[2,2],[3,10],[5,2],[7,0]]
[[3,12],[-2,5],[-4,1]]
1,3,4,2
[[4,3,2,1]]
1,3
[[1,3,4,2],[1,3],[1]]
[1,3,4,1,2,3,1]
le
[[78],[4,64],[91]]
sum(pieces[i].length)
[4,64]
pieces[i].
pieces[i][j]
[49,18,16],
[91]
[91,4,64,78],
[78]
[[16,18,49]]
pieces[0].
[[88],[15]]
[15,88],
[88]
pieces.length
pieces[i].length
take.
durationi,
courses[i]
[[100,200],[200,1300],[1000,1250],[2000,3200]]
courses,
3300th
1101st
courses.length
ready
lastdayi.
lastdayi
1100th
lastdayi]
101st
[durationi,
[[3,2],[4,3]]
1300th
most:
[[0,0,0],[0,1,0],[1,2,1]]
[[0,0,0],[0,1,0],[1,1,1]]
signal.
edges.)
[[2,1,1],[2,3,1],[3,4,1]],
signal,
[[1,2,1]],
wi),
[[7,3,4,9],[2,3,6,2],[2,3,7,0]],
[[0,0]],
[[5,2,4],[3,0,5],[0,7,2]],
selects
first_year
+------------+------------+----------+-------+
locked[3]
locked.length
locked[1]
locked[i]
s[i].
locked,
s[0].
"))()))",
s[3].
"010100"
permits
[[".q..","...q","q...","..q."],["..q.","q...","...q",".q.."]]
[["q"]]
n-queens'
placement,
soon.
venture
pure
projects,
capital.length
resources,
profits[i]
projects.
capital.
capital[i]
profits
profits.length
projects
ipo.
|-2|
[-4,-2,1,4,8]
|4|
|8|
[2,-1,1]
|-4|
|1|
serializations
[1,2,-3,3,1]
[1,2,3,-3,-2]
objects.)
[1,2,3,-3,4]
unique_id
employeeuni
+-----------+----------+
+----+-----------+
unique_id)
+----+----------+
prefix-aligned.
"01110",
"0000".
"1001",
[3,2,4,1,5]
"11110",
"01100",
flips.length
flips[i]
"0001",
"1111",
touches
thereafter,
routine
minutes:
pictorial
(n-1-i)th
twins
[5,4,2,1]
[1,100000]
twin.
100001
max(7,
[4,2,2,3]
100001.
afer
2th
1th
changes,
seconds,
+-------------+---------+------------+-----+
(reports_to
null).
reports_count
+-------------+-------+---------------+-------------+
reports_to
(41+36)/2
him,
average_age
reporting
managers,
38.5,
anyone
[[2,2],[3,3]]
ops.length
[[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
m[x][y]
incremented
ops[i].length
ops,
ops[i]
10080
[2,4,3,7,10,6]
[2,4,8,16]
0101,
1100,
determined.
ans[i
ans.
[1,2,1,1,2,1]
[nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
[nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
[1,3,2,1,1,3,2,1]
[1,3,2,1]
firstlen,
[0,6,5,2,2,5,1,9,4],
[5,6,0,9]
secondlen.
[3,8,1]
secondlen,
[2,1,5,6,0,9,5,0,3,8],
[8,9]
secondlen
firstlen
[3,8,1,3,2,1,8,9,0],
[0,3,8]
mycalendar.book(20,
30]]
25],
[15,
mycalendar()
["mycalendar",
mycalendar();
mycalendar
mycalendar.book(10,
25);
mycalendar.book(15,
[4,11]
subtree,
children;
[6,2,4]
considered,
231).
36,
3s
[10,5,10,10]
10s
[2,1,3,1,2,3,3]
[5,0,3,4]
j|.
[4,2,7,2,4,4,5]
(p2,d2,p1,d1).
delivery(i)
(p2,p1,d1,d2),
pickup(i).
services.
(p1,p2,d1,d2),
(p1,
d1),
(p2,p1,d2,d1)
pickup/delivery
(p1,d2,p2,d1)
(p1,p2,d2,d1),
(p1,d1,p2,d2),
trips,
trips.length
[2,2,10,6],
non-adjacent
[[0,1],[1,2],[1,3]],
trips[i]
[0,1,3].
proven,
[[0,3],[2,1],[2,3]]
preference
referred
sandwich
stack)
queue).
cafeteria
students.length,
[1,1,0,0],
queue's
[1,0,0,1].
[1,1,0].
sandwiches
[0,0,1,1].
students[j]
(j
[1,0,1].
sandwiches[i]
sandwiches.
sandwiches.length
colony.
built,
prevroom.length
prevroom
prevroom,
prevroom[i]
[-1,0,0,1,2]
prevroom[0]
rooms:
[4,2,5,3]
[6,1,5]
[6,2,1,2,4,5]
reindexing
subsequence).
[5,6,7,8]
(after
(+9)
(+6)
(-9)
(+1)
521
(+5)
(-8)
886996
(+8)
s[j].
"cbad".
total)
[3,2,20,1,1,3],
[1,1,4,2,3],
[5,2,4,null,1],
[5,2,4,null,1,3]
construct([a[i
[5,2,3,null,1],
[2,1,5,4],
construct([a[0],
construct(b).
(root
[5,4,null,1,3,null,null,2]
construct(a)
[2,1,5,4,3]
routine:
construct(a))
[2,1,5,3,4]
a[i
[5,2,4,null,1,null,3]
[1,4,2,3,5]
construct(a).
a[a.length
a[i].
1]]).
[4,1,3,null,null,2],
[2,1,5,3],
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
[3,9,6],
[4,4,8,13].
[1,4,8,13],
[1,8,8,13].
[1,4,13,13].
[7,8,9,11,12]
[3,4,-1,1]
missing.
19:
[[2,3],[2,5],[1,8],[20,25]],
22:
contains,
[3,3,1,4]
[2,-1,4,6]
[[1,4],[2,4],[3,6],[4,4]],
[20,25]
[2,19,5,22]
18.25,
33/2
18.25
9.5.
14.75
14.5.
9.5
1.5.
16.5,
[5,19,8,1]
15.5.
[3,8,20]
[1.5,
14.5
14.75.
overall,
operations.)
4.75.
4.75,
31/2
4.75
16.5
16.5.
(swapping
positions)
"arts"
"tars"
{"tars",
"tars",
"arts"}
"rats",
["omv","ovm"]
"star"
["tars","rats","arts","star"]
"rats"
similarity:
{"star"}.
"arts".
strs.
0-indexed.)
champagne,
floor.)
glasses
now.
query_row
query_glass
excess
pyramid,
liquid
champange.
pictured
glass
liquid.
champagne.
poured
glasses,
pouring
100000009,
glass,
poured,
champange
0)).
(target),
candidate
(candidates)
[2,5,2,1,2],
[10,1,2,7,6,1,5],
11!
f(11)
1!,
convention,
x!
f(x)
3!,
x!.
4!
2!,
0!
39916800
0!,
**
2.82842...,
python.
exponent
0.5)
[2,6]},
[3,6],
subsequence:
[2,3,3,4]
[2,4,3,3,5,4,9,6],
competitive.
[5,6],
{[3,5],
server-to-server
removed,
[[3,1]]
[[0,1],[1,2],[2,0],[1,3]]
one-dimensional
ranges[i],
ranges[i]]
tap
[3,4,1,1,0,0]
open.
[-3,3]
[-3,5]
watered
activate
collect,
(diagonally)
["e11","xxx","11s"]
["e23","2x2","12s"]
up-left
["e12","1x1","21s"]
,[".",".",".","4","1","9",".",".","5"]
,["6",".",".","1","9","5",".",".","."]
filled)
,["7",".",".",".","2",".",".",".","6"]
[["8","3",".",".","7",".",".",".","."]
solvable.
repetition.
,[".",".",".",".","8",".",".","7","9"]]
validated
[["5","3",".",".","7",".",".",".","."]
,["4",".",".","8",".","3",".",".","1"]
(partially
8's
,[".","6",".",".",".",".","2","8","."]
,["8",".",".",".","6",".",".",".","3"]
sub-box,
,[".","9","8",".",".",".",".","6","."]
start),
[1,1,1,1,1,1,1,1,1,1],
start).
start)
["","2","","","","3",""],
["","","4","","","",""]]
[["","","","1","","",""],
res[r+1][c+2height-r-1].
res[0][(n-1)/2]).
["2","",""]]
res[r][c],
res.
[["","1",""],
res[r+1][c-2height-r-1]
2height+1
(e.g.
decoded,
"29"
"14",
"15",
"3",
"19".
"k").
"2*".
"22",
"18",
"1*"
"26",
"13",
"*".
"24",
"7",
"28",
"12",
"2*"
"17",
excluded).
"27",
"23",
"9".
"25",
"21",
"29".
"1*".
atleast
66,
77,
262
44,
88,
(<=
yellow,
color).
30228214
-500
depth-first
"1-401--349---90--88"
(dfs)
"1-2--3--4-5--6--7"
node),
[1,2,5,3,null,6,null,4,null,7]
[1,2,5,3,4,6,7]
"1-2--3---4-5--6---7"
[1,401,null,349,88,90]
4325
687
num2.
indeed
solution()
obj.decode(tiny);
decode(string
"https://leetcode.com/problems/design-tinyurl"
companion
https://leetcode.com/problems/design-tinyurl
guranteed
solution();
longurl.
tiny
http://tinyurl.com/4e9iak.
url.
encode(string
shorturl)
shorturl.
encode/decode
shorturl
restriction
tinyurl.
shortening
obj.encode(url);
longurl)
zeros:
(-2)^0
[1,0,0,0,0]
(-2)^2
(-2)^3
tiling,
tiles:
shape.
tile.
tilings
secondary
mat[1][1]
[[1,1,1,1],
[1,1,1,1]]
[4,5,6],
[[1,2,3],
[[5]]
[7,8,9]]
[1,2,3,4,5,100]
[2,7,9,4,4]
2m.
max(m,
mat[3][1],
[[1,1,1,1],[1,2,2,2],[1,2,3,3]]
[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
[[3,3,1,1],[2,2,1,2],[1,1,1,2]]
mat[2][0],
mat[4][2].
[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]
["bradford",
["alps",
"branford",
alpine,
score=2
["alpine",
queried
tracker.add("orlando",
querying
"bradford",
name="orlando"
name="branford"
bradford
locations,
location:
alps
bradford,
score)
locations:
precedes
["orland",
tracker.get();
orland.
better.
name="alpine"
add(string
alps,
sortracker()
name="bradford"
branford,
score=3
tracker.add("alps",
tracker.add("bradford",
invoked
"alps"
bradford.
worst.
invocation).
name="orland"
orlando,
get()
sortracker
branford
query).
name="alps"
"alps",
tracker.add("orland",
attractiveness
worst,
"orland".
"branford".
"orland"]
["orlando",
sortracker();
tracker.add("branford",
tracker.add("alpine",
supports:
["sortracker",
["branford",
"bradford".
scenic
[2,2,2,5,5],
[10,20,40,50,100,200].
primefactors.
[2,2,3],
factors:
primefactors
king.length
yking]
[xqueeni,
[[2,2],[3,4],[4,4]]
king.
queens[i].length
yqueeni,
queens.length
xqueeni,
[[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]],
[[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]],
ad
queens[i]
[xking,
xking,
dashes).
yking
yqueeni]
[[0,1],[1,0],[3,3]]
win"]
["alice
much"]
(underlined)
thanks
sentences.length
wait",
sentences[i]
much",
"continue
fight",
["please
leetcode",
too",
sentences[i].length
ocurrences
[1,1,1,2,2,2,3,3,3,4,4,4,5]
[2,2,1,1,3,3],
[2,2,1,1,5,3,3]
[2,2,1,1,5,3,3,5]
author)
author_id
+------------+-----------+-----------+------------+
articles.
viewer
(written
viewer_id
2019-07-22
authors
article_id
view_date
"facing"
(up),
"moves"
(left),
robot's
magnitude
started.
irrelevant.
(right),
completes
"ud"
(down).
magnitude,
[10,5,2,6],
trapped.
[0,1,0,2,1,0,1,3,2,1,2,1].
[4,2,0,3,2,5]
[0,1,0,2,1,0,1,3,2,1,2,1]
raining.
trap
(black
[19,13,26,4,25,11,21],
passengers.length
later,
[10,20],
buses[i],
[2,17,18,19],
[20,30,10],
buses[i]
arrived
passengers[j]
passengers.
passenger,
buses.length
passengers[i]
passenger.
[[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
[[3,2],[1,0]]
column-wise,
row-wise
negatives
522,
numerals.
[14,13,8].
148,
596
[7,52,2,4]
673
[5,14,13,8,12]
52,
[52,2].
512,
512.
1549.
74,
score's
[7,90,5,1,100,10,10,2]
[5,3,1,4].
(poor
[3,1,4].
loses),
[5,3,1,4,2]
["babca","bbazb"]
(row)
(strs[1][0]
strs[1][strs[1].length
"az"].
["ghi","def","abc"]
strs[1][1]
["bc",
strs[1][1]).
strs[1][0]
strs[0][0]
strs[0][strs[0].length
1]),
["edcba"]
starti.
[[1,2],[3,10],[12,16]]
end]
[[1,2],[3,5],[6,7],[8,10],[12,16]],
[[1,3],[6,9]],
[[1,5],[6,9]]
newinterval.length
[3,5],[6,7],[8,10].
newinterval
(merge
"aabaaaacaabc",
grandparent.
grandparents.
even-value
grandparent,
maxrow)
maxrow,
bms
gather(int
hall
spectators
ticketing
hall.
"gather",
bookmyshow
"scatter"]
maxrow
"scatter",
allocated,
(respectively)
bms.scatter(5,
bookmyshow(2,
scatter(int
scatter.
["bookmyshow",
maxrow.
bms.gather(2,
hence:
allocates
vary
bookmyshow(int
gather
bms.gather(4,
step).
nummoves
nummoves),
nummoves)
steps).
[1,2,3,4,5,null,6,7,null,null,null,null,8]
[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
cyclic
figures
[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],
layer:
[[40,10],[30,20]],
[[10,20],[40,30]]
[2,1,1,1,3,4,1],
[2,1,1,2],
array:
myhashmap.remove(2);
myhashmap.put(1,
[2,1]]
myhashmap.get(2);
myhashmap.get(1);
["myhashmap",
myhashmap()
hashmap.
myhashmap.put(2,
found),
put(int
myhashmap
myhashmap();
[2,2]]
key)
(key,
[[1,1],
mapped,
myhashmap.get(3);
"put",
"abcabc".
"abcdabcdabcd",
"cdabcdab"
notice:
[2,1,3,5,4,6,7],
[2,3,5,4,6,7,1]
arr[1]).
[2,1,3,5,4,6,7]
[5,4,6,7,1,2,3]
[3,5,4,6,7,1,2]
win_count
"(*))"
"(*)"
[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
[3,5,1,6,2,9,8,null,null,7,4],
leaf-similar.
apart
[1,0,0,0,1,0,0,1],
["11111"]
"1"]
[3,5,1,2,4],
1-indexed)
"10101",
[3,1,5,4,2],
"10111",
["1",
"10100",
"111"]
"00101",
extended
["111",
["1"]
(assuming
polygon.
1*1*5
[3,7,4,5]
triangle,
triangulation.
1*1*3
1*1*4
scores:
245,
[1,3,1,4,1,5]
3*4*5
triangles.
144
n-sided
triangulate
triangulations,
4*5*7
3*4*7
1*1*1
3*7*5
triangulated,
144.
[1,-10,7,13,6,8],
[-1,2,3]
excluded)
[1,0,2,3,6,8]
[1,-10,0,13,6,8]
[1,0,2,13,6,8]
[1,0,7,13,6,8]
mex
[-1,2,3].
[1,3,4,8]
[5,2,3,7,2]
ri].
[4,5,2,2,7,10],
[2,7,10]
[[0,1],[1,2],[2,3],[0,3]]
[4,5,2]
|1-3|
[2,1,4,1]
|4-8|
a[j]
0-based
[3,5]:
|a[i]
[0,1]:
[4,5,2,2,7,10]
[0,3]:
|7-10|
|3-4|
[[2,3],[0,2],[0,5],[3,5]]
nums[li...ri]
[-1,1,1,3]
a[j].
a[j]|,
plank.
plank).
[0,1,2,3,4,5,6,7]
right[i]
above:
left[i]
plank,
-the
right.length
ant(s)
left.length
[0,1,2,3,4,5,6,7],
4.0000000001,
treenode.left
findelements.find(3);
findelements.find(5);
findelements([-1,null,-1,-1,null,-1]);
findelements(treenode*
104]
recovers
findelements.find(4);
findelements([-1,null,-1]);
[null,true,false,false,true]
["findelements","find","find"]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
["findelements","find","find","find","find"]
find()
[[[-1,null,-1]],[1],[2]]
[null,true,true,false]
recovered
findelements.find(2);
treenode.right
treenode.left.val
findelements.find(1);
["findelements","find","find","find"]
findelements([-1,-1,-1,-1,-1]);
treenode.right.val
[null,false,true]
contaminated,
findelements
subrectanglequeries.getvalue(3,
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
(4x3)
newvalue,
[null,1,null,100,100,null,20]
(row,col)
subrectanglequeries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);
["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue","getvalue"]
(row2,col2).
getvalue(int
getvalue.
subrectanglequeries.getvalue(0,
col2,
subrectanglequeries([[1,1,1],[2,2,2],[3,3,3]]);
subrectanglequeries.updatesubrectangle(1,
newvalue
(row1,col1)
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
subrectanglequeries.getvalue(2,
[null,1,null,5,5,null,10,5]
["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue"]
updatesubrectangle(int
rectangle[i][j]
rectangle.length
subrectanglequeries
updatesubrectangle
subrectanglequeries.updatesubrectangle(3,
subrectanglequeries.updatesubrectangle(0,
rectangle[i].length
newvalue)
"1011"
[11],
banned[i],
[1,6,5],
all:
screen
notepad
notepad.
'aa'.
'aaa'.
copied
paste:
paste
screen.
colorful.
balloon.
neededtime[i]
neededtime.length
rope.
neededtime
ballon
help.
[1,2,3,4,1]
"aabaa",
ballons
"abaac",
[[1,1],[2,3],[3,2]]
[[1,1],[2,2],[3,3]]
boomerang.
candytype[i].
noticed
candytype.length
even).
candytype
candytype[i]
[6,6,6,6]
advice.
doctor.
much,
doctor
advised
doctor's
oranges,
kitchen
6/2
2*(9/3)
orange,
orange.
2*(3/3)
oranges.
"dbbca",
"aadbbcbcac"
interleave
s3,
t3
s3.length
|n
"aabcc",
o(s2.length)
"aadbbbaccc"
"aadbbcbcac".
tm
splits,
"dbbc"
[3,0,2,6,8,1,7,9,4,2,5,5,0]
(clockwise),
[[0,1,2,-1]]
[[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
presented
5500
1500
a)
temporary
statement,
tables.
sex
versa)
+----+------+-----+--------+
('m',
boxes[j]
size-8
size-10
(5-3)
packages[i]
packages,
(5-5)
supply).
(4-2)
[[12],[11,9],[10,5,14]]
[[1,4],[2,3],[3,4]]
[4,8],
size-4
packages.length
(4-3)
size-2
size-14
boxes[j].length
(10-10)
[[4,8],[2,8]]
[3,5,8,10,11,12],
boxes[j][k]
(14-11)
sum(boxes[j].length)
supplier
(14-12)
supplier,
(8-5)
produces.
(10-8)
suppliers
size-8.
size-3
size-5
package.
[5,3,4,5]
ties.
sum(piles[i])
[3,7,2,3]
demonstrated
relations[i].length
taking.
nextcoursei
[prevcoursei,
semesters
nextcoursei]
nextcoursei.
(n-1)
relations[i]
semester,
[[2,1],[3,1],[1,4]],
nextcoursei:
course.
prevcoursei,
prevcoursei
relations.length
nextcoursei],
courses.
semester.
[[2,1],[3,1],[4,1],[1,5]],
index[i],
index[i]
index.length
[0,4,1,3,2]
[1,2,3,4,0],
[0,1,2,2,1]
nums1:
[4,3,1,4],
[1,3,7,1].
[1,3,7,1],
[2,4,1,6],
[3,8,5,2],
[1,3,4,4].
maxletters.
"aababcaab",
maxletters
(between
s.length)
min(26,
minsize
maxsize).
array?
encounters
generator.next().done;
[6,1,3]
generator.next().value;
encounters.
arr.flat().length
[[[6]],[1,3],[]]
arr.flat()[i]
inordertraversal(arr);
0+2i.
[-100,
"1+-1i"
2i,
"1+-1i",
"0+-2i"
multiplications.
-2i,
0+-2i.
imaginary
"1+1i",
"real+imaginaryi"
i2
"0+2i"
"1+1i"
trees:
[2,4,5,10]
[5,0]
[2,2,5,0]
[1,2,2,2,5,0]
[2,5,0]
[[1,4,5],[4,7,7],[1,7,9]]
[[1,4,5],[1,7,7]]
colori]
{1,11}
segments[i].length
segment.
{2,4,6}.
segments,
mix,
segments[i]
[[1,4,14],[4,7,16]]
rightj,
{5,7}
[[1,7,9],[6,8,15],[8,10,7]]
[1,4)
{5,9}
[6,7)
{7,9}
segments.length
[[1,4,12],[4,7,12]]
endi)
[leftj,
simplicity,
mixed,
[4,7)
[8,10)
painted).
24)
[1,6)
[7,8)
sake
[1,7)
[[1,6,9],[6,7,24],[7,8,15],[8,10,7]]
mixed
{9,15}
mixj]
colori
rather
thin
painting[j]
mixj.
rightj)
[[1,4,5],[1,4,7],[4,7,1],[4,7,11]]
[[1,4,12],[4,7,7]]
{7}
"thequickbrownfoxjumpsoverthelazydog"
pangram,
div[i]
"998244353",
div
word[0,...,i]
[1,1,0,0,0,1,1,0,0]
"9",
"998244",
"9982443".
+-----------------+----------+
order_number
customer_number
+--------------+-----------------+
555
888
(130
2019-01-04
(110
2019-01-08
142.86
(customer_id,
860
(100
before).
jhon
visited_on
2019-01-02
2019-01-10
visited_on)
2019-01-03
anna
80)/7
analyze
840
122.86
jade
(customer_id)
150)/7
average_amount
110)/7
(120
2019-01-05
2019-01-06
jaze
+--------------+--------------+----------------+
2019-01-09
[1,3,3,2,2]
[3,1,1,2,2,2]
[5,-1,4,4,-6,-6,1,1,1]
[-1,1,-6,4,5,-6,1,4,1]
frequency,
[2,3,1,3,2]
"hetmaa
oatgmaaaa
'u'),
dog"
vowel),
overmaaaaaaa
"goat"
peaksmaaa
"goat
umpedjmaaaaaa
"applema".
atinlmaaaaa"
pig
oxfmaaaaa
speak
azylmaaaaaaaaa
jumped
"oatgma".
latin.)
hetmaaaaaaaa
rownbmaaaa
"imaa
"ma"
made-up
latin.
uickqmaaa
latin"
consonant
ogdmaaaaaaaaaa"
"ma".
up),
startpos.length
4th:
[4,1,0,0]
startcol).
"rddlu".
instruction:
[1,5,4,3,1,0]
robot:
2nd:
"ddlu".
"lurd"
"dlu".
0th:
"lurd".
startcol
"rrddlu"
"lu".
"rd".
"d".
(startrow,
"rrddlu".
1st:
(move
startcol]
5th:
"urd".
3rd:
"lrud"
[1,5,1,1,6,4]
[1,3,2,2,3,1]
[2,3,1,3,1,2]
[1,6,1,5,1,4]
[1,4,1,5,1,6]
nums[3]....
[1,1,1,0,0,0,0,1,1]
[1,1,0,0,1]
[0,1,0,1,1,0,0]
[1,1,0,0,0,0,1]
[0,1,1,1,0,0,0]
[0,0,1,1,1,0,0]
[0,1,1,1,0,0,1,1,0]
together:
[1,1,1,1,1,0,0,0,0]
treeancestor.getkthancestor(6,
"getkthancestor",
parent)
ancestor,
treeancestor(int
getkthancestor(int
treeancestor
treeancestor.getkthancestor(3,
["treeancestor",
treeancestor.getkthancestor(5,
"getkthancestor"]
treeancestor(7,
terminates:
"l______rr"
"l___r___r".
anymore,
"r_l_",
"r_"
"_r",
"_rl_".
'_'
"l______rr".
"__lr"
"l___r__r_".
"_l__r__r_",
[1,4,2,7,5,3,8,6,9]
[[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
mycalendarthree.book(5,
mycalendarthree()
events.)
["mycalendarthree",
mycalendarthree.book(25,
k-booking
mycalendarthree.book(10,
endtime),
mycalendarthree
mycalendarthree.book(50,
mycalendarthree();
(bst):
["bstiterator",
o(h)
20]],
pointer,
20]);
[[[7,
bstiterator.next();
bstiterator(treenode
bstiterator.hasnext();
tree?
bstiterator([7,
bstiterator
hasnext,
pointer
initializing
non-existent
[3,4])
10^4)
reservedseats
reservedseats[i]
exceptional
[[2,1],[1,8],[2,6]]
[[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
reservedseats[i][1]
reservedseats[i].length
[[4,3],[1,4],[4,6],[1,7]]
reservedseats.length
min(10*n,
reservedseats[i][0]
four-person
aisle
[0,3,1,6,2,2,7].
[3,6,2,7]
favorite[i]
organizing
seating
favorite,
favorite.length
capable
beside
invite
[2,2,1,2]
[3,0,1,4,1]
invited.
98
stopped
widths.length
[4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
[3,60]
wide.
widths[i]
pixels.
widths[0]
bbbcccdddaa
uvwxyz
widths[1]
klmnopqrst
[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
abcdefghij
"bbbcccdddaaa"
-1]],
-1]);
[[[-2,
numarray.sumrange(2,
numarray([-2,
['2',
'9'].
2-9
(just
buttons)
["ad","ae","af","bd","be","bf","cd","ce","cf"]
telephone
[0,1,1,2].
nums[(3
[0,1,1,2,1,3,2,3],
max(0,1,1,2,1,3,2,3)
max(0,1,1)
rules,
max(0,1,1,2)
nums[(2
nums[(1
[0,1,1].
(row[1])
switch
row[i]
couple
(2n
(row[2])
seated
row.length
hands.
quietest
quietness.
quiet[i]
quiet
time).
situation
quietness
[3,2,5,4,6,1,7,0]
reasoning.
[5,5,2,5,4,5,6,7]
[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]],
richer
quiet[y])
quiet[x])
richer[i]
richer.length
quiet.length
answer[7]
observations
quieter
(has
mode:
minimum:
median,
sample,
2.18182).
mean:
[1,2,2,2,3,3,3,3].
mode].
[minimum,
maximum:
count[k]
count.length
count[i]
[0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
2.18181818...
[1.00000,3.00000,2.37500,2.50000,3.00000]
maximum,
purposes,
(1+1+1+1+2+2+2+3+3+4+4)
2.375.
(1+2+2+2+3+3+3+3)
statistics:
mean,
255].
sum(count)
[1,1,1,1,2,2,2,3,3,4,4].
median:
sample.
[1.00000,4.00000,2.18182,2.00000,1.00000]
[4,3,2,1,0]
[1,0,2,3,4]
[3,5,3,4],
[3,2,2,1],
carry
(3),
(4),
boat
[0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]
[2,3,5,8,13,21,34]
[18,29,11,7,4,3,1,2].
[2,5,3,8,13,21,34]
[0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]
[2,1,3,4,7,11,29,18],
reversal.
[7,11,13]
[7,13,11]
214].
count-and-say
countandsay(3)
"3322251":
countandsay(2)
countandsay(4)
formula:
saying
countandsay(n)
"say"
countandsay(n-1),
"1211"
countandsay(1)
"21"
[5,5,10,10,20]
$5,
bills[i]
bills.
bills).
$20
pays,
bills.length
bills
[5,5,5,10,20]
$10,
bill.
$5.
stand,
"lt"
"ad"
code",
properly.
malfunctioning
spaces)
brokenletters.length
"leet
keyboard.
broken.
brokenletters
abbot
emerson
student.
doris
jeames
abs(arr[i]
[1,100,1000].
[2,2,1,2,1]
[100,1,1000]
[1,2,2,2,1].
[99,-1,-100,3]
[7,1,2,3,4,5,6]
[3,99,-1,-100]
[6,7,1,2,3,4,5]
[5,6,7,1,2,3,4]
[-1,-100,3,99],
"aabbb".
suboptimal.
"abadcdbc".
"abdcdbcc",
"abdacdbc".
pattern[1]
"aaabb",
"aabdcdbc"
"abdccdbc",
"aabb",
"abdcdbc",
text[1]
pattern[0]
obtainable,
"abdcadbc",
text[2],
"pwwkew"
"wke",
"pwke"
"bbbbb"
"abcabcbb"
carpet.
tiles[i].length
carpetlen,
[[1,5],[10,11],[12,18],[20,25],[30,32]],
[[10,11],[1,1]],
+------------+------------+------------+--------+
end_date.
2019-02-28
2019-03-22
unitssold
+------------+---------------+
2019-02-01
2019-02-25
16.96
product_id.
end_date
end_date)
purchase_date
6.96
start_date,
average_price
2019-02-20
30))
start_date
2019-02-10
((200
(30
2019-02-21
20))
(15
2019-03-01
+------------+---------------+-------+
spots.
[8,1,5,2,6]
spots,
values[j]
spot.
neg.
[-2,-1,-1,1,2,3]
-2000
[5,20,66,1314]
neg,
[-3,-2,-1,0,0,1,2]
pos
"bccb"
b1,
3104860382
'bccb'.
"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"
a1,
'bcb'
'cc',
b2,
'bb',
104860361
'bcb',
divisors[1],
divisors.length
divisors[i].
divisors[1]
divisors[0],
divisors[2]).
[12],
[4,7,9,3,9],
divisors[0]
[10,16]
divisors[2]
divisors[i]
divisors[0]).
[20,14,21,10],
probably
straightforward
[[0,1,2,0],[3,4,5,2],[1,3,1,5]]
[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
improvement
idea.
o(mn)
[5,2,2,4,0,6],
[2,4,0,6].
[5,4,0,6].
[4,0,6].
[2,2,4,0,6].
[201,
maxsize)
pops
201
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
customstack
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
stk.increment(5,
customstack(3);
maxsize.
["customstack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]
stk.push(3);
103]
202]
201,
inc(int
stk.increment(2,
customstack(int
stk.push(1);
102,
stk.push(2);
[101,
202
stk
103,
increment,
stk.pop();
maxsize,
stk.push(4);
[201]
positives
[[300,700,900],900]
available),
300ms,
500ms
[[300,400,500],500]
[[300,400,200],400]
500ms.
200ms
functions[i]
promisepool.
functions[i
resolves,
t=500,
400)),
900ms.
resolves.
series.
functions.length
400ms,
promisepool
resolve.
300)),
700ms,
t=400,
pending
t=300,
900ms
t=900,
t=700,
reject.
assignment.
jobs[i]
jobs.length
worker.
[3,2,3],
[1,2,4,7,8],
(working
11)
"abca",
"aaacb"
"bcabc",
"aaacb",
"bcab",
"aacb"
(again).
"cabc"
ans.length
dry
lake,
lakes.
flood.
[1,2,0,1,2]
rains.length
floods
[-1,-1,2,1,-1,-1]
rains[i]
[-1,-1,1,2,-1,-1]
lake
[1,2,0,0,2,1]
flood-free.
changes.
lakes
rains
lake.
rangemodule.queryrange(10,
despite
queryrange,
queryrange(int
"addrange",
14);
14.17
tracked.
rangemodule.queryrange(13,
17);
14],
tracked
17]]
"queryrange"]
"removerange",
[14,
true,(every
17)
rangemodule.removerange(14,
"queryrange",
removerange(int
rangemodule.addrange(10,
partially
rangemodule();
["rangemodule",
addrange(int
rangemodule
rangemodule.queryrange(16,
tracked,
removerange.
operation)
false,(numbers
rangemodule()
tracked)
14.03,
addrange,
tracking
palindromic,
["abc","car","ada","racecar","cool"]
"ada".
["notapalindrome","racecar"]
"racecar".
"racecar"
"ada"
["def","ghi"]
'∅'
"app",
"hlabcdefgijkmnopqrstuvwxyz"
words[1],
surprisingly,
size.)
info).
["word","world","row"],
"worldabcefghijkmnpqstuvxyz"
unsorted.
'∅',
["hello","leetcode"],
["apple","app"],
"app"
85000
janet
earner
earners
executives
third-highest
second-highest
seeing
69000
department:
randy
forwards
"adc"
"adc".
"aabca"
"aabca")
"bbcbaba"
(subsequence
backwards.
"aca"
"bbcbaba")
[1,3,2].
arr:
[1,5,1]
[5,5,8]
threshold).
[2,5,5],[5,5,5]
[11,13,17,23,29,31,7,5,2,3],
[2,2,2,2,5,5,5,8],
["parkingsystem",
parkingsystem.addcar(1);
medium,
parkingsystem
medium
big,
"addcar"]
lot.
addcar
parkingsystem(int
parkingsystem.addcar(2);
cartype.
small)
spaces:
addcar(int
parkingsystem.addcar(3);
parkingsystem(1,
park
kinds:
cartype
small,
cartype)
"addcar",
slot
"bar".
"foo"
time-based
"bar2"
previously,
timestamps
timemap.get("foo",
timestamp_prev
timemap();
"bar"
"bar2",
retrieve
timemap
timestamp_prev.
["timemap",
timemap.set("foo",
["foo",
timestamp)
"bar2"]
timemap()
"bar",
get(string
set(string
"135"
"00".
"3465"
"346"
"13"
"11111222223",
"00000000",
"112",
completed.
"000",
group:
"23".
"222",
"5".
"0.166(66)"
<nonrepeatingpart>.length
conventionally
1.,
portion
1.(9),
"0.(52)"
0.1(6)
forever,
<repeatingpart>.length
"0.9(9)"
0.1(6),
(integerpart)
123.0001.
123.00(1212).
<nonrepeatingpart>,
2.12,
(nonrepeatingpart)
<integerpart>
[see
correctly:
<integerpart><.><nonrepeatingpart><(><repeatingpart><)>
"1."
0.5,
0.16666666...
0.1666(6)
"0.9(9)",
<repeatingpart>.
link
0.52525252...,
<integerpart>,
0.52525252525.....
0.166(66).
<integerpart><.><nonrepeatingpart>
explanation.]
"0.1666(6)",
0.999999999...
"0.(52)",
<integerpart>.length
"0.5(25)"
grid[row][col]th
8th
[[0,3,6],[5,8,1],[2,7,4]]
configuration,
configuration.
[[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]
[1,1,3],
mat.length[i]
[1,1,2],
nm)
mat[i]
[3,4],
[1,5,2],
[1,5,3].
[[1,3,11],[2,4,6]],
[[1,10,10],[1,4,5],[2,3,6]],
(c
[4,2,5,9,7,4,8]
[5,6,2,7,4]
(nums[w],
w,
(nums[y],
(9,
d).
(c,
nums[x])
nums[z])
max(3,5)]
[5,5,5]
max(ci,
[max(ai,
[[2,5,3],[1,8,4],[1,7,5]],
bj),
triplets[j]
[max(2,1),
aj),
triplets[i].length
triplets[i]
[max(2,5),
[max(2,
[[2,5,3],[2,3,4],[1,2,5],[5,2,3]],
max(5,3)]
triplets,
[2,7,5].
[[2,5,3],[1,8,4],[2,7,5]]
[[3,4,5],[4,5,6]],
triplet.
[[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
[[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
max(3,
5)]
[[2,5,3],[2,3,4],[1,2,5],[5,2,3]].
max(5,
zero):
z]
ci,
max(5,7),
triplets.length
[[2,5,3],[1,8,4],[1,7,5]].
[2,5,5].
max(5,2),
cj)].
max(bi,
[2,7,5]
11891
d1
d2,
99899.
congratulate
99009.
remaps
mittal
d2.
remap
99009
danny
mittal"
weekly
sneakily
"danny
99].
[1,2,3,4,5,6,null,null,null,7,8],
[1,3,2,null,6,4,5,null,null,null,null,8,7]
[-3,3,3,90]
[11,7,2,15]
[1,1,4,2,1,1,0,0]
temperatures,
[30,40,50,60]
[30,60,90]
warmer
temperature.
[73,74,75,71,69,72,76,73]
temperatures.length
temperatures[i]
zero(printnumber)
even(),
zeroevenodd(int
zero(),
odd()
zero()
2n.
zeroevenodd
"010203040506..."
"0102030405"
odd().
even()
odd(printnumber)
even(printnumber)
printnumber(7)
(2,2):
floor(0.83333333)
(2,0),
floor(138.888889)
floor((100+200+200+50)/4)
138
floor(137.5)
[[100,200,100],[200,50,200],[100,200,100]]
floor(3/4)
img[i].length
floor(0.75)
grayscale
141
(2,1):
img[i][j]
(1,1):
137
surrounding
floor(141.666667)
floor(5/6)
floor(8/9)
floor(0.88888889)
floor((200+200+50+200+100+100)/6)
[[137,141,137],[141,138,141],[137,141,137]]
floor((50+200+200+200+200+100+100+100+100)/9)
img.length
img
smoother).
vertical).
grid2.length
grid2[i][j]
grid1.length
sub-island
[[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]],
grid2.
grid2
grid2[i].length
sub-island.
water)
land).
[[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]],
grid1[i][j]
[[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
[[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
sub-islands.
grid1
grid1[i].length
[4,2,7,1,3,5]
[40,20,60,10,30,50,70,null,null,25]
[40,20,60,10,30,50,70],
[4,2,7,1,3,null,null,null,null,null,null],
removable.length)
"abcacb",
s[removable[i]]
removable[i]
removable,
[3,2,1,4,5,6]
removable.length
"abcbddddd"
"abcddddd".
"ccb",
"accb".
"abcbddddd",
"abcacb"
(s
"4193
("4193"
in)
reader
32).
-42
4193
('-'
clamped
non-digit)
("42"
myatoi(string
'+')
(similar
"0032"
(leading
negative)
-42"
atoi
read,
whitespace.
in;
ignored)
caret
4193.
c/c++'s
whitespace)
-42.
clamp
"adobecodebanc",
window.
"banc"
duplicates)
"2019-12-31"
"2019-06-29",
yyyy-mm-dd
date2
date1
examples.
"2020-01-15",
"2019-06-30"
startj+1
secondlist,
[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
firstlist
secondlist.length
startj
[startj,
[[0,2],[5,10],[13,23],[24,25]],
endj].
secondlist[j]
endj
firstlist.length
firstlist.length,
starti+1
[[1,5],[8,12],[15,24],[25,26]]
[[1,3],[5,9]],
firstlist[i]
secondlist
[8,null,6,null,5,null,4,null,3,null,2,null,1],
allowed?
cloned
[7,4,3,null,null,6,19],
[3,0,2,1,2],
[4,2,3,0,3,1,2],
[5,3,4,4,7,3,6,11,8,5,11]
[5,4,7,11,11]
[5,4,4,7,6,11,11]
[5,7,11,11]
performed:
[4,5,7,7,13]
nums[k].
[2,1,5,0,4,6]
[9,3,1,2,6,3]
[9,3,1,2,6,3],
subarray's
[0,4,3,0,4]
[2,4,6].
[10,13,12,14,15]
(1st,
[5,1,3,4,2]
(even-numbered),
6th,
numbered,
arr[0]),
arr[4]]
already.
[arr[1],
even-numbered
[arr[2],
(2nd,
[arr[3],
jumps,
deduce
arr[2],
manner,
...),
arr[1].
arr[2].
arr[3],
(odd-numbered),
max(3+5,
(4,4),
(5,2).
max(6,
(3,3)
max(1+5,
max(8,
(1,5),
(6,2).
4+4,
max(3+3,
4+4)
[3,5,4,2,4,6]
(a,b)
5+2)
[3,5,2,3]
6+2)
quantities,
quantity.length
quantity[i]
[[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
weight[i]
constituent
src1,
[[1,0,3],[0,5,6]]
weighti.
dest
src2,
src2
subgraph.
subgraphs
lastly,
src1
[[0,1,1],[2,1,1]],
rowsum[i]
sum(colsum)
[[3,0],
[8,6,8]
rowsum[i],
fulfills
rowsum[1]
column:
rowsum[0]
rowsum.length,
[5,7,10],
rowsum
colsum[j]
[[1,2],
[[0,5,0],
sum(rowsum)
[6,1,0],
colsum[1]
rowsum.length
row:
[3,8],
[2,0,8]]
colsum[0]
[3,5]]
[1,7]]
[8,3,10,1,6,null,14,null,null,4,7,13]
7|
13|
ancestor-node
b.val|
[1,null,2,null,0,3]
|a.val
[false,false,false,false,false]
them).
[y,
[true,true,true,true,true]
[[4,5],[4,5],[3,2],[2,3],[3,4]]
[[4,5],[3,4],[3,2],[2,6],[1,3]]
3--6
indirectly.
[false,false,true]
x].
"hi",
"heeellooo".
"helllllooo"
"hellooo",
feeling.
stretchy.
"helllllooo",
extension
"helo"]
"helllllooo".
["zzyy","zy","zyy"]
"ooo".
stretchy
"helloo"
"hiiii"
"lllll"
"helo"
"hellooo"
applications
"hi"
"heeellooo"
"heeellooo",
"zzzzzyyyyy",
extend
27,
y[i],
"aay"
"aaszz"
"abe"
characters'
alphabetic
(2,4,4)
[2,3,1,6,7]
(0,2,2),
(2,3,4)
partitioning.
partitioning,
84
[1,15,7,9,2,5,10],
[15,15,15,9,10,10,10]
[1,4,1,5,7,3,6,1,9,9,3],
[9,49],
[19,39].
37,
58,
-15
[[-10],
non-negative,
[12]],
[[1],[22],[333]]
[[-15,1,3],[15,7,12],[5,6,-2]]
0.16666666666666666
unvisited
1/2
[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]],
0.16666666666666666.
0.3333333333333333
seats[i]
seats[3]),
seats[2]),
sitting.
[1,0,0,0]
[1,0,0,0,1,0,1]
lee
traveler
jonathan,
lee.
+----------+--------------------+
travelled_distance
miles,
"distance".
rides
rides,
312
450
317
222
+------+----------+----------+
donald
alex,
+------+-----------+
salary.length
(2000)
salary[i]
[4000,3000,1000,2000]
(2000+3000)
[1000,2000,3000]
2500.00000
2000.00000
417,
(115)
116
"eet",
"delete"
"dee"
101[e]
403.
100[d]
100+101+101+101
"lee"
433
403
"delete",
alter
[3,2,1,4,5]
[2,1,4,3,5]
left-out
[7,4,1]
[3,5,1,6,2,0,8,null,null,7,4],
"121"
itself),
length(word[j])
["a","ab","abc","d","cd","bcd","abcd"]
["abcw","baz","foo","bar","xtfn","abcdef"]
"abcw",
"xtfn".
"cd".
length(word[i])
managers.
+----+-------+--------+-----------+
coordinates[i]
coordinates[i][1]
[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
-10^4
[[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
coordinates[i].length
coordinates[i][0],
[1,2,2,3,3,3]
frequency[2]
wall[i][j]
wall.length
sum(wall[i])
[[1],[1],[1]]
widths.
crossed.
wall[i].length
unit)
crossed
obviously
[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
sum(wall[i].length)
[0,1,2,4,4,4,5,6,6,7]
[4,5,6,6,7,0,1,2,4,4].
pivot.
[2,5,6,0,0,1,2],
"youtube.com"
"linkedin.com",
"facebook.com"
history.
"linkedin.com"
browserhistory.back(7);
"google.com".
page.
browserhistory.visit("youtube.com");
browserhistory("leetcode.com");
["browserhistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
browserhistory.visit("linkedin.com");
browserhistory.visit("facebook.com");
url)
back,
homepage.length
visit,
url,
browserhistory.back(2);
forwarding
browserhistory.forward(2);
homepage
"google.com"
steps)
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
browserhistory.visit("google.com");
"facebook.com",
"facebook.com".
clears
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]
back(int
homepage)
browserhistory
"youtube.com",
tab
"google.com",
browserhistory.forward(1);
visit(string
forward(int
"leetcode.com".
browser.
browserhistory(string
browserhistory.back(1);
height).
fixed-width
[[8,7],[9,9],[7,4],[9,7]]
[[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
foods
deliciousness[i]
meal
[1,3,5,7,9]
(7,9).
food,
deliciousness.length
meal.
deliciousness
[1,1,1,3,3,3,7]
and,
(3,5)
"aaabbb"),
s[j]=
(i,j)
"aabbbb").
"bbaaaaabb"
"aababbab"
("aababbab"
[5,8,1]
[5,6,2]
[[1,2,3],[2,5,7],[3,5,1]],
[[5,2,1],[1,1,2]],
pseudocode:
nestediterator(list<nestedinteger>
[1,[4,[6]]]
nestediterator
nestedlist
[1,4,6]
nestedlist.
106].
nestedlist.length
[[1,1],2,[1,1]]
[1,4,6].
iterator.next()
hasnext
nestedlist)
[1,1,2,1,1]
iterator.hasnext()
[-106,
[1,1,2,1,1].
tested
reward1[i],
[4,4,1,1],
reward2[i]
reward1,
reward2,
cheese,
reward1[i]
reward1.length
[1,1,3,4],
reward2
reward2.length
reward1
countries.
468
20609294
africa
albania
3000000
652230
37100000
bigint
gdp
25500100
afghanistan
78115
population,
km2),
andorra
+-------------+------------+---------+
2381741
188681000000
25000000).
2831741
1246700
12960000000
angola
+-------------+-----------+---------+------------+--------------+
continent
100990000000
belongs,
algeria
europe
twenty-five
28748
3712000000
asia
20343000000
schemes.
crime,
crimes
(1),
minprofit
commit
participates
members,
scheme
participate
crimes,
commit.
(0),
crime.
(0,1,2).
(2),
[6,7,8]
schemes:
crime
[2,3,6,7,4,12,21,39]
[20,50,9,63]
graph:
[4,6,15,35]
["e","l","l"]
["c","o"]
["bella","label","roller"]
duplicates).
["cool","lock","cook"]
carpetlen.
floor[i]
carpets,
floor.length
"10110101",
numcarpets
[[9],[3,15],[20],[7]]
top-to-bottom
[1,2,3,4,6,5,7]
[[4],[2],[1,5,6],[3],[7]]
apples,
grew
rot
apples[i]
[3,2,1,4,2]
fouth
rot.
apples[i],
away).
[1,2,3,5,2],
[3,0,0,0,0,2]
rotten
doctors
[3,0,0,0,0,2],
apples:
eaten.
apples.length
[3]).
([3]
sub-arrays,
[3,2,2,4,3],
[4,3,2,6,2,3,4],
([7],
[7]),
[7,3,4,7],
(6,8,10),
(3,4,5),
c2.
(4,3,5).
(8,6,10).
(4,3,5),
(a,b,c)
four,
4x.
[4,5,5].
[6,2,3],
stonevalue
[6,2,3,4,5,5]
dots.
"25525511135"
addresses.
"192.168.1.312"
"101023"
"192.168@1.1"
["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
"0.011.255.245",
"192.168.1.1"
["255.255.11.135","255.255.111.35"]
addresses,
"0.1.2.201"
["0.0.0.0"]
pattern.
["abc","deq","mee","aqq","dkd","ccc"],
p(x),
...}
...}.
letters:
["mee","aqq"]
bijection
"mee"
[pricei,
backlog.
999999984
(1000000000-3)
ordertypei]
orders[i+1]
orders[i]
1999999991,
executed,
matched
[[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
(999999995-1)
ordertypei
backlog,
order's
happens:
amounti,
[[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
999999995
6-sided
roll,
184
toh",
hot",
"acb
oht".
hot"
def",
"def
dfe"
cab"
"oto
"adc
"oot
"too
bef"
+-----+
mynumbers
turn=n
person_id
cena
+-----------+-------------+--------+------+
person_name
board)
marie
folowing
kilograms.
___
kilograms,
(cannot
350
simplicity.
+------+----+-----------+--------+--------------+
175
turn=1
(last
[2,3,0,1,4]
"oct",
"30th",
"2052-10-20"
"26th
jun
1933"
"nov",
{"jan",
"aug",
"6th
2052"
1960"
"feb",
"1960-05-26"
"4th",
"jul",
"may",
"1933-06-06"
dd
"jun",
yyyy
"2nd",
"mar",
"dec"}.
[1900,
{"1st",
2100].
"20th
"3rd",
"31st"}.
"sep",
oct
"apr",
"12345",
"84532",
"12344".
"34521"
"12435"
"14234"
"84352"
"34852"
"23415"
"23451"
"84532"
"34521",
conver
56
nums[0..i].
[1,1,2,4,8,16]
conver[i]
16]
[2,3,7,5,10]
max(arr[0..i])
[4,10,24,36,56]
32]
[2,4,8,16,32,64]
[1,3,7,5,10,3],
prices[5]
prices[4]
((8
prices[3]
by:
like,
prices[0]
[1,3,2,8,4,9],
((9
"directory_path/file_name.txt"
4.txt(efgh)"]
1.txt(abcd)
optimize?
dfs
time-consuming
fn_content)
bfs?
memory-consuming
f2_content
"root/d1/d2/.../dm
[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]
info.
3.txt(abcd)","root/c/d
f1.txt(f1_content)
2.txt(efgh)","root/c
f2.txt(f2_content)
fn.txt(fn_content)"
level),
(f1.txt,
["root/a
separates
f2.txt
1kb
directory.
(f1_content,
(gb
info,
4.txt(efgh)","root
fn.txt)
[["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]
files?
positive?
"root/d1/d2/.../dm".
3.65
floating
+-------+------+
4.00
3.50
3.85
holes
ranks.
4-directionally.
[[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
vertical.)
[[0,0,0,0,0,0,0,0]]
land)
[[0,2],[3,2],[2,5]]
parents,
root).
[-1,0,1,1],
[6,14,7]
parents[root]
[3,2]:
[4,6]:
parents[i]
[1,15]:
parents[x]
vali].
nodei
[2,3,7]
parents.length
pi,
[3,7,-1,2,0,7,0,2],
[nodei,
[[4,6],[1,15],[0,5]]
pi.
[12,5,7,23]
10*(-1)
29*1
multiplicand.
7*(-2)
[29,6,10]
6*(-3)
[[0,1],[0,2]]
[[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
edge,
[10,10,1]
[100,20,10,10,5]
(3,3),
(3,4).
nums2[j].
(2,4).
[25,25,25,25,25]
arr[i-1]
[30,29,19,5],
nums2.length,
[55,30,5,4,2],
non-increasing.
occurrences,
[1,2,2,1,1,3]
[-3,0,1,-3,1,1,1,-3,10,0]
[3,6,1,0]
[[1,0],[2,0]]
tree).
(city
orient
[[0,1],[1,3],[2,3],[4,0],[4,5]]
ministry
narrow.
[[1,0],[1,2],[3,2],[3,4]]
reorienting
transport
(capital).
reorder.
attending.
chair.
leavingi
chairs
targetfriend.
targetfriend
[[3,10],[1,5],[2,6]],
leavingi],
sat
[[1,4],[2,3],[4,6]],
comes,
sz.
sz
sales_id
+--------+--------+----------+
located.
12000
austin
salesperson.
12/25/2008
salespersons
1/1/2005
"red".
5/1/2010
+----------+------------+--------+----------+--------+
65000
company,
hire_date
commission
rate,
boston
tell
alongside
pam
related
3/1/2014
salesperson
+-----------------+---------+
4/1/2006
4/1/2014
2/1/2014
1/1/2014
commission_rate
2/3/2007
paid.
com_id
25000
salesperson,
+----------+------+--------+-----------------+------------+
[0,0,1,0,1,0],
[1,1,0,0,0,1],
[0,1,1,0,0,0],
counterclockwise
down].
[1,1,1,0,0,0]]
[[0,0,0,0,0,1],
snake
(n-1,
horizontal/vertical
c).
[1,1,0,0,1,0],
c+1).
[[0,0,1,1,1,1],
[0,0,0,0,1,1],
n-1).
(r+1,
c+1)
[right,
[0,1,1,0,0,0]]
n-2)
n*n
stable.
[1,1,0,0]]
next,
(rowi,
hits,
coli).
[1,0,0,0]]
erased
hits[i].length
hits.length
disappear.
does,
[[1,0,0,0],[1,1,0,0]],
hits[i]
stable
erasures
bricks).
falls,
[1,1,1,0]]
drop.
[[1,0,0,0],[1,1,1,0]],
stable,
apply.
grid:
[0,0,0,0]]
[0,1,1,0]]
[6,4,8,1,3,2],
[5,9,4,1,2,3,4],
[4,7,6,2,3,8,6,1]
[9,4,2,3,4]
target[i],
[1,4,1,2],
[1,4,3,1,2].
target.length,
[0,5].
[3,2,1,6,0,5]
[3,null,2,null,1]
[6,3,5,null,2,0,null,null,1]
&(f,t)
"!(&(f,t))"
'|(subexpr1,
subexpr1,
&(f)
"!(f)".
!(f)
"&(|(f))"
'!(subexpr)'
shapes:
subexprn
(false
"|(f,f,f,t)"
'&',
|(f)
subexpr.
"&(f)".
'&(subexpr1,
subexpr2,
"f".
subexprn)'
60:
time[3]
100):
[30,20,150,100,40]
(time[i]
[60,60,60]
time[4]
150):
time[2]
(time[1]
time[j])
(time[0]
40):
[9,8,1,0,1,9,4,0,4,1]
5):
[6,0,8,2,1,5]
nums[9]
9):
bits:
111.
namely,
"01101110",
minjump
maxjump.
maxjump
"011010",
fulfilled:
maxjump,
min(i
'()[]{}'.
"(]"
"()[]{}"
'['
[2,4,9,24,2,1,10]
1]|
[2,3,1,5,4]
[2,5,1,3,4]
ethernet
cable.
[[0,1],[0,2],[0,3],[1,2]]
computers,
[[0,1],[0,2],[0,3],[1,2],[1,3]]
cables.
cable
cables
["skiplist",
"erase",
https://en.wikipedia.org/wiki/skip_list
skiplist.add(3);
comparatively
kalinin
idea
skiplist.erase(0);
performance,
red-black
skiplist.add(1);
3.0],
[cc
layers
artyom
by-sa
skiplist.search(1);
skiplists
situation.
skiplist.search(0);
skiplist:
skiplist.add(2);
[30,40,50,60,70,90]
fine.
o(n).
skiplist.add(4);
erase(int
wikimedia
erase.
skiplist.
skiplist();
commons
skiplist.erase(1);
treap
skiplist()
skiplist,
[3,3,2]
[[1,6],[3,7],[9,12],[4,13]],
flowers[i].length
poeple
poeple[i]
[1,2,2,2]
[2,2,1]
[[1,10],[3,3]],
[2,3,7,11]
arrival.
x]
bloomday.length
bouquets.
bouquet,
_
_,
[7,7,7,7,12,7,7],
bloomday[i]
bloomday,
flower.
[1,10,3,10,2],
bouquet
obvious
bloomday
_]
bouquet.
bloomed.
(initial
"end"
popped
"end"}:{timestamp}".
["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"]
resumes
["0:start:0","1:start:2","1:end:5","0:end:6"]
"0:start:3"
executing,
spends
(recursive
call)
ended,
"{function_id}:{"start"
logs,
executing.
stack:
log.
"1:end:2"
["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]
"start"
starts,
cpu,
(8),
[1,2,3,1,1],
conveyor
[3,2,2,4,1,4],
cargo
belt
(9),
weights[i].
shipped
weights).
[1,5,4,5]
j=2
3*4
(5-1)*(5-1)
[3,4,5,2]
(nums[i]-1)*(nums[j]-1).
j=3
(4-1)*(5-1)
[3,7]
(nums[1]-1)*(nums[2]-1)
[10,2,2].
capacity[i]
rocks.length
rocks[i]
additionalrocks
additionalrocks,
[1,2,4,4],
[10,2,2],
[2,3,4,4].
rocks.
[2,2,0],
capacity.length
y2),
(radius,
ycenter
ycenter)
xcenter,
xcenter
(1,0).
"3456"
"24".
rotate:
"0011".
"6345".
"47"
start:
"5222"
post
"74",
cycled
"0158"
"3951".
"2050".
"5121"
"2555"
"0190"
"2353"
add:
"74"
"0011"
"5525",
"2151"
"2454"
"2050"
"5525"
"5323"
"bcabca"
"leetcodeleetcode".
"cabcab".
"leetcodeleetcode"
integers?
"199100199"
02,
"112358"
03
overflow
increments,
90-degree
[[0,0,0],[0,1,0],[1,1,1]],
[[1,1,1],[0,1,0],[0,0,0]]
target[i].length
target[i][j]
[[0,1],[1,1]],
"lovely"
"here"
does),
paragraph.length
case-insensitive
non-banned
punctuation
"hit"
"!?',;.".
"bob
ball,
"ball"
["hit"]
paragraph
flew
paragraph.
banned[i].length
hit.",
"ball,"),
"a.",
[1,-2,-3,4]
[-2,-3].
[-1,-2]
[-1,-2,-3,0,1]
[0,1,-2,-3,-4]
that'll
[1,3,9]
0100
[[2,3],[1,3],[0,0],[0,3]]
[8,0,4,4]
[2,7,14,8]
arr[lefti]
[4,8,2,10],
arr[lefti
[[0,1],[1,2],[0,3],[3,3]]
arr[righti]
forts.
[0,0,1,-1]
forts,
forts[i]
army,
forts[k]
fort
min(i,j)
captured.
[1,0,0,-1,0,0,0,0,1]
captured,
forts.length
max(i,j),
odd].
[even,
10001.
balloons,
balloon,
bursting
wisely.
balloons.
[3,5,8]
1*8*1
3*5*8
167
1*3*8
[3,1,5,8]
3*1*5
"gta(2)"
"pes"
"gta"
"pes(2019)"
"gta(1)"
where,
names:
["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]
["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]
["gta","gta(1)","gta(2)","avalon"]
"onepiece(4)".
"fifa"
"avalon"
["pes","fifa","gta","pes(2019)"]
(k),
creates
names[i].
["gta","gta(1)","gta","avalon"]
[2,1,3,4,5,2]
[2,1,3,4,5,2].
[2,3,5,1,3,2]
[2,3,5,1,3,2].
marked.
left-most
2019-07-20
session
2019-07-27
session_id
activity_date
open_session
2019-06-25
('open_session',
users.
end_session
+---------+------------+---------------+---------------+
send_message
'scroll_down',
active_users
scroll_down
'end_session',
'send_message').
tright,
"abcabcababcc"
tright.
tright
tleft
"aabcbc"
f(4)
f(n).
f(1)
f(2)
f(0)
commonly
f(n
f(n)
2050
die.
deathi]
[[1993,1999],[2000,2010]]
birthi
1960.
[[1950,1961],[1960,1971],[1970,1981]]
deathi
alive
1960
1970.
population.
[birthi,
1950
[1,1,2,3,4,4]
splicing
50].
1248
-100.0
1024.00000
9.26100
2.10000,
1/22
2-2
231-1
1/4
raised
xn).
2.00000,
award:
"pl",
"la",
"al",
"pa",
10101
"ap",
"pp",
183236316
"lp",
--
["000","111","000"]
bank[2][3]
independent,
bank[0][1]
bank,
bank[i]
activated
device
beams:
beam
bank[2][1]
bank[0][5]
bank[0][2]
r2.
bank[3][2]
bank[i].length
beam.
bank[i][j]
r2,
["011001","000000","010100","001000"]
devices,
devices
bank.length
r1
while'1'
cup.
dispenser
dispense
cold
[5,4,4]
amount[2]
warm
amount[i]
hot
cups.
amount[1],
amount[0],
cold,
warm,
[5,0,0]
cup,
(strictly)
hours[i]
[6,6,6]
hours.length
non-tiring
[9,9,6].
[9,9,6,0,6,6,9]
tiring
wait.
(5/2))
letting
kilometers.
(1/4
rest.
3/4)
2.5
(5/2
hoursbefore
(2/4)
(7/2
1/4)
[7,3,5,5],
skipping
meeting,
(3/2
((7/2
marks.
11.5
((5/2
1/2)
(3/4
1.4
mark,
shortened
rests.
hoursbefore,
(5/2)
rests,
((1/4
km/h)
[1,3,1,3,1,2,1,2]
[1,1,1,1,2,2,3,3]
barcodes,
[2,1,2,1,2,1]
barcodes.length
barcodes[i].
barcodes[i]
[1,1,1,2,2,2]
barcode
monday.
monday,
putting
20th
tuesday
sunday,
$2.
[[3,5],[6,9],[12,14]]
identified
[[3,6]]
"xxxx",
[3,6].
"abbxxxxzzy"
"abcdddeeeeaabbbcd"
end],
"yy".
"abbxxxxzyy"
"eeee",
[2,10,8]
[1,2,3,2].
[2,2,3,2],
[2,2,3,4].
[4,2,5,5,3],
[4,1,5,20,3]
startstation
"waterloo"
startstation,
38-24
checkin
14.00000.
endstation)
5.50000,
undergroundsystem.checkin(10,
38);
endstation
startstation.
t2,
24);
["undergroundsystem","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime"]
undergroundsystem.checkin(2,
chronological
endstation.length
t2.
checkin,
stationname,
6.66667,
undergroundsystem.checkout(5,
t)
undergroundsystem.checkin(32,
undergroundsystem.checkin(27,
undergroundsystem.checkout(32,
getaveragetime.
11.00000
undergroundsystem.getaveragetime("leyton",
"leyton",
"paradise"
[[],[45,"leyton",3],[32,"paradise",8],[27,"leyton",10],[45,"waterloo",15],[27,"waterloo",20],[32,"cambridge",22],["paradise","cambridge"],["leyton","waterloo"],[10,"leyton",24],["leyton","waterloo"],[10,"waterloo",38],["leyton","waterloo"]]
checkout,
getaveragetime
undergroundsystem.checkin(5,
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
"paradise");
11.00000.
railway
30-21
6.66667
checkout(int
undergroundsystem.checkout(2,
startstation.length,
15-3
"cambridge",
5.00000,
getaveragetime(string
["undergroundsystem","checkin","checkin","checkin","checkout","checkout","checkout","getaveragetime","getaveragetime","checkin","getaveragetime","checkout","getaveragetime"]
20-10
8-3
"cambridge"
22);
21);
"waterloo");
stationname.length,
"paradise",
undergroundsystem.getaveragetime("paradise",
5.5
undergroundsystem();
endstation.
"cambridge");
undergroundsystem.checkout(45,
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
checkout
undergroundsystem.checkout(10,
"waterloo",
(14)
undergroundsystem
undergroundsystem.checkin(45,
checkin(int
"leyton"
16-10
12.00000.
[[],[10,"leyton",3],[10,"paradise",8],["leyton","paradise"],[5,"leyton",10],[5,"paradise",16],["leyton","paradise"],[2,"leyton",21],[2,"paradise",30],["leyton","paradise"]]
stationname
undergroundsystem.checkout(27,
22-8
"of"
title.length
title"
capitalized
word"
uppercase,
capitalization
title.
"capitalize
"]
"x".
["xox","
tic-tac-toe:
o","xox"]
["xox","o
["o
2i
maxheighti]
buildings:
[0,1,2,1,2],
restrictions.
building.
[[2,1],[4,1]]
maxheighti.
maxheighti
restrictions.length
[[5,3],[2,5],[7,4],[10,3]]
[0,1,2,3,3,4,4,5,4,3],
restrictions,
restrictions[i]
(22
("6"
"bz"
zero(s).
26),
"bbf"
"06").
(12).
"226"
"vf"
14.5,
[3.00000,14.50000,11.00000]
11].
[3,9,20,15,7]
[2,1,2,1,2,1,2,1,2]
marathon
rounds[1]
track,
rounds[i].
sectors.
rounds[i
marathon)
rounds[0]
rounds[i]
sectors
rounds.length
circulate
(end
corner).
8-directionally
[[1,0,0],[1,1,0],[1,1,0]]
[[0,0,0],[1,1,0],[1,1,0]]
firstname
lastname
personid.
personid
wang
+-----------+----------+---------------+----------+
addressid
california
+-----------+----------+---------------+------------+
+----------+----------+-----------+
allen
[1,2,3,3,5].
instructions[i].
[1,2,3,5,6].
[1,2,2,3,3,3,4].
(elements
min(0,
[1,2,3,6].
[1,1,2,2,3,3,3,4].
[1,1,2,2,2,3,3,3,4].
[1,5,6].
[1,3,3,3,2,4,2,1,2]
[1,2,5,6].
[1,5,6,2]
[1,2,3,6,5,4]
[1,3,3,3].
[1,2,3,4,5,6].
[1,2,3,3,3,4].
hidden[i].
[3,-4,5,1,-2],
differences[i]
[4,-7,2],
are.
differences.length
sequences,
contain.
hidden[i
[1,-3,4],
[6,6,7,8,5].
[1,4,7,8,5]
[4,2,8,1,3]
[1,3,5,2],
cost[i].
[2,3,1,14]
"hahahaha".
263
"h".
"leetleetcodeleetleetcodeleetleetcode".
8301530446056247680
tape.
"a2345678999999999999999",
taken:
tape
"ha22",
"leet2code3",
"o".
tape,
r.
[[2,0,0],[3,0,0]]
r].
queries:
nums1.length,nums2.length
[[1,1,1],[2,1,0],[3,0,0]]
p[i+1]
-1)
p[0]
[3,1,0,2]
p[2^n
p[i]
(010,110,111,101,100,000,001,011).
(0,1,2.....,2^n
[2,6,7,5,4,0,1,3]
(11,10,00,01).
+---------+-------+
[4,5,6,7,0,1,2]
[11,13,15,17]
glue
cubes,
irregular
cubes.
[true,false,false,true,true]
palidrome.
queries[1]:
replacement,
palidrome
[[0,1,0],[2,2,1]]
queries[2]:
"lyb",
queries[0]:
"abcba"
queries[4]:
[[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
ki].
s[lefti...righti]
righti,
queries[3]:
"abcda",
nice.
[3,1,5,11,13]
obtained,
[3,8,48].
[1,3,8,48,10]
[7,5,18,11],
covered.
iterating
continues,
[9,8,6,13]
[3,2,12,20],
colscount)
rowscount
snail(rowscount,
organised
[10,1,14,4],
[19,17,16,15],
[19,
colscount
characters).
"bcd".
"bcdf",
"cdef",
t[i]|
maxcost
maxcost.
|s[i]
"acde",
fronts[i],
[1,2,4,4,7],
backs.length
[1,2,4,1,3].
fronts
obtainable
fronts[i]
fronts.length
[1,3,4,4,7]
[1,3,4,1,3]
backs
backs[i]
zero).
lines:
(non-horizontal)
[10,5,2,1,5,2]
nums1[2]=2
[2,5,1,2,5],
nums2[1]=2.
given)
line).
[1,3,7,1,7,5],
nums2[j],
[1,9,2,5,1]
[1,6,3,3]
arr2[j].
[4,3,1]
[1,5,3,6,7],
[1,3,2,4]
-123,
-255.
-123.
"999"
-55
-132},
"-13",
{-213,
n's
"-123"
"&
/.
quote:
&apos;
parser,
mark:
&quot;
&quot;...&quot;"
&.
".
parser.
slash:
"and
entities
&frasl;
<.
ampersand:
&lt;
&ambassador;
not."
&gt;
&amp;
sign:
"&amp;
\"...\""
[2,5,9]
floor()
floor(5
floor(nums[i]
floor(2
floor(9
[16,17,71,62,12,24,14]
[8,8]
[62,12,24,14]
candidates.
[16,17,62,24]
o(n)?
[[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
[[1,3],[3,3],[5,3],[2,2]],
yj,
[[2,3,1],[4,3,1],[1,1,2]]
queries[j],
yj)
rj.
xj,
purple.
rj
rj]
[[1,1],[2,2],[3,3],[4,4],[5,5]],
[2,3,2,4]
queries[i]=1,
p=[1,2,3,4,5].
[2,1,2,1].
p=[2,1,3,4,5].
p=[1,2,3,4,5],
i=1:
p=[2,1,3,4,5],
[4,1,2,2],
i=2:
i=queries.length-1)
i=0:
queries[i]=3,
[3,1,2,1],
queries[i]=2,
(indexing
[7,5,5,8,3],
p=[3,1,2,4,5].
p=[3,1,2,4,5],
p=[1,2,3,...,m].
[6,5,0,7,5]
p=[1,3,2,4,5],
p=[1,3,2,4,5].
i=3:
permuting
choosing.
[1,3,5,2,1,3,1]
[2,3,4,1].
[2,5,1,3,3,1,1].
average(b).
average(arr)
average(a)
[1,4,5,8]
4.5.
"bbbacc".
queryindices[i]
querycharacters
"abyzz",
"bbbb"
"bbbbcc".
[3,3,4]
queryindices
querycharacters[i].
"bbbccc".
"babacc",
querycharacters.length
lengths[i]
"abazz".
queryindices.length
"aaazz".
[3,3,4].
(3-2)
[5,3,3,6,3,3],
[6,3,8,1,3,1,2,2],
(8-6)
incompatibilities
subset's
particular
(2-1)
[1,2,1,4],
[6,8],
rolling
[4,2,1,2,3,3,2,4,1],
[1,1,3,2,2,2,3,3],
rolls,
rolls[i]
rolls[i].
rolls.length
sided
nums1[3],
[[1,3],[4,6]]
[[3],[]]
[4,6].
[1,1,2,2]
"problem"].
tanuki"
"to",
punctuation).
tanuki",
"are",
"this",
you".
"solution"].
"solution",
"how",
"you",
["what",
truncating
s].
"you"].
solution".
contestant",
"how"
"contestant"].
"chopper
(occupied).
stampwidth.
stampwidth
stampheight
image)
[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]],
[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],
stampheight,
[1,2,3,3,4,4,5]
[1,1,1,2,3]
[[2,8],[6,3],[8,6]],
fruits.length
[[0,3],[6,4],[8,5]],
startpos.
harvest
fruits[i].length
positioni.
reach,
positioni-1
fruits.
harvest.
amounti]
[[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]],
startpos,
disappear
fruits[i]
border,
[[1,1,0,0]]
ryan
[0,0,1,0,1].
withdraw(int
banknotescount[i]
withdrawing,
$100,
atm.withdraw(550);
[0,0,0,2,0].
atm()
$500.
deposits
"withdraw",
banknote,
banknotes.
[600],
deposit(int[]
handed
prioritizes
[[0,1,0,1,1]],
withdrawing.
denominations:
$200
atm.withdraw(600);
[0,1,0,3,1].
$500,
banknote
$300
$100
[550]]
[0,1,0,0,1].
[0,1,0,0,1]]
$500
deposit.
withdraw
rejected.
$20,
atm();
banknotescount.length
(do
[[0,0,1,2,1]],
rejected,
atm.deposit([0,1,0,1,1]);
banknote.
$50
deposit
"withdraw"]
$200,
["atm",
"deposit",
atm.deposit([0,0,1,2,1]);
banknotes
modified.
case).
banknotes,
$600
banknotescount)
[0,0,1,0,1],
$50,
[2,1,4],
[0,1,1,2,3,4]
[1,null,8],
[1,1,8,8]
["abba","baab"],
("acca"),
["acca","bbbb","caca"],
("caca")
("abba")
("caca"),
words[j][k].
unusuable
("acca")
("bbbb"),
("baab"),
("abba"),
("baab")
70)
(50
kit
stringology
product_category
2020-02-10
2020-01-18
2020-02-05
130.
order_date.
+-------------+-----------------------+------------------+
2020-02-27
2020-02-24
+--------------+--------------+----------+
+--------------------+---------+
(60
laptop
2020-03-04
ath
[0,1,2,1000000,1000001,1000002,5]
[0,1,1000000,1000001,1000002,1000003,1000004,6]
list1.length
[0,1,2,3,4,5,6],
[1000000,1000001,1000002,1000003,1000004]
bth
[1000000,1000001,1000002]
lists:
list1's
[["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
req_skills,
req_skills[i]
people[i][j]
team:
["java","nodejs","reactjs"],
req_skills.
people[i][j].length
skill
[["java"],["nodejs"],["nodejs","reactjs"]]
req_skills
people[1],
skills
people[3].
["algorithms","math","java","reactjs","csharp","aws"],
people[0],
skill.
req_skills.length
req_skills[i].length
people[i].length
min(sum(inventory[i]),
inventory[i]
[3,5],
balls,
wants.
inventory,
inventory.
own.
109)
weirdly
inventory
customer).
inventory.length
[[1,1,2]]
streets.
[[1,2,1],[1,2,1]]
[[2,4,3],[6,5,2]]
upper-left
numbers.length
index2,
[index1,
numbers[index1]
index2]
numbers[index2]
numbers.length.
numbers[i]
[1,12,13,4,5]
80)
[10,90,10]
max(140,
sum(nums2),
[11,2,3,14,15].
220)
nums2[left...right].
[10,60,10].
[60,60,60],
[60,90,60]
sum(nums2))
[20,40,20,40,20]
max(sum(nums1),
[11,12,13,14,15]
[50,20,50,70,30].
sum(nums1)
max(210,
max(31,
[7,11,13],
sum(arr)
[50,20,50,40,20]
[20,40,20,70,30],
nums1[left...right]
220.
reserves
null]
smallest-numbered
seatnumber
unreserve,
seatnumber)
seatmanager(int
fetches
seatnumber.
[4,5],
seatmanager
unreserve.
[3,4,5],
seatmanager.unreserve(5);
reserve()
unreserved
seatmanager(5);
["seatmanager",
unreserve
"unreserve"]
seatmanager.reserve();
reserve,
seatmanager.unreserve(2);
reserve
"reserve",
[5]]
unreserves
manage
"unreserve",
[2,3,4,5].
unreserve(int
date)
dog(),
undefined.
"tofixed()".
class's
superclass.
animal
animal);
animal.
checkifinstanceof(5,
methods.
accesses
definition,
"instanceof"
checkifinstanceof(new
date(),
checkifinstanceof(date,
checkifinstance(new
extends
subclass
arr[y]
arr[x]
-=1
2/3.
3/5,
1/3,
2/5,
2/5.
1/2,
1/5,
(arr.length
[1,7]
toggling
[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
0b1111
moves).
0b1001
"110011"
"000101"
"100101"
"111011"
binary.length
"10010"
"00010"
"110101"
"000110"
y's
"00001"
"10".
"aaa".
exploding
(positive
explode.
-5
[10,2,-5]
meet.
collisions.
[5,10,-5]
meet,
-5.
[8,-8]
results.
https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/
1081:
"qwer"
"qrwe")
"er".
'q',
"rqwe"
"qqqw"
"qqwe"
"qq"
[16,1,0,9,100].
[-7,-3,2,3,11]
sorting,
[4,9,9,49,121]
approach?
[-4,-1,0,3,10]
[0,1,9,16,100]
squaring,
squaring
[0,1,9,16,100].
3214.
85675.
3412.
parities.
65875
87655
3412
87655.
(-1
[-1,2,1,-4],
sleep(100).then(()
console.log(date.now()
millis,
sleeps
millis
});
t);
connects.
[4,3,2,5,1].
(2,4)
[[0,3],[2,4],[1,3]]
[2,4,5,3,1].
spaces.length
[8,13,15]
py
learn"
[1,5,7,9]
spaces[i]
g"
thon"
helps
"icodeinpython".
"spacing",
"enjoy
[0,1,2,3,4,5,6]
coffee".
"enjoyyourcoffee"
"leetcodehelpsmelearn".
"leetcodehelpsmelearn",
"icodeinpython",
[3,3,3,3].
[3,100,20]
[1,0,0,0,14].
[4,7,7].
[1,0,0,10,14].
[5,3,3,3].
[5,3,2,4]
[4,7,20].
[1,5,0,10,14]
[7,7,7].
[5,3,3,4].
[1,0,0,0,1].
[[".","+"]],
'+').
[entrancerow,
exit.
maze.length
maze,
maze[i][j]
maze.
entrance.
[["+","+","+"],[".",".","."],["+","+","+"]],
entrancerow
entrance.length
entrancecol
exit,
'.')
entrancecol]
[["+","+",".","+"],[".",".",".","+"],["+","+","+","."]],
maze[i].length
"baabb"
entirety
contiguous.
[1,3,5,4],
[5,6,7,4],
[0,3,5,8,9],
[1,2,3,8],
[5,6,7,8].
nums2[3].
[2,1,4,6,9]
-10,
-6,
["i","love","leetcode","i","love","coding"],
log(k))
["i","love"]
"sunny"
["the","day","is","sunny","the","the","the","sunny","is","is"],
["the","is","sunny","day"]
"love"
words[i]]
[1,2,3,4,8,12,11,10,9,5,6,7]
[[1,2,3,4],[5,6,7,8],[9,10,11,12]]
[1,2,3,6,9,8,7,4,5]
")".
depth(c)
"(1+(2*3)+((8)/4))+1"
"(1)+((2))+(((3)))"
citybi
"sao
york","lima"],["lima","sao
citybi.length
paulo".
"new
citybi.
york"
cityai.length,
[["london","new
[cityai,
citybi]
loop,
[["b","c"],["d","b"],["c","a"]]
"lima"
[["a","z"]]
york"],["new
paulo"
paulo"]]
clearly
"london"
cityai
"babad"
timepoints[i]
time-points
format,
timepoints.length
timepoints
["23:59","00:00"]
["00:00","23:59","00:00"]
basket1
min(basket1[i],basket2[j]).
basket1[i],basket2[i]
[2,4,1,2].
[4,1,2,2]
[3,2,5,1]
basket2
baskets.
basket2.
bakste2.length
[4,2,2,2],
[2,3,4,1],
basket1.length
[1,4,1,2]
basket2,
[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
"--...--.".
"gin"
["gin","zen","gig","msg"]
"-.-.",
"msg"
"-...".
transformations
"--...--."
"--...-."
transformations:
standard
"-.-..--...",
"zen"
dashes,
"gig"
".-",
"-...",
arrivebob
leavealice
18th,
leap
"12-31"
arrivealice
"08-18",
"11-01",
(inclusive),
rome
"08-19"
[31,
leavebob
"08-16",
16th,
arrivebob,
"10-01",
17th,
leavebob.
"08-15",
31].
"10-31",
non-leap
"mm-dd".
leavealice,
arrivealice,
business
"mm-dd",
5-character
august
i.e.:
y=2
x=4,
y=5
y=3
f(1,
customfunction
y);
findsolution
f(x,
f(int
y=1
callable
implementations
interface
x=1,
f(x
f(3,
x=2,
customfunction,
f(4,
with),
f(2,
y=4
f(x,y)
f(5,
[[1,4],[2,3],[3,2],[4,1]]
monotonically
[[1,5],[5,1]]
x=3,
public:
7236
9973
2736
[4,3,null,1,2]
[-4,-2,-5]
[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
negatives.
age.
[4,5,6,5],
conflicts.
[1,3,5,10,15],
[8,9,10,1]
player,
ages,
teams.
scores.length,
younger
tag_name,
"<div>>>"
tag_name.
"<div>"
"]]>>]"
<![cdata[<div>]]></div>"
'<',
cdata.
tag_content
[1,9].
note1)
"<div>]>"
start_tag|tag_content|end_tag.
unbalanced.
cdata_content,
"<![cdata[<div>]>]]>",
"<a>
tag,
</,
<,
![cdata[]]
</b>"
snippet,
<tag_name>
</a>
cdata
]]>.
issue
text1|cdata|text2.
'[',
wrapped
tags,
invalid),
<b>
</tag_name>
"<a>"
start_tag
end_tag
forbid
unmatched
"<div>this
<div>
tag.
unmatched,
tag_name
"<b>"
<tag_name>tag_content</tag_name>.
">>
<![cdata[
valid)
unbalanced
"<div>>>
snippet
valid).
plain
</div>.
'>',
nested.
"<![cdata[<div>]>]]>]]>"
"</div>"
<![cdata[cdata_content]]>.
tags
reason
cdata_content
<![cdata[<div>]>]]>]]>>]</div>"
[2,3,4,5,7,9,10]
bound,
bound.
[2,4,6,8,10,14]
[1,3,5,2].
[1,3,5,2,7,5],
maxk.
maxk
mink.
mink
mink,
fixed-bound
degree:
[1,2,2,3,1]
50,000.
49,999.
[1,2,2,3,1,4,2]
[2,2,3,1,4,2]
[2,9,2,5,6],
[2,1,4,3],
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1],
[1,1,1,0,0,1,1,1,1,1,1]
[1,1,1,0,0,0,1,1,1,1,0],
+-------------+---------+--------+
7700
juan
addilyn
kannon
3800
michael
7400
6100
vals[0].
[1,3,2,1,3],
[[0,1],[1,2],[2,3],[2,4]]
vals[2]
[[0,1],[0,2],[2,3],[2,4]]
4.)
class)
biology
students,
enrolled.
(student,
+---------+----------+
p3.length
p2,
(90-degree
angles).
p4,
[0,-1]
[0,12]
p3
p1.length
p2.length
p4.length
p4
p1,
[1,3,5,6],
not,
found.
[0,0,1,1],
rec2
rec1.length
touch
rec2,
y2],
rec1
rec2[i]
rec1[i],
rec2.length
[2,2,3,3]
[0,0,2,2],
"computation"
"bb")
'e'/'a',
("aba",
"computer"
"baba")
portions
character:
sentence2.
now",
haley"
"name
sentence2
sentence1
"my
sentence1.length,
"eating
is"
"eating"
sentence2,
"haley".
"right
sentence2.length
haley",
jane"
"jane"
"my"
now"
[2,5,3]
odd-length
[1,4,2,5,3]
66
vals[i].
[-1000]
chars,
"adaa",
[-1,-1,-1]
id=0
[the
[[0,5],[1,2],[0,2],[0,5],[1,3]],
id=2
timei.
users'
leetcode.
(minute
[1,1,0,0]
id=1
[0,2,0,0,0]
(uam)
k),
[[1,1],[2,2],[2,3]],
leetcode,
uam
consecutivenums
autoincrement
["ale","apple","monkey","plea"]
"abpcplea",
[[2,1],[1,4]]
hi,
yj).
count[j]
hi.
[[1,1],[2,2],[3,3]],
[[1,3],[1,1]]
points[j].length
points[j]
hi).
rectangles.length,
[[1,2],[2,3],[2,5]],
(li,
[3,4,4,5]
[3,5].
all)
[181,292,707,818,929]
043
[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
02
070
([[1,1]]
[[0,0]]),
[[0,1,1,0],[0,1,1,0],[0,0,0,0]]
grid[0][2]
vertical)
(1)
"aabb"
"ccjjc"
"he"
wonderful,
'j'.
'j'),
s2[1],
"yx".
s2[j].
"yy"
"yy",
s1[0]
"xx",
"xy",
s2[0],
"yx",
"yx"
s1[i]
s1[1]
'y'.
means:
["d1/","d2/","./","d3/","../","d31/"]
"../"
["d1/","../","../","../"]
exist).
folder).
["d1/","d2/","../","d21/","./"]
"./"
"x/"
"rat"
"abccbaabccba"
"aabbcc"
"aaaabbbbcccc"
re-ordering
"abccbaabc"
"art"
[2,6,4,8,10,9,15]
jump.
[7,6,9,6,9,6,9,7]
[100,-23,-23,404,100,23,23,23,3,404]
"abacba"
["nba","cba","dba"]
words[4]
["aba","aabb","abcd","bac","aabc"]
["aabb","ab","ba"]
words[3]
"bcfd"
"ou"
"ua".
"ea",
"ae",
"ie",
"iu",
"io",
"ia",
"oi",
'i'.
rattled
successor.
bat"
replacement.
c"
rat
"an"
"aadsfasf
1000]
battery"
bbab
cadsfafs"
absbs
english,
successors
["cat","bat","rat"],
cattle
"other",
"another".
sunny
words.txt
assume:
following,
ties,
frequency:
sake,
one-line
words.txt.
pipes?
[-1,0,3,5,9,12],
f1
fn-2
fn-1
f2
[-1,0,1,2,-1,-4]
[-1,-1,2].
[[-1,-1,2],[-1,0,1]]
nums[k]]
[3,3,3],
[6])
[1,4]),
([1,4],
([1,2,3],
([6],
[6]).
([2,3],
[1,3])
[6,6],
[1,2,3]).
[4]),
[2,4]),
([2,4],
[2,3]),
([1,3],
([4],
"usa"
"usa".
capitals,
"google".
capitals
"flag"
usage
holds:
[1,3,0,0,2,0,0,4]
[2,10,2019]
[0,0,0,2,0,0]
|func(arr,
[9,12,3,7,15],
[[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]],
1000000,
999999.
func.
[1000000,1000000,1000000],
target|.
[l,r]
target|
[1,2,4,8,16],
999999
[9,12,3,7,15,8,0,3,7,0,0,3,0,0,0].
("s","s","s","s","s","s").
("ab","a","ca","ba").
"ssssss"
("a","ba","cab","a")
"abcabcabc".
[2,3,-2,4]
[-2,0,-1]
[-2,-1]
keytime
key-card,
alphabetically.
keytime[i]
keyname.length
("21:00","21:20",
"23:51"
worker's
["daniel","daniel","daniel","luis","luis","luis","luis"],
keytime[i]]
period,
keyname[i].length
keycard
("10:00","10:40",
one-hour
saves
["bob"]
["12:01","12:00","18:00","21:00","21:20","21:30","23:00"]
use.
"21:30").
"11:00"
"11:00").
keyname
keytime.length
key-cards
keyname[i]
emits
"09:49".
[keyname[i],
keyname.length,
["10:00","10:40","11:00","09:00","11:00","13:00","15:00"]
["daniel"]
"22:51"
"daniel"
"10:00"
doors.
["alice","alice","alice","bob","bob","bob","bob"],
"23:52"
pixel
image[sr][sc].
[[0,0,0],[0,0,0]]
sr
pixel),
sc,
sc
pixels)
[[0,0,0],[0,0,0]],
image[i][j],
pixel.
pixel,
sc)
image.length
(sr,
[[2,2,2],[2,2,0],[2,0,1]]
sr,
[[1,1,1],[1,1,0],[1,0,1]],
image[i][j]
image[i].length
color),
tree),
node.left
node.right
node.val.
traverses
node.right.
[8,5,10,1,7,null,12]
[8,5,1,7,10,12]
node.left,
{2
display.
8}.
calculator.
{5
{3
startvalue,
double,
10}.
1900
31th,
date[7]
date[4]
gregorian
date[i]'s
date.length
"2019-02-10"
"2019-01-09"
[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
sea
enclosed
[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
0s,
(4-directionally)
[20,30,100,110,120]
age[y]
110,
[16,17,18]
sends
[16,16]
&&
age[x]
pst",
["step","steps","stripe","stepple"]
licenseplate.
(uppercase
"pest"
"pest",
licenseplate,
["looks","pest","stew","show"]
licenseplate.length
"caaacab",
"step"
"abccdef",
456",
"stripe"
12c",
"stepple"
"stew",
"cbca".
insensitive.
"1s3
"show"
"steps"
licenseplate
[["table","canadian
adam
chicken".
customernamei.length,
rous
brianna
orders[i]=[customernamei,tablenumberi,fooditemi]
"ceviche".
“display
table”.
amadeus
waffles","fried
burrito","soda"],["2","1","1","1"]]
waffles"]]
chicken","water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]]
chicken"],["adam","1","canadian
burrito","ceviche","fried
[["laura","2","bean
tablenumberi
,1
"water"
"ceviche"
james,
carla
burrito".
chicken"],["ratesh","12","fried
,2
chicken"],["carla","5","water"],["carla","5","ceviche"],["rous","3","ceviche"]]
customernamei
restaurant's
ratesh
burrito"],["david","3","fried
burrito","beef
table”
numerically
chicken"],["amadeus","12","fried
[["table","bean
header
chicken",
"canadian
waffles"],["brianna","1","canadian
burrito"],["jhon","2","beef
“table”,
chicken,water
"fried
table,beef
[["james","12","fried
specifically
fooditemi.length
burrito"],["melissa","2","soda"]]
fooditemi
at,
waffles".
displaying
,0
corina
burrito,ceviche,fried
[["table","beef
"beef
[["david","3","ceviche"],["corina","10","beef
chicken"],["1","2","0"],["12","0","3"]]
"34",
"a1b01c001"
"a123bc34d8ef34"
"34"
space:
"34".
"leet1234code234"
34".
homes.
stashed
(nums.length
nums[2])
homes,
robbed.
max(nums[0],
[2,7,9,3,1],
houses:
nums[4])
refuses
1)/2
robber,
max(nums[1],
nums[3])
capability
[2,3,5,9],
houses.
steals
steal
[3,-2],
(3*7)
[2,-2]
[-1,-1],
[1,5,3]
(ie,
(-2)*(-6))
(2*3
[3,-6]
[3,0,-6]
[2,-6,7]
[2,1,-2,5],
informtime.length
informed.
headid.
headid
manager[headid]
informtime[i]
[0,0,1,0,0,0]
news).
manager.length
news.
urgent
subordinates,
manager[i]
subordination
[2,2,-1,2,2,2],
informtime
[6,1]
[6,1],
[8,15,8]
[6,1,3,2,2,4,1,2],
unfairness
max(7,7,7)
[8,15,10,20,8],
cookies.length
max(31,30)
cookies.
distribution.
cookies,
cookies[i]
boxtypes[i]
numberofboxesi
91
[[1,3],[2,2],[3,1]],
trucksize,
numberofunitsperboxi]:
trucksize
[[5,10],[2,5],[4,7],[3,9]],
boxtypes.length
boxtypes,
truck.
boxtypes
[numberofboxesi,
trucksize.
numberofboxesi,
numberofunitsperboxi
corridor.
corridor,
"ppspsp"
corridor.length
sections,
dividers.
divider
dividers
decorative
corridor[i]
installed.
"ssppsps"
practice
perfect"
"practice
gifts.
behind.
gifts[i]
gifts,
any.
[25,64,9,4,100],
gift
choose,
gifts.length
[5,8,9,4,3],
indices[0]
["t"]
"me",
indices[1]
"t#"
["time",
"bell"]
"time#bell#"
indices[2]
"time",
"bell",
[0,2,1,-6,6,-7,9,1,2,0,1]
[0,2,1,-6,6,7,9,-1,2,0,1]
[3,3,6,5,-2,2,5,1,-9,4]
(arr[0]
[4,13],
[1,10],
[3,12],
13:
[2,11],
70,
300,
450ms.
6]}]
ran
2]},
dlog
135ms.
125,
dlog(2),
calls.length
])
75);
[{"t":
console.log([date.now()
cancelled
debounced
[1,2]},
75,
70ms.
[2]}
95ms,
calls[i].inputs.length
4]},
log(...inputs)
50ms,
50ms
calls[i].t
60ms,
recieve
100ms
35ms,
[2]}]
120ms.
125ms.
30ms,
150ms
debounce(log,
dlog(1),
[1]},
450,
_.debounce()
150ms.
settimeout(()
6]}
{"t":
parameters.
(consecutive
[1,2,1,2,1,3],
repetitions.
(4)
[1,2,4,4,4,4],
sub-sequence)
[1,2,1,2,1,1,1,3],
col1i)
row1i
[[0,0,1,1]]
col2i
col1i
col2i.
mat[x][y]
[row1i,
(row1i,
row2i
col2i],
[[1,1,0],[1,2,1],[0,1,1]]
[[1,1,2,2],[0,0,1,1]]
col2i).
query[i]
(row2i,
col1i,
row2i,
"bacdfeg"
underlined:
"yo|uar|e**|b|e***au|tifu|l".
"l|*e*et|c**o|*de|"
forth.
"yo|uar|e**|b|e***au|tifu|l"
excluded
"iamprogrammer"
"l|*e*et|c**o|*de|".
powers,
[1,2,4,8].
[2,4,64]
powers[3]
[[0,1],[2,2],[0,3]]
powers[j]
powers[1]
powers.length
powers[0]
powers[2]
[[],[],[1,2,3]]
csum(1,2)(3),
curriedsum
currying
sum(1,
life()
[[1],[2],[3]]
csum(1)(2,3),
curried
fn.length
2)(3)
curriedsum(1,
sum(a,
curriedsum(1)(2)(3)
effectively
csum(1,2,3).
[[1,2],[3]]
practical
6;
sum(1,2,3),
curry(fn);
explicitly
curriedlife()
csum(1)(2)(3),
curriedsum()()(1,
[a1,
a2|,
|a2
integer:
|an-1
|a3
obeys
an|]
a3,
[|a1
a4|,
a3|,
requirement:
an],
39:
bridge,
pickoldi
lefttorighti
31:
49:
(old
side,
efficient
time[i].length
river.
lefttorighti,
bridge.
river
righttolefti
[[1,9,1,8],[10,10,10,10]]
40:
river,
[[1,1,2,1],[1,1,3,1],[1,1,4,1]]
30:
pickoldi,
11:
putnewi
50:
(new
righttolefti,
warehouse.
warehouses
regulate
putnewi].
righttoleftj
58:
20:
[lefttorighti,
lefttorightj
warehouse)
"aababcabc"
counted.
"yzz",
"xyz".
"zza",
"zaz".
"xyzzaz"
"xyz",
"babbb".
"ababb",
"abbb",
"babb".
"aabab",
"aababbb"
"aaba",
"aababb",
variances
"aababbb",
"ababbb",
immediate.
50.00
immediate;
2019-08-13
(on
scheduled.
2019-08-12
2019-08-11
it).
customer_pref_delivery_date
2019-08-21
+-------------+-------------+------------+-----------------------------+
+----------------------+
immediate_percentage
precisely
2019-08-24
2019-08-09
+-----------------------------+---------+
2019-08-22
delivery_id
5th].
"x").
medal","4"]
[10,3,8,9,4]
[1st,
medal","silver
medal".
rank:
medal","bronze
4th].
["gold
athlete's
"bronze
placements
athletes
athlete,
athlete
medal","4","5"]
"silver
"gold
medal","5","bronze
athlete.
__builtin_popcount
c++)?
[0,1,1,2,1,2]
24,
12"
restricted
"12
(7-1)
(8-4)
['+',
'/']
1"
[4,1,8,7]
"-1
"9534330"
[10,2]
[3,30,34,5,9]
https://leetcode.com/problems/find-the-middle-index-in-array/
[1,7,3,6,5,6]
1991:
[2,1,-1]
index's
[-1,10,6,7,-7,1]
[-1,2,-3,3]
-k
[-10,8,6,7,-2,-3]
[["e","e","e","e","e"],["e","e","m","e","e"],["e","e","e","e","e"],["e","e","e","e","e"]],
[["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]
revealed,
'8'.
board[clickr][clickc]
revealing
'e').
[clickr,
game)!
mine,
revealed
revealed.
unrevealed
'8')
[["b","1","e","1","b"],["b","1","x","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]
mine.
click
clickr
(wikipedia,
char
diagonals),
click.length
('m'
clickc
[["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]],
clickc]
mine
[0,1,2,5].
[[0,1],[0,2],[2,5],[3,4],[4,2]]
[3,4,2,5].
min(10^5,
[[0,1],[2,1],[3,1],[1,4],[2,4]]
[0,3].
[0,2,3]
"ccccc"),
orderedstream
["aaaaa",
"aaaaa"),
insert(int
returned:
orderedstream(5);
["ddddd",
["aaaaa"].
"eeeee");
os.insert(1,
"bbbbb"],
"ccccc"],
["orderedstream",
"eeeee"],
"ddddd"]]
idkey,
concatentating
"ddddd");
(idkey,
"bbbbb",
"ccccc");
os.insert(3,
stream,
["bbbbb",
"eeeee"),
"bbbbb"),
"eeeee"].
insert.
os
"ccccc",
"ccccc"].
os.insert(2,
orderedstream(int
os.insert(4,
os.insert(5,
"ccccc"]
"ddddd",
["aaaaa"]
"aaaaa"],
"insert"]
"eeeee"]]
"ddddd"),
"eeeee"]
idkey
["aaaaa"],
"aaaaa");
"bbbbb");
integer-sided
(square
1x1)
2x2)
(squares
"lee(t(c)o)de"
"lee(t(c)o)de)"
either'('
"a)b(c)d"
"lee(t(co)de)"
"))(("
"lee(t(c)ode)"
"ab(c)d"
"eidbaooo"
"eidboaoo"
s1's
("ba").
'm').
3999].
('i',
v=
brushing
left/right
[[100,100],[200,100]]
moved.
lands,
[100,100]
freezes
direction)
landing
drop,
landed
sidelengthi
[[1,2],[2,3],[6,1]]
(negative
[100,
dropped,
[2,5,5]
brushes
sidelengthi]
columnnumber
sheet.
columnnumber,
[1,3,3],
[4,-2,-3,4,1]
"abcbdd"
"bcbddxy"
"dd",
concatenated.
"barfoofoobarthefoobarman",
fine
["the","foo","bar"]
[9,0]
["foo","bar"]
["bar","the","foo"]
[0,9]
"wordgoodgoodgoodbestword",
["word","good","best","word"]
"abcdef",
"abefcd",
"barthefoo".
"efcdab"
["foo","bar","the"]
"foobar".
"cdabef",
"barfoothefoobarman",
"acdbef"
"cdefab",
"barfoo".
"thefoobar".
"foobarthe".
["bar","foo","the"]
["ab","cd","ef"],
"efabcd",
[6,9,12]
["bar","foo"]
[[0,1,4],[1,2,6],[0,2,8],[1,3,1]],
graph")
maxmoves,
[xcnti-1,
[xcnti,
[[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]],
yellow.
x3],
xcnti],
104)
[[0,1,10],[0,2,1],[1,2,2]],
subdivide
(cnti
cnti
subdivisions
"original
x1],
xcnti,
vi].
cnti]
vi],
[x2,
x2],
maxmoves
numbercontainers();
numbercontainers
"find"]
nc.change(3,
"change",
nc
nc.change(2,
nc.change(1,
["numbercontainers",
nc.change(5,
find.
numbercontainers()
fills
change(int
"find",
[10]]
nc.find(10);
12:58:28
2020-07-29
2021-06-13
0.00
10:16:13
+---------+-------------------+
10:39:37
timed
2020-01-04
confirmed.
2021-07-14
14:00:00
'confirmed'
+---------+---------------------+-----------+
0.5.
('confirmed')
out.
confirmations
2021-06-12
13:59:27
0.50
2021-06-14
11:57:29
13:57:59
expired
confirmed
messages.
('timeout').
23:09:44
signups
2021-02-28
'timeout')
timeout
confirming
2020-03-21
2021-01-22
23:59:59
00:00:00
confirmation_rate
signup
('confirmed',
1.00
03:30:46
perm1
[1,8,17]
perm2
[17,8,1]
[1,17,8]
perm2[i].
squareful.
perm1[i]
pairs),
order(with
[[-14,-10],[19,23],[23,27]]
[1,3,6,10,15]
[3,8,-10,23,19,-4,-14,27]
[1,2,3,-9]
"tie"
"alice"
cheaper
flights[i]
src
flights[i].length
dst
[[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]],
src,
flights.
route,
[[0,1,100],[1,2,100],[0,2,500]],
700
flights.length
dst,
(1,1,1)
xoring
((nums[i]
(0,0,1)
((1
(0,1,0)
(1,0,0)
beauties
nums[k]).
(0,0,0)
[15,45,20,2,34,35,5,44,32,30]
(0,1,1)
(1,0,1)
(1,1,0)
[1,1,1,2,2,3],
array].
algorithm's
b5,
[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","b","p","p",".","."],[".","p","b","r","b","p",".","."],[".","p","p","b","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
pawn,
rook.
bishops
attacking.
stop,
capture
[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","r",".","p","b","."],[".",".",".",".",".",".",".","."],[".",".",".","b",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
rook's
f5.
pawn
bishop.
pawns
attacking
d6,
pawns.
blocking
west),
[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","r",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
"cb",
(p),
"?a"
sequence).
(s)
numones,
numzeros
-1s
numzeroes
numones
0}.
contains:
numnegones,
numzeros,
numnegones
[1,100,1,1,1,100,1,1,100,1]
[10,15,20]
9666.
9669
6669.
9969.
9996
9699.
9969
numeral.
3999
nums2[0],
nums3.
nums3,
nums3
xors
[10,2,5,0]
[2,5,1,6].
nums2[1].
nums2[1],
[8,0,7,2,11,3,4,1,9,1,6,3].
[4,5,0,-2,-3,1],
-3],
[[[3,
["rleiterator",
[3,8,2,5].
encoded)
[2,8,1,8,2,5]
encoded.
exhaust,
exhausted
"next"]
[8,8,8,5,5].
encoding[i]
[3,8,0,9,2,5]
rleiterator.next(1);
encoding.length
rleiterator.next(2);
exhausts
rleiterator(int[]
rle)
rleiterator
next(int
[8,8,8,5,5]
encoding[i
rleiterator([3,
["a","ba","bda","bdca"].
wordk]
"xbc",
predecessor
["xbc","pcxbcf","xb","cxbc","pcxbc"]
["xb",
wordb.
["abcd","dbqca"]
["a","b","ba","bca","bda","bdca"]
"pcxbc",
word3,
"cxbc",
"bcad".
chains
wordb
worda
trivial
chains.
[word1,
"pcxbcf"].
kilometers)
1.9
1/1
mark.
commute
2.66667
2/1
3/3
trains
depart
2.7
depart.
0.33333
hour)
2/3
"111111"
"0110111"
https://leetcode.com/problems/minimum-absolute-difference-in-bst/
530:
type-2:
type-2
"100011".
"101010".
type-1:
positioni+1
liter
liters
fuel),
fueli]
refueling.
station).
(expending
refuel
gas
[[10,100]]
drives.
arrived.
transferring
fueli
station,
mile
gas,
gas.
[[10,60],[20,30],[30,30],[60,40]]
startfuel
tank
expending
refuel,
[3,1,null,null,2]
straight-forward.
mistake.
pretty
swapped
[2,1,4,null,null,3]
[3,1,4,null,null,2]
"cdc".
"cdc"
81
526
625
reversed1,
2021
reversed2.
12300
81,
retained.
reversed1
625,
reversed2
526,
1800
[-1,-2,-3]
string?
-121.
-121
121-.
[1,12,-5,-6,50,3],
12.75
12.75000
c@d.com
a@b.com
s="abc",
s="cab".
s="cab",
s="aaaba".
j=2.
j=4.
i=1,
s="bac".
s="aaaab",
i=2,
i=4,
s="aaaab".
j=1.
s="acb".
s="abc".
s="bac",
s="bca".
i=3,
"abcba",
"code".
copies
"abbaccaddaeea",
"ecod"
"aaaaa",
"ilovecodingonleetcode",
"code",
slower
hour).
slow
catches
[10,8,0,5,3],
car's
(speed
fleet,
fleets
[2,4,1,1,3]
position).
bumper
one-lane
driving
[0,2,4],
fleet.
word2[j].
"abcc",
"fghij"
nums[1].
[3,5,2,4]
unmarked.
[9,2,5,4]
component,
[[1,1,1],[1,1,1],[1,1,1]],
col,
[[3,3],[3,2]]
[[1,3,3],[2,3,3]]
[[1,1],[1,2]],
[[1,2,2],[2,3,2]],
[starttime[i],
querytime
[3,2,7],
wasn't
querytime.
endtime[i].
endtime[i]]
lays
source.
source[i],
[[0,4],[4,2],[1,3],[1,4]]
[1,5,4,2,3],
[2,1,3,4]
allowedswaps.length
[[0,1],[2,3]]
[2,1,4,5],
allowedswaps[i]
allowedswaps[i].length
positions:
[1,3,2,4],
[5,1,2,4,3],
allowedswaps
[1,1,1,2,3,4]
expected[i].
[5,1,2,3,4]
expected[i]
expected:
[1,1,4,2,1,3]
heights:
annual
changing.
[[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
skylines
building).
city's
gridnew
0-height
increased.
affecting
prism.
blocks,
contour
[1,2,3,1,2]
[2,1,2],
[1,2,1,3,4],
[1,2,1,2,3],
[1,2,1,3],
[3,3,3,3,3],
jumping.
j)).
[7,6,5,4,3,2,1],
min(i,
[6,4,14,6,8,13,9,7,10,6,12],
max(i,
indicies.
explain
"enough
maxwidth
"everything
["science","is","what","we","understand","well","enough","to","explain","to","a","computer.","art","is","everything","else","we","do"],
"understand
"justification.
"shall
greedy
maxwidth,
art
fully-justified.
["what","must","be","acknowledgment","shall","be"],
"science
approach;
well",
to",
"acknowledgment
text",
pack
"justification."],
pad
we",
"do
left-justified,
"an",
an",
"example",
be",
justified.
left-justified
["this",
is",
symbols.
"text",
maxwidth.
[[1,2,3],[0,0,4],[7,6,5]]
accessed
[[2,3,4],[0,0,5],[8,7,6]]
forest.length
matrix:
tallest.
forest[i][j]
[[1,2,3],[0,0,0],[7,6,5]]
forest[i].length
division's
[1,2,5,9],
(1+1+1+2).
10/2
[44,22,33,11,1],
(1+1+2+3)
7/3
(1+2+5+9)
findsumpairs.count(4);
findsumpairs.add(3,
count(int
findsumpairs
[1,4,5,4,5,4]
findsumpairs.count(7);
(4,1),
(3,2),
(5,5)
(5,2),
(2,1),
tot.
findsumpairs(int[]
(5,1),
(3,1),
nums2[index],
findsumpairs.add(0,
tot
findsumpairs.add(1,
findsumpairs.count(8);
8;
tot)
findsumpairs([1,
11;
nums2[index]
[2,4,5,4,5,4]
["findsumpairs",
nums2.length).
[2,5,5,4,5,4]
(4,2),
(5,0)
"cbda"
outputs.
"cdba",
previously.
"cbad"
"cbafg",
"dcba",
permuted
property.
pen,
pencils.
cost1
utensils.
pens,
utensil.
pen
cost1,
cost2
cuboids,
cuboid
lengthi,
[[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
cuboid's
widthi
cuboids.
11x7
190
widthj
35x3
76
53x37
cuboids[i]
[widthi,
45x20
[[50,45,20],[95,37,53],[45,23,12]]
lengthj
95
widthi,
[[38,25,45],[76,35,3]]
23x12
lengthi
stacked
dimension.
cuboid.
heightj.
102.
cuboids.length
trust
[[1,3],[2,3]]
trust.length
town,
judge.
judge)
trust[i]
nobody.
trust[i].length
secretly
rumor
identified,
[[1,3],[2,3],[3,1]]
trusts
thickness
[[1,3],[2,4],[3,2]],
[thicknessi,
shelfwidth
thicknessi
shelf,
shelfwidth.
shelf.
books,
[[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]],
books.
books[i]
books.length
shelfwidth,
shelf
bookshelf
[[1,2,2],[3,8,2],[5,3,5]]
col).
heights,
[1,3,5,3,5].
[[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
heights[i].length
effort.
columns-1)
route's
[1,2,2,2,5],
[1,3,5,3,5]
hope
heights[row][col]
heights[i][j]
route.
[[1,2,3],[3,8,4],[5,3,5]]
hike.
(rows-1,
hiker
groupsizes[0]
[[5],[0,1,2],[3,4,6]]
[3,4,6].
[[5],[0,6,2],[4,3,1]].
groupsizes[i].
groupsizes,
groupsizes[4]
groupsizes
[[1],[0,5],[2,3,4]]
[2,1,3,3,3,2]
[0,1,2].
groupsizes[i]
groupsizes[2]
groupsizes[3]
groupsizes[6]
groupsizes[5]
[3,3,3,3,3,1,3]
groupsizes[1]
groupsizes.length
[[2,1,6],[5],[0,4,3]]
[4,5,6]
"(())".
nonempty
"(()())(())(()(()))",
"()()()()(())"
nonempty,
"()()()"
"(()(()))"
"()(())"
concatenation.
pk,
"()()()".
decomposition:
"(()())(())(()(()))"
"(()())(())",
"(()())(())"
"(()(()))".
"()()()()(())".
"(())()",
app.
tweet_id
america
tweet.
biden
tweets.
again!
+----------+----------------------------------+
[[1,1],[0,0]]
[[0,0,0],[0,0,0]].
[[1,2,1],[0,1,0]].
ci.
[[1,3,1],[1,3,1]],
[[2,2],[2,2]].
ri.
odd-valued
indices.length)
43261596,
3221225471
-1073741825.
(10111111111111111111111111111111)
964176192
00000010100101000001111010011100
4294967293,
00111001011110000010100101000000.
10111111111111111111111111111111.
(00111001011110000010100101000000)
[10,12,4].
[2,14,10]
similiar
[1,4,3].
[4,1,3]
[8,12,6],
[10,14,2].
moves].
parent.
[3,0,0]
[taking
"xi==yi"
equations.length
equations[i][0]
'='
'!'.
forms:
equations[i].length
one-letter
equations.
equations[i][1]
equations[i]
["a==b","b!=a"]
equations,
["b==a","a==b"]
"xi!=yi".here,
equations[i][2]
different)
equations[i][3]
[[1,3],[3,0,1],[2],[0]]
[[1],[2],[3],[]]
rooms[i][j]
unlocks,
unlocks
rooms[i].length
sum(rooms[i].length)
[100,100,100]
[37,12,28,9,100,56,80,5,12]
[40,10,20,30]
[5,3,4,2,8,6,7,1,3]
["ad","bd","aaab","baa","badab"]
["cc","acd","b","ba","bac","bad","ac","d"]
["a","b","c","ab","ac","bc","abc"]
allowed.length
numarray.update(1,
numarray([1,
"update",
update(int
"basicbasic"
stickers.length
stickers.
"thehat".
sticker
sticker.
"thehat"
stickers[i]
"with"
"example"
["with","example","science"],
["notice","possible"],
stickers,
stickers[i].length
[[".","#"],
him.
[["#",".","#","#",".","#"],
seats[i].length
[".","#","#","#","#","."],
["#",".",".",".","#"]]
[".",".","#",".","."],
["#",".","#","#",".","#"]]
and'#'.
possible..
classroom.
["#","."],
[".","#"]]
cheat
[".","#",".","#","."],
cheating
[["#",".",".",".","#"],
"me+you--ismydream"
"1ab!"
password.length
violates
password,
requirement.
"!@#$%^&*()-+".
"ilovele3tcode!"
bulbs,
(turning
toggle
bulb.
off].
on].
"azs"
"yzs",
"zzs".
"ubv?w"
conversions
"ubvww".
"ubvaw"
modification
"w"
"?zs"
"ubvvw"
[5,5,5,2,2]
{3,7}
{7}.
{3,5},{3,2},{5,2}.
[3,3,3,3,5,5,5]
[7,7,7,7,7,7]
[3,3,3,3,5,5,5,2,2,7]
{2,7}
4;
stone),
[-2,5,-1],
s(i,
[3,3,2],
[3,3,2,2],
[2,3,3,2],
[2,3,3,2,2],
[2,3,3,2,2]
[5,7].
[5,7,5,7,4]
[5,7,5,4].
pop.
["freqstack",
freqstack.push(5);
freqstack()
freqstack.pop();
freqstack();
frequent,
[5,7,5,7,4,5]
freqstack
freqstack.push(7);
freqstack.push(4);
[5,7,4].
[5,7,5,7]
frequent.
stack's
stack-like
[5,7,5,7,4].
fifth,...),
labelling
fourth,
[1,3,4,14]
(ie.,
sixth,...),
(second,
[1,2,6,10,26]
label.
[-2,4,1,-3]
adjacentpairs,
[100000,-100000]
adjacentpairs[i]
adjacentpairs.length
adjacentpairs
[[2,1],[3,4],[3,2]]
adjacentpairs.
forgotten
[[100000,-100000]]
nums[i]].
[-3,1,4,-2],
nums[i+1]]
[nums[i+1],
[[4,-2],[1,4],[-3,1]]
adjacentpairs[i].length
[3,5,1]
progression.
nums[j]),
[3,1,4,1,5],
0-diff
1-diff
(nums[i],
[1,3,1,5,4],
2-diff
countintervals.count();
countintervals.add(2,
countintervals.add(5,
countintervals.add(7,
["countintervals",
countintervals();
countintervals
countintervals()
[-1,-2,-3],
20].
[10,-2,-10,-5,20],
[10,2,-10,5,20],
handy
reshaped
matrix;
matlab,
legal,
row-traversing
[[1,2],[3,4]],
data.
were.
[[1,2,3,4]]
wanted
alone.
themselves,
degrees,
mirrored),
rotating.
you:
#2,
[[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
#1
moment.
robots
cherries.
cherries:
#2
[[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
#1,
"00110011"
occur.
"1100",
0's:
1's)
[freq,
encoding.
sublists
[2,4,4,4]
decompressed
sublist.
nums[2*i+1]]
[nums[2*i],
[2,4,4,4].
[4,4,4]
{nums[k],
0}
nums[nums[nums[k]]],
nums[2]}
s[k]:
s[k].
[5,4,0,3,1,6,2]
nums[6]
subjected
{5,
nums[nums[k]],
nums[6],
{nums[0],
"01000111"
"000111",
"551".
"51"
"1231",
"551",
"51".
"12".
"231".
[1,2,3,4,7],
rick
earth
stated
universe
morty
c-137,
[5,4,3,2,1,1000000000],
999999999
force.
discovered
baskets,
invented
1000000000.
position[i],
[false,true,true,false,false]
dailycapi
[5,2,6,4,1],
[[0,2,2],[4,2,4],[2,13,1000000000]]
[[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
candiescount[i]
candiescount
favoritedayi,
[favoritetypei,
candiescount.length
[7,4,5,3,8],
favoritetypei
favoritedayi
dailycapi].
[[0,1],[1,2],[2,3],[3,4]],
vj.
[[0,1],[1,2],[1,3],[4,2]],
[[1,3],[0,1],[1,0],[2,4]],
reply
says
guess.
guess,
v]
guesses.length
[[1,0],[3,4],[2,1],[3,2]],
[u,
guesses
guesses[j]
lazy,
edges[i][0],
component.
delete,
edges[i][1]
[6,2,2,2,6],
[[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
everywhere
swim.
[[0,2],[1,3]]
6+3+3
[[5,1,3,1],[9,3,3,1],[1,3,3,8]]
6+4+2
5+4+3
2+7+3
sums:
1+4+7
5+1+6
5+5+2
[[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
[3,0,4,null,2,null,null,1],
bounds.
depending
[1,0,2],
high].
[3,2,null,1]
descendant).
[0,2,3,1].
civilians.
weaker
[1,1,1,1,1]],
[1,0,0,0]],
[[1,1,0,0,0],
[1,1,0,0,0],
[2,0,3,1,4].
civilians).
[1,1,1,1,0],
soldiers)
[1,0,0,0],
[1,0,0,0,0],
strongest.
[2,0,3]
buzz()
d:
token
printfizz
fizz()
console,
"fizz"
fizz,
"fizzbuzz"
"buzz"
buzz,
"buzz",
fizzbuzz(int
number(printnumber)
[1,2,"fizz",4,"buzz"]
"buzz".
"fizzbuzz".
buzz(printbuzz)
fizzbuzz()
"fizz".
fizzbuzz
fizzbuzz(printfizzbuzz)
...]
printfizzbuzz
number()
fizz(printfizz)
printbuzz
"fizz",
[1,2,"fizz",4,"buzz","fizz",7,8,"fizz","buzz",11,"fizz",13,14,"fizzbuzz"]
clips.length
[8,9].
clips.
freely.
time].
[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]],
[6,9].
clips[i]
lasted
clips
[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]],
[1,9];
sporting
[1,9]
[8,10],
[4,7],
[8,10]
clip
[2,8]
30).
2015-01-02,
(yesterday).
+----+
+----+------------+-------------+
2015-01-01
2015-01-03
2015-01-04
(20
recorddate
2015-01-02
weather
2015-01-04,
dates'
mapsum();
["app",
"sum"]
["ap"],
(apple
["mapsum",
pairs'
insert(string
mapsum
mapsum.insert("apple",
mapsum()
overridden
"sum",
prefix)
sum(string
mapsum.sum("ap");
["apple",
mapsum.insert("app",
key-val
["ap"]]
existed,
prefix.length
[[1,1],[3,4]]
[3
[[1],[2]]
480
[5,1,6]
480.
[3,4,5,6,7,8]
[2,5,6]
[5,6]
[1,2,2,6,6,6,6,7,10]
questions[i]
pointsi
[[3,2],[4,3],[4,4],[2,5]]
questions.length
[pointsi,
brainpoweri
questions[i].length
brainpoweri].
earned:
5]]:
question.
pointsi,
exam,
darts[i]
darts.length
[[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]],
[[-2,0],[2,0],[0,2],[0,-2]],
dart
darts[i].length
dartboard.
threw
(7,8).
throwing
(0,4)
[1,2,3,2,1],
[3,2,1,4,7]
[0,0,0,0,0].
[3,4,1,2,5]
bst:
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,5,2]
[3,1,2,4,5]
(4+5)
c=4,
"bx"
["z","a","b","c","x","x","x"],
d=5,
"ax"
g=3,
o=2
z=10
repeating)
"dog"
(words[i]
a=4,
,'z'
["dog","cat","dad","good"],
["a","a","c","d","d","d","g","o","o"],
(3+2+2+5)
c=9,
(might
score[1],
a=1,
"xxxz"
(4+5),
[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
b=4,
"dad"
["l","e","t","c","o","d"],
"cx"
letters[i].length
(5+1+5)
["xxxz","ax","bx","cx"],
[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
score[0],
score[25]
[0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
[1,2,34,3,4,5,7,23,12]
[2,6,4,1]
[5,7,23]
odds.
30-day
365
[1,4,6,7,8,20],
planned
costs[1]
[1,2,3,4,5,6,7,8,9,10,30,31],
costs[0]
dollars,
plan:
[2,7,15]
$17
costs[2]
7-day
365.
$7,
1-day
[[3,5,1],[3,5]]
(1,5)
hats[i]
hats.length
hats[i][j]
hats:
hats,
hat
[[3,4],[4,5],[5]]
hats[i].length
(1,2,3,4)
[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
105.
[[1,10,4,2],[9,3,8,7],[15,16,17,12]]
[12]
[[3,7,8],[9,11,13],[15,16,17]]
[[7,8],[1,2]]
1101
1001
10101,
binary.
1111
prime)
bits,
1110
1011
cache-hits,
getinputs();
memoize(fn);
cache-hit.
[{"val":{},"calls":1},{"val":{},"calls":2},{"val":{},"calls":3}]
inputs)
({...a,
nan
[[o,o],[o,o],[o,o]];
getinputs
[[2,2],[2,2],[1,2]]
(const
[{"val":4,"calls":1},{"val":4,"calls":1},{"val":3,"calls":2}]
[[{},{}],[{},{}],[{},{}]]
[{"val":{},"calls":1},{"val":{},"calls":1},{"val":{},"calls":1}]
accepts.
fn()
fn().
memoized(...arr);
...b});
(right
[1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]
[1,1,1,null,1,null,null,1,1,null,1]
node;
almost
"1(2(4))(3)"
"1(2()(4))(3)"
omit
"1(2(4)())(3()())",
originally,
one-to-one
[[1,5,[2,3]],[2,3,[]],[3,3,[]]],
employees.length
employees[i].importance
employees[i].subordinates
subordinates'
information,
indirect
employees[i].id
[[1,2,[5]],[5,-3,[]]],
subordinates:
leader
[1,0,1,0,1,0,1]
32-bits
(110)
01101
(111)
root-to-leaf
call.
["call","call","call"]
counter()
[-2,-1,0,1,2]
etc).
sebsequent
["call","call","call","call","call"]
[[0,2,4],[3,2,1],[1,0,4]]
(1,3).
grid[0][1]
grid[row][col].
grid[1][3]
grid[2][3]
grid[1][2]
[[0,1,3,2],[5,1,2,5],[4,3,8,6]]
https://leetcode.com/problems/convert-bst-to-greater-tree/
538:
yi.
[[1,2],[2,3],[3,1]]
[[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
59);
[10,10000]
"minute",
tweetcounts.gettweetcountsperfrequency("minute",
["tweetcounts","recordtweet","recordtweet","recordtweet","gettweetcountsperfrequency","gettweetcountsperfrequency","recordtweet","gettweetcountsperfrequency"]
analysis.
gettweetcountsperfrequency(string
120);
[70,129],
frequency's
freq,
gettweetcountsperfrequency.
[9970,10000]
freq.
recordtweet(string
tweets,
(60-second
endtime]
10000]
analyzing
tweetcounts
"tweet3"
(3600-second
[2,1];
frequencies:
tweetname
tweetcounts()
"tweet3",
[4];
[10,3609],
tweetname,
"hour",
recordtweet
site
[3610,7209],
[2];
[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]
tweetcounts.gettweetcountsperfrequency("hour",
recorded
210);
time)
seconds).
[0,210]
(86400-second
chunks):
[0,59]
[130,189],
[null,null,null,null,[2],[2,1],null,[4]]
[7210,10000]
tweetcounts.recordtweet("tweet3",
[10,69],
[60,60]
tweetcounts();
[[3,2,3],[1,1,2],[2,3,4]]
typei
[[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
traversable.
[typei,
traversed
[[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
likewise,
edges:
(typei,
216.
[6,3,3,2],
modulo.
conclude
product_name,
2011.
2009.
2008.
+--------------+-------+-------+
words[2],
["abc","aabc","bc"]
["ab","a"]
299
332
12...
13...
10...
109].
{"x":1,"y":2},
json.
json.stringify(o1).length
{"x":null,"l":[1,2,3]},
exactly.
_.isequal()
{"x":1,"y":2}
json.parse.
check.
{"y":2,"x":1},
json.stringify(o2).length
o2
{"x":null,"l":["1","2","3"]}
o1
o2,
"foobar",
"jjjj",
33%
0%,
percent.
[4,3,1,1,3,3,2],
[5,5,4],
3s.
[2,9]
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
66045
["a","e","i","o","u"].
u)
o,
mountain.
[1,4,7,3,2]
[2,1,4,7,3,2,5]
|1-2|
[1,5,5].
[1,7,5],
[9,3,5,1,7,4]
[1,7,5]
(|1-3|
|nums1[i]
[1,10,4,4,2,7]
[1,1,5],
|7-4|
|5-3|)
[2,4,6,8,10]
|10-3|
|4-1|
[10,10,4,4,2,7].
[1,10,4,4,2,7],
nums2[i]|
[1,10,4,11]
[24,32,8,12]
[2,11,7,15]
[13,25,32,11]
[12,24,8,32],
push.
["#","#","#","#",".","#"],
storekeeper
["#",".",".","b",".","#"],
["#",".","#","#",".","#"],
(impossible
["#","t","#","#","#","#"],
["#",".","#","b",".","#"],
["#","t",".",".","#","#"],
["#",".",".",".","s","#"],
["#",".",".",".",".","#"],
there).
[["#","#","#","#","#","#"],
["#","#","#","#","#","#"]]
relaxation.
(7,
designated
floors,
relaxation
floors.
monster
lose,
monsters.
monster.
charged
weapon
[1,3,4],
[1,1,2,3],
dist[i],
weapon.
[1,1,2,3].
defending
thrid
[x,0,2],
[x,2,3].
[x,0,1,2],
charged,
eliminated.
charge.the
loss,
[x,x,2].
{x}.
r("{a,b,c}")
"{{a,z},a{b,c},{ab,z}}"
r("{{a,b},{b,c}}")
"abefh",
r(e1)
(notice
r("a{b,c}{d,e}f{g,h}")
r(e2)
"acefg",
r(expr)
["a","ab","ac","z"]
grammar:
r({e1,
{"abdfg",
{"ac","ad","bc","bd"}
grammar,
∪
...})
understood
cartesian
','or
represents.
r(x)
ek
{"w"}
"abdfh",
"{a,b}{c,{d,e}}"
once)
singleton
e2)
r("w")
"acdfg",
"acefh"}
examples:
r("a")
{"a"}
r(e2)},
comma-delimited
concatenation,
r("{a,b}{c,d}")
r(e1
"acdfh",
{"a","b","c"}
"abefg",
["ac","ad","ae","bc","bd","be"]
bar()
"foobarfoobar"
foo()
foo(),
print("bar");
print("foo");
bar().
ccenter).
|r1
rcenter
(r2,
correct,
rcenter,
ccenter.
(r1,
[0,1,1,2]
r2|
ccenter
[[0,1],[1,1],[0,0],[1,0]]
c2|.
|c1
[[0,1],[0,0],[1,1],[1,0]]
[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
(rcenter,
ccenter)
[0,1,1,2,2,3]
maxmove,
boundary).
startcolumn,
startcolumn].
startcolumn
maxmove
startrow
"aaabaaa"
'a'),
swap,
[[1,2],[2,3],[5],[0],[5],[],[]]
[[1,2,3,4],[1,2],[3,4],[0,4],[]]
node).
graph[i].
terminal
[2,4,5,6]
"leaf":
+----+------+
"root":
"inner":
p_id
attributes.
[1,2,0,0].
[1,0,0].
[1,0,0,0].
candies)
[1,2,3,0].
[5,2,3].
num_people
ans[2]
ans[3]
[1,2,0].
gift).
[1,2,3,1].
"crcoakroak".
printing
croakoffrogs
'k'.
croakoffrogs,
frogs.
croak
croak.
"crcoakroak"
yelling
mixed.
yell
frogs,
"croakcrook"
"croak"
croakoffrogs.length
croaks
"croakcroak"
[[1,3],
[2,3,4,8,9]
[[1,3],[1,4],[2,5],[3,5]]
[[1,3],[3,7],[8,9]]
[[1,2],[2,3],[2,4],[4,5]]
[1,2,4,7,8,9]
[3,7],
sets.
[8,9]],
["ab",
"c"],
sum(word2[i].length)
word2[i].length
sum(word1[i].length),
["abcddefg"]
word2[i]
word1[i].length,
"bc"]
"defg"],
"cb"],
satisfaction[i]
like-time
3*2
[-1,-4,-5]
satisfaction
[-1,-8,0,5,-9]
[4,3,2]
prepared.
cook
0*2
dishes.
satisfaction.length
dish
(2*1
prepared
dish,
4*3
satisfaction[i].
(-1*1
preparation.
discard
14).
[2,2,2].
formed,
[3,2,3,2,2].
[1,3,2,1,3,2,2]
"()()".
(well-formed)
")()())"
pricing
highest-ranked
rank).
col]
[[1,1,1],[0,0,1],[2,3,4]],
[[1,2,0,1],[1,3,3,1],[0,2,5,1]],
pricing.length
(2,0)
(lower
[[1,2,0,1],[1,3,0,1],[0,2,5,1]],
(smaller
range).
(highest
(2,0).
[[2,1],[2,0]]
(2,2).
[[0,1],[1,1],[2,1]]
[[2,1],[1,2]]
[row,
(shorter
bold,
[[0,0,1],[1,1,1],[1,0,1]]
[[1,1,0],[1,0,1]]
[[1,0,1,0,1]]
reordering
[[1,2],[2,1],[3,4],[5,6]]
dominoes.length,
dominoes[i].length
[[1,2],[1,2],[1,1],[1,2],[2,2]]
d),
dominoes[i][j]
dominoes[j].
dominoes[j]
[1,2,2,1]
abs(nums[i]
[3,2,3,2,2,2]
"amy"
"aeo"
"are"
"u"
"mu"
"ooo"
"artro"
["hey","aeo","mu","ooo","artro"],
["are","amy","u"],
nums[r]]
subarray).
nums[l
[nums[l],
nums[r
(l
"aazz"
-y
[4,-1,4,-2,4],
commands:
+y
0):
[6,-1,-1,6],
commands.length
[4,-1,3],
commands[i]
degrees.
+x
82
xy-plane
[[2,4]]
21|,
min(|13
3|)
|13
min(2)
21|)
min(|1
[13,5,21].
[7,7,7,7],
[13,5,1,8,21,2],
min(8,
5|,
sells
"azbazbzaz"
si.
"ca",
"azb"
s5
sn).
"babab"
s9
"az"
"az",
"azbazbzaz",
"babab",
s6
"azbzaz",
prepending
si,
[0,1,5,6]
[3,1,2,3,2]
[5,3,1,4,3,5,2,4,2]
[0,1,9,0]
|j
[2,3,2,1,3]
constraints,
i|.
a[j],
magicdictionary.search("hhllo");
"leetcode"]],
["hell"],
searchword)
["magicdictionary",
"builddict",
builddict(string[]
magicdictionary.search("hello");
builddict
magicdictionary.search("hell");
structure,
["leetcoded"]]
["hhllo"],
magicdictionary();
search(string
"leetcode"]);
[["hello",
magicdictionary.search("leetcoded");
magicdictionary()
["hello"],
magicdictionary
magicdictionary.builddict(["hello",
(3,1,1),
arr[k]|
(3,0,1),
[(3,0,1),
(0,1,1)].
arr[k])
arr[j]|
[3,0,1,1,9,7],
arr[j],
(arr[i],
triplets:
"loveleetcode",
"aaab",
abs(8
[3,2,1,0]
[3,2,1,0,1,0,0,1,2,2,1,0]
abs
none,
mines[i]
mines.length
grid[xi][yi]
relevant
arms
[[4,2]]
(-2)2
(-2)0
(-2)1
reasonable
word."
correctly."
(value
method).
master.guess,
both.
get:
master.guess("abcczz")
six-letter-long
master.guess(word).
correctly.
master.guess("acckzz")
master.
"acckzz"
"eiowzz"
allowedguesses
master.guess("ccbazz")
"either
master.guess("eiowzz")
"hamada",
master.guess(word)
(other
master.guess("aaaaaa")
allowedguesses.
bruteforce
["acckzz","ccbazz","eiowzz","abcczz"],
"ccbazz"
helper
"acckzz",
["hamada","khaled"],
position)
master.guess
"abcczz"
"you
pre-order
voyage.length
flipped.
voyage[i]
voyage
voyage.
effect:
voyage,
arr1[j]|
[0,-2,-1,-7,-4]
|arr1[i]
arr1.length.
40000
[1,-2,-5,0,10],
[-1,4,5,6]
arr2[j]|
|arr2[i]
{2,3,5}
sum(rods[i])
welded
weld
{6},
rods[i]
supports,
{1,2,3}
billboard,
steel
{4,6},
installation.
supported,
rods.length
[1,null,2,3,4,null,null,5,6]
(11*10)
(15*6)
6.their
|25
[1,15,6,3]
16|
[[1,4],[3,2]]
log(n))
log(m))
[[10,20,15],[21,30,14],[7,16,32]]
[i,j].
[1,2,5].
(l,r).
[5,2,1]
a[l],a[l+1],...,a[r]
[4,2,4,5,6]
[2,4,5,6].
[5,2,1,2,5,2,1,2,5]
[2,1,6]
[6,1,7,4].
[6,1,7,4,1]:
[2,1,4]
[6,1,4,1].
[2,1,6,4]
[6,7,4,1].
removal,
[1,6,4]
removal.
fair.
[2,6,4]
[[1,3],[2,0],[5,10],[6,-10]],
[[0,0],[3,0],[9,2]],
x-values,
points.length.
f("zaaaz").
f("cbd")
f(s)
["zaaaz"]
queries[i][j],
words[i][j]
f("zaaaz")
f("aaaa")
f(w)
f(queries[i])
f("aaa")
["cbd"],
"dcce"
queries[i].length,
f("cc").
f("bbb")
f("aaaa").
["bbb","cc"],
["happy","sad","good"],
["kfc","shogun","burger
king","kfc"],
["piatti","the
"shogun".
steakhouse","shogun"]
grill
list2[j]
["shogun"]
list1.length,
king"]
hunter
list2[i].length
["shogun","tapioca
list1[i].length,
"happy".
express","burger
list1[i]
["sad","happy","good"]
torrey
list2,
"shogun"
list2[i]
pines","hungry
["sad","happy"]
[1,2,3,4,4]
[3,6,5,1,8]
(maximum
4.512
0.995
(4.120
+------------+------------+---------------+-----------+
processing_time,
machine_id
process_id)
(machine_id,
((1.520
0.430))
5.000
2.500
1.456
activity_type)
run.
0.712
((4.512
0.712)
1.420
machine_id.
processes.
1.520
process_id,
'end'
processing_time
3.140
4.100)
(1.420
1.550
0.550)
'start'
'end').
machine.
2.500))
4.120
0.894
process_id
0.550
4.100
((1.550
(5.000
('start',
3.140))
0.430
+------------+-----------------+
[2,1,3,4],
nums1[ik
,nums2[ik
ik
min(2,3,4)
+...+
min(1,3,4)
nums2[i1],
i0,
[1,3,3,2],
min(nums2[i0]
(3+3+2)
i1,
(1+3+2)
min(2,1,4)
(1+3+3)
min(2,1,3)
(nums1[i0]
n-1}
optimal:
[7,5,10,9,6],
nums1[i1]
[4,2,3,1,1],
[11,13]
[nums1,
[17,19].
nums2].
[2,7,4,3,5]
[5,5,0]
[2,1,5]
[7,0,5,5,0]
extroverts
extrovertscount
happiness:
light
living
happiness)
people:
introvertscount,
240
(introvert
happiness.
neighbors)
extrovert
min(m
introvert
260
extrovert).
30)
introvertscount
extroverts.
260.
introverts
live
neighbor)
extrovertscount.
2018-12
trans_date
+------+---------+----------+--------+------------+
trans_count
2019-01
de
124
2018-12-18
trans_total_amount
"declined"].
declined
2018-12-19
+----------+---------+-------------+----------------+--------------------+-----------------------+
["approved",
approved
approved_count
approved_total_amount
incoming
stone's
plays,
alice.
draw.
bobvalues.
alicevalues[i],
bobvalues.length
differently.
alicevalues[i]
other's
[1,6,7]
bobvalues
alicevalues
bobvalues[i]
alicevalues.length
1123:
https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/
"aabbc",
converting,
(base
[1,9,3,5]
[1,4,9,3,8,5].
[[2],[2,4],[2,4,6],[4],[4,6],[6]]
[2,6,12,4,10,6].
[[1],[1,3],[1,3,5],[3],[3,5],[5]]
[[3,0],[3,1],[3,2],[3,4],[5,4]]
mht.
(mhts).
labels.
mhts'
[[1,0],[1,2],[1,3]]
min(h))
[31,26,33,21,40]
[2,7,1,8,1]
[3,5,7,9],
[4,6,5,9].
[4,4,9,7,9,10]
[0,1,6,4,8,7],
nums[l[i]],
[6,5,4],
l[i]
[l[i],
l.length
[4,6,5,9,3,7],
r[i]
[5,9,3,7].
[-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10],
arithmetic:
nums[r[i]]
r[i]].
[4,6,5].
[false,true,false,false,true,true]
r.length
sequences:
[0,0,2],
nums[l[i]+1],
580986
colorings
[2,3,2,4,3],
[9,6,9,3,15]
numsdivide
numsdivide.
[8,2,6,10]
[4,3,6],
[3,4,3].
numsdivide.length
[2,3,2,4,3]
numsdivide[i]
"zbax",
#2:
convert:
"iiii"
➝
"(9)(9)(9)(9)"
"12552031545"
262124
26).
"zbax"
"262124"
12552031545
"9999"
"iiii",
"(26)(2)(1)(24)"
#1:
"(12)(5)(5)(20)(3)(15)(4)(5)"
|8-8|=0
|5-9|=4
|4-1|=3
arr1[1]=5
|5-10|=5
d=2
[-5,-2,10,-3,7],
arr1[0]=4
[4,5,8],
arr1[2]=8
[-4,-3,6,10,20,30],
|5-1|=4
|4-9|=5
|8-10|=2
|4-8|=4
|arr1[i]-arr2[j]|
have:
|4-10|=6
|8-1|=7
|5-8|=3
arr2[j]
|8-9|=1
[2,1,100,3],
[10,9,1,8],
20.00000
20.50000
worse.
[9,1,2,3,9],
10-6
library's
[2,0,2,1,1,0]
one-pass
[0,0,1,1,2,2]
text.length,
texteditor.cursorright(6);
"deletetext",
cursor.
texteditor()
"|practice".
call?
["practice"],
texteditor.cursorleft(2);
key).
len)
cursorleft(int
"|".
texteditor.cursorleft(8);
cursor
texteditor.cursorright(3);
texteditor.deletetext(10);
min(10,
"leet|".
"cursorright",
cursorleft
texteditor();
["texteditor",
texteditor.addtext("leetcode");
texteditor.addtext("practice");
"etpractice"
"cursorleft",
"leet|practice".
deletetext(int
cursor,
(simulating
"addtext",
addtext,
cursorright(int
"leetcode|".
[6]]
cursorright.
o(k)
"etpractice",
"practi"]
"leetpractice|".
"practi"
"practi|ce".
currenttext.length
text)
texteditor.deletetext(4);
addtext(string
cursor)
deletetext,
"cursorright"]
texteditor
cursor.position
what.
[3,2,1,0,4]
[5,1,4,null,null,3,6]
child's
sqrt(10).
x2)2
sqrt(8)
[[3,3],[5,-1],[-2,4]],
(-2,
[[3,3],[-2,4]]
[[-2,2]].
[[1,3],[-2,2]],
y2)2).
[[-2,4],[3,3]]
(y1
sqrt(10),
[[-2,2]]
sqrt(8).
in).
âˆš(x1
[1,2,1,1].
[2,2,2,1,2,2,1,2,2,2],
[1,1,2,1]
[1,1,2,1,1],
decided.
tournament:
played,
paired.
advance
declared
make,
[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
potential
[[1,0],[1,0]]
you?"
[10,10,10]
answers.length
didn't
rabbits.
didn't.
rabbit.
rabbit
inconsistent.
accounts[i][j].length
accounts[i][0]
[["gabe","gabe0@m.co","gabe3@m.co","gabe1@m.co"],["kevin","kevin3@m.co","kevin5@m.co","kevin0@m.co"],["ethan","ethan5@m.co","ethan4@m.co","ethan0@m.co"],["hanzo","hanzo3@m.co","hanzo1@m.co","hanzo0@m.co"],["fern","fern5@m.co","fern1@m.co","fern0@m.co"]]
accounts[i]
accounts,
'johnsmith@mail.com']]
'johnnybravo@mail.com'],
"johnsmith@mail.com".
[['mary',
['john',
[["john","johnsmith@mail.com","john_newyork@mail.com"],["john","johnsmith@mail.com","john00@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]
'mary@mail.com'],
'john00@mail.com',
john's
'john_newyork@mail.com',
[["ethan","ethan0@m.co","ethan4@m.co","ethan5@m.co"],["gabe","gabe0@m.co","gabe1@m.co","gabe3@m.co"],["hanzo","hanzo0@m.co","hanzo1@m.co","hanzo3@m.co"],["kevin","kevin0@m.co","kevin3@m.co","kevin5@m.co"],["fern","fern0@m.co","fern1@m.co","fern5@m.co"]]
[["john","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]
[3,5,10,6,9],
you're
profit[i].
[20,20,100,70,60]
endtime[i],
[3,4,5,6],
[1-3]+[3-6]
[1,2,3,4,6],
[50,10,40,70]
months).
month)
feb
mar_revenue
+------+---------+-------+
revenue
+------+-------------+-------------+-------------+-----+-------------+
apr
feb_revenue
mar
["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"].
dec_revenue
jan_revenue
+------+-------+
+-------+--------+------------+--------+
+-------+-------+
empid
brad
thomas
supervisor
[["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]],
"abcb"
"see"
board?
neighboring.
"abcced"
element):
function:
(initial)[0,0,0]
calls.
operations).
[4,2,4]
(second
[4,2,5](nums).
[5,3,6,2,4,null,7],
"011101"
"0111"
substring).
"01110"
"101",
"1111"
[[0,1],[0,3],[1,2],[1,3]]
infrastructure
infrastructure.
roads,
[[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
[[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
"anbna"
"elble",
constructions
"anellena"
"annabelle",
"anna"
"true",
"elle",
wiki.
matrixes
[[0,0],[1,1],[1,1],[1,1],[1,0]]
quadtree2.
input/output
quadtree2
1*1.
quad-tree,
quad-tree
terminator
bottomright;
bottomleft;
[isleaf,
[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
1*1
besides,
0's)
isleaf:
topleft;
[[0,1],[1,1],[1,1],[1,0],[1,0]]
val:
topright;
sub-grids
isleaf;
quad-tree.
quadtree1
sub-grid.
illustration,
val].
recurse
isleaf
2x
val;
[1,2,3,3,2,2]
"aaaaacccccaaaaaccccccaaaaagggttt"
dna,
useful
["aaaaaaaaaa"]
(substrings)
"aaaaaaaaaaaaa"
nucleotides
dna.
"acgaattccg"
10-letter-long
identify
studying
["aaaaaccccc","cccccaaaaa"]
"$1".
"$2"
"$9".
"$6"
"$23",
"$1"
"$0.50".
preceded
$10$",
$0.00
$10$"
"$0.00".
"$100",
"$6",
5$
"$1.00".
discount%
shop",
"$3",
8$
$0.50
"there
"$2".
$1.00
"$",
"$0.50",
shop"
'$'.
"$1e5"
"$5",
yourself
[1,2,3,null,5,null,4]
"fl"
["flower","flow","flight"]
["dog","racecar","car"]
col2).
sumregion
sumregion(int
nummatrix.sumregion(2,
"sumregion"]
nummatrix.sumregion(1,
[[[[3,
"sumregion",
nummatrix([[3,
nummatrix
rectangle)
nummatrix(int[][]
col1)
col2)
(row2,
sumregion.
["nummatrix",
(row1,
mail.com","50
google.mail.com","5
"discuss.leetcode.com",
"rep
cpdomains
wiki.org"]
d1i.d2i"
951
"com",
901
d1i,
discussed
count-paired
"intel.mail.com"
d2i,
d1i.d2i.d3i"
discuss.leetcode.com"]
"mail.com"
domains
yahoo.com",
"50
"wiki.org"
["9001
cpdomains,
discuss.leetcode.com","9001
d3i
["901
"discuss.leetcode.com".
discuss.leetcode.com
cpdomain[i]
discuss.leetcode.com"
subdomains,
cpdomain.length
"discuss.leetcode.com"
intel.mail.com","951
"com"
cpdomain[i].length
["900
wiki.org","5
implicitly.
domain:
formats
leetcode.com","9001
900
yahoo.com","900
"5
org","1
com"]
repi
"google.mail.com"
"repi
"yahoo.com"
rep
"9001
subdomains.
intel.mail.com",
9001
d1.d2"
google.mail.com",
"org"
d1.d2.d3
d1.d2.d3"
(6).
(18).
[400]
[17,18,5,4,6,1]
[18,6,6,6,1,-1]
price[1]=4
prices[1]=4,
prices[3]=2,
[8,4,6,2,3]
[4,2,4,2,3]
[10,1,1,6]
prices[j]
price[0]=8
[9,0,1,6]
price[2]=6
grid[i][n
1][0].
[[9,1,2],[3,4,5],[6,7,8]]
[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]],
[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
grid[0][0].
"hhvvh",
1-indexed.
["hhhvv",
destination:
'h',
destination.length
(go
providing
"vhvhh",
"hhvhv",
"hhvhv"
"vhhhv",
ncr(a,
"hhvvh"
"hvhhv",
"hvhvh",
"vvhhh"].
ncr(row
"vhhvh",
"hvvhh",
"hhhvv"
"hvhvh"
271
reverse,
172
041
reversed,
443
"balloon"
"loonbalxballpoon"
"nlaebolko"
succprob[i]
0.30000
[0.5,0.5,0.3],
1e-5.
[0.5,0.5,0.2],
0.2
succprob[i].
[[0,1],[1,2],[0,2]],
succprob.length
succprob
[0.5],
2*10^4
[1,10,4]
[4,3,1,2,4].
[4,3,1,2,4]
minstack.pop();
[null,null,null,null,-3,null,0,-2]
getmin
["minstack","push","push","push","getmin","pop","top","getmin"]
minstack.push(-2);
minstack();
minstack.push(0);
minstack
minstack.push(-3);
retrieving
[[],[-2],[0],[-3],[],[],[],[]]
minstack.top();
getmin()
getmin.
minstack()
top()
minstack.getmin();
[[4,3,2],[7,6,1],[8,8,8]]
one),
[[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]
exclusively
18000
digits:
formatting.
firstly,
"45"
6"
"123-456-78"
"67".
reformatting
"123-45-67"
joining
"78".
"1-23-45
4-567"
"123456".
"123-456".
"123-456-78".
"1234567".
"12345678".
dashes.
"123
4-5678"
"456".
"123-45-67".
"123-456"
"bca".
{'a',
k-similar.
s1.
1-similar
'f'}.
s2:
"ba".
2-similar
783:
https://leetcode.com/problems/minimum-distance-between-bst-nodes/
vowels:
"leetcodeisgreat"
"leetc"
"bcbcbc"
"leetminicowor"
"eleetminicoworoep"
e's.
[1,3,4,5,8].
[7,4,5,1,8,12,4,7],
[4,2,1,4,3,4,5,8,15],
[1,3,4,5,8,15]
[4,5,8,12].
[numsl,
numsr-1,
numsr]
abs(2+3)
abs(numsl
numsl+1,
numsl+1
abs(5)
[1,-3,2,3,-4]
abs(-8)
-x.
[-5,1,-4]
numsr).
numsr-1
[2,-5,1,-4,3,-2]
abs(-5+1-4)
"codeleet"
"codeleet",
shuffling.
[4,5,6,7,0,2,1,3]
shuffling,
strs[n
strs[2]).
["xc","yb","za"]
["ca","bb","ac"]
"c"].
["zyx","wvu","tsr"]
strs[2]
[5,9,1,3,5,7]
[10,4]
[5,4,2,3,3,7]
even-odd.
[3,7,9]
[1,10,4,3,null,7,9,12,8,6,null,null,2]
even-odd
[12,8,6,2]
even-odd,
tasks[i].length
[[1,3,2],[2,5,3],[5,6,2]]
durationi]
[[2,3,1],[4,5,1],[1,5,2]]
continuous)
2.5.33
"0.1",
version1
version1's
"1.0.0"
"1.001"
1.1
version2
revisions
version2's
version2,
version2.
0.1
001
1.0
revision
"1.01",
"1.1"
version2.length
version1.length,
[4,2,null,1,1,3,null,null,1]
[4,2,6,3,1,5],
cur's
[4,1,1,2,null,null,6,3,1,5]
[4,2,null,3,1],
cur
root's
depth,
later.).
cstart)
eventually,
[[0,0],[0,1],[0,2],[0,3]]
rstart
[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
northwest
cstart
southeast
whenever
boundary,
(rstart,
grid's
[[1,2],[3,4],[5,6]],
covered:
[[1,10],[10,20]],
["abc","acb","bac","bca","cab","cba"]
these.
"xyzz".
"cdab",
"xzzy"
"zzxy"]
"zzyx".
"xyzz"
"zzxy"
["xyzz",
["abcd","cdab","cbad","xyzz","zzxy","zzyx"]
["zzyx"].
equivalent,
group).
"cbad"],
"tcode"
"bab"].
targetwords.
targetwords[j].length
startwords[0]
startwords
startwords.length,
"act",
"act"
["abc","abcd"]
startwords[i].length,
"acti",
["ant","act","tack"],
startwords.
targetwords[1]
"act".
["tack","act","acti"]
targetwords.length
targetwords,
"bacd",
startwords,
"actk"
"tack",
startwords[1]
"tack".
["ab","a"],
targetwords[2]
targetwords[0]
targetwords
"acti"
snap_id)
snapshot,
snap,
snapshotarr.set(0,6);
snapshotarray(3);
set(index,
snapshotarray(int
array[0]
[null,null,0,null,5]
snap_id
get(index,
snapshotarr.set(0,5);
array-like
snapshotarr.snap();
snapshotarr.get(0,0);
snap_id:
[[3],[0,5],[],[0,6],[0,0]]
snapshotarray
snapshotarr
snap()
snap())
["snapshotarray","set","snap","set","get"]
princess.
integers).
dungeon.
integers),
laid
[[-2,-3,3],[-5,-10,1],[10,30,-5]]
princess
rightward
threats
health
valiant
dungeon[i].length
decides
dungeon.length
rescue
fight
orbs
imprisoned.
rooms;
upon
right->
power-ups,
quickly
dungeon[i][j]
imprisoned
demons
loc.allocate(10,
"free"]
[1,_,3,4,4,4,_,_,_,_].
"free",
[1,_,_,_,_,_,_,_,_,_].
[1,2,3,_,_,_,_,_,_,_].
"allocate",
loc.allocate(3,
loc.allocate(1,
[1,1,3,4,4,4,_,_,_,_].
[1,2,_,_,_,_,_,_,_,_].
freed.
loc.free(1);
[1,_,
mid.
loc.free(2);
3,_,_,_,_,_,_,_].
[1,1,3,4,4,4,1,_,_,_].
["allocator",
blocks.
mid)
loc
allocator(10);
allocator(int
block's
[_,_,3,4,4,4,_,_,_,_].
functionalities:
loc.free(7);
free(int
allocate(int
efficiency[i]
efficiency=4)
min(4,
engineers'
speeds
efficiency.length
efficiency=7).
72
speed=5
speed=10
performance.
engineers
[2,10,3,1,5,8],
[5,4,3,9,7,2],
engineers.
"1/2".
["1/2","1/3","2/3"]
["1/2"]
["1/2","1/3","1/4","2/3","3/4"]
(exclusive)
"1/2"
"2/4"
less-than-or-equal-to
grumpy.
technique
grumpy.length
[0,1,0,1,0,1,0,1],
grumpy,
[1,0,1,2,1,1,7,5],
grumpy[i]
satisfied
groupsize
groupsize,
hand.length
[1,2,3],[2,3,4],[6,7,8]
https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/
[1,2,3,6,2,3,4,7,8],
hand[i]
1296:
asteroids,
planet.
destroyed.
destroys
mass:
destroy
destroyed
[3,9,19,5,21]
[9,19,5,3,21]:
planet
67
[4,9,23,4]
asteroid.
38
[1,13,10,12,31,1,31,1,21,13].
[2,2,2,2,2,2].
[1,13,10,12,31]
31).
policyholder's
investment
insurance
2016.
who:
latitude
45.00
tiv_2015
policy
tiv_2016
policyholders,
longitude
criteria.
(lat,
policyholder
tiv_2016,
+-----+----------+----------+-----+-----+
lon)
pid
2015
records,
policyholders
lat
lon
fail,
holder's
unique).
started,
enqueuetimei
{0,1,2,3}.
[[7,10],[7,12],[7,5],[7,4],[7,2]]
[4,3,2,0,1]
stopping.
processing
[enqueuetimei,
act
[[1,2],[2,4],[3,2],[4,1]]
instantly.
{}.
{0,1,2}.
{0}.
enqueuetimei,
processing.
{0,1}.
{1}.
{0,1,2,3,4}.
processingtimei]
processingtimei
rollmax
introduced
rollmax.length
rollmax[i]
die,
[1,1,1,1,1,1]
roll.
36-2
simulator
consecutively,
equaling
...;
k);
[3,2,2,3],
[0,1,4,0,3,_,_,_]
actuallength;
removeelement(nums,
in-place.
[0,1,2,2,3,0,4,2],
val);
[2,2,_,_]
sort(nums,
[0,2,1,0]
[0,10,5,2]
o(log(arr.length))
matches[i].length
loseri]
[winneri,
[4,5,7,8].
matches[i]
[1,2,5,6]
matches.length
outcome.
winneri,
defeated
[[1,2,10],[4,5,7,8]]
[1,2,10]
[[1,2,5,6],[]]
loseri
[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
winneri
[[2,3],[1,3],[5,4],[6,4]]
hourglass.
entirely
[[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]
[0,3,1,4]
[0,1,3]
[0,1,2,3],
[2,2,2,3,null,3,null]
subtrees,
5000]
[[2,4],[4]]
[1,2,3,4,null,2,4,null,null,4]
[[2,3],[3]]
wraps
friend.
brings
repeat.
"ghi".
["abc","def","ghi"]
"ghi"
"abcdefghij",
"ghi",
"def",
["abc","def","ghi","jxx"]
"abcdefghi",
"jxx".
into,
[[],[1],[1,2],[1,2,2],[2],[2,2]]
[1,2,2]
[null,null,null,null,null,null,20,40,0,null,32]
["productofnumbers","add","add","add","add","add","getproduct","getproduct","getproduct","add","getproduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
productofnumbers();
productofnumbers.add(0);
productofnumbers()
productofnumbers.getproduct(4);
productofnumbers.getproduct(2);
productofnumbers.add(8);
productofnumbers.getproduct(3);
[3,0,2,5,4,8]
productofnumbers.add(5);
[3,0,2,5,4]
getproduct(int
overflowing.
[3,0,2]
productofnumbers.add(3);
getproduct.
[3,0,2,5]
productofnumbers.add(2);
productofnumbers
productofnumbers.add(4);
[[0,1,1],[1,1,0],[1,1,0]]
[[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
[1,2,3,1,1,3]
(2,5)
signfunc(0)
144,
[-1,-2,-3,-4,3,2,1]
signfunc(x)
signfunc(product).
[-1,1,-1,1,-1]
signfunc(144)
[1,5,0,2,-3]
signfunc(-1)
"101".
"10110"
distances,
"10110".
"1000".
serialize
"1,,3".
sentinel
"9,3,4,#,#,1,#,#,2,#,6,#,#",
encounter
commas
"9,#,#,1"
"9,3,4,#,#,1,#,#,2,#,6,#,#"
"1,#"
[2,2,1,1,1,2,2]
2⌋
⌊n
sold,
candy,
buys
[6,5,7,9,2,2]
passingfees
passingfees,
loops.
[[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]],
fees
maxtime
$48
journey,
maxtime,
fees.
passingfees[j]
cities).
passingfees.length
[5,1,2,20,20,3]
(3*3=9
---->
[1,3,2,2,2,3,4,3,1]
points)
(2*2=4
(1*1=1
deletelast,
"insertfront",
["mycirculardeque",
rear
getrear()
mycirculardeque.deletelast();
deque.
mycirculardeque.insertfront(3);
"getfront"]
deletelast()
mycirculardeque
mycirculardeque.insertlast(1);
"deletelast",
deletefront()
"insertlast",
double-ended
successful,
mycirculardeque(3);
insertfront,
insertfront()
insertlast()
insertlast,
mycirculardeque.insertlast(2);
mycirculardeque.getfront();
mycirculardeque.getrear();
mycirculardeque.isfull();
getrear,
deletefront,
(deque).
mycirculardeque.insertfront(4);
getfront()
getfront,
mycirculardeque(int
"getrear",
[1,3,2,2,5,2,3,7]
[3,2,2,2,3].
"abcdabc".
"aab".
"aaabaab"
("aab")
("a")
"abcabcdabc"
("abc")
"aabaab".
"xr".
"rx"
rxxlrxrxl
"xrlxxrrlx"
end.length
xrxlrxrxl
"xl"
xrlxxrrlx
"rxxlrxrxl",
"lx",
xrlxrxrxl
xrlxxrrxl
[[1,3,1],[1,5,1],[4,2,1]]
wi)
shape,
[[3,2,10],[1,4,2],[4,1,3]]
(hi,
obtains
grain
prices[i].length
wood.
wi,
wood,
[[1,4,2],[2,2,7],[2,1,3]]
[hi,
well-formed
["((()))","(()())","(())()","()(())","()()()"]
["()"]
[[7,4,1],[8,5,2],[9,6,3]]
[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
in-place,
[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
(clockwise).
b's,
"cabbba",
a's)
close,
abcde
"cabbba"
"abbccc"
aecdb
"baaccc"
bbcbaa
aacabb
"caabbb"
the"
example"
blue"
hello"
sky
"blue
"world
(upper-case
a"
lower-case),
john@example.com
emails,
bob@example.com
compile
script,
+----+------------------+
driver
[3,1,4,3,2,2,4],
[3,1,4,3,2,2]
[1,4,3,2,2,4]
[3,1,4,3,2,2,4]
[4,3,2,2,4]
"cool"
"keep"
not"
"keep
"on"
on"
cool"
"is
"calm"
space-separated
code"
calm
cool
"and"
"on
(5,10).
(1,6),(2,5)
and(3,4).
(1,9),(2,8),(3,7),(4,6)
[1,2,3,4,5,10,6,7,8,9],
[1,1,6,8].
[5,5,6,8].
[20]
[2,9,6,3],
[1,1,1,8].
[3,1,6,8],
[14,10]
[5,5,5,8].
[5,1,6,8].
[5,5,5,5].
[6,1].
[5,1]:
[1,2,3,10,5]
[ni,
ki],
[4,1,50734910]
[2,6]:
1050734917
ni,
ni
[73,660]:
ki.
[[2,6],[5,1],[73,660]]
50734910.
[1,6],
mountainarray.get(k)
[1,2,3,4,5,3,1],
mountainarr,
submissions
mountain_arr.get(index)
mountainarray
[0,1,2,4,2,1],
mountain_arr.length()
mountainarray.get
index=5.
interactive
problem.)
disqualification.
wrong
mountainarr.get(index)
circumvent
mountainarray.length()
upper0
tax
taxes.
0%
upper2
brackets[i]
percent0.
taxed
bracket.
25%,
tax,
bracket,
upperi-1
10%,
percenti.
10%
percenti]
$0
upper1
[[3,50],[7,10],[12,25]],
$2.65
income,
50%,
income.
brackets.length
percent2.
[upperi,
2.65000
[[1,0],[4,25],[5,50]],
brackets.length).
upperi
percenti
[[2,50]],
$0.25
percent1.
[5,2,0,3,1]
pref.length
satisfies:
pref[3]
pref[0]
pref[4]
[5,7,2,3,2]
[13]
pref[i]
pref[2]
pref[1]
output[4]
output[0].val
output[0].next
later.
possible:
[[1],[2],[3],[],[]]
output[0]
[[1,2,3,4],[5,6,7],[8,9,10]]
(assume
[1,null,2,2]
mode,
count).
mode(s)
recursion
112
3001
"82734"
deci-binary,
"27346209830709182346"
"32"
["3z4","3z4"]
"3z4"
["a1b2","a1b2","a1b2","a1b2"]
"a1b2"
"abacbc"
frequency).
"aaabb"
planes.
yz,
[[1,0],[0,2]]
projections
"shadow"
zx
shadow,
[[2]]
projections.
3-dimensional
("shadows")
xy,
undirected,
graph[b]
graph[a]
[0,1,4,2,3]
[[1,2,3],[0],[0],[0]]
[[1],[0,2,4],[1,3,4],[2],[1,2]]
revisit
[1,0,2,0,3]
[[2,2,2,2],[2,3,3],[3,5]]
candidates,
[[2,2,3],[7]]
candidate,
green)
(8,1)
stockprices.length
[[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]
(2,6),
chart:
dayi
dayi,
stockprices
(7,2),
chart.
(5,4),
[[3,4],[1,2],[7,8],[2,3]]
plotting
(8,1).
stockprices[i]
(6,3),
stockprices[i].length
[dayi,
(5,4).
endtimei.
enddayi].
enddayi.
[[1,2],[2,3],[3,4],[1,2]]
[startdayi,
events=
events.length
events[i].length
events[i]
enddayi
startdayi
attend.
starttimei
"101010"
swapped,
inspection.
"001101"
"11100"
official,
"001101",
variety,
[0,3,4]
n=0.
flattening
flattened.
maxdepth
n=0
sub-array.
array.flat
15]]
unflattened
students[i][k]
mentors
student-mentor
mentors[j].length
student's
mentor
[[1,0,0],[0,0,1],[1,1,0]]
[[1,1,0],[1,0,1],[0,0,1]],
mentors[j]
[[0,0],[0,0],[0,0]],
[[1,1],[1,1],[1,1]]
(yes).
(no)
survey
mentors[j][k]
mentors,
mentor.
mentors.length
mentor,
mentor's
students[i].length
question's
2/2
hard
balls.length
[1,2
3,1],
sum(balls)
random,
1/12):
[b]
[3,1
(),
1,1]
1,2],
2,3],
(please
equally:
balls[i]
[a]
uniformly
carefully).
1,1],
2,1],
[1,3
[2,1
8/12
1,3],
shuffles
3,2],
(b)
[1,1
[3,2
[2,3
physics
+------------+--------------+--------------+----------------+
subjects.
subject
subject_name.
school.
student_name
subjects
subject_name
attended_exams
[2,3,1,3,2,4,6,7,9,2,19],
[22,28,8,6]
[2,1,4,3,9,6]
[2,2,2,1,4,3,3,9,6,7,19]
[28,6,22,8,44,17],
arr1.
[22,28,8,6,17,44]
edges[j]
bj
[aj,
aj
image).
x3
bj.
[[0,1],[0,2],[2,3],[3,4]]
xk
aj,
bj]
"cdeab"
shift.
"bcdea"
"abced"
66.67%
registered
208,
207
contests
register
contest_id
66.67
33.33%
+------------+---------+
+---------+-----------+
209,
((2/3)
(contest_id,
209
decimals.
((1/3)
user_name
208
mappings
newi]
[["e","3"],["t","7"],["t","8"]]
mappings[i]
mappings.
"fooleetbar",
oldi
[oldi,
sub.
mappings.length
"l33tb"
newi.
"l3e7"
[["o","0"]]
sub.length
"leetd",
[["e","3"],["t","7"],["t","8"],["d","b"],["p","b"]]
"f00l",
"fool33tbar",
mappings[i].length
newi
"f00l"
"fool3e7bar",
[1,6,1],
[14,4,18,1,15],
home.
forbidden,
bug's
[1,6,2,14,5,17,4],
forbidden.length
bug
[8,3,16,6,12,20],
forbidden
forbidden[i]
forbidden.
forbidden[i],
(5,2,10,1)
(6,2,4,3)
(1,10,5,2)
(6,2,3,4)
(5,4,10,2)
(4,5,10,2)
(10,1,2,5)
(10,1,5,2)
(2,10,5,4)
(10,2,4,5)
[2,3,4,6]
(2,6,3,4)
(1,10,2,5)
(2,6,4,3)
(4,3,2,6)
(10,2,5,4)
(2,10,4,5)
(4,5,2,10)
[1,2,4,5,10]
tuples:
(4,3,6,2)
(3,4,2,6)
(2,5,10,1)
(5,2,1,10)
(3,4,6,2)
(5,4,2,10)
(2,5,1,10)
diagonal,
[[1,4,7],[2,5,8],[3,6,9]]
switching
non-equal
[6,6,5,5,4,1]
hill.
valley
valley.
valley,
hill
[2,4,1,1,6,5]
"rr!ddrr!uul!r!"
them.)
"z"],
board;
"ddr!uurrr!!ddd!"
'!'
"fghij",
board[0][0].
"klmno",
["abcde",
board[r][c]
"pqrst",
"uvwxy",
top?
rev(x)
[42,11,1,97]
rev(nums[j])
rev(1)
rev(97)
321,
rev(120)
[13,10,35,24,76]
rev(42)
rev(11)
79
97
121.
rev(123)
rev(nums[i])
[1,2,4,null,3],
trees).
to_delete.length
[[1,2,4]]
to_delete
to_delete,
[[1,2,null,4],[6],[7]]
"ea".
"etco"
period:
exempted
[8,6]
periods:
[8,6,7,7]
â‰
[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
4.77778
5%
[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
countuniquechars(s)
"a","b","c","ab","bc"
"t",
"l",
countuniquechars(t)
countuniquechars("aba")
otherwise:
"abacaba",
"bzaa"
"aec"
"cde"
"cde",
3;
|0-7|
[4,2,9,3,5,null,7]
tilt.
children)
|0-0|
|(3+5+2)-(9+7)|
|10-16|
[21,7,14,1,1,2,2,3,3]
friend's
paths[i][j]
friend,
[[0,1,2,3,4],
[[0],[1],[2]]
[4,3,2,1,0]]
[4,0,1,2,3]]
subpaths
paths[i].
arr[2
[2,4,-2,-4].
len(arr)
[-2,-4,2,4]
[3,1,3,6]
[4,-2,2,-4]
[-2,-4]
[2,1,2,6]
[8,3],
gondolas,
boards,
-$177.
$122
$37.
arrive,
$20.
gondola.
gondolas
boardingcost,
$122.
gondola
profit.
-$269.
-$89.
-$357.
[3,4,0,5,1],
$80.
safely.
$37
waiting,
-$447.
$120.
boardingcost
runningcost
gondola,
waiting),
$40.
wheel,
wait,
[10,9,6],
rotates.
$28.
ground
$14.
$60.
waits,
$92
"arrazfif"
uppercase.
"abcdefghijk"
imply
third().
print("first");
tests'
third(),
print("second");
print("third");
first(),
second(),
mechanism
mainly
second()
second().
comprehensiveness.
"firstsecondthird"
first()
third()
[[0,0,0],[0,0,1],[1,1,0]]
versa).
[true,false,false,false,false]
extracandies,
[true,true,true,false,true]
extracandies
kids.
has,
kids,
[2,3,5,1,3],
[12,1,12],
kid
[4,2,1,1,2],
[1,2,4,3]
[1,4,2,3]
[2,4,1],
target:
reverses.
[2,4,1,3]
[3,7,9],
nums[0],nums[1],nums[2]:
[0,0,0,1,0,1,1,0],
[1,1,1,1,1,0,0,0]
k-bit
[1,1,1,1,1,1,1,1]
[1,1,1,1,0,1,1,0]
nums[5],nums[6],nums[7]:
[0,1,0],
nums[4],nums[5],nums[6]:
[1,2,3,4,5,6,7,8,9,11,12,15,22]
47,
self-dividing
128
[48,55,66,77]
isconnected.length
isconnected[i].length
isconnected[i][j]
province
isconnected[i][i]
isconnected
[[1,1,0],[1,1,0],[0,0,1]]
provinces.
isconnected[j][i]
(x0,
|y0
x1|
distance:
land,
maximized,
y0)
|x0
y1|.
[[1,0,0],[0,0,0],[0,0,0]]
changed).
nums[n-1-i]
[1,2,1,2],
complementary.
[1,2,4,3],
[2,2,2,2].
"2314"
"312"
listing
labeling
"213"
"321"
trees),
[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
101,
1111,
151,
intlength,
[101,111,121,131,141,999]
backwards
1001,
queries[i]th
141,
intlength
171,
191,
181,
[1,2,3,4,5,90],
[1111,1331,1551]
forwards.
161,
131,
1441,
1331,
90th
1221,
[0,1,2],
[4,5,1,2,3]
triples.
j=2,
(i=1,
(i=0,
k=0)
bitwise-and
(i=2,
triples:
k=1)
k=2)
[4,6,8,9]
[4,6,8,9],
[4,5,8,10],
[4,6,8,10]
(only
[2,4,5,8,9],
[2,4,5,8,10],
[2,4,6,8,9],
nums1)
[1,3,5,100].
index-0).
[1,3,5,7,9],
[3,5,100]
[6,7,8,9,10].
[2,4,6,8,10].
uniques
[4,5,8,9],
"52"
largest-valued
"52".
"4206".
"35427"
"4206"
rowj,
lamps.length
lamps[i].length
[[0,0],[0,4]],
ans,
20000
grid[1][0]
[[0,4],[0,1],[1,4]]
grid[rowi][coli]
ans[j]
lamps[i]
grid[4][4].
grid[rowj][colj].
illuminates
square).
lamp
grid[rowj][colj]
lamps,
colj].
illuminated
illuminated,
lamps
[[0,0],[4,4]],
ipv4
defanged
"1[.]1[.]1[.]1"
(ipv4)
"255.100.50.0"
"255[.]100[.]50[.]0"
address,
"[.]".
"1.1.1.1"
["blue","green","bu"]
"superhero".
"hero"
"as"
["hero","as"]
["as","hero"]
["mass","as","hero","superhero"]
["et","code"]
"mass"
"et",
["leetcode","et","code"]
consec.
datastream.consec(3);
datastream
datastream(4,
[3]]
datastream.consec(4);
["datastream",
"consec"]
//value
parsed.
"consec",
datastream(int
parsed,
[4,4,3].
consec(int
'i'->5,
'm'->1,
'd'->7,
'x'->0,
"money"
68782
'w'->'3',
'o'->0,
["leet","code"],
"six"
"seven"
'y'->'2'
["send","more"],
["six","seven","seven"],
't'->1,
'e'->8,
9567
'n'->2,
"point"
'r'->8,
1085
"more"
solvable
result.length
138214
solvable,
'e'->5,
'v'->7,
(result).
's'->
10652
'n'->6,
(words)
'y'->4
650
"twenty"
"send"
str2.
"ababab",
s"
"t
[2,2,1,null,1,0,null,0]
"dba"
8500].
[0,1,2,3,4,3,4]
"aba".
[25,1,3,1,3,0,2]
25]
"adz"
"0010".
s[j])
(s[0]
(s[i]
"1110".
"0110".
s[j]).
"0110"
trees)
camera
configurations
[0,0,null,0,null,0,null,null,0]
[0,0,null,0,0]
placement.
[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
[1,null,5,null,7]
[5,1,7]
[5,3,6,2,4,null,8,1,null,null,null,7,9]
mat[1][2]
(rows
[[1,0,0],[0,0,1],[1,0,0]]
[2,1,3,4,4]
"a#c",
"ab#c",
backspacing
"ad#c"
editors.
"ab##",
"c#d#"
min(heights[i],
[5,1,2,3,10]
max(heights[i+1],
heights[j-1]).
heights[j])
[3,1,2,1,1,0]
[10,6,8,5,11,9]
heights[i+2],
[4,1,1,1,0]
"abbaccd"
"adefadda",
"ef",
["e","f","ccc"]
we'd
"ef"
["d","abba","cc"]
"adefaddaccc"
s[x..y],
["d","bb","cc"]
s[i..j]
matrix[0][1]
[[7,7],[7,7]]
[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
matrix[0][1],
rank(p)
matrix[row][col].
matrix[1][0],
answer[row][col]
matrix[1][1]
matrix[1][0]
matrix[row][col]
matrix[0][0]
[[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
rank(q)
addedge(int[]
g.shortestpath(0,
["graph",
[from,
g.addedge([1,
edge.length
graph(int
edges)
3]]);
"addedge",
edgecost].
self-loops
edge)
addedge.
node2)
node2.
edgecosti,
g.shortestpath(3,
edgecosti.
"shortestpath"]
graph(4,
"shortestpath",
node1
node2
shortestpath(int
shortestpath.
node1,
edgecost
edgecosti]
3]]],
seat).
ticket
randomly.
(when
[[1,2,3],[3,2,1]]
[[1,5],[7,3],[3,5]]
[[2,8,7],[7,1,3],[1,9,5]]
wealth.
first_login
+-----------+-------------+
2016-05-02
"09:39"
?).
"1?:22"
"2?:?0"
"23:50"
hh:mm,
"0?:3?"
"19:22"
inclusively
smallest-valued
"00132"
"5489355214".
"5489355421".
"00123",
"21111"
"5489355142",
8:
"11112",
"5489355142"
"5489355142":
"21111".
"5489355412".
"5489355241".
"11121"
"00132".
"11211"
"11112"
"5489355421"
"00123"
"12111"
"5489355412"
tx
ty,
(tx,
sy)
sx
(sx,
ty)
sy
[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
[[0,1,3],[0,2,3]]
[[4,3,1],[3,2,4],[3],[4],[]]
dag.
graph[i][j]).
(dag)
self-loops).
[[1,2],[3],[3],[]]
sum([5])
sum([6])
min([3,1,2])
sum([1,2])
sum([4,6])
213
ruler
min([1,3,1])
wizards:
[5,4]
sum([3])
min([4])
min([2])
sum([2])
min([5,4])
strength.length
min([5])
sum([1])
strength[i]
wizards'
sum([1,3,1,2])
sum([3,1])
sum([1,3,1])
sum([3,1,2])
min([5,4,6])
[5,4,6]
min([1,3,1,2])
min([6])
sum([1,3])
min([4,6])
sum([4])
min([3,1])
wizard
min([3])
min([1])
sum([5,4])
strength,
strength),
wizard.
wizards.
213.
min([1,2])
kingdom,
min([1,3])
sum([5,4,6])
collected.
(cells
[[1,1,-1],[1,-1,1],[-1,1,1]]
thorn
cherry,
cherry.
grid[n
[[0,1,-1],[0,0,-1],[0,0,0]].
[[0,1,-1],[1,0,-1],[1,1,1]]
went
ytarget
[xtarget,
ghost
ghost,
xtarget,
ghosts[i]
ghosts[i].length
independently
ghost.
escape.
ytarget]
still.
[[1,0],[0,3]],
ghosts.length
ghosts,
[[2,0]],
pac-man
[[1,2],[2,1],[1,0],[0,1]]
[1,0],[1,1],[2,1],[2,0],
rectangle,
[1,2],[2,1],[1,0],[0,1],
[[0,1],[2,1],[1,1],[1,0],[2,0]]
[[0,3],[1,2],[3,1],[1,3],[2,1]]
[1,1,3,3,3],
maxvalue
[1,1,2,2,2],
[1,2,2,2,2]
[1,3,3,3,3]
[1,1,1,1,3],
[1,1,1,2,2],
arrays):
[1,1,1,3,3],
[1,1,1,1,2],
array):
[3,3,3,3,3]
maxvalue,
moves[i].length
[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
"draw".
b).
[[0,0],[2,0],[1,1],[2,1],[2,2]]
tic-tac-toe),
"draw"
grid[rowi][coli].
"pending".
toe.
x|,
x|
|b
|a
g4
2800
spring
800
iphone
2019-01-21
2019-06-02
+-----------+------------+----------+------------+----------+-------+
1400
sale_date
unit_price
s8
+------------+--------------+------------+
2019-05-13
"dequeue",
mycircularqueue(3);
out)
mycircularqueue.enqueue(2);
mycircularqueue.rear();
normal
mycircularqueue
mycircularqueue.enqueue(4);
dequeue,
mycircularqueue.enqueue(1);
"ring
benefits
mycircularqueue.dequeue();
"enqueue",
mycircularqueue.enqueue(3);
rear()
"rear"]
mycircularqueue(k)
"rear",
enqueue,
rear,
(first
fifo
dequeue()
front()
enqueue(int
["mycircularqueue",
mycircularqueue.isfull();
buffer".
principle,
i],
[1,5,4,2]
[1,3,5,2,4,8,2,2]
repeatedly.
max(nums[2
min(nums[2
'i')
'26#')
"11#"
mapping.
('10#'
"acz"
('j'
"10#11#12"
"j"
"10#"
"1326#"
"jkab"
'9')
[[1,1,1],[1,0,0],[1,1,1]]
[0,1,-1]
blueedges
rededges.length,
blueedges[j]
rededges[i].length
blueedges.length
rededges[i]
rededges
[[2,1]]
blueedges[j].length
change_date
+------------+-----------+-------------+
change_date)
2019-08-14
2019-08-17
2019-08-16.
2019-08-18
2019-08-15
new_price
2019-08-16
+------------+-------+
distance[1]
[1,1,1,2,1]
distance[3]
meters
distance[0]
distance[2]
counter-clockwise.
"1"].
[90,89].
["00",
"089"]
"1"],
["0",
"01"],
["0090",
"004",
[0,0,1]
"1234"
["05",
"3"]
"050043"
"9080701"
"0090089"
